// Generated from ./grammar/TSqlParser.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { TSqlParserListener } from "./TSqlParserListener";
import { TSqlParserVisitor } from "./TSqlParserVisitor";


export class TSqlParser extends Parser {
	public static readonly ABSENT = 1;
	public static readonly ADD = 2;
	public static readonly AES = 3;
	public static readonly ALL = 4;
	public static readonly ALLOW_CONNECTIONS = 5;
	public static readonly ALLOW_MULTIPLE_EVENT_LOSS = 6;
	public static readonly ALLOW_SINGLE_EVENT_LOSS = 7;
	public static readonly ALTER = 8;
	public static readonly AND = 9;
	public static readonly ANONYMOUS = 10;
	public static readonly ANY = 11;
	public static readonly APPEND = 12;
	public static readonly APPLICATION = 13;
	public static readonly AS = 14;
	public static readonly ASC = 15;
	public static readonly ASYMMETRIC = 16;
	public static readonly ASYNCHRONOUS_COMMIT = 17;
	public static readonly AUTHORIZATION = 18;
	public static readonly AUTHENTICATION = 19;
	public static readonly AUTOMATED_BACKUP_PREFERENCE = 20;
	public static readonly AUTOMATIC = 21;
	public static readonly AVAILABILITY_MODE = 22;
	public static readonly BACKSLASH = 23;
	public static readonly BACKUP = 24;
	public static readonly BEFORE = 25;
	public static readonly BEGIN = 26;
	public static readonly BETWEEN = 27;
	public static readonly BLOCK = 28;
	public static readonly BLOCKSIZE = 29;
	public static readonly BLOCKING_HIERARCHY = 30;
	public static readonly BREAK = 31;
	public static readonly BROWSE = 32;
	public static readonly BUFFER = 33;
	public static readonly BUFFERCOUNT = 34;
	public static readonly BULK = 35;
	public static readonly BY = 36;
	public static readonly CACHE = 37;
	public static readonly CALLED = 38;
	public static readonly CASCADE = 39;
	public static readonly CASE = 40;
	public static readonly CERTIFICATE = 41;
	public static readonly CHANGETABLE = 42;
	public static readonly CHANGES = 43;
	public static readonly CHECK = 44;
	public static readonly CHECKPOINT = 45;
	public static readonly CHECK_POLICY = 46;
	public static readonly CHECK_EXPIRATION = 47;
	public static readonly CLASSIFIER_FUNCTION = 48;
	public static readonly CLOSE = 49;
	public static readonly CLUSTER = 50;
	public static readonly CLUSTERED = 51;
	public static readonly COALESCE = 52;
	public static readonly COLLATE = 53;
	public static readonly COLUMN = 54;
	public static readonly COMPRESSION = 55;
	public static readonly COMMIT = 56;
	public static readonly COMPUTE = 57;
	public static readonly CONFIGURATION = 58;
	public static readonly CONSTRAINT = 59;
	public static readonly CONTAINMENT = 60;
	public static readonly CONTAINS = 61;
	public static readonly CONTAINSTABLE = 62;
	public static readonly CONTEXT = 63;
	public static readonly CONTINUE = 64;
	public static readonly CONTINUE_AFTER_ERROR = 65;
	public static readonly CONTRACT = 66;
	public static readonly CONTRACT_NAME = 67;
	public static readonly CONVERSATION = 68;
	public static readonly CONVERT = 69;
	public static readonly COPY_ONLY = 70;
	public static readonly CREATE = 71;
	public static readonly CROSS = 72;
	public static readonly CURRENT = 73;
	public static readonly CURRENT_DATE = 74;
	public static readonly CURRENT_TIME = 75;
	public static readonly CURRENT_TIMESTAMP = 76;
	public static readonly CURRENT_USER = 77;
	public static readonly CURSOR = 78;
	public static readonly CYCLE = 79;
	public static readonly DATA = 80;
	public static readonly DATA_COMPRESSION = 81;
	public static readonly DATA_SOURCE = 82;
	public static readonly DATABASE = 83;
	public static readonly DATABASE_MIRRORING = 84;
	public static readonly DBCC = 85;
	public static readonly DEALLOCATE = 86;
	public static readonly DECLARE = 87;
	public static readonly DEFAULT = 88;
	public static readonly DEFAULT_DATABASE = 89;
	public static readonly DEFAULT_SCHEMA = 90;
	public static readonly DELETE = 91;
	public static readonly DENY = 92;
	public static readonly DESC = 93;
	public static readonly DIAGNOSTICS = 94;
	public static readonly DIFFERENTIAL = 95;
	public static readonly DISK = 96;
	public static readonly DISTINCT = 97;
	public static readonly DISTRIBUTED = 98;
	public static readonly DOUBLE = 99;
	public static readonly DOUBLE_BACK_SLASH = 100;
	public static readonly DOUBLE_FORWARD_SLASH = 101;
	public static readonly DROP = 102;
	public static readonly DTC_SUPPORT = 103;
	public static readonly DUMP = 104;
	public static readonly ELSE = 105;
	public static readonly ENABLED = 106;
	public static readonly END = 107;
	public static readonly ENDPOINT = 108;
	public static readonly ERRLVL = 109;
	public static readonly ESCAPE = 110;
	public static readonly ERROR = 111;
	public static readonly EVENT = 112;
	public static readonly EVENTDATA = 113;
	public static readonly EVENT_RETENTION_MODE = 114;
	public static readonly EXCEPT = 115;
	public static readonly EXECUTABLE_FILE = 116;
	public static readonly EXECUTE = 117;
	public static readonly EXISTS = 118;
	public static readonly EXPIREDATE = 119;
	public static readonly EXIT = 120;
	public static readonly EXTENSION = 121;
	public static readonly EXTERNAL = 122;
	public static readonly EXTERNAL_ACCESS = 123;
	public static readonly FAILOVER = 124;
	public static readonly FAILURECONDITIONLEVEL = 125;
	public static readonly FAN_IN = 126;
	public static readonly FETCH = 127;
	public static readonly FILE = 128;
	public static readonly FILENAME = 129;
	public static readonly FILLFACTOR = 130;
	public static readonly FILE_SNAPSHOT = 131;
	public static readonly FOR = 132;
	public static readonly FORCESEEK = 133;
	public static readonly FORCE_SERVICE_ALLOW_DATA_LOSS = 134;
	public static readonly FOREIGN = 135;
	public static readonly FREETEXT = 136;
	public static readonly FREETEXTTABLE = 137;
	public static readonly FROM = 138;
	public static readonly FULL = 139;
	public static readonly FUNCTION = 140;
	public static readonly GET = 141;
	public static readonly GOTO = 142;
	public static readonly GOVERNOR = 143;
	public static readonly GRANT = 144;
	public static readonly GROUP = 145;
	public static readonly HAVING = 146;
	public static readonly HASHED = 147;
	public static readonly HEALTHCHECKTIMEOUT = 148;
	public static readonly IDENTITY = 149;
	public static readonly IDENTITYCOL = 150;
	public static readonly IDENTITY_INSERT = 151;
	public static readonly IF = 152;
	public static readonly IN = 153;
	public static readonly INCLUDE = 154;
	public static readonly INCREMENT = 155;
	public static readonly INDEX = 156;
	public static readonly INFINITE = 157;
	public static readonly INIT = 158;
	public static readonly INNER = 159;
	public static readonly INSERT = 160;
	public static readonly INSTEAD = 161;
	public static readonly INTERSECT = 162;
	public static readonly INTO = 163;
	public static readonly IPV4_ADDR = 164;
	public static readonly IPV6_ADDR = 165;
	public static readonly IS = 166;
	public static readonly ISNULL = 167;
	public static readonly JOIN = 168;
	public static readonly KERBEROS = 169;
	public static readonly KEY = 170;
	public static readonly KEY_PATH = 171;
	public static readonly KEY_STORE_PROVIDER_NAME = 172;
	public static readonly KILL = 173;
	public static readonly LANGUAGE = 174;
	public static readonly LEFT = 175;
	public static readonly LIBRARY = 176;
	public static readonly LIFETIME = 177;
	public static readonly LIKE = 178;
	public static readonly LINENO = 179;
	public static readonly LINUX = 180;
	public static readonly LISTENER_IP = 181;
	public static readonly LISTENER_PORT = 182;
	public static readonly LOAD = 183;
	public static readonly LOCAL_SERVICE_NAME = 184;
	public static readonly LOG = 185;
	public static readonly MATCHED = 186;
	public static readonly MASTER = 187;
	public static readonly MAX_MEMORY = 188;
	public static readonly MAXTRANSFER = 189;
	public static readonly MAXVALUE = 190;
	public static readonly MAX_DISPATCH_LATENCY = 191;
	public static readonly MAX_EVENT_SIZE = 192;
	public static readonly MAX_SIZE = 193;
	public static readonly MAX_OUTSTANDING_IO_PER_VOLUME = 194;
	public static readonly MEDIADESCRIPTION = 195;
	public static readonly MEDIANAME = 196;
	public static readonly MEMBER = 197;
	public static readonly MEMORY_PARTITION_MODE = 198;
	public static readonly MERGE = 199;
	public static readonly MESSAGE_FORWARDING = 200;
	public static readonly MESSAGE_FORWARD_SIZE = 201;
	public static readonly MINVALUE = 202;
	public static readonly MIRROR = 203;
	public static readonly MUST_CHANGE = 204;
	public static readonly NATIONAL = 205;
	public static readonly NEGOTIATE = 206;
	public static readonly NOCHECK = 207;
	public static readonly NOFORMAT = 208;
	public static readonly NOINIT = 209;
	public static readonly NONCLUSTERED = 210;
	public static readonly NONE = 211;
	public static readonly NOREWIND = 212;
	public static readonly NOSKIP = 213;
	public static readonly NOUNLOAD = 214;
	public static readonly NO_CHECKSUM = 215;
	public static readonly NO_COMPRESSION = 216;
	public static readonly NO_EVENT_LOSS = 217;
	public static readonly NOT = 218;
	public static readonly NOTIFICATION = 219;
	public static readonly NTLM = 220;
	public static readonly NULL = 221;
	public static readonly NULLIF = 222;
	public static readonly OF = 223;
	public static readonly OFF = 224;
	public static readonly OFFSETS = 225;
	public static readonly OLD_PASSWORD = 226;
	public static readonly ON = 227;
	public static readonly ON_FAILURE = 228;
	public static readonly OPEN = 229;
	public static readonly OPENDATASOURCE = 230;
	public static readonly OPENQUERY = 231;
	public static readonly OPENROWSET = 232;
	public static readonly OPENXML = 233;
	public static readonly OPTION = 234;
	public static readonly OR = 235;
	public static readonly ORDER = 236;
	public static readonly OUTER = 237;
	public static readonly OVER = 238;
	public static readonly PAGE = 239;
	public static readonly PARAM_NODE = 240;
	public static readonly PARTIAL = 241;
	public static readonly PASSWORD = 242;
	public static readonly PERCENT = 243;
	public static readonly PERMISSION_SET = 244;
	public static readonly PER_CPU = 245;
	public static readonly PER_DB = 246;
	public static readonly PER_NODE = 247;
	public static readonly PIVOT = 248;
	public static readonly PLAN = 249;
	public static readonly PLATFORM = 250;
	public static readonly POLICY = 251;
	public static readonly PRECISION = 252;
	public static readonly PREDICATE = 253;
	public static readonly PRIMARY = 254;
	public static readonly PRINT = 255;
	public static readonly PROC = 256;
	public static readonly PROCEDURE = 257;
	public static readonly PROCESS = 258;
	public static readonly PUBLIC = 259;
	public static readonly PYTHON = 260;
	public static readonly R = 261;
	public static readonly RAISERROR = 262;
	public static readonly RAW = 263;
	public static readonly READ = 264;
	public static readonly READTEXT = 265;
	public static readonly READ_WRITE_FILEGROUPS = 266;
	public static readonly RECONFIGURE = 267;
	public static readonly REFERENCES = 268;
	public static readonly REGENERATE = 269;
	public static readonly RELATED_CONVERSATION = 270;
	public static readonly RELATED_CONVERSATION_GROUP = 271;
	public static readonly REPLICATION = 272;
	public static readonly REQUIRED = 273;
	public static readonly RESET = 274;
	public static readonly RESTART = 275;
	public static readonly RESTORE = 276;
	public static readonly RESTRICT = 277;
	public static readonly RESUME = 278;
	public static readonly RETAINDAYS = 279;
	public static readonly RETURN = 280;
	public static readonly RETURNS = 281;
	public static readonly REVERT = 282;
	public static readonly REVOKE = 283;
	public static readonly REWIND = 284;
	public static readonly RIGHT = 285;
	public static readonly ROLLBACK = 286;
	public static readonly ROLE = 287;
	public static readonly ROWCOUNT = 288;
	public static readonly ROWGUIDCOL = 289;
	public static readonly RSA_512 = 290;
	public static readonly RSA_1024 = 291;
	public static readonly RSA_2048 = 292;
	public static readonly RSA_3072 = 293;
	public static readonly RSA_4096 = 294;
	public static readonly SAFETY = 295;
	public static readonly RULE = 296;
	public static readonly SAFE = 297;
	public static readonly SAVE = 298;
	public static readonly SCHEDULER = 299;
	public static readonly SCHEMA = 300;
	public static readonly SCHEME = 301;
	public static readonly SECURITY = 302;
	public static readonly SECURITYAUDIT = 303;
	public static readonly SELECT = 304;
	public static readonly SEMANTICKEYPHRASETABLE = 305;
	public static readonly SEMANTICSIMILARITYDETAILSTABLE = 306;
	public static readonly SEMANTICSIMILARITYTABLE = 307;
	public static readonly SEQUENCE = 308;
	public static readonly SERVER = 309;
	public static readonly SERVICE = 310;
	public static readonly SERVICE_BROKER = 311;
	public static readonly SERVICE_NAME = 312;
	public static readonly SESSION = 313;
	public static readonly SESSION_USER = 314;
	public static readonly SET = 315;
	public static readonly SETUSER = 316;
	public static readonly SHUTDOWN = 317;
	public static readonly SID = 318;
	public static readonly SKIP_KEYWORD = 319;
	public static readonly SOFTNUMA = 320;
	public static readonly SOME = 321;
	public static readonly SOURCE = 322;
	public static readonly SPECIFICATION = 323;
	public static readonly SPLIT = 324;
	public static readonly SQLDUMPERFLAGS = 325;
	public static readonly SQLDUMPERPATH = 326;
	public static readonly SQLDUMPERTIMEOUT = 327;
	public static readonly STATISTICS = 328;
	public static readonly STATE = 329;
	public static readonly STATS = 330;
	public static readonly START = 331;
	public static readonly STARTED = 332;
	public static readonly STARTUP_STATE = 333;
	public static readonly STOP = 334;
	public static readonly STOPPED = 335;
	public static readonly STOP_ON_ERROR = 336;
	public static readonly SUPPORTED = 337;
	public static readonly SYSTEM = 338;
	public static readonly SYSTEM_USER = 339;
	public static readonly TABLE = 340;
	public static readonly TABLESAMPLE = 341;
	public static readonly TAPE = 342;
	public static readonly TARGET = 343;
	public static readonly TCP = 344;
	public static readonly TEXTSIZE = 345;
	public static readonly THEN = 346;
	public static readonly TO = 347;
	public static readonly TOP = 348;
	public static readonly TRACK_CAUSALITY = 349;
	public static readonly TRAN = 350;
	public static readonly TRANSACTION = 351;
	public static readonly TRANSFER = 352;
	public static readonly TRIGGER = 353;
	public static readonly TRUNCATE = 354;
	public static readonly TSEQUAL = 355;
	public static readonly UNCHECKED = 356;
	public static readonly UNION = 357;
	public static readonly UNIQUE = 358;
	public static readonly UNLOCK = 359;
	public static readonly UNPIVOT = 360;
	public static readonly UNSAFE = 361;
	public static readonly UPDATE = 362;
	public static readonly UPDATETEXT = 363;
	public static readonly URL = 364;
	public static readonly USE = 365;
	public static readonly USED = 366;
	public static readonly USER = 367;
	public static readonly VALUES = 368;
	public static readonly VARYING = 369;
	public static readonly VERBOSELOGGING = 370;
	public static readonly VIEW = 371;
	public static readonly VISIBILITY = 372;
	public static readonly WAITFOR = 373;
	public static readonly WHEN = 374;
	public static readonly WHERE = 375;
	public static readonly WHILE = 376;
	public static readonly WINDOWS = 377;
	public static readonly WITH = 378;
	public static readonly WITHIN = 379;
	public static readonly WITHOUT = 380;
	public static readonly WITNESS = 381;
	public static readonly WRITETEXT = 382;
	public static readonly ABSOLUTE = 383;
	public static readonly ACCENT_SENSITIVITY = 384;
	public static readonly ACTION = 385;
	public static readonly ACTIVATION = 386;
	public static readonly ACTIVE = 387;
	public static readonly ADDRESS = 388;
	public static readonly AES_128 = 389;
	public static readonly AES_192 = 390;
	public static readonly AES_256 = 391;
	public static readonly AFFINITY = 392;
	public static readonly AFTER = 393;
	public static readonly AGGREGATE = 394;
	public static readonly ALGORITHM = 395;
	public static readonly ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = 396;
	public static readonly ALLOW_SNAPSHOT_ISOLATION = 397;
	public static readonly ALLOWED = 398;
	public static readonly ANSI_NULL_DEFAULT = 399;
	public static readonly ANSI_NULLS = 400;
	public static readonly ANSI_PADDING = 401;
	public static readonly ANSI_WARNINGS = 402;
	public static readonly APPLICATION_LOG = 403;
	public static readonly APPLY = 404;
	public static readonly ARITHABORT = 405;
	public static readonly ASSEMBLY = 406;
	public static readonly AUDIT = 407;
	public static readonly AUDIT_GUID = 408;
	public static readonly AUTO = 409;
	public static readonly AUTO_CLEANUP = 410;
	public static readonly AUTO_CLOSE = 411;
	public static readonly AUTO_CREATE_STATISTICS = 412;
	public static readonly AUTO_SHRINK = 413;
	public static readonly AUTO_UPDATE_STATISTICS = 414;
	public static readonly AUTO_UPDATE_STATISTICS_ASYNC = 415;
	public static readonly AVAILABILITY = 416;
	public static readonly AVG = 417;
	public static readonly BACKUP_PRIORITY = 418;
	public static readonly BEGIN_DIALOG = 419;
	public static readonly BIGINT = 420;
	public static readonly BINARY_BASE64 = 421;
	public static readonly BINARY_CHECKSUM = 422;
	public static readonly BINDING = 423;
	public static readonly BLOB_STORAGE = 424;
	public static readonly BROKER = 425;
	public static readonly BROKER_INSTANCE = 426;
	public static readonly BULK_LOGGED = 427;
	public static readonly CALLER = 428;
	public static readonly CAP_CPU_PERCENT = 429;
	public static readonly CAST = 430;
	public static readonly CATALOG = 431;
	public static readonly CATCH = 432;
	public static readonly CHANGE_RETENTION = 433;
	public static readonly CHANGE_TRACKING = 434;
	public static readonly CHECKSUM = 435;
	public static readonly CHECKSUM_AGG = 436;
	public static readonly CLEANUP = 437;
	public static readonly COLLECTION = 438;
	public static readonly COLUMN_MASTER_KEY = 439;
	public static readonly COMMITTED = 440;
	public static readonly COMPATIBILITY_LEVEL = 441;
	public static readonly CONCAT = 442;
	public static readonly CONCAT_NULL_YIELDS_NULL = 443;
	public static readonly CONTENT = 444;
	public static readonly CONTROL = 445;
	public static readonly COOKIE = 446;
	public static readonly COUNT = 447;
	public static readonly COUNT_BIG = 448;
	public static readonly COUNTER = 449;
	public static readonly CPU = 450;
	public static readonly CREATE_NEW = 451;
	public static readonly CREATION_DISPOSITION = 452;
	public static readonly CREDENTIAL = 453;
	public static readonly CRYPTOGRAPHIC = 454;
	public static readonly CURSOR_CLOSE_ON_COMMIT = 455;
	public static readonly CURSOR_DEFAULT = 456;
	public static readonly DATE_CORRELATION_OPTIMIZATION = 457;
	public static readonly DATEADD = 458;
	public static readonly DATEDIFF = 459;
	public static readonly DATENAME = 460;
	public static readonly DATEPART = 461;
	public static readonly DAYS = 462;
	public static readonly DB_CHAINING = 463;
	public static readonly DB_FAILOVER = 464;
	public static readonly DECRYPTION = 465;
	public static readonly DEFAULT_DOUBLE_QUOTE = 466;
	public static readonly DEFAULT_FULLTEXT_LANGUAGE = 467;
	public static readonly DEFAULT_LANGUAGE = 468;
	public static readonly DELAY = 469;
	public static readonly DELAYED_DURABILITY = 470;
	public static readonly DELETED = 471;
	public static readonly DENSE_RANK = 472;
	public static readonly DEPENDENTS = 473;
	public static readonly DES = 474;
	public static readonly DESCRIPTION = 475;
	public static readonly DESX = 476;
	public static readonly DHCP = 477;
	public static readonly DIALOG = 478;
	public static readonly DIRECTORY_NAME = 479;
	public static readonly DISABLE = 480;
	public static readonly DISABLE_BROKER = 481;
	public static readonly DISABLED = 482;
	public static readonly DISK_DRIVE = 483;
	public static readonly DOCUMENT = 484;
	public static readonly DYNAMIC = 485;
	public static readonly ELEMENTS = 486;
	public static readonly EMERGENCY = 487;
	public static readonly EMPTY = 488;
	public static readonly ENABLE = 489;
	public static readonly ENABLE_BROKER = 490;
	public static readonly ENCRYPTED_VALUE = 491;
	public static readonly ENCRYPTION = 492;
	public static readonly ENDPOINT_URL = 493;
	public static readonly ERROR_BROKER_CONVERSATIONS = 494;
	public static readonly EXCLUSIVE = 495;
	public static readonly EXECUTABLE = 496;
	public static readonly EXIST = 497;
	public static readonly EXPAND = 498;
	public static readonly EXPIRY_DATE = 499;
	public static readonly EXPLICIT = 500;
	public static readonly FAIL_OPERATION = 501;
	public static readonly FAILOVER_MODE = 502;
	public static readonly FAILURE = 503;
	public static readonly FAILURE_CONDITION_LEVEL = 504;
	public static readonly FAST = 505;
	public static readonly FAST_FORWARD = 506;
	public static readonly FILEGROUP = 507;
	public static readonly FILEGROWTH = 508;
	public static readonly FILEPATH = 509;
	public static readonly FILESTREAM = 510;
	public static readonly FILTER = 511;
	public static readonly FIRST = 512;
	public static readonly FIRST_VALUE = 513;
	public static readonly FOLLOWING = 514;
	public static readonly FORCE = 515;
	public static readonly FORCE_FAILOVER_ALLOW_DATA_LOSS = 516;
	public static readonly FORCED = 517;
	public static readonly FORMAT = 518;
	public static readonly FORWARD_ONLY = 519;
	public static readonly FULLSCAN = 520;
	public static readonly FULLTEXT = 521;
	public static readonly GB = 522;
	public static readonly GETDATE = 523;
	public static readonly GETUTCDATE = 524;
	public static readonly GLOBAL = 525;
	public static readonly GO = 526;
	public static readonly GROUP_MAX_REQUESTS = 527;
	public static readonly GROUPING = 528;
	public static readonly GROUPING_ID = 529;
	public static readonly HADR = 530;
	public static readonly HASH = 531;
	public static readonly HEALTH_CHECK_TIMEOUT = 532;
	public static readonly HIGH = 533;
	public static readonly HONOR_BROKER_PRIORITY = 534;
	public static readonly HOURS = 535;
	public static readonly IDENTITY_VALUE = 536;
	public static readonly IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 537;
	public static readonly IMMEDIATE = 538;
	public static readonly IMPERSONATE = 539;
	public static readonly IMPORTANCE = 540;
	public static readonly INCLUDE_NULL_VALUES = 541;
	public static readonly INCREMENTAL = 542;
	public static readonly INITIATOR = 543;
	public static readonly INPUT = 544;
	public static readonly INSENSITIVE = 545;
	public static readonly INSERTED = 546;
	public static readonly INT = 547;
	public static readonly IP = 548;
	public static readonly ISOLATION = 549;
	public static readonly JSON = 550;
	public static readonly KB = 551;
	public static readonly KEEP = 552;
	public static readonly KEEPFIXED = 553;
	public static readonly KEY_SOURCE = 554;
	public static readonly KEYS = 555;
	public static readonly KEYSET = 556;
	public static readonly LAG = 557;
	public static readonly LAST = 558;
	public static readonly LAST_VALUE = 559;
	public static readonly LEAD = 560;
	public static readonly LEVEL = 561;
	public static readonly LIST = 562;
	public static readonly LISTENER = 563;
	public static readonly LISTENER_URL = 564;
	public static readonly LOB_COMPACTION = 565;
	public static readonly LOCAL = 566;
	public static readonly LOCATION = 567;
	public static readonly LOCK = 568;
	public static readonly LOCK_ESCALATION = 569;
	public static readonly LOGIN = 570;
	public static readonly LOOP = 571;
	public static readonly LOW = 572;
	public static readonly MANUAL = 573;
	public static readonly MARK = 574;
	public static readonly MATERIALIZED = 575;
	public static readonly MAX = 576;
	public static readonly MAX_CPU_PERCENT = 577;
	public static readonly MAX_DOP = 578;
	public static readonly MAX_FILES = 579;
	public static readonly MAX_IOPS_PER_VOLUME = 580;
	public static readonly MAX_MEMORY_PERCENT = 581;
	public static readonly MAX_PROCESSES = 582;
	public static readonly MAX_QUEUE_READERS = 583;
	public static readonly MAX_ROLLOVER_FILES = 584;
	public static readonly MAXDOP = 585;
	public static readonly MAXRECURSION = 586;
	public static readonly MAXSIZE = 587;
	public static readonly MB = 588;
	public static readonly MEDIUM = 589;
	public static readonly MEMORY_OPTIMIZED_DATA = 590;
	public static readonly MESSAGE = 591;
	public static readonly MIN = 592;
	public static readonly MIN_ACTIVE_ROWVERSION = 593;
	public static readonly MIN_CPU_PERCENT = 594;
	public static readonly MIN_IOPS_PER_VOLUME = 595;
	public static readonly MIN_MEMORY_PERCENT = 596;
	public static readonly MINUTES = 597;
	public static readonly MIRROR_ADDRESS = 598;
	public static readonly MIXED_PAGE_ALLOCATION = 599;
	public static readonly MODE = 600;
	public static readonly MODIFY = 601;
	public static readonly MOVE = 602;
	public static readonly MULTI_USER = 603;
	public static readonly NAME = 604;
	public static readonly NESTED_TRIGGERS = 605;
	public static readonly NEW_ACCOUNT = 606;
	public static readonly NEW_BROKER = 607;
	public static readonly NEW_PASSWORD = 608;
	public static readonly NEXT = 609;
	public static readonly NO = 610;
	public static readonly NO_TRUNCATE = 611;
	public static readonly NO_WAIT = 612;
	public static readonly NOCOUNT = 613;
	public static readonly NODES = 614;
	public static readonly NOEXPAND = 615;
	public static readonly NON_TRANSACTED_ACCESS = 616;
	public static readonly NORECOMPUTE = 617;
	public static readonly NORECOVERY = 618;
	public static readonly NOWAIT = 619;
	public static readonly NTILE = 620;
	public static readonly NUMANODE = 621;
	public static readonly NUMBER = 622;
	public static readonly NUMERIC_ROUNDABORT = 623;
	public static readonly OBJECT = 624;
	public static readonly OFFLINE = 625;
	public static readonly OFFSET = 626;
	public static readonly OLD_ACCOUNT = 627;
	public static readonly ONLINE = 628;
	public static readonly ONLY = 629;
	public static readonly OPEN_EXISTING = 630;
	public static readonly OPTIMISTIC = 631;
	public static readonly OPTIMIZE = 632;
	public static readonly OUT = 633;
	public static readonly OUTPUT = 634;
	public static readonly OWNER = 635;
	public static readonly PAGE_VERIFY = 636;
	public static readonly PARAMETERIZATION = 637;
	public static readonly PARTITION = 638;
	public static readonly PARTITIONS = 639;
	public static readonly PARTNER = 640;
	public static readonly PATH = 641;
	public static readonly POISON_MESSAGE_HANDLING = 642;
	public static readonly POOL = 643;
	public static readonly PORT = 644;
	public static readonly PRECEDING = 645;
	public static readonly PRIMARY_ROLE = 646;
	public static readonly PRIOR = 647;
	public static readonly PRIORITY = 648;
	public static readonly PRIORITY_LEVEL = 649;
	public static readonly PRIVATE = 650;
	public static readonly PRIVATE_KEY = 651;
	public static readonly PRIVILEGES = 652;
	public static readonly PROCEDURE_NAME = 653;
	public static readonly PROPERTY = 654;
	public static readonly PROVIDER = 655;
	public static readonly PROVIDER_KEY_NAME = 656;
	public static readonly QUERY = 657;
	public static readonly QUEUE = 658;
	public static readonly QUEUE_DELAY = 659;
	public static readonly QUOTED_IDENTIFIER = 660;
	public static readonly RANGE = 661;
	public static readonly RANK = 662;
	public static readonly RC2 = 663;
	public static readonly RC4 = 664;
	public static readonly RC4_128 = 665;
	public static readonly READ_COMMITTED_SNAPSHOT = 666;
	public static readonly READ_ONLY = 667;
	public static readonly READ_ONLY_ROUTING_LIST = 668;
	public static readonly READ_WRITE = 669;
	public static readonly READONLY = 670;
	public static readonly REBUILD = 671;
	public static readonly RECEIVE = 672;
	public static readonly RECOMPILE = 673;
	public static readonly RECOVERY = 674;
	public static readonly RECURSIVE_TRIGGERS = 675;
	public static readonly RELATIVE = 676;
	public static readonly REMOTE = 677;
	public static readonly REMOTE_SERVICE_NAME = 678;
	public static readonly REMOVE = 679;
	public static readonly REORGANIZE = 680;
	public static readonly REPEATABLE = 681;
	public static readonly REPLICA = 682;
	public static readonly REQUEST_MAX_CPU_TIME_SEC = 683;
	public static readonly REQUEST_MAX_MEMORY_GRANT_PERCENT = 684;
	public static readonly REQUEST_MEMORY_GRANT_TIMEOUT_SEC = 685;
	public static readonly REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT = 686;
	public static readonly RESERVE_DISK_SPACE = 687;
	public static readonly RESOURCE = 688;
	public static readonly RESOURCE_MANAGER_LOCATION = 689;
	public static readonly RESTRICTED_USER = 690;
	public static readonly RETENTION = 691;
	public static readonly ROBUST = 692;
	public static readonly ROOT = 693;
	public static readonly ROUTE = 694;
	public static readonly ROW = 695;
	public static readonly ROW_NUMBER = 696;
	public static readonly ROWGUID = 697;
	public static readonly ROWS = 698;
	public static readonly SAMPLE = 699;
	public static readonly SCHEMABINDING = 700;
	public static readonly SCOPED = 701;
	public static readonly SCROLL = 702;
	public static readonly SCROLL_LOCKS = 703;
	public static readonly SEARCH = 704;
	public static readonly SECONDARY = 705;
	public static readonly SECONDARY_ONLY = 706;
	public static readonly SECONDARY_ROLE = 707;
	public static readonly SECONDS = 708;
	public static readonly SECRET = 709;
	public static readonly SECURITY_LOG = 710;
	public static readonly SEEDING_MODE = 711;
	public static readonly SELF = 712;
	public static readonly SEMI_SENSITIVE = 713;
	public static readonly SEND = 714;
	public static readonly SENT = 715;
	public static readonly SERIALIZABLE = 716;
	public static readonly SESSION_TIMEOUT = 717;
	public static readonly SETERROR = 718;
	public static readonly SHARE = 719;
	public static readonly SHOWPLAN = 720;
	public static readonly SIGNATURE = 721;
	public static readonly SIMPLE = 722;
	public static readonly SINGLE_USER = 723;
	public static readonly SIZE = 724;
	public static readonly SMALLINT = 725;
	public static readonly SNAPSHOT = 726;
	public static readonly SPATIAL_WINDOW_MAX_CELLS = 727;
	public static readonly STANDBY = 728;
	public static readonly START_DATE = 729;
	public static readonly STATIC = 730;
	public static readonly STATS_STREAM = 731;
	public static readonly STATUS = 732;
	public static readonly STDEV = 733;
	public static readonly STDEVP = 734;
	public static readonly STOPLIST = 735;
	public static readonly STUFF = 736;
	public static readonly SUBJECT = 737;
	public static readonly SUM = 738;
	public static readonly SUSPEND = 739;
	public static readonly SYMMETRIC = 740;
	public static readonly SYNCHRONOUS_COMMIT = 741;
	public static readonly SYNONYM = 742;
	public static readonly TAKE = 743;
	public static readonly TARGET_RECOVERY_TIME = 744;
	public static readonly TB = 745;
	public static readonly TEXTIMAGE_ON = 746;
	public static readonly THROW = 747;
	public static readonly TIES = 748;
	public static readonly TIME = 749;
	public static readonly TIMEOUT = 750;
	public static readonly TIMER = 751;
	public static readonly TINYINT = 752;
	public static readonly TORN_PAGE_DETECTION = 753;
	public static readonly TRANSFORM_NOISE_WORDS = 754;
	public static readonly TRIPLE_DES = 755;
	public static readonly TRIPLE_DES_3KEY = 756;
	public static readonly TRUSTWORTHY = 757;
	public static readonly TRY = 758;
	public static readonly TSQL = 759;
	public static readonly TWO_DIGIT_YEAR_CUTOFF = 760;
	public static readonly TYPE = 761;
	public static readonly TYPE_WARNING = 762;
	public static readonly UNBOUNDED = 763;
	public static readonly UNCOMMITTED = 764;
	public static readonly UNKNOWN = 765;
	public static readonly UNLIMITED = 766;
	public static readonly USING = 767;
	public static readonly VALID_XML = 768;
	public static readonly VALIDATION = 769;
	public static readonly VALUE = 770;
	public static readonly VAR = 771;
	public static readonly VARP = 772;
	public static readonly VIEW_METADATA = 773;
	public static readonly VIEWS = 774;
	public static readonly WAIT = 775;
	public static readonly WELL_FORMED_XML = 776;
	public static readonly WITHOUT_ARRAY_WRAPPER = 777;
	public static readonly WORK = 778;
	public static readonly WORKLOAD = 779;
	public static readonly XML = 780;
	public static readonly XMLDATA = 781;
	public static readonly XMLNAMESPACES = 782;
	public static readonly XMLSCHEMA = 783;
	public static readonly XSINIL = 784;
	public static readonly DOLLAR_ACTION = 785;
	public static readonly SPACE = 786;
	public static readonly COMMENT = 787;
	public static readonly LINE_COMMENT = 788;
	public static readonly DOUBLE_QUOTE_ID = 789;
	public static readonly SINGLE_QUOTE = 790;
	public static readonly SQUARE_BRACKET_ID = 791;
	public static readonly LOCAL_ID = 792;
	public static readonly DECIMAL = 793;
	public static readonly ID = 794;
	public static readonly QUOTED_URL = 795;
	public static readonly QUOTED_HOST_AND_PORT = 796;
	public static readonly STRING = 797;
	public static readonly BINARY = 798;
	public static readonly FLOAT = 799;
	public static readonly REAL = 800;
	public static readonly EQUAL = 801;
	public static readonly GREATER = 802;
	public static readonly LESS = 803;
	public static readonly EXCLAMATION = 804;
	public static readonly PLUS_ASSIGN = 805;
	public static readonly MINUS_ASSIGN = 806;
	public static readonly MULT_ASSIGN = 807;
	public static readonly DIV_ASSIGN = 808;
	public static readonly MOD_ASSIGN = 809;
	public static readonly AND_ASSIGN = 810;
	public static readonly XOR_ASSIGN = 811;
	public static readonly OR_ASSIGN = 812;
	public static readonly DOUBLE_BAR = 813;
	public static readonly DOT = 814;
	public static readonly UNDERLINE = 815;
	public static readonly AT = 816;
	public static readonly SHARP = 817;
	public static readonly DOLLAR = 818;
	public static readonly LR_BRACKET = 819;
	public static readonly RR_BRACKET = 820;
	public static readonly COMMA = 821;
	public static readonly SEMI = 822;
	public static readonly COLON = 823;
	public static readonly STAR = 824;
	public static readonly DIVIDE = 825;
	public static readonly MODULE = 826;
	public static readonly PLUS = 827;
	public static readonly MINUS = 828;
	public static readonly BIT_NOT = 829;
	public static readonly BIT_OR = 830;
	public static readonly BIT_AND = 831;
	public static readonly BIT_XOR = 832;
	public static readonly IPV4_OCTECT = 833;
	public static readonly RULE_tsql_file = 0;
	public static readonly RULE_batch = 1;
	public static readonly RULE_sql_clauses = 2;
	public static readonly RULE_sql_clause = 3;
	public static readonly RULE_dml_clause = 4;
	public static readonly RULE_ddl_clause = 5;
	public static readonly RULE_backup_statement = 6;
	public static readonly RULE_cfl_statement = 7;
	public static readonly RULE_block_statement = 8;
	public static readonly RULE_break_statement = 9;
	public static readonly RULE_continue_statement = 10;
	public static readonly RULE_goto_statement = 11;
	public static readonly RULE_return_statement = 12;
	public static readonly RULE_if_statement = 13;
	public static readonly RULE_throw_statement = 14;
	public static readonly RULE_throw_error_number = 15;
	public static readonly RULE_throw_message = 16;
	public static readonly RULE_throw_state = 17;
	public static readonly RULE_try_catch_statement = 18;
	public static readonly RULE_waitfor_statement = 19;
	public static readonly RULE_while_statement = 20;
	public static readonly RULE_print_statement = 21;
	public static readonly RULE_raiseerror_statement = 22;
	public static readonly RULE_empty_statement = 23;
	public static readonly RULE_another_statement = 24;
	public static readonly RULE_alter_application_role = 25;
	public static readonly RULE_create_application_role = 26;
	public static readonly RULE_drop_aggregate = 27;
	public static readonly RULE_drop_application_role = 28;
	public static readonly RULE_alter_assembly = 29;
	public static readonly RULE_alter_assembly_start = 30;
	public static readonly RULE_alter_assembly_clause = 31;
	public static readonly RULE_alter_assembly_from_clause = 32;
	public static readonly RULE_alter_assembly_from_clause_start = 33;
	public static readonly RULE_alter_assembly_drop_clause = 34;
	public static readonly RULE_alter_assembly_drop_multiple_files = 35;
	public static readonly RULE_alter_assembly_drop = 36;
	public static readonly RULE_alter_assembly_add_clause = 37;
	public static readonly RULE_alter_asssembly_add_clause_start = 38;
	public static readonly RULE_alter_assembly_client_file_clause = 39;
	public static readonly RULE_alter_assembly_file_name = 40;
	public static readonly RULE_alter_assembly_file_bits = 41;
	public static readonly RULE_alter_assembly_as = 42;
	public static readonly RULE_alter_assembly_with_clause = 43;
	public static readonly RULE_alter_assembly_with = 44;
	public static readonly RULE_client_assembly_specifier = 45;
	public static readonly RULE_assembly_option = 46;
	public static readonly RULE_network_file_share = 47;
	public static readonly RULE_network_computer = 48;
	public static readonly RULE_network_file_start = 49;
	public static readonly RULE_file_path = 50;
	public static readonly RULE_file_directory_path_separator = 51;
	public static readonly RULE_local_file = 52;
	public static readonly RULE_local_drive = 53;
	public static readonly RULE_multiple_local_files = 54;
	public static readonly RULE_multiple_local_file_start = 55;
	public static readonly RULE_create_assembly = 56;
	public static readonly RULE_drop_assembly = 57;
	public static readonly RULE_alter_asymmetric_key = 58;
	public static readonly RULE_alter_asymmetric_key_start = 59;
	public static readonly RULE_asymmetric_key_option = 60;
	public static readonly RULE_asymmetric_key_option_start = 61;
	public static readonly RULE_asymmetric_key_password_change_option = 62;
	public static readonly RULE_create_asymmetric_key = 63;
	public static readonly RULE_drop_asymmetric_key = 64;
	public static readonly RULE_alter_authorization = 65;
	public static readonly RULE_authorization_grantee = 66;
	public static readonly RULE_entity_to = 67;
	public static readonly RULE_colon_colon = 68;
	public static readonly RULE_alter_authorization_start = 69;
	public static readonly RULE_alter_authorization_for_sql_database = 70;
	public static readonly RULE_alter_authorization_for_azure_dw = 71;
	public static readonly RULE_alter_authorization_for_parallel_dw = 72;
	public static readonly RULE_class_type = 73;
	public static readonly RULE_class_type_for_sql_database = 74;
	public static readonly RULE_class_type_for_azure_dw = 75;
	public static readonly RULE_class_type_for_parallel_dw = 76;
	public static readonly RULE_drop_availability_group = 77;
	public static readonly RULE_alter_availability_group = 78;
	public static readonly RULE_alter_availability_group_start = 79;
	public static readonly RULE_alter_availability_group_options = 80;
	public static readonly RULE_create_or_alter_broker_priority = 81;
	public static readonly RULE_drop_broker_priority = 82;
	public static readonly RULE_alter_certificate = 83;
	public static readonly RULE_alter_column_encryption_key = 84;
	public static readonly RULE_create_column_encryption_key = 85;
	public static readonly RULE_drop_certificate = 86;
	public static readonly RULE_drop_column_encryption_key = 87;
	public static readonly RULE_drop_column_master_key = 88;
	public static readonly RULE_drop_contract = 89;
	public static readonly RULE_drop_credential = 90;
	public static readonly RULE_drop_cryptograhic_provider = 91;
	public static readonly RULE_drop_database = 92;
	public static readonly RULE_drop_database_audit_specification = 93;
	public static readonly RULE_drop_database_scoped_credential = 94;
	public static readonly RULE_drop_default = 95;
	public static readonly RULE_drop_endpoint = 96;
	public static readonly RULE_drop_external_data_source = 97;
	public static readonly RULE_drop_external_file_format = 98;
	public static readonly RULE_drop_external_library = 99;
	public static readonly RULE_drop_external_resource_pool = 100;
	public static readonly RULE_drop_external_table = 101;
	public static readonly RULE_drop_event_notifications = 102;
	public static readonly RULE_drop_event_session = 103;
	public static readonly RULE_drop_fulltext_catalog = 104;
	public static readonly RULE_drop_fulltext_index = 105;
	public static readonly RULE_drop_fulltext_stoplist = 106;
	public static readonly RULE_drop_login = 107;
	public static readonly RULE_drop_master_key = 108;
	public static readonly RULE_drop_message_type = 109;
	public static readonly RULE_drop_partition_function = 110;
	public static readonly RULE_drop_partition_scheme = 111;
	public static readonly RULE_drop_queue = 112;
	public static readonly RULE_drop_remote_service_binding = 113;
	public static readonly RULE_drop_resource_pool = 114;
	public static readonly RULE_drop_db_role = 115;
	public static readonly RULE_drop_route = 116;
	public static readonly RULE_drop_rule = 117;
	public static readonly RULE_drop_schema = 118;
	public static readonly RULE_drop_search_property_list = 119;
	public static readonly RULE_drop_security_policy = 120;
	public static readonly RULE_drop_sequence = 121;
	public static readonly RULE_drop_server_audit = 122;
	public static readonly RULE_drop_server_audit_specification = 123;
	public static readonly RULE_drop_server_role = 124;
	public static readonly RULE_drop_service = 125;
	public static readonly RULE_drop_signature = 126;
	public static readonly RULE_drop_statistics_name_azure_dw_and_pdw = 127;
	public static readonly RULE_drop_symmetric_key = 128;
	public static readonly RULE_drop_synonym = 129;
	public static readonly RULE_drop_user = 130;
	public static readonly RULE_drop_workload_group = 131;
	public static readonly RULE_drop_xml_schema_collection = 132;
	public static readonly RULE_disable_trigger = 133;
	public static readonly RULE_enable_trigger = 134;
	public static readonly RULE_lock_table = 135;
	public static readonly RULE_truncate_table = 136;
	public static readonly RULE_create_column_master_key = 137;
	public static readonly RULE_alter_credential = 138;
	public static readonly RULE_create_credential = 139;
	public static readonly RULE_alter_cryptographic_provider = 140;
	public static readonly RULE_create_cryptographic_provider = 141;
	public static readonly RULE_create_event_notification = 142;
	public static readonly RULE_create_or_alter_event_session = 143;
	public static readonly RULE_event_session_predicate_expression = 144;
	public static readonly RULE_event_session_predicate_factor = 145;
	public static readonly RULE_event_session_predicate_leaf = 146;
	public static readonly RULE_alter_external_data_source = 147;
	public static readonly RULE_alter_external_library = 148;
	public static readonly RULE_create_external_library = 149;
	public static readonly RULE_alter_external_resource_pool = 150;
	public static readonly RULE_create_external_resource_pool = 151;
	public static readonly RULE_alter_fulltext_catalog = 152;
	public static readonly RULE_create_fulltext_catalog = 153;
	public static readonly RULE_alter_fulltext_stoplist = 154;
	public static readonly RULE_create_fulltext_stoplist = 155;
	public static readonly RULE_alter_login_sql_server = 156;
	public static readonly RULE_create_login_sql_server = 157;
	public static readonly RULE_alter_login_azure_sql = 158;
	public static readonly RULE_create_login_azure_sql = 159;
	public static readonly RULE_alter_login_azure_sql_dw_and_pdw = 160;
	public static readonly RULE_create_login_pdw = 161;
	public static readonly RULE_alter_master_key_sql_server = 162;
	public static readonly RULE_create_master_key_sql_server = 163;
	public static readonly RULE_alter_master_key_azure_sql = 164;
	public static readonly RULE_create_master_key_azure_sql = 165;
	public static readonly RULE_alter_message_type = 166;
	public static readonly RULE_alter_partition_function = 167;
	public static readonly RULE_alter_partition_scheme = 168;
	public static readonly RULE_alter_remote_service_binding = 169;
	public static readonly RULE_create_remote_service_binding = 170;
	public static readonly RULE_create_resource_pool = 171;
	public static readonly RULE_alter_resource_governor = 172;
	public static readonly RULE_alter_db_role = 173;
	public static readonly RULE_create_db_role = 174;
	public static readonly RULE_create_route = 175;
	public static readonly RULE_create_rule = 176;
	public static readonly RULE_alter_schema_sql = 177;
	public static readonly RULE_create_schema = 178;
	public static readonly RULE_create_schema_azure_sql_dw_and_pdw = 179;
	public static readonly RULE_alter_schema_azure_sql_dw_and_pdw = 180;
	public static readonly RULE_create_search_property_list = 181;
	public static readonly RULE_create_security_policy = 182;
	public static readonly RULE_alter_sequence = 183;
	public static readonly RULE_create_sequence = 184;
	public static readonly RULE_alter_server_audit = 185;
	public static readonly RULE_create_server_audit = 186;
	public static readonly RULE_alter_server_audit_specification = 187;
	public static readonly RULE_create_server_audit_specification = 188;
	public static readonly RULE_alter_server_configuration = 189;
	public static readonly RULE_alter_server_role = 190;
	public static readonly RULE_create_server_role = 191;
	public static readonly RULE_alter_server_role_pdw = 192;
	public static readonly RULE_alter_service = 193;
	public static readonly RULE_create_service = 194;
	public static readonly RULE_alter_service_master_key = 195;
	public static readonly RULE_alter_symmetric_key = 196;
	public static readonly RULE_create_symmetric_key = 197;
	public static readonly RULE_create_synonym = 198;
	public static readonly RULE_alter_user = 199;
	public static readonly RULE_create_user = 200;
	public static readonly RULE_create_user_azure_sql_dw = 201;
	public static readonly RULE_alter_user_azure_sql = 202;
	public static readonly RULE_alter_workload_group = 203;
	public static readonly RULE_create_workload_group = 204;
	public static readonly RULE_create_xml_schema_collection = 205;
	public static readonly RULE_create_queue = 206;
	public static readonly RULE_queue_settings = 207;
	public static readonly RULE_alter_queue = 208;
	public static readonly RULE_queue_action = 209;
	public static readonly RULE_queue_rebuild_options = 210;
	public static readonly RULE_create_contract = 211;
	public static readonly RULE_conversation_statement = 212;
	public static readonly RULE_message_statement = 213;
	public static readonly RULE_merge_statement = 214;
	public static readonly RULE_merge_matched = 215;
	public static readonly RULE_merge_not_matched = 216;
	public static readonly RULE_delete_statement = 217;
	public static readonly RULE_delete_statement_from = 218;
	public static readonly RULE_insert_statement = 219;
	public static readonly RULE_insert_statement_value = 220;
	public static readonly RULE_receive_statement = 221;
	public static readonly RULE_select_statement = 222;
	public static readonly RULE_time = 223;
	public static readonly RULE_update_statement = 224;
	public static readonly RULE_output_clause = 225;
	public static readonly RULE_output_dml_list_elem = 226;
	public static readonly RULE_output_column_name = 227;
	public static readonly RULE_create_database = 228;
	public static readonly RULE_create_index = 229;
	public static readonly RULE_create_or_alter_procedure = 230;
	public static readonly RULE_create_or_alter_trigger = 231;
	public static readonly RULE_create_or_alter_dml_trigger = 232;
	public static readonly RULE_dml_trigger_option = 233;
	public static readonly RULE_dml_trigger_operation = 234;
	public static readonly RULE_create_or_alter_ddl_trigger = 235;
	public static readonly RULE_ddl_trigger_operation = 236;
	public static readonly RULE_create_or_alter_function = 237;
	public static readonly RULE_func_body_returns_select = 238;
	public static readonly RULE_func_body_returns_table = 239;
	public static readonly RULE_func_body_returns_scalar = 240;
	public static readonly RULE_procedure_param = 241;
	public static readonly RULE_procedure_option = 242;
	public static readonly RULE_function_option = 243;
	public static readonly RULE_create_statistics = 244;
	public static readonly RULE_update_statistics = 245;
	public static readonly RULE_create_table = 246;
	public static readonly RULE_table_options = 247;
	public static readonly RULE_create_view = 248;
	public static readonly RULE_view_attribute = 249;
	public static readonly RULE_alter_table = 250;
	public static readonly RULE_alter_database = 251;
	public static readonly RULE_database_optionspec = 252;
	public static readonly RULE_auto_option = 253;
	public static readonly RULE_change_tracking_option = 254;
	public static readonly RULE_change_tracking_option_list = 255;
	public static readonly RULE_containment_option = 256;
	public static readonly RULE_cursor_option = 257;
	public static readonly RULE_alter_endpoint = 258;
	public static readonly RULE_database_mirroring_option = 259;
	public static readonly RULE_mirroring_set_option = 260;
	public static readonly RULE_mirroring_partner = 261;
	public static readonly RULE_mirroring_witness = 262;
	public static readonly RULE_witness_partner_equal = 263;
	public static readonly RULE_partner_option = 264;
	public static readonly RULE_witness_option = 265;
	public static readonly RULE_witness_server = 266;
	public static readonly RULE_partner_server = 267;
	public static readonly RULE_mirroring_host_port_seperator = 268;
	public static readonly RULE_partner_server_tcp_prefix = 269;
	public static readonly RULE_port_number = 270;
	public static readonly RULE_host = 271;
	public static readonly RULE_date_correlation_optimization_option = 272;
	public static readonly RULE_db_encryption_option = 273;
	public static readonly RULE_db_state_option = 274;
	public static readonly RULE_db_update_option = 275;
	public static readonly RULE_db_user_access_option = 276;
	public static readonly RULE_delayed_durability_option = 277;
	public static readonly RULE_external_access_option = 278;
	public static readonly RULE_hadr_options = 279;
	public static readonly RULE_mixed_page_allocation_option = 280;
	public static readonly RULE_parameterization_option = 281;
	public static readonly RULE_recovery_option = 282;
	public static readonly RULE_service_broker_option = 283;
	public static readonly RULE_snapshot_option = 284;
	public static readonly RULE_sql_option = 285;
	public static readonly RULE_target_recovery_time_option = 286;
	public static readonly RULE_termination = 287;
	public static readonly RULE_drop_index = 288;
	public static readonly RULE_drop_relational_or_xml_or_spatial_index = 289;
	public static readonly RULE_drop_backward_compatible_index = 290;
	public static readonly RULE_drop_procedure = 291;
	public static readonly RULE_drop_trigger = 292;
	public static readonly RULE_drop_dml_trigger = 293;
	public static readonly RULE_drop_ddl_trigger = 294;
	public static readonly RULE_drop_function = 295;
	public static readonly RULE_drop_statistics = 296;
	public static readonly RULE_drop_table = 297;
	public static readonly RULE_drop_view = 298;
	public static readonly RULE_create_type = 299;
	public static readonly RULE_drop_type = 300;
	public static readonly RULE_rowset_function_limited = 301;
	public static readonly RULE_openquery = 302;
	public static readonly RULE_opendatasource = 303;
	public static readonly RULE_declare_statement = 304;
	public static readonly RULE_cursor_statement = 305;
	public static readonly RULE_backup_database = 306;
	public static readonly RULE_backup_log = 307;
	public static readonly RULE_backup_certificate = 308;
	public static readonly RULE_backup_master_key = 309;
	public static readonly RULE_backup_service_master_key = 310;
	public static readonly RULE_execute_statement = 311;
	public static readonly RULE_execute_body = 312;
	public static readonly RULE_execute_statement_arg = 313;
	public static readonly RULE_execute_var_string = 314;
	public static readonly RULE_security_statement = 315;
	public static readonly RULE_create_certificate = 316;
	public static readonly RULE_existing_keys = 317;
	public static readonly RULE_private_key_options = 318;
	public static readonly RULE_generate_new_keys = 319;
	public static readonly RULE_date_options = 320;
	public static readonly RULE_open_key = 321;
	public static readonly RULE_close_key = 322;
	public static readonly RULE_create_key = 323;
	public static readonly RULE_key_options = 324;
	public static readonly RULE_algorithm = 325;
	public static readonly RULE_encryption_mechanism = 326;
	public static readonly RULE_decryption_mechanism = 327;
	public static readonly RULE_grant_permission = 328;
	public static readonly RULE_set_statement = 329;
	public static readonly RULE_transaction_statement = 330;
	public static readonly RULE_go_statement = 331;
	public static readonly RULE_use_statement = 332;
	public static readonly RULE_setuser_statement = 333;
	public static readonly RULE_dbcc_clause = 334;
	public static readonly RULE_dbcc_options = 335;
	public static readonly RULE_execute_clause = 336;
	public static readonly RULE_declare_local = 337;
	public static readonly RULE_table_type_definition = 338;
	public static readonly RULE_xml_type_definition = 339;
	public static readonly RULE_xml_schema_collection = 340;
	public static readonly RULE_column_def_table_constraints = 341;
	public static readonly RULE_column_def_table_constraint = 342;
	public static readonly RULE_column_definition = 343;
	public static readonly RULE_materialized_column_definition = 344;
	public static readonly RULE_column_constraint = 345;
	public static readonly RULE_table_constraint = 346;
	public static readonly RULE_on_delete = 347;
	public static readonly RULE_on_update = 348;
	public static readonly RULE_index_options = 349;
	public static readonly RULE_index_option = 350;
	public static readonly RULE_declare_cursor = 351;
	public static readonly RULE_declare_set_cursor_common = 352;
	public static readonly RULE_declare_set_cursor_common_partial = 353;
	public static readonly RULE_fetch_cursor = 354;
	public static readonly RULE_set_special = 355;
	public static readonly RULE_constant_LOCAL_ID = 356;
	public static readonly RULE_expression = 357;
	public static readonly RULE_primitive_expression = 358;
	public static readonly RULE_case_expression = 359;
	public static readonly RULE_unary_operator_expression = 360;
	public static readonly RULE_bracket_expression = 361;
	public static readonly RULE_constant_expression = 362;
	public static readonly RULE_subquery = 363;
	public static readonly RULE_with_expression = 364;
	public static readonly RULE_common_table_expression = 365;
	public static readonly RULE_update_elem = 366;
	public static readonly RULE_search_condition_list = 367;
	public static readonly RULE_search_condition = 368;
	public static readonly RULE_search_condition_and = 369;
	public static readonly RULE_search_condition_not = 370;
	public static readonly RULE_predicate = 371;
	public static readonly RULE_query_expression = 372;
	public static readonly RULE_sql_union = 373;
	public static readonly RULE_query_specification = 374;
	public static readonly RULE_top_clause = 375;
	public static readonly RULE_top_percent = 376;
	public static readonly RULE_top_count = 377;
	public static readonly RULE_order_by_clause = 378;
	public static readonly RULE_for_clause = 379;
	public static readonly RULE_xml_common_directives = 380;
	public static readonly RULE_order_by_expression = 381;
	public static readonly RULE_group_by_item = 382;
	public static readonly RULE_option_clause = 383;
	public static readonly RULE_option = 384;
	public static readonly RULE_optimize_for_arg = 385;
	public static readonly RULE_select_list = 386;
	public static readonly RULE_udt_method_arguments = 387;
	public static readonly RULE_asterisk = 388;
	public static readonly RULE_column_elem = 389;
	public static readonly RULE_udt_elem = 390;
	public static readonly RULE_expression_elem = 391;
	public static readonly RULE_select_list_elem = 392;
	public static readonly RULE_table_sources = 393;
	public static readonly RULE_table_source = 394;
	public static readonly RULE_table_source_item_joined = 395;
	public static readonly RULE_table_source_item = 396;
	public static readonly RULE_open_xml = 397;
	public static readonly RULE_schema_declaration = 398;
	public static readonly RULE_column_declaration = 399;
	public static readonly RULE_change_table = 400;
	public static readonly RULE_join_part = 401;
	public static readonly RULE_pivot_clause = 402;
	public static readonly RULE_unpivot_clause = 403;
	public static readonly RULE_full_column_name_list = 404;
	public static readonly RULE_table_name_with_hint = 405;
	public static readonly RULE_rowset_function = 406;
	public static readonly RULE_bulk_option = 407;
	public static readonly RULE_derived_table = 408;
	public static readonly RULE_function_call = 409;
	public static readonly RULE_xml_data_type_methods = 410;
	public static readonly RULE_value_method = 411;
	public static readonly RULE_query_method = 412;
	public static readonly RULE_exist_method = 413;
	public static readonly RULE_modify_method = 414;
	public static readonly RULE_nodes_method = 415;
	public static readonly RULE_switch_section = 416;
	public static readonly RULE_switch_search_condition_section = 417;
	public static readonly RULE_as_column_alias = 418;
	public static readonly RULE_as_table_alias = 419;
	public static readonly RULE_table_alias = 420;
	public static readonly RULE_with_table_hints = 421;
	public static readonly RULE_insert_with_table_hints = 422;
	public static readonly RULE_table_hint = 423;
	public static readonly RULE_index_value = 424;
	public static readonly RULE_column_alias_list = 425;
	public static readonly RULE_column_alias = 426;
	public static readonly RULE_table_value_constructor = 427;
	public static readonly RULE_expression_list = 428;
	public static readonly RULE_ranking_windowed_function = 429;
	public static readonly RULE_aggregate_windowed_function = 430;
	public static readonly RULE_analytic_windowed_function = 431;
	public static readonly RULE_all_distinct_expression = 432;
	public static readonly RULE_over_clause = 433;
	public static readonly RULE_row_or_range_clause = 434;
	public static readonly RULE_window_frame_extent = 435;
	public static readonly RULE_window_frame_bound = 436;
	public static readonly RULE_window_frame_preceding = 437;
	public static readonly RULE_window_frame_following = 438;
	public static readonly RULE_create_database_option = 439;
	public static readonly RULE_database_filestream_option = 440;
	public static readonly RULE_database_file_spec = 441;
	public static readonly RULE_file_group = 442;
	public static readonly RULE_file_spec = 443;
	public static readonly RULE_entity_name = 444;
	public static readonly RULE_entity_name_for_azure_dw = 445;
	public static readonly RULE_entity_name_for_parallel_dw = 446;
	public static readonly RULE_full_table_name = 447;
	public static readonly RULE_table_name = 448;
	public static readonly RULE_simple_name = 449;
	public static readonly RULE_func_proc_name = 450;
	public static readonly RULE_ddl_object = 451;
	public static readonly RULE_full_column_name = 452;
	public static readonly RULE_column_name_list_with_order = 453;
	public static readonly RULE_column_name_list = 454;
	public static readonly RULE_cursor_name = 455;
	public static readonly RULE_on_off = 456;
	public static readonly RULE_clustered = 457;
	public static readonly RULE_null_notnull = 458;
	public static readonly RULE_null_or_default = 459;
	public static readonly RULE_scalar_function_name = 460;
	public static readonly RULE_begin_conversation_timer = 461;
	public static readonly RULE_begin_conversation_dialog = 462;
	public static readonly RULE_contract_name = 463;
	public static readonly RULE_service_name = 464;
	public static readonly RULE_end_conversation = 465;
	public static readonly RULE_waitfor_conversation = 466;
	public static readonly RULE_get_conversation = 467;
	public static readonly RULE_queue_id = 468;
	public static readonly RULE_send_conversation = 469;
	public static readonly RULE_data_type = 470;
	public static readonly RULE_default_value = 471;
	public static readonly RULE_constant = 472;
	public static readonly RULE_sign = 473;
	public static readonly RULE_id = 474;
	public static readonly RULE_simple_id = 475;
	public static readonly RULE_comparison_operator = 476;
	public static readonly RULE_assignment_operator = 477;
	public static readonly RULE_file_size = 478;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"backup_statement", "cfl_statement", "block_statement", "break_statement", 
		"continue_statement", "goto_statement", "return_statement", "if_statement", 
		"throw_statement", "throw_error_number", "throw_message", "throw_state", 
		"try_catch_statement", "waitfor_statement", "while_statement", "print_statement", 
		"raiseerror_statement", "empty_statement", "another_statement", "alter_application_role", 
		"create_application_role", "drop_aggregate", "drop_application_role", 
		"alter_assembly", "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
		"alter_assembly_from_clause_start", "alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", 
		"alter_assembly_drop", "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
		"alter_assembly_client_file_clause", "alter_assembly_file_name", "alter_assembly_file_bits", 
		"alter_assembly_as", "alter_assembly_with_clause", "alter_assembly_with", 
		"client_assembly_specifier", "assembly_option", "network_file_share", 
		"network_computer", "network_file_start", "file_path", "file_directory_path_separator", 
		"local_file", "local_drive", "multiple_local_files", "multiple_local_file_start", 
		"create_assembly", "drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_queue", 
		"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
		"create_contract", "conversation_statement", "message_statement", "merge_statement", 
		"merge_matched", "merge_not_matched", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "receive_statement", "select_statement", 
		"time", "update_statement", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_database", "create_index", "create_or_alter_procedure", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_options", "create_view", "view_attribute", 
		"alter_table", "alter_database", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
		"security_statement", "create_certificate", "existing_keys", "private_key_options", 
		"generate_new_keys", "date_options", "open_key", "close_key", "create_key", 
		"key_options", "algorithm", "encryption_mechanism", "decryption_mechanism", 
		"grant_permission", "set_statement", "transaction_statement", "go_statement", 
		"use_statement", "setuser_statement", "dbcc_clause", "dbcc_options", "execute_clause", 
		"declare_local", "table_type_definition", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "constant_LOCAL_ID", "expression", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "search_condition_list", "search_condition", "search_condition_and", 
		"search_condition_not", "predicate", "query_expression", "sql_union", 
		"query_specification", "top_clause", "top_percent", "top_count", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
		"asterisk", "column_elem", "udt_elem", "expression_elem", "select_list_elem", 
		"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
		"open_xml", "schema_declaration", "column_declaration", "change_table", 
		"join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"full_table_name", "table_name", "simple_name", "func_proc_name", "ddl_object", 
		"full_column_name", "column_name_list_with_order", "column_name_list", 
		"cursor_name", "on_off", "clustered", "null_notnull", "null_or_default", 
		"scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
		"contract_name", "service_name", "end_conversation", "waitfor_conversation", 
		"get_conversation", "queue_id", "send_conversation", "data_type", "default_value", 
		"constant", "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
		"file_size",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'ABSENT'", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", 
		"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", 
		"'AND'", "'ANONYMOUS'", "'ANY'", "'APPEND'", "'APPLICATION'", "'AS'", 
		"'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", "'AUTHORIZATION'", "'AUTHENTICATION'", 
		"'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", "'AVAILABILITY_MODE'", 
		"'\\'", "'BACKUP'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", 
		"'BLOCKING_HIERARCHY'", "'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", 
		"'BULK'", "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", 
		"'CHANGETABLE'", "'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", 
		"'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", 
		"'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMPRESSION'", 
		"'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", "'CONSTRAINT'", "'CONTAINMENT'", 
		"'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'", "'CONTINUE_AFTER_ERROR'", 
		"'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", undefined, "'COPY_ONLY'", 
		"'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'CYCLE'", "'DATA'", 
		"'DATA_COMPRESSION'", "'DATA_SOURCE'", "'DATABASE'", "'DATABASE_MIRRORING'", 
		"'DBCC'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DEFAULT_DATABASE'", 
		"'DEFAULT_SCHEMA'", "'DELETE'", "'DENY'", "'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", 
		"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", 
		"'DROP'", "'DTC_SUPPORT'", "'DUMP'", "'ELSE'", "'ENABLED'", "'END'", "'ENDPOINT'", 
		"'ERRLVL'", "'ESCAPE'", "'ERROR'", "'EVENT'", undefined, "'EVENT_RETENTION_MODE'", 
		"'EXCEPT'", "'EXECUTABLE_FILE'", undefined, "'EXISTS'", "'EXPIREDATE'", 
		"'EXIT'", "'EXTENSION'", "'EXTERNAL'", "'EXTERNAL_ACCESS'", "'FAILOVER'", 
		"'FAILURECONDITIONLEVEL'", "'FAN_IN'", "'FETCH'", "'FILE'", "'FILENAME'", 
		"'FILLFACTOR'", "'FILE_SNAPSHOT'", "'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
		"'FOREIGN'", "'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", 
		"'GET'", "'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
		"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
		"'IF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", "'INIT'", 
		"'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", undefined, 
		undefined, "'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", 
		"'KEY_STORE_PROVIDER_NAME'", "'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", 
		"'LIFETIME'", "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
		"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", 
		"'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
		"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MERGE'", "'MESSAGE_FORWARDING'", 
		"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", 
		"'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", 
		"'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
		"'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", 
		"'OF'", "'OFF'", "'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", 
		"'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
		"'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", 
		"'PARTIAL'", "'PASSWORD'", "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", 
		"'PER_DB'", "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
		"'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", 
		"'PROCESS'", "'PUBLIC'", "'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", 
		"'READTEXT'", "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
		"'RESUME'", "'RETAINDAYS'", "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", 
		"'REWIND'", "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
		"'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", "'SAFETY'", 
		"'RULE'", "'SAFE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITY'", 
		"'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SEQUENCE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
		"'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
		"'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
		"'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", 
		"'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", 
		"'VIEW'", "'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
		"'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
		"'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
		"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
		"'CALLER'", "'CAP_CPU_PERCENT'", undefined, "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", 
		"'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", 
		undefined, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", "'DELAY'", 
		"'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", "'DES'", 
		"'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", 
		"'DISABLE_BROKER'", "'DISABLED'", undefined, "'DOCUMENT'", "'DYNAMIC'", 
		"'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", 
		"'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", 
		"'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", 
		"'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", 
		"'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", 
		"'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", "'FORMAT'", 
		"'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
		"'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", "'GROUPING_ID'", 
		"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
		"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
		"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", "'PARTITIONS'", 
		"'PARTNER'", "'PATH'", "'POISON_MESSAGE_HANDLING'", "'POOL'", "'PORT'", 
		"'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", "'SEMI_SENSITIVE'", 
		"'SEND'", "'SENT'", "'SERIALIZABLE'", "'SESSION_TIMEOUT'", "'SETERROR'", 
		"'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", "'SIMPLE'", "'SINGLE_USER'", "'SIZE'", 
		"'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", "'STANDBY'", 
		"'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", "'STDEV'", "'STDEVP'", 
		"'STOPLIST'", "'STUFF'", "'SUBJECT'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
		"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
		"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'USING'", "'VALID_XML'", 
		"'VALIDATION'", "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", "'VIEWS'", 
		"'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", "'WORKLOAD'", 
		"'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", "'XSINIL'", "'$ACTION'", 
		undefined, undefined, undefined, undefined, "'''", undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", "'$'", 
		"'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'~'", "'|'", "'&'", "'^'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
		"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
		"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", 
		"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
		"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
		"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", 
		"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
		"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
		"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
		"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", 
		"CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATA_COMPRESSION", "DATA_SOURCE", 
		"DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", 
		"DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", 
		"END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", "EVENT", "EVENTDATA", 
		"EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
		"EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
		"FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
		"FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INCLUDE", "INCREMENT", 
		"INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", "INTERSECT", 
		"INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", "KERBEROS", 
		"KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", "LEFT", 
		"LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", "LISTENER_PORT", 
		"LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", "MAX_MEMORY", 
		"MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", "MAX_SIZE", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", "MEMBER", 
		"MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
		"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
		"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
		"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
		"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
		"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
		"RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", 
		"SECURITY", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", "SERVICE_BROKER", 
		"SERVICE_NAME", "SESSION", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
		"SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", 
		"SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATISTICS", 
		"STATE", "STATS", "START", "STARTED", "STARTUP_STATE", "STOP", "STOPPED", 
		"STOP_ON_ERROR", "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
		"TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", "TOP", "TRACK_CAUSALITY", 
		"TRAN", "TRANSACTION", "TRANSFER", "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", 
		"UNION", "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", 
		"URL", "USE", "USED", "USER", "VALUES", "VARYING", "VERBOSELOGGING", "VIEW", 
		"VISIBILITY", "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
		"WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", 
		"ACTION", "ACTIVATION", "ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", 
		"AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
		"ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", "APPLY", "ARITHABORT", 
		"ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
		"AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", 
		"BINARY_CHECKSUM", "BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", 
		"BULK_LOGGED", "CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", 
		"COLLECTION", "COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", 
		"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", "COUNT", 
		"COUNT_BIG", "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
		"CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATE_CORRELATION_OPTIMIZATION", 
		"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", 
		"DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
		"DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
		"ELEMENTS", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", 
		"ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
		"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", 
		"FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", 
		"FILEGROUP", "FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", 
		"FIRST_VALUE", "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", 
		"GETUTCDATE", "GLOBAL", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", 
		"HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", "NTILE", 
		"NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
		"OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
		"OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", 
		"PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", "POOL", "PORT", 
		"PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", 
		"PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", "PROVIDER", 
		"PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", "RECEIVE", 
		"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", 
		"SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
		"SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", 
		"START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STDEV", "STDEVP", "STOPLIST", 
		"STUFF", "SUBJECT", "SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
		"SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
		"TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", 
		"TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", 
		"TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", "UNBOUNDED", 
		"UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VALID_XML", "VALIDATION", 
		"VALUE", "VAR", "VARP", "VIEW_METADATA", "VIEWS", "WAIT", "WELL_FORMED_XML", 
		"WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", 
		"XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", 
		"ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", "FLOAT", 
		"REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
		"OR_ASSIGN", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", 
		"LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
		"MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
		"IPV4_OCTECT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TSqlParser._LITERAL_NAMES, TSqlParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TSqlParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "TSqlParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return TSqlParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return TSqlParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(TSqlParser._ATN, this);
	}
	// @RuleVersion(0)
	public tsql_file(): Tsql_fileContext {
		let _localctx: Tsql_fileContext = new Tsql_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, TSqlParser.RULE_tsql_file);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TSqlParser.ALTER) | (1 << TSqlParser.BACKUP) | (1 << TSqlParser.BEGIN) | (1 << TSqlParser.BLOCKING_HIERARCHY) | (1 << TSqlParser.BREAK))) !== 0) || ((((_la - 38)) & ~0x1F) === 0 && ((1 << (_la - 38)) & ((1 << (TSqlParser.CALLED - 38)) | (1 << (TSqlParser.CASE - 38)) | (1 << (TSqlParser.CLOSE - 38)) | (1 << (TSqlParser.COALESCE - 38)) | (1 << (TSqlParser.COMMIT - 38)) | (1 << (TSqlParser.CONTINUE - 38)) | (1 << (TSqlParser.CONVERT - 38)))) !== 0) || ((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & ((1 << (TSqlParser.CREATE - 71)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 71)) | (1 << (TSqlParser.CURRENT_USER - 71)) | (1 << (TSqlParser.DATA_COMPRESSION - 71)) | (1 << (TSqlParser.DBCC - 71)) | (1 << (TSqlParser.DEALLOCATE - 71)) | (1 << (TSqlParser.DECLARE - 71)) | (1 << (TSqlParser.DEFAULT - 71)) | (1 << (TSqlParser.DELETE - 71)) | (1 << (TSqlParser.DROP - 71)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (TSqlParser.END - 107)) | (1 << (TSqlParser.EVENTDATA - 107)) | (1 << (TSqlParser.EXECUTE - 107)) | (1 << (TSqlParser.FETCH - 107)) | (1 << (TSqlParser.FILENAME - 107)) | (1 << (TSqlParser.FILLFACTOR - 107)) | (1 << (TSqlParser.FORCESEEK - 107)))) !== 0) || ((((_la - 141)) & ~0x1F) === 0 && ((1 << (_la - 141)) & ((1 << (TSqlParser.GET - 141)) | (1 << (TSqlParser.GOTO - 141)) | (1 << (TSqlParser.GRANT - 141)) | (1 << (TSqlParser.IDENTITY - 141)) | (1 << (TSqlParser.IF - 141)) | (1 << (TSqlParser.INIT - 141)) | (1 << (TSqlParser.INSERT - 141)) | (1 << (TSqlParser.ISNULL - 141)) | (1 << (TSqlParser.KEY - 141)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (TSqlParser.LEFT - 175)) | (1 << (TSqlParser.MASTER - 175)) | (1 << (TSqlParser.MAX_MEMORY - 175)) | (1 << (TSqlParser.MERGE - 175)))) !== 0) || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (TSqlParser.NULL - 221)) | (1 << (TSqlParser.NULLIF - 221)) | (1 << (TSqlParser.OFFSETS - 221)) | (1 << (TSqlParser.OPEN - 221)) | (1 << (TSqlParser.OVER - 221)) | (1 << (TSqlParser.PAGE - 221)))) !== 0) || ((((_la - 255)) & ~0x1F) === 0 && ((1 << (_la - 255)) & ((1 << (TSqlParser.PRINT - 255)) | (1 << (TSqlParser.PUBLIC - 255)) | (1 << (TSqlParser.R - 255)) | (1 << (TSqlParser.RAISERROR - 255)) | (1 << (TSqlParser.RAW - 255)) | (1 << (TSqlParser.RETURN - 255)) | (1 << (TSqlParser.RETURNS - 255)) | (1 << (TSqlParser.REVERT - 255)) | (1 << (TSqlParser.RIGHT - 255)) | (1 << (TSqlParser.ROLLBACK - 255)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (TSqlParser.ROWCOUNT - 288)) | (1 << (TSqlParser.SAFETY - 288)) | (1 << (TSqlParser.SAVE - 288)) | (1 << (TSqlParser.SELECT - 288)) | (1 << (TSqlParser.SERVER - 288)) | (1 << (TSqlParser.SESSION_USER - 288)) | (1 << (TSqlParser.SET - 288)) | (1 << (TSqlParser.SETUSER - 288)) | (1 << (TSqlParser.SID - 288)))) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & ((1 << (TSqlParser.SOURCE - 322)) | (1 << (TSqlParser.STATE - 322)) | (1 << (TSqlParser.START - 322)) | (1 << (TSqlParser.SYSTEM_USER - 322)) | (1 << (TSqlParser.TARGET - 322)))) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & ((1 << (TSqlParser.TRUNCATE - 354)) | (1 << (TSqlParser.UPDATE - 354)) | (1 << (TSqlParser.USE - 354)) | (1 << (TSqlParser.WAITFOR - 354)) | (1 << (TSqlParser.WHILE - 354)) | (1 << (TSqlParser.WITH - 354)) | (1 << (TSqlParser.ABSOLUTE - 354)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 354)) | (1 << (TSqlParser.ACTION - 354)))) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & ((1 << (TSqlParser.ACTIVATION - 386)) | (1 << (TSqlParser.ACTIVE - 386)) | (1 << (TSqlParser.ADDRESS - 386)) | (1 << (TSqlParser.AES_128 - 386)) | (1 << (TSqlParser.AES_192 - 386)) | (1 << (TSqlParser.AES_256 - 386)) | (1 << (TSqlParser.AFFINITY - 386)) | (1 << (TSqlParser.AFTER - 386)) | (1 << (TSqlParser.AGGREGATE - 386)) | (1 << (TSqlParser.ALGORITHM - 386)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 386)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 386)) | (1 << (TSqlParser.ALLOWED - 386)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 386)) | (1 << (TSqlParser.ANSI_NULLS - 386)) | (1 << (TSqlParser.ANSI_PADDING - 386)) | (1 << (TSqlParser.ANSI_WARNINGS - 386)) | (1 << (TSqlParser.APPLICATION_LOG - 386)) | (1 << (TSqlParser.APPLY - 386)) | (1 << (TSqlParser.ARITHABORT - 386)) | (1 << (TSqlParser.ASSEMBLY - 386)) | (1 << (TSqlParser.AUDIT - 386)) | (1 << (TSqlParser.AUDIT_GUID - 386)) | (1 << (TSqlParser.AUTO - 386)) | (1 << (TSqlParser.AUTO_CLEANUP - 386)) | (1 << (TSqlParser.AUTO_CLOSE - 386)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 386)) | (1 << (TSqlParser.AUTO_SHRINK - 386)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 386)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 386)) | (1 << (TSqlParser.AVAILABILITY - 386)) | (1 << (TSqlParser.AVG - 386)))) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & ((1 << (TSqlParser.BACKUP_PRIORITY - 418)) | (1 << (TSqlParser.BEGIN_DIALOG - 418)) | (1 << (TSqlParser.BIGINT - 418)) | (1 << (TSqlParser.BINARY_BASE64 - 418)) | (1 << (TSqlParser.BINARY_CHECKSUM - 418)) | (1 << (TSqlParser.BINDING - 418)) | (1 << (TSqlParser.BLOB_STORAGE - 418)) | (1 << (TSqlParser.BROKER - 418)) | (1 << (TSqlParser.BROKER_INSTANCE - 418)) | (1 << (TSqlParser.BULK_LOGGED - 418)) | (1 << (TSqlParser.CALLER - 418)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 418)) | (1 << (TSqlParser.CAST - 418)) | (1 << (TSqlParser.CATALOG - 418)) | (1 << (TSqlParser.CATCH - 418)) | (1 << (TSqlParser.CHANGE_RETENTION - 418)) | (1 << (TSqlParser.CHANGE_TRACKING - 418)) | (1 << (TSqlParser.CHECKSUM - 418)) | (1 << (TSqlParser.CHECKSUM_AGG - 418)) | (1 << (TSqlParser.CLEANUP - 418)) | (1 << (TSqlParser.COLLECTION - 418)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 418)) | (1 << (TSqlParser.COMMITTED - 418)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 418)) | (1 << (TSqlParser.CONCAT - 418)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 418)) | (1 << (TSqlParser.CONTENT - 418)) | (1 << (TSqlParser.CONTROL - 418)) | (1 << (TSqlParser.COOKIE - 418)) | (1 << (TSqlParser.COUNT - 418)) | (1 << (TSqlParser.COUNT_BIG - 418)) | (1 << (TSqlParser.COUNTER - 418)))) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & ((1 << (TSqlParser.CPU - 450)) | (1 << (TSqlParser.CREATE_NEW - 450)) | (1 << (TSqlParser.CREATION_DISPOSITION - 450)) | (1 << (TSqlParser.CREDENTIAL - 450)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 450)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 450)) | (1 << (TSqlParser.CURSOR_DEFAULT - 450)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 450)) | (1 << (TSqlParser.DATEADD - 450)) | (1 << (TSqlParser.DATEDIFF - 450)) | (1 << (TSqlParser.DATENAME - 450)) | (1 << (TSqlParser.DATEPART - 450)) | (1 << (TSqlParser.DAYS - 450)) | (1 << (TSqlParser.DB_CHAINING - 450)) | (1 << (TSqlParser.DB_FAILOVER - 450)) | (1 << (TSqlParser.DECRYPTION - 450)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 450)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 450)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 450)) | (1 << (TSqlParser.DELAY - 450)) | (1 << (TSqlParser.DELAYED_DURABILITY - 450)) | (1 << (TSqlParser.DELETED - 450)) | (1 << (TSqlParser.DENSE_RANK - 450)) | (1 << (TSqlParser.DEPENDENTS - 450)) | (1 << (TSqlParser.DES - 450)) | (1 << (TSqlParser.DESCRIPTION - 450)) | (1 << (TSqlParser.DESX - 450)) | (1 << (TSqlParser.DHCP - 450)) | (1 << (TSqlParser.DIALOG - 450)) | (1 << (TSqlParser.DIRECTORY_NAME - 450)) | (1 << (TSqlParser.DISABLE - 450)) | (1 << (TSqlParser.DISABLE_BROKER - 450)))) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & ((1 << (TSqlParser.DISABLED - 482)) | (1 << (TSqlParser.DISK_DRIVE - 482)) | (1 << (TSqlParser.DOCUMENT - 482)) | (1 << (TSqlParser.DYNAMIC - 482)) | (1 << (TSqlParser.EMERGENCY - 482)) | (1 << (TSqlParser.EMPTY - 482)) | (1 << (TSqlParser.ENABLE - 482)) | (1 << (TSqlParser.ENABLE_BROKER - 482)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 482)) | (1 << (TSqlParser.ENCRYPTION - 482)) | (1 << (TSqlParser.ENDPOINT_URL - 482)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 482)) | (1 << (TSqlParser.EXCLUSIVE - 482)) | (1 << (TSqlParser.EXECUTABLE - 482)) | (1 << (TSqlParser.EXIST - 482)) | (1 << (TSqlParser.EXPAND - 482)) | (1 << (TSqlParser.EXPIRY_DATE - 482)) | (1 << (TSqlParser.EXPLICIT - 482)) | (1 << (TSqlParser.FAIL_OPERATION - 482)) | (1 << (TSqlParser.FAILOVER_MODE - 482)) | (1 << (TSqlParser.FAILURE - 482)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 482)) | (1 << (TSqlParser.FAST - 482)) | (1 << (TSqlParser.FAST_FORWARD - 482)) | (1 << (TSqlParser.FILEGROUP - 482)) | (1 << (TSqlParser.FILEGROWTH - 482)) | (1 << (TSqlParser.FILEPATH - 482)) | (1 << (TSqlParser.FILESTREAM - 482)) | (1 << (TSqlParser.FILTER - 482)) | (1 << (TSqlParser.FIRST - 482)) | (1 << (TSqlParser.FIRST_VALUE - 482)))) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & ((1 << (TSqlParser.FOLLOWING - 514)) | (1 << (TSqlParser.FORCE - 514)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 514)) | (1 << (TSqlParser.FORCED - 514)) | (1 << (TSqlParser.FORMAT - 514)) | (1 << (TSqlParser.FORWARD_ONLY - 514)) | (1 << (TSqlParser.FULLSCAN - 514)) | (1 << (TSqlParser.FULLTEXT - 514)) | (1 << (TSqlParser.GB - 514)) | (1 << (TSqlParser.GETDATE - 514)) | (1 << (TSqlParser.GETUTCDATE - 514)) | (1 << (TSqlParser.GLOBAL - 514)) | (1 << (TSqlParser.GO - 514)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 514)) | (1 << (TSqlParser.GROUPING - 514)) | (1 << (TSqlParser.GROUPING_ID - 514)) | (1 << (TSqlParser.HADR - 514)) | (1 << (TSqlParser.HASH - 514)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 514)) | (1 << (TSqlParser.HIGH - 514)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 514)) | (1 << (TSqlParser.HOURS - 514)) | (1 << (TSqlParser.IDENTITY_VALUE - 514)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 514)) | (1 << (TSqlParser.IMMEDIATE - 514)) | (1 << (TSqlParser.IMPERSONATE - 514)) | (1 << (TSqlParser.IMPORTANCE - 514)) | (1 << (TSqlParser.INCREMENTAL - 514)) | (1 << (TSqlParser.INITIATOR - 514)) | (1 << (TSqlParser.INPUT - 514)) | (1 << (TSqlParser.INSENSITIVE - 514)))) !== 0) || ((((_la - 546)) & ~0x1F) === 0 && ((1 << (_la - 546)) & ((1 << (TSqlParser.INSERTED - 546)) | (1 << (TSqlParser.INT - 546)) | (1 << (TSqlParser.IP - 546)) | (1 << (TSqlParser.ISOLATION - 546)) | (1 << (TSqlParser.KB - 546)) | (1 << (TSqlParser.KEEP - 546)) | (1 << (TSqlParser.KEEPFIXED - 546)) | (1 << (TSqlParser.KEY_SOURCE - 546)) | (1 << (TSqlParser.KEYS - 546)) | (1 << (TSqlParser.KEYSET - 546)) | (1 << (TSqlParser.LAG - 546)) | (1 << (TSqlParser.LAST - 546)) | (1 << (TSqlParser.LAST_VALUE - 546)) | (1 << (TSqlParser.LEAD - 546)) | (1 << (TSqlParser.LEVEL - 546)) | (1 << (TSqlParser.LIST - 546)) | (1 << (TSqlParser.LISTENER - 546)) | (1 << (TSqlParser.LISTENER_URL - 546)) | (1 << (TSqlParser.LOB_COMPACTION - 546)) | (1 << (TSqlParser.LOCAL - 546)) | (1 << (TSqlParser.LOCATION - 546)) | (1 << (TSqlParser.LOCK - 546)) | (1 << (TSqlParser.LOCK_ESCALATION - 546)) | (1 << (TSqlParser.LOGIN - 546)) | (1 << (TSqlParser.LOOP - 546)) | (1 << (TSqlParser.LOW - 546)) | (1 << (TSqlParser.MANUAL - 546)) | (1 << (TSqlParser.MARK - 546)) | (1 << (TSqlParser.MATERIALIZED - 546)) | (1 << (TSqlParser.MAX - 546)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 546)))) !== 0) || ((((_la - 578)) & ~0x1F) === 0 && ((1 << (_la - 578)) & ((1 << (TSqlParser.MAX_DOP - 578)) | (1 << (TSqlParser.MAX_FILES - 578)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 578)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 578)) | (1 << (TSqlParser.MAX_PROCESSES - 578)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 578)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 578)) | (1 << (TSqlParser.MAXDOP - 578)) | (1 << (TSqlParser.MAXRECURSION - 578)) | (1 << (TSqlParser.MAXSIZE - 578)) | (1 << (TSqlParser.MB - 578)) | (1 << (TSqlParser.MEDIUM - 578)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 578)) | (1 << (TSqlParser.MESSAGE - 578)) | (1 << (TSqlParser.MIN - 578)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 578)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 578)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 578)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 578)) | (1 << (TSqlParser.MINUTES - 578)) | (1 << (TSqlParser.MIRROR_ADDRESS - 578)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 578)) | (1 << (TSqlParser.MODE - 578)) | (1 << (TSqlParser.MODIFY - 578)) | (1 << (TSqlParser.MOVE - 578)) | (1 << (TSqlParser.MULTI_USER - 578)) | (1 << (TSqlParser.NAME - 578)) | (1 << (TSqlParser.NESTED_TRIGGERS - 578)) | (1 << (TSqlParser.NEW_ACCOUNT - 578)) | (1 << (TSqlParser.NEW_BROKER - 578)) | (1 << (TSqlParser.NEW_PASSWORD - 578)) | (1 << (TSqlParser.NEXT - 578)))) !== 0) || ((((_la - 610)) & ~0x1F) === 0 && ((1 << (_la - 610)) & ((1 << (TSqlParser.NO - 610)) | (1 << (TSqlParser.NO_TRUNCATE - 610)) | (1 << (TSqlParser.NO_WAIT - 610)) | (1 << (TSqlParser.NOCOUNT - 610)) | (1 << (TSqlParser.NODES - 610)) | (1 << (TSqlParser.NOEXPAND - 610)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 610)) | (1 << (TSqlParser.NORECOMPUTE - 610)) | (1 << (TSqlParser.NORECOVERY - 610)) | (1 << (TSqlParser.NOWAIT - 610)) | (1 << (TSqlParser.NTILE - 610)) | (1 << (TSqlParser.NUMANODE - 610)) | (1 << (TSqlParser.NUMBER - 610)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 610)) | (1 << (TSqlParser.OBJECT - 610)) | (1 << (TSqlParser.OFFLINE - 610)) | (1 << (TSqlParser.OFFSET - 610)) | (1 << (TSqlParser.OLD_ACCOUNT - 610)) | (1 << (TSqlParser.ONLINE - 610)) | (1 << (TSqlParser.ONLY - 610)) | (1 << (TSqlParser.OPEN_EXISTING - 610)) | (1 << (TSqlParser.OPTIMISTIC - 610)) | (1 << (TSqlParser.OPTIMIZE - 610)) | (1 << (TSqlParser.OUT - 610)) | (1 << (TSqlParser.OUTPUT - 610)) | (1 << (TSqlParser.OWNER - 610)) | (1 << (TSqlParser.PAGE_VERIFY - 610)) | (1 << (TSqlParser.PARAMETERIZATION - 610)) | (1 << (TSqlParser.PARTITION - 610)) | (1 << (TSqlParser.PARTITIONS - 610)) | (1 << (TSqlParser.PARTNER - 610)) | (1 << (TSqlParser.PATH - 610)))) !== 0) || ((((_la - 642)) & ~0x1F) === 0 && ((1 << (_la - 642)) & ((1 << (TSqlParser.POISON_MESSAGE_HANDLING - 642)) | (1 << (TSqlParser.POOL - 642)) | (1 << (TSqlParser.PORT - 642)) | (1 << (TSqlParser.PRECEDING - 642)) | (1 << (TSqlParser.PRIMARY_ROLE - 642)) | (1 << (TSqlParser.PRIOR - 642)) | (1 << (TSqlParser.PRIORITY - 642)) | (1 << (TSqlParser.PRIORITY_LEVEL - 642)) | (1 << (TSqlParser.PRIVATE - 642)) | (1 << (TSqlParser.PRIVATE_KEY - 642)) | (1 << (TSqlParser.PRIVILEGES - 642)) | (1 << (TSqlParser.PROCEDURE_NAME - 642)) | (1 << (TSqlParser.PROPERTY - 642)) | (1 << (TSqlParser.PROVIDER - 642)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 642)) | (1 << (TSqlParser.QUERY - 642)) | (1 << (TSqlParser.QUEUE - 642)) | (1 << (TSqlParser.QUEUE_DELAY - 642)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 642)) | (1 << (TSqlParser.RANGE - 642)) | (1 << (TSqlParser.RANK - 642)) | (1 << (TSqlParser.RC2 - 642)) | (1 << (TSqlParser.RC4 - 642)) | (1 << (TSqlParser.RC4_128 - 642)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 642)) | (1 << (TSqlParser.READ_ONLY - 642)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 642)) | (1 << (TSqlParser.READ_WRITE - 642)) | (1 << (TSqlParser.READONLY - 642)) | (1 << (TSqlParser.REBUILD - 642)) | (1 << (TSqlParser.RECEIVE - 642)) | (1 << (TSqlParser.RECOMPILE - 642)))) !== 0) || ((((_la - 674)) & ~0x1F) === 0 && ((1 << (_la - 674)) & ((1 << (TSqlParser.RECOVERY - 674)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 674)) | (1 << (TSqlParser.RELATIVE - 674)) | (1 << (TSqlParser.REMOTE - 674)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 674)) | (1 << (TSqlParser.REMOVE - 674)) | (1 << (TSqlParser.REORGANIZE - 674)) | (1 << (TSqlParser.REPEATABLE - 674)) | (1 << (TSqlParser.REPLICA - 674)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 674)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 674)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 674)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 674)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 674)) | (1 << (TSqlParser.RESOURCE - 674)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 674)) | (1 << (TSqlParser.RESTRICTED_USER - 674)) | (1 << (TSqlParser.RETENTION - 674)) | (1 << (TSqlParser.ROBUST - 674)) | (1 << (TSqlParser.ROOT - 674)) | (1 << (TSqlParser.ROUTE - 674)) | (1 << (TSqlParser.ROW - 674)) | (1 << (TSqlParser.ROW_NUMBER - 674)) | (1 << (TSqlParser.ROWGUID - 674)) | (1 << (TSqlParser.ROWS - 674)) | (1 << (TSqlParser.SAMPLE - 674)) | (1 << (TSqlParser.SCHEMABINDING - 674)) | (1 << (TSqlParser.SCOPED - 674)) | (1 << (TSqlParser.SCROLL - 674)) | (1 << (TSqlParser.SCROLL_LOCKS - 674)) | (1 << (TSqlParser.SEARCH - 674)) | (1 << (TSqlParser.SECONDARY - 674)))) !== 0) || ((((_la - 706)) & ~0x1F) === 0 && ((1 << (_la - 706)) & ((1 << (TSqlParser.SECONDARY_ONLY - 706)) | (1 << (TSqlParser.SECONDARY_ROLE - 706)) | (1 << (TSqlParser.SECONDS - 706)) | (1 << (TSqlParser.SECRET - 706)) | (1 << (TSqlParser.SECURITY_LOG - 706)) | (1 << (TSqlParser.SEEDING_MODE - 706)) | (1 << (TSqlParser.SELF - 706)) | (1 << (TSqlParser.SEMI_SENSITIVE - 706)) | (1 << (TSqlParser.SEND - 706)) | (1 << (TSqlParser.SENT - 706)) | (1 << (TSqlParser.SERIALIZABLE - 706)) | (1 << (TSqlParser.SESSION_TIMEOUT - 706)) | (1 << (TSqlParser.SETERROR - 706)) | (1 << (TSqlParser.SHARE - 706)) | (1 << (TSqlParser.SHOWPLAN - 706)) | (1 << (TSqlParser.SIGNATURE - 706)) | (1 << (TSqlParser.SIMPLE - 706)) | (1 << (TSqlParser.SINGLE_USER - 706)) | (1 << (TSqlParser.SIZE - 706)) | (1 << (TSqlParser.SMALLINT - 706)) | (1 << (TSqlParser.SNAPSHOT - 706)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 706)) | (1 << (TSqlParser.STANDBY - 706)) | (1 << (TSqlParser.START_DATE - 706)) | (1 << (TSqlParser.STATIC - 706)) | (1 << (TSqlParser.STATS_STREAM - 706)) | (1 << (TSqlParser.STATUS - 706)) | (1 << (TSqlParser.STDEV - 706)) | (1 << (TSqlParser.STDEVP - 706)) | (1 << (TSqlParser.STOPLIST - 706)) | (1 << (TSqlParser.STUFF - 706)) | (1 << (TSqlParser.SUBJECT - 706)))) !== 0) || ((((_la - 738)) & ~0x1F) === 0 && ((1 << (_la - 738)) & ((1 << (TSqlParser.SUM - 738)) | (1 << (TSqlParser.SUSPEND - 738)) | (1 << (TSqlParser.SYMMETRIC - 738)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 738)) | (1 << (TSqlParser.SYNONYM - 738)) | (1 << (TSqlParser.TAKE - 738)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 738)) | (1 << (TSqlParser.TB - 738)) | (1 << (TSqlParser.TEXTIMAGE_ON - 738)) | (1 << (TSqlParser.THROW - 738)) | (1 << (TSqlParser.TIES - 738)) | (1 << (TSqlParser.TIME - 738)) | (1 << (TSqlParser.TIMEOUT - 738)) | (1 << (TSqlParser.TIMER - 738)) | (1 << (TSqlParser.TINYINT - 738)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 738)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 738)) | (1 << (TSqlParser.TRIPLE_DES - 738)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 738)) | (1 << (TSqlParser.TRUSTWORTHY - 738)) | (1 << (TSqlParser.TRY - 738)) | (1 << (TSqlParser.TSQL - 738)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 738)) | (1 << (TSqlParser.TYPE - 738)) | (1 << (TSqlParser.TYPE_WARNING - 738)) | (1 << (TSqlParser.UNBOUNDED - 738)) | (1 << (TSqlParser.UNCOMMITTED - 738)) | (1 << (TSqlParser.UNKNOWN - 738)) | (1 << (TSqlParser.UNLIMITED - 738)) | (1 << (TSqlParser.USING - 738)) | (1 << (TSqlParser.VALID_XML - 738)) | (1 << (TSqlParser.VALIDATION - 738)))) !== 0) || ((((_la - 770)) & ~0x1F) === 0 && ((1 << (_la - 770)) & ((1 << (TSqlParser.VALUE - 770)) | (1 << (TSqlParser.VAR - 770)) | (1 << (TSqlParser.VARP - 770)) | (1 << (TSqlParser.VIEW_METADATA - 770)) | (1 << (TSqlParser.VIEWS - 770)) | (1 << (TSqlParser.WAIT - 770)) | (1 << (TSqlParser.WELL_FORMED_XML - 770)) | (1 << (TSqlParser.WORK - 770)) | (1 << (TSqlParser.WORKLOAD - 770)) | (1 << (TSqlParser.XML - 770)) | (1 << (TSqlParser.XMLNAMESPACES - 770)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 770)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 770)) | (1 << (TSqlParser.LOCAL_ID - 770)) | (1 << (TSqlParser.DECIMAL - 770)) | (1 << (TSqlParser.ID - 770)) | (1 << (TSqlParser.STRING - 770)) | (1 << (TSqlParser.BINARY - 770)) | (1 << (TSqlParser.FLOAT - 770)) | (1 << (TSqlParser.REAL - 770)))) !== 0) || ((((_la - 818)) & ~0x1F) === 0 && ((1 << (_la - 818)) & ((1 << (TSqlParser.DOLLAR - 818)) | (1 << (TSqlParser.LR_BRACKET - 818)) | (1 << (TSqlParser.SEMI - 818)) | (1 << (TSqlParser.PLUS - 818)) | (1 << (TSqlParser.MINUS - 818)) | (1 << (TSqlParser.BIT_NOT - 818)))) !== 0)) {
				{
				{
				this.state = 958;
				this.batch();
				}
				}
				this.state = 963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 964;
			this.match(TSqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public batch(): BatchContext {
		let _localctx: BatchContext = new BatchContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, TSqlParser.RULE_batch);
		try {
			let _alt: number;
			this.state = 983;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 966;
				this.execute_body();
				this.state = 970;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 967;
						this.go_statement();
						}
						}
					}
					this.state = 972;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 974;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {
				case 1:
					{
					this.state = 973;
					this.execute_body();
					}
					break;
				}
				this.state = 976;
				this.sql_clauses();
				this.state = 980;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 3, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 977;
						this.go_statement();
						}
						}
					}
					this.state = 982;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 3, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sql_clauses(): Sql_clausesContext {
		let _localctx: Sql_clausesContext = new Sql_clausesContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, TSqlParser.RULE_sql_clauses);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 989;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 985;
					this.sql_clause();
					this.state = 987;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
					case 1:
						{
						this.state = 986;
						this.match(TSqlParser.SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 991;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sql_clause(): Sql_clauseContext {
		let _localctx: Sql_clauseContext = new Sql_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, TSqlParser.RULE_sql_clause);
		try {
			this.state = 1000;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 993;
				this.dml_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 994;
				this.ddl_clause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 995;
				this.cfl_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 996;
				this.dbcc_clause();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 997;
				this.empty_statement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 998;
				this.another_statement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 999;
				this.backup_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dml_clause(): Dml_clauseContext {
		let _localctx: Dml_clauseContext = new Dml_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, TSqlParser.RULE_dml_clause);
		try {
			this.state = 1007;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1002;
				this.merge_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1003;
				this.delete_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1004;
				this.insert_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1005;
				this.select_statement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1006;
				this.update_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddl_clause(): Ddl_clauseContext {
		let _localctx: Ddl_clauseContext = new Ddl_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, TSqlParser.RULE_ddl_clause);
		try {
			this.state = 1168;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 9, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1009;
				this.alter_application_role();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1010;
				this.alter_assembly();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1011;
				this.alter_asymmetric_key();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1012;
				this.alter_authorization();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1013;
				this.alter_authorization_for_azure_dw();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1014;
				this.alter_authorization_for_parallel_dw();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1015;
				this.alter_authorization_for_sql_database();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1016;
				this.alter_availability_group();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1017;
				this.alter_certificate();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1018;
				this.alter_column_encryption_key();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1019;
				this.alter_credential();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1020;
				this.alter_cryptographic_provider();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1021;
				this.alter_database();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1022;
				this.alter_db_role();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1023;
				this.alter_endpoint();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1024;
				this.create_or_alter_event_session();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1025;
				this.alter_external_data_source();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1026;
				this.alter_external_library();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1027;
				this.alter_external_resource_pool();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1028;
				this.alter_fulltext_catalog();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1029;
				this.alter_fulltext_stoplist();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1030;
				this.alter_login_azure_sql();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1031;
				this.alter_login_azure_sql_dw_and_pdw();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1032;
				this.alter_login_sql_server();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1033;
				this.alter_master_key_azure_sql();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1034;
				this.alter_master_key_sql_server();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1035;
				this.alter_message_type();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1036;
				this.alter_partition_function();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1037;
				this.alter_partition_scheme();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1038;
				this.alter_remote_service_binding();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 1039;
				this.alter_resource_governor();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 1040;
				this.alter_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 1041;
				this.alter_schema_sql();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 1042;
				this.alter_sequence();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 1043;
				this.alter_server_audit();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 1044;
				this.alter_server_audit_specification();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 1045;
				this.alter_server_configuration();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 1046;
				this.alter_server_role();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 1047;
				this.alter_server_role_pdw();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 1048;
				this.alter_service();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 1049;
				this.alter_service_master_key();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 1050;
				this.alter_symmetric_key();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 1051;
				this.alter_table();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 1052;
				this.alter_user();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 1053;
				this.alter_user_azure_sql();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 1054;
				this.alter_workload_group();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 1055;
				this.create_application_role();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 1056;
				this.create_assembly();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 1057;
				this.create_asymmetric_key();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 1058;
				this.create_column_encryption_key();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 1059;
				this.create_column_master_key();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 1060;
				this.create_credential();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 1061;
				this.create_cryptographic_provider();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 1062;
				this.create_database();
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 1063;
				this.create_db_role();
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 1064;
				this.create_event_notification();
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 1065;
				this.create_external_library();
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 1066;
				this.create_external_resource_pool();
				}
				break;

			case 59:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 1067;
				this.create_fulltext_catalog();
				}
				break;

			case 60:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 1068;
				this.create_fulltext_stoplist();
				}
				break;

			case 61:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 1069;
				this.create_index();
				}
				break;

			case 62:
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 1070;
				this.create_login_azure_sql();
				}
				break;

			case 63:
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 1071;
				this.create_login_pdw();
				}
				break;

			case 64:
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 1072;
				this.create_login_sql_server();
				}
				break;

			case 65:
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 1073;
				this.create_master_key_azure_sql();
				}
				break;

			case 66:
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 1074;
				this.create_master_key_sql_server();
				}
				break;

			case 67:
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 1075;
				this.create_or_alter_broker_priority();
				}
				break;

			case 68:
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 1076;
				this.create_or_alter_function();
				}
				break;

			case 69:
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 1077;
				this.create_or_alter_procedure();
				}
				break;

			case 70:
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 1078;
				this.create_or_alter_trigger();
				}
				break;

			case 71:
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 1079;
				this.create_remote_service_binding();
				}
				break;

			case 72:
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 1080;
				this.create_resource_pool();
				}
				break;

			case 73:
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 1081;
				this.create_route();
				}
				break;

			case 74:
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 1082;
				this.create_rule();
				}
				break;

			case 75:
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 1083;
				this.create_schema();
				}
				break;

			case 76:
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 1084;
				this.create_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 77:
				this.enterOuterAlt(_localctx, 77);
				{
				this.state = 1085;
				this.create_search_property_list();
				}
				break;

			case 78:
				this.enterOuterAlt(_localctx, 78);
				{
				this.state = 1086;
				this.create_security_policy();
				}
				break;

			case 79:
				this.enterOuterAlt(_localctx, 79);
				{
				this.state = 1087;
				this.create_sequence();
				}
				break;

			case 80:
				this.enterOuterAlt(_localctx, 80);
				{
				this.state = 1088;
				this.create_server_audit();
				}
				break;

			case 81:
				this.enterOuterAlt(_localctx, 81);
				{
				this.state = 1089;
				this.create_server_audit_specification();
				}
				break;

			case 82:
				this.enterOuterAlt(_localctx, 82);
				{
				this.state = 1090;
				this.create_server_role();
				}
				break;

			case 83:
				this.enterOuterAlt(_localctx, 83);
				{
				this.state = 1091;
				this.create_service();
				}
				break;

			case 84:
				this.enterOuterAlt(_localctx, 84);
				{
				this.state = 1092;
				this.create_statistics();
				}
				break;

			case 85:
				this.enterOuterAlt(_localctx, 85);
				{
				this.state = 1093;
				this.create_symmetric_key();
				}
				break;

			case 86:
				this.enterOuterAlt(_localctx, 86);
				{
				this.state = 1094;
				this.create_synonym();
				}
				break;

			case 87:
				this.enterOuterAlt(_localctx, 87);
				{
				this.state = 1095;
				this.create_table();
				}
				break;

			case 88:
				this.enterOuterAlt(_localctx, 88);
				{
				this.state = 1096;
				this.create_type();
				}
				break;

			case 89:
				this.enterOuterAlt(_localctx, 89);
				{
				this.state = 1097;
				this.create_user();
				}
				break;

			case 90:
				this.enterOuterAlt(_localctx, 90);
				{
				this.state = 1098;
				this.create_user_azure_sql_dw();
				}
				break;

			case 91:
				this.enterOuterAlt(_localctx, 91);
				{
				this.state = 1099;
				this.create_view();
				}
				break;

			case 92:
				this.enterOuterAlt(_localctx, 92);
				{
				this.state = 1100;
				this.create_workload_group();
				}
				break;

			case 93:
				this.enterOuterAlt(_localctx, 93);
				{
				this.state = 1101;
				this.create_xml_schema_collection();
				}
				break;

			case 94:
				this.enterOuterAlt(_localctx, 94);
				{
				this.state = 1102;
				this.drop_aggregate();
				}
				break;

			case 95:
				this.enterOuterAlt(_localctx, 95);
				{
				this.state = 1103;
				this.drop_application_role();
				}
				break;

			case 96:
				this.enterOuterAlt(_localctx, 96);
				{
				this.state = 1104;
				this.drop_assembly();
				}
				break;

			case 97:
				this.enterOuterAlt(_localctx, 97);
				{
				this.state = 1105;
				this.drop_asymmetric_key();
				}
				break;

			case 98:
				this.enterOuterAlt(_localctx, 98);
				{
				this.state = 1106;
				this.drop_availability_group();
				}
				break;

			case 99:
				this.enterOuterAlt(_localctx, 99);
				{
				this.state = 1107;
				this.drop_broker_priority();
				}
				break;

			case 100:
				this.enterOuterAlt(_localctx, 100);
				{
				this.state = 1108;
				this.drop_certificate();
				}
				break;

			case 101:
				this.enterOuterAlt(_localctx, 101);
				{
				this.state = 1109;
				this.drop_column_encryption_key();
				}
				break;

			case 102:
				this.enterOuterAlt(_localctx, 102);
				{
				this.state = 1110;
				this.drop_column_master_key();
				}
				break;

			case 103:
				this.enterOuterAlt(_localctx, 103);
				{
				this.state = 1111;
				this.drop_contract();
				}
				break;

			case 104:
				this.enterOuterAlt(_localctx, 104);
				{
				this.state = 1112;
				this.drop_credential();
				}
				break;

			case 105:
				this.enterOuterAlt(_localctx, 105);
				{
				this.state = 1113;
				this.drop_cryptograhic_provider();
				}
				break;

			case 106:
				this.enterOuterAlt(_localctx, 106);
				{
				this.state = 1114;
				this.drop_database();
				}
				break;

			case 107:
				this.enterOuterAlt(_localctx, 107);
				{
				this.state = 1115;
				this.drop_database_audit_specification();
				}
				break;

			case 108:
				this.enterOuterAlt(_localctx, 108);
				{
				this.state = 1116;
				this.drop_database_scoped_credential();
				}
				break;

			case 109:
				this.enterOuterAlt(_localctx, 109);
				{
				this.state = 1117;
				this.drop_db_role();
				}
				break;

			case 110:
				this.enterOuterAlt(_localctx, 110);
				{
				this.state = 1118;
				this.drop_default();
				}
				break;

			case 111:
				this.enterOuterAlt(_localctx, 111);
				{
				this.state = 1119;
				this.drop_endpoint();
				}
				break;

			case 112:
				this.enterOuterAlt(_localctx, 112);
				{
				this.state = 1120;
				this.drop_event_notifications();
				}
				break;

			case 113:
				this.enterOuterAlt(_localctx, 113);
				{
				this.state = 1121;
				this.drop_event_session();
				}
				break;

			case 114:
				this.enterOuterAlt(_localctx, 114);
				{
				this.state = 1122;
				this.drop_external_data_source();
				}
				break;

			case 115:
				this.enterOuterAlt(_localctx, 115);
				{
				this.state = 1123;
				this.drop_external_file_format();
				}
				break;

			case 116:
				this.enterOuterAlt(_localctx, 116);
				{
				this.state = 1124;
				this.drop_external_library();
				}
				break;

			case 117:
				this.enterOuterAlt(_localctx, 117);
				{
				this.state = 1125;
				this.drop_external_resource_pool();
				}
				break;

			case 118:
				this.enterOuterAlt(_localctx, 118);
				{
				this.state = 1126;
				this.drop_external_table();
				}
				break;

			case 119:
				this.enterOuterAlt(_localctx, 119);
				{
				this.state = 1127;
				this.drop_fulltext_catalog();
				}
				break;

			case 120:
				this.enterOuterAlt(_localctx, 120);
				{
				this.state = 1128;
				this.drop_fulltext_index();
				}
				break;

			case 121:
				this.enterOuterAlt(_localctx, 121);
				{
				this.state = 1129;
				this.drop_fulltext_stoplist();
				}
				break;

			case 122:
				this.enterOuterAlt(_localctx, 122);
				{
				this.state = 1130;
				this.drop_function();
				}
				break;

			case 123:
				this.enterOuterAlt(_localctx, 123);
				{
				this.state = 1131;
				this.drop_index();
				}
				break;

			case 124:
				this.enterOuterAlt(_localctx, 124);
				{
				this.state = 1132;
				this.drop_login();
				}
				break;

			case 125:
				this.enterOuterAlt(_localctx, 125);
				{
				this.state = 1133;
				this.drop_master_key();
				}
				break;

			case 126:
				this.enterOuterAlt(_localctx, 126);
				{
				this.state = 1134;
				this.drop_message_type();
				}
				break;

			case 127:
				this.enterOuterAlt(_localctx, 127);
				{
				this.state = 1135;
				this.drop_partition_function();
				}
				break;

			case 128:
				this.enterOuterAlt(_localctx, 128);
				{
				this.state = 1136;
				this.drop_partition_scheme();
				}
				break;

			case 129:
				this.enterOuterAlt(_localctx, 129);
				{
				this.state = 1137;
				this.drop_procedure();
				}
				break;

			case 130:
				this.enterOuterAlt(_localctx, 130);
				{
				this.state = 1138;
				this.drop_queue();
				}
				break;

			case 131:
				this.enterOuterAlt(_localctx, 131);
				{
				this.state = 1139;
				this.drop_remote_service_binding();
				}
				break;

			case 132:
				this.enterOuterAlt(_localctx, 132);
				{
				this.state = 1140;
				this.drop_resource_pool();
				}
				break;

			case 133:
				this.enterOuterAlt(_localctx, 133);
				{
				this.state = 1141;
				this.drop_route();
				}
				break;

			case 134:
				this.enterOuterAlt(_localctx, 134);
				{
				this.state = 1142;
				this.drop_rule();
				}
				break;

			case 135:
				this.enterOuterAlt(_localctx, 135);
				{
				this.state = 1143;
				this.drop_schema();
				}
				break;

			case 136:
				this.enterOuterAlt(_localctx, 136);
				{
				this.state = 1144;
				this.drop_search_property_list();
				}
				break;

			case 137:
				this.enterOuterAlt(_localctx, 137);
				{
				this.state = 1145;
				this.drop_security_policy();
				}
				break;

			case 138:
				this.enterOuterAlt(_localctx, 138);
				{
				this.state = 1146;
				this.drop_sequence();
				}
				break;

			case 139:
				this.enterOuterAlt(_localctx, 139);
				{
				this.state = 1147;
				this.drop_server_audit();
				}
				break;

			case 140:
				this.enterOuterAlt(_localctx, 140);
				{
				this.state = 1148;
				this.drop_server_audit_specification();
				}
				break;

			case 141:
				this.enterOuterAlt(_localctx, 141);
				{
				this.state = 1149;
				this.drop_server_role();
				}
				break;

			case 142:
				this.enterOuterAlt(_localctx, 142);
				{
				this.state = 1150;
				this.drop_service();
				}
				break;

			case 143:
				this.enterOuterAlt(_localctx, 143);
				{
				this.state = 1151;
				this.drop_signature();
				}
				break;

			case 144:
				this.enterOuterAlt(_localctx, 144);
				{
				this.state = 1152;
				this.drop_statistics();
				}
				break;

			case 145:
				this.enterOuterAlt(_localctx, 145);
				{
				this.state = 1153;
				this.drop_statistics_name_azure_dw_and_pdw();
				}
				break;

			case 146:
				this.enterOuterAlt(_localctx, 146);
				{
				this.state = 1154;
				this.drop_symmetric_key();
				}
				break;

			case 147:
				this.enterOuterAlt(_localctx, 147);
				{
				this.state = 1155;
				this.drop_synonym();
				}
				break;

			case 148:
				this.enterOuterAlt(_localctx, 148);
				{
				this.state = 1156;
				this.drop_table();
				}
				break;

			case 149:
				this.enterOuterAlt(_localctx, 149);
				{
				this.state = 1157;
				this.drop_trigger();
				}
				break;

			case 150:
				this.enterOuterAlt(_localctx, 150);
				{
				this.state = 1158;
				this.drop_type();
				}
				break;

			case 151:
				this.enterOuterAlt(_localctx, 151);
				{
				this.state = 1159;
				this.drop_user();
				}
				break;

			case 152:
				this.enterOuterAlt(_localctx, 152);
				{
				this.state = 1160;
				this.drop_view();
				}
				break;

			case 153:
				this.enterOuterAlt(_localctx, 153);
				{
				this.state = 1161;
				this.drop_workload_group();
				}
				break;

			case 154:
				this.enterOuterAlt(_localctx, 154);
				{
				this.state = 1162;
				this.drop_xml_schema_collection();
				}
				break;

			case 155:
				this.enterOuterAlt(_localctx, 155);
				{
				this.state = 1163;
				this.disable_trigger();
				}
				break;

			case 156:
				this.enterOuterAlt(_localctx, 156);
				{
				this.state = 1164;
				this.enable_trigger();
				}
				break;

			case 157:
				this.enterOuterAlt(_localctx, 157);
				{
				this.state = 1165;
				this.lock_table();
				}
				break;

			case 158:
				this.enterOuterAlt(_localctx, 158);
				{
				this.state = 1166;
				this.truncate_table();
				}
				break;

			case 159:
				this.enterOuterAlt(_localctx, 159);
				{
				this.state = 1167;
				this.update_statistics();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backup_statement(): Backup_statementContext {
		let _localctx: Backup_statementContext = new Backup_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, TSqlParser.RULE_backup_statement);
		try {
			this.state = 1175;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1170;
				this.backup_database();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1171;
				this.backup_log();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1172;
				this.backup_certificate();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1173;
				this.backup_master_key();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1174;
				this.backup_service_master_key();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cfl_statement(): Cfl_statementContext {
		let _localctx: Cfl_statementContext = new Cfl_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, TSqlParser.RULE_cfl_statement);
		try {
			this.state = 1189;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1177;
				this.block_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1178;
				this.break_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1179;
				this.continue_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1180;
				this.goto_statement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1181;
				this.if_statement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1182;
				this.return_statement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1183;
				this.throw_statement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1184;
				this.try_catch_statement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1185;
				this.waitfor_statement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1186;
				this.while_statement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1187;
				this.print_statement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1188;
				this.raiseerror_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_statement(): Block_statementContext {
		let _localctx: Block_statementContext = new Block_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, TSqlParser.RULE_block_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1191;
			this.match(TSqlParser.BEGIN);
			this.state = 1193;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 12, this._ctx) ) {
			case 1:
				{
				this.state = 1192;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			this.state = 1196;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				{
				this.state = 1195;
				this.sql_clauses();
				}
				break;
			}
			this.state = 1198;
			this.match(TSqlParser.END);
			this.state = 1200;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 14, this._ctx) ) {
			case 1:
				{
				this.state = 1199;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public break_statement(): Break_statementContext {
		let _localctx: Break_statementContext = new Break_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, TSqlParser.RULE_break_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1202;
			this.match(TSqlParser.BREAK);
			this.state = 1204;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				{
				this.state = 1203;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continue_statement(): Continue_statementContext {
		let _localctx: Continue_statementContext = new Continue_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, TSqlParser.RULE_continue_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1206;
			this.match(TSqlParser.CONTINUE);
			this.state = 1208;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				{
				this.state = 1207;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public goto_statement(): Goto_statementContext {
		let _localctx: Goto_statementContext = new Goto_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, TSqlParser.RULE_goto_statement);
		try {
			this.state = 1220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.GOTO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1210;
				this.match(TSqlParser.GOTO);
				this.state = 1211;
				this.id();
				this.state = 1213;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
				case 1:
					{
					this.state = 1212;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1215;
				this.id();
				this.state = 1216;
				this.match(TSqlParser.COLON);
				this.state = 1218;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 18, this._ctx) ) {
				case 1:
					{
					this.state = 1217;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public return_statement(): Return_statementContext {
		let _localctx: Return_statementContext = new Return_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, TSqlParser.RULE_return_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1222;
			this.match(TSqlParser.RETURN);
			this.state = 1224;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
			case 1:
				{
				this.state = 1223;
				this.expression(0);
				}
				break;
			}
			this.state = 1227;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 21, this._ctx) ) {
			case 1:
				{
				this.state = 1226;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_statement(): If_statementContext {
		let _localctx: If_statementContext = new If_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, TSqlParser.RULE_if_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1229;
			this.match(TSqlParser.IF);
			this.state = 1230;
			this.search_condition();
			this.state = 1231;
			this.sql_clause();
			this.state = 1234;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 22, this._ctx) ) {
			case 1:
				{
				this.state = 1232;
				this.match(TSqlParser.ELSE);
				this.state = 1233;
				this.sql_clause();
				}
				break;
			}
			this.state = 1237;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 1236;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public throw_statement(): Throw_statementContext {
		let _localctx: Throw_statementContext = new Throw_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, TSqlParser.RULE_throw_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1239;
			this.match(TSqlParser.THROW);
			this.state = 1246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				this.state = 1240;
				this.throw_error_number();
				this.state = 1241;
				this.match(TSqlParser.COMMA);
				this.state = 1242;
				this.throw_message();
				this.state = 1243;
				this.match(TSqlParser.COMMA);
				this.state = 1244;
				this.throw_state();
				}
				break;
			}
			this.state = 1249;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 25, this._ctx) ) {
			case 1:
				{
				this.state = 1248;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public throw_error_number(): Throw_error_numberContext {
		let _localctx: Throw_error_numberContext = new Throw_error_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, TSqlParser.RULE_throw_error_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1251;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.DECIMAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public throw_message(): Throw_messageContext {
		let _localctx: Throw_messageContext = new Throw_messageContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, TSqlParser.RULE_throw_message);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1253;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public throw_state(): Throw_stateContext {
		let _localctx: Throw_stateContext = new Throw_stateContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, TSqlParser.RULE_throw_state);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1255;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.DECIMAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public try_catch_statement(): Try_catch_statementContext {
		let _localctx: Try_catch_statementContext = new Try_catch_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, TSqlParser.RULE_try_catch_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1257;
			this.match(TSqlParser.BEGIN);
			this.state = 1258;
			this.match(TSqlParser.TRY);
			this.state = 1260;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 26, this._ctx) ) {
			case 1:
				{
				this.state = 1259;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			this.state = 1263;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 27, this._ctx) ) {
			case 1:
				{
				this.state = 1262;
				_localctx._try_clauses = this.sql_clauses();
				}
				break;
			}
			this.state = 1265;
			this.match(TSqlParser.END);
			this.state = 1266;
			this.match(TSqlParser.TRY);
			this.state = 1268;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.SEMI) {
				{
				this.state = 1267;
				this.match(TSqlParser.SEMI);
				}
			}

			this.state = 1270;
			this.match(TSqlParser.BEGIN);
			this.state = 1271;
			this.match(TSqlParser.CATCH);
			this.state = 1273;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 29, this._ctx) ) {
			case 1:
				{
				this.state = 1272;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			this.state = 1276;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 30, this._ctx) ) {
			case 1:
				{
				this.state = 1275;
				_localctx._catch_clauses = this.sql_clauses();
				}
				break;
			}
			this.state = 1278;
			this.match(TSqlParser.END);
			this.state = 1279;
			this.match(TSqlParser.CATCH);
			this.state = 1281;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				{
				this.state = 1280;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public waitfor_statement(): Waitfor_statementContext {
		let _localctx: Waitfor_statementContext = new Waitfor_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, TSqlParser.RULE_waitfor_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1283;
			this.match(TSqlParser.WAITFOR);
			this.state = 1285;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 32, this._ctx) ) {
			case 1:
				{
				this.state = 1284;
				this.receive_statement();
				}
				break;
			}
			this.state = 1288;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 1287;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 1292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 34, this._ctx) ) {
			case 1:
				{
				this.state = 1290;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DELAY || _la === TSqlParser.TIME || _la === TSqlParser.TIMEOUT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1291;
				this.time();
				}
				break;
			}
			this.state = 1295;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 35, this._ctx) ) {
			case 1:
				{
				this.state = 1294;
				this.expression(0);
				}
				break;
			}
			this.state = 1298;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 36, this._ctx) ) {
			case 1:
				{
				this.state = 1297;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public while_statement(): While_statementContext {
		let _localctx: While_statementContext = new While_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, TSqlParser.RULE_while_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1300;
			this.match(TSqlParser.WHILE);
			this.state = 1301;
			this.search_condition();
			this.state = 1311;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 39, this._ctx) ) {
			case 1:
				{
				this.state = 1302;
				this.sql_clause();
				}
				break;

			case 2:
				{
				this.state = 1303;
				this.match(TSqlParser.BREAK);
				this.state = 1305;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 37, this._ctx) ) {
				case 1:
					{
					this.state = 1304;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 1307;
				this.match(TSqlParser.CONTINUE);
				this.state = 1309;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
				case 1:
					{
					this.state = 1308;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public print_statement(): Print_statementContext {
		let _localctx: Print_statementContext = new Print_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, TSqlParser.RULE_print_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1313;
			this.match(TSqlParser.PRINT);
			this.state = 1316;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 40, this._ctx) ) {
			case 1:
				{
				this.state = 1314;
				this.expression(0);
				}
				break;

			case 2:
				{
				this.state = 1315;
				this.match(TSqlParser.DOUBLE_QUOTE_ID);
				}
				break;
			}
			this.state = 1322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 1318;
				this.match(TSqlParser.COMMA);
				this.state = 1319;
				this.match(TSqlParser.LOCAL_ID);
				}
				}
				this.state = 1324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1326;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 42, this._ctx) ) {
			case 1:
				{
				this.state = 1325;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public raiseerror_statement(): Raiseerror_statementContext {
		let _localctx: Raiseerror_statementContext = new Raiseerror_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, TSqlParser.RULE_raiseerror_statement);
		let _la: number;
		try {
			this.state = 1360;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 47, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1328;
				this.match(TSqlParser.RAISERROR);
				this.state = 1329;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 1330;
				_localctx._msg = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 792)) & ~0x1F) === 0 && ((1 << (_la - 792)) & ((1 << (TSqlParser.LOCAL_ID - 792)) | (1 << (TSqlParser.DECIMAL - 792)) | (1 << (TSqlParser.STRING - 792)))) !== 0))) {
					_localctx._msg = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1331;
				this.match(TSqlParser.COMMA);
				this.state = 1332;
				_localctx._severity = this.constant_LOCAL_ID();
				this.state = 1333;
				this.match(TSqlParser.COMMA);
				this.state = 1334;
				_localctx._state = this.constant_LOCAL_ID();
				this.state = 1339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 1335;
					this.match(TSqlParser.COMMA);
					this.state = 1336;
					this.constant_LOCAL_ID();
					}
					}
					this.state = 1341;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1342;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 1345;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 44, this._ctx) ) {
				case 1:
					{
					this.state = 1343;
					this.match(TSqlParser.WITH);
					this.state = 1344;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.LOG || _la === TSqlParser.SETERROR)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1348;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 45, this._ctx) ) {
				case 1:
					{
					this.state = 1347;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1350;
				this.match(TSqlParser.RAISERROR);
				this.state = 1351;
				this.match(TSqlParser.DECIMAL);
				this.state = 1352;
				_localctx._formatstring = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 789)) & ~0x1F) === 0 && ((1 << (_la - 789)) & ((1 << (TSqlParser.DOUBLE_QUOTE_ID - 789)) | (1 << (TSqlParser.LOCAL_ID - 789)) | (1 << (TSqlParser.STRING - 789)))) !== 0))) {
					_localctx._formatstring = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 1353;
					this.match(TSqlParser.COMMA);
					this.state = 1354;
					_localctx._argument = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(((((_la - 792)) & ~0x1F) === 0 && ((1 << (_la - 792)) & ((1 << (TSqlParser.LOCAL_ID - 792)) | (1 << (TSqlParser.DECIMAL - 792)) | (1 << (TSqlParser.STRING - 792)))) !== 0))) {
						_localctx._argument = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 1359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public empty_statement(): Empty_statementContext {
		let _localctx: Empty_statementContext = new Empty_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, TSqlParser.RULE_empty_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1362;
			this.match(TSqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public another_statement(): Another_statementContext {
		let _localctx: Another_statementContext = new Another_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, TSqlParser.RULE_another_statement);
		try {
			this.state = 1377;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 48, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1364;
				this.declare_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1365;
				this.cursor_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1366;
				this.conversation_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1367;
				this.create_contract();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1368;
				this.create_queue();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1369;
				this.alter_queue();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1370;
				this.execute_statement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1371;
				this.message_statement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1372;
				this.security_statement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1373;
				this.set_statement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1374;
				this.transaction_statement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1375;
				this.use_statement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1376;
				this.setuser_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_application_role(): Alter_application_roleContext {
		let _localctx: Alter_application_roleContext = new Alter_application_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, TSqlParser.RULE_alter_application_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1379;
			this.match(TSqlParser.ALTER);
			this.state = 1380;
			this.match(TSqlParser.APPLICATION);
			this.state = 1381;
			this.match(TSqlParser.ROLE);
			this.state = 1382;
			_localctx._appliction_role = this.id();
			this.state = 1383;
			this.match(TSqlParser.WITH);
			this.state = 1390;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 50, this._ctx) ) {
			case 1:
				{
				this.state = 1385;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 1384;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 1387;
				this.match(TSqlParser.NAME);
				this.state = 1388;
				this.match(TSqlParser.EQUAL);
				this.state = 1389;
				_localctx._new_application_role_name = this.id();
				}
				break;
			}
			this.state = 1398;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
			case 1:
				{
				this.state = 1393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 1392;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 1395;
				this.match(TSqlParser.PASSWORD);
				this.state = 1396;
				this.match(TSqlParser.EQUAL);
				this.state = 1397;
				_localctx._application_role_password = this.match(TSqlParser.STRING);
				}
				break;
			}
			this.state = 1406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.DEFAULT_SCHEMA || _la === TSqlParser.COMMA) {
				{
				this.state = 1401;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 1400;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 1403;
				this.match(TSqlParser.DEFAULT_SCHEMA);
				this.state = 1404;
				this.match(TSqlParser.EQUAL);
				this.state = 1405;
				_localctx._app_role_default_schema = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_application_role(): Create_application_roleContext {
		let _localctx: Create_application_roleContext = new Create_application_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, TSqlParser.RULE_create_application_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1408;
			this.match(TSqlParser.CREATE);
			this.state = 1409;
			this.match(TSqlParser.APPLICATION);
			this.state = 1410;
			this.match(TSqlParser.ROLE);
			this.state = 1411;
			_localctx._appliction_role = this.id();
			this.state = 1412;
			this.match(TSqlParser.WITH);
			this.state = 1419;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 56, this._ctx) ) {
			case 1:
				{
				this.state = 1414;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 1413;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 1416;
				this.match(TSqlParser.PASSWORD);
				this.state = 1417;
				this.match(TSqlParser.EQUAL);
				this.state = 1418;
				_localctx._application_role_password = this.match(TSqlParser.STRING);
				}
				break;
			}
			this.state = 1427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.DEFAULT_SCHEMA || _la === TSqlParser.COMMA) {
				{
				this.state = 1422;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 1421;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 1424;
				this.match(TSqlParser.DEFAULT_SCHEMA);
				this.state = 1425;
				this.match(TSqlParser.EQUAL);
				this.state = 1426;
				_localctx._app_role_default_schema = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_aggregate(): Drop_aggregateContext {
		let _localctx: Drop_aggregateContext = new Drop_aggregateContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, TSqlParser.RULE_drop_aggregate);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1429;
			this.match(TSqlParser.DROP);
			this.state = 1430;
			this.match(TSqlParser.AGGREGATE);
			this.state = 1433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 1431;
				this.match(TSqlParser.IF);
				this.state = 1432;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 1438;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
			case 1:
				{
				this.state = 1435;
				_localctx._schema_name = this.id();
				this.state = 1436;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 1440;
			_localctx._aggregate_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_application_role(): Drop_application_roleContext {
		let _localctx: Drop_application_roleContext = new Drop_application_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, TSqlParser.RULE_drop_application_role);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1442;
			this.match(TSqlParser.DROP);
			this.state = 1443;
			this.match(TSqlParser.APPLICATION);
			this.state = 1444;
			this.match(TSqlParser.ROLE);
			this.state = 1445;
			_localctx._rolename = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly(): Alter_assemblyContext {
		let _localctx: Alter_assemblyContext = new Alter_assemblyContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, TSqlParser.RULE_alter_assembly);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1447;
			this.alter_assembly_start();
			this.state = 1448;
			_localctx._assembly_name = this.id();
			this.state = 1449;
			this.alter_assembly_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_start(): Alter_assembly_startContext {
		let _localctx: Alter_assembly_startContext = new Alter_assembly_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, TSqlParser.RULE_alter_assembly_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1451;
			this.match(TSqlParser.ALTER);
			this.state = 1452;
			this.match(TSqlParser.ASSEMBLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_clause(): Alter_assembly_clauseContext {
		let _localctx: Alter_assembly_clauseContext = new Alter_assembly_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, TSqlParser.RULE_alter_assembly_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 1454;
				this.alter_assembly_from_clause();
				}
			}

			this.state = 1458;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 62, this._ctx) ) {
			case 1:
				{
				this.state = 1457;
				this.alter_assembly_with_clause();
				}
				break;
			}
			this.state = 1461;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 63, this._ctx) ) {
			case 1:
				{
				this.state = 1460;
				this.alter_assembly_drop_clause();
				}
				break;
			}
			this.state = 1464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ADD) {
				{
				this.state = 1463;
				this.alter_assembly_add_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_from_clause(): Alter_assembly_from_clauseContext {
		let _localctx: Alter_assembly_from_clauseContext = new Alter_assembly_from_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, TSqlParser.RULE_alter_assembly_from_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1466;
			this.alter_assembly_from_clause_start();
			this.state = 1469;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DOUBLE_BACK_SLASH:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.STRING:
				{
				this.state = 1467;
				this.client_assembly_specifier();
				}
				break;
			case TSqlParser.AS:
				{
				this.state = 1468;
				this.alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_from_clause_start(): Alter_assembly_from_clause_startContext {
		let _localctx: Alter_assembly_from_clause_startContext = new Alter_assembly_from_clause_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, TSqlParser.RULE_alter_assembly_from_clause_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1471;
			this.match(TSqlParser.FROM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_drop_clause(): Alter_assembly_drop_clauseContext {
		let _localctx: Alter_assembly_drop_clauseContext = new Alter_assembly_drop_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, TSqlParser.RULE_alter_assembly_drop_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1473;
			this.alter_assembly_drop();
			this.state = 1474;
			this.alter_assembly_drop_multiple_files();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_drop_multiple_files(): Alter_assembly_drop_multiple_filesContext {
		let _localctx: Alter_assembly_drop_multiple_filesContext = new Alter_assembly_drop_multiple_filesContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, TSqlParser.RULE_alter_assembly_drop_multiple_files);
		try {
			this.state = 1478;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1476;
				this.match(TSqlParser.ALL);
				}
				break;
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.SINGLE_QUOTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1477;
				this.multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_drop(): Alter_assembly_dropContext {
		let _localctx: Alter_assembly_dropContext = new Alter_assembly_dropContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, TSqlParser.RULE_alter_assembly_drop);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1480;
			this.match(TSqlParser.DROP);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_add_clause(): Alter_assembly_add_clauseContext {
		let _localctx: Alter_assembly_add_clauseContext = new Alter_assembly_add_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, TSqlParser.RULE_alter_assembly_add_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1482;
			this.alter_asssembly_add_clause_start();
			this.state = 1483;
			this.alter_assembly_client_file_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_asssembly_add_clause_start(): Alter_asssembly_add_clause_startContext {
		let _localctx: Alter_asssembly_add_clause_startContext = new Alter_asssembly_add_clause_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, TSqlParser.RULE_alter_asssembly_add_clause_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1485;
			this.match(TSqlParser.ADD);
			this.state = 1486;
			this.match(TSqlParser.FILE);
			this.state = 1487;
			this.match(TSqlParser.FROM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_client_file_clause(): Alter_assembly_client_file_clauseContext {
		let _localctx: Alter_assembly_client_file_clauseContext = new Alter_assembly_client_file_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, TSqlParser.RULE_alter_assembly_client_file_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1489;
			this.alter_assembly_file_name();
			this.state = 1493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 1490;
				this.alter_assembly_as();
				this.state = 1491;
				this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_file_name(): Alter_assembly_file_nameContext {
		let _localctx: Alter_assembly_file_nameContext = new Alter_assembly_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, TSqlParser.RULE_alter_assembly_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1495;
			this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_file_bits(): Alter_assembly_file_bitsContext {
		let _localctx: Alter_assembly_file_bitsContext = new Alter_assembly_file_bitsContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, TSqlParser.RULE_alter_assembly_file_bits);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1497;
			this.alter_assembly_as();
			this.state = 1498;
			this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_as(): Alter_assembly_asContext {
		let _localctx: Alter_assembly_asContext = new Alter_assembly_asContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, TSqlParser.RULE_alter_assembly_as);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1500;
			this.match(TSqlParser.AS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_with_clause(): Alter_assembly_with_clauseContext {
		let _localctx: Alter_assembly_with_clauseContext = new Alter_assembly_with_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, TSqlParser.RULE_alter_assembly_with_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1502;
			this.alter_assembly_with();
			this.state = 1503;
			this.assembly_option(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_assembly_with(): Alter_assembly_withContext {
		let _localctx: Alter_assembly_withContext = new Alter_assembly_withContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, TSqlParser.RULE_alter_assembly_with);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1505;
			this.match(TSqlParser.WITH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public client_assembly_specifier(): Client_assembly_specifierContext {
		let _localctx: Client_assembly_specifierContext = new Client_assembly_specifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, TSqlParser.RULE_client_assembly_specifier);
		try {
			this.state = 1510;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DOUBLE_BACK_SLASH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1507;
				this.network_file_share();
				}
				break;
			case TSqlParser.DISK_DRIVE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1508;
				this.local_file();
				}
				break;
			case TSqlParser.STRING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1509;
				this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public assembly_option(): Assembly_optionContext;
	public assembly_option(_p: number): Assembly_optionContext;
	// @RuleVersion(0)
	public assembly_option(_p?: number): Assembly_optionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Assembly_optionContext = new Assembly_optionContext(this._ctx, _parentState);
		let _prevctx: Assembly_optionContext = _localctx;
		let _startState: number = 92;
		this.enterRecursionRule(_localctx, 92, TSqlParser.RULE_assembly_option, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1521;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.PERMISSION_SET:
				{
				this.state = 1513;
				this.match(TSqlParser.PERMISSION_SET);
				this.state = 1514;
				this.match(TSqlParser.EQUAL);
				this.state = 1515;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.EXTERNAL_ACCESS || _la === TSqlParser.SAFE || _la === TSqlParser.UNSAFE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.VISIBILITY:
				{
				this.state = 1516;
				this.match(TSqlParser.VISIBILITY);
				this.state = 1517;
				this.match(TSqlParser.EQUAL);
				this.state = 1518;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.UNCHECKED:
				{
				this.state = 1519;
				this.match(TSqlParser.UNCHECKED);
				this.state = 1520;
				this.match(TSqlParser.DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 1527;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, TSqlParser.RULE_assembly_option);
					this.state = 1523;
					if (!(this.precpred(this._ctx, 1))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 1524;
					this.match(TSqlParser.COMMA);
					}
					}
				}
				this.state = 1529;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public network_file_share(): Network_file_shareContext {
		let _localctx: Network_file_shareContext = new Network_file_shareContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, TSqlParser.RULE_network_file_share);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1530;
			this.network_file_start();
			this.state = 1531;
			this.network_computer();
			this.state = 1532;
			this.file_path();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public network_computer(): Network_computerContext {
		let _localctx: Network_computerContext = new Network_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, TSqlParser.RULE_network_computer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1534;
			_localctx._computer_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public network_file_start(): Network_file_startContext {
		let _localctx: Network_file_startContext = new Network_file_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, TSqlParser.RULE_network_file_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1536;
			this.match(TSqlParser.DOUBLE_BACK_SLASH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_path(): File_pathContext {
		let _localctx: File_pathContext = new File_pathContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, TSqlParser.RULE_file_path);
		try {
			this.state = 1542;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.BACKSLASH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1538;
				this.file_directory_path_separator();
				this.state = 1539;
				this.file_path();
				}
				break;
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1541;
				this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_directory_path_separator(): File_directory_path_separatorContext {
		let _localctx: File_directory_path_separatorContext = new File_directory_path_separatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, TSqlParser.RULE_file_directory_path_separator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1544;
			this.match(TSqlParser.BACKSLASH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public local_file(): Local_fileContext {
		let _localctx: Local_fileContext = new Local_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, TSqlParser.RULE_local_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1546;
			this.local_drive();
			this.state = 1547;
			this.file_path();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public local_drive(): Local_driveContext {
		let _localctx: Local_driveContext = new Local_driveContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, TSqlParser.RULE_local_drive);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1549;
			this.match(TSqlParser.DISK_DRIVE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_local_files(): Multiple_local_filesContext {
		let _localctx: Multiple_local_filesContext = new Multiple_local_filesContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, TSqlParser.RULE_multiple_local_files);
		try {
			this.state = 1557;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.SINGLE_QUOTE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1551;
				this.multiple_local_file_start();
				this.state = 1552;
				this.local_file();
				this.state = 1553;
				this.match(TSqlParser.SINGLE_QUOTE);
				this.state = 1554;
				this.match(TSqlParser.COMMA);
				}
				break;
			case TSqlParser.DISK_DRIVE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1556;
				this.local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_local_file_start(): Multiple_local_file_startContext {
		let _localctx: Multiple_local_file_startContext = new Multiple_local_file_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, TSqlParser.RULE_multiple_local_file_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1559;
			this.match(TSqlParser.SINGLE_QUOTE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_assembly(): Create_assemblyContext {
		let _localctx: Create_assemblyContext = new Create_assemblyContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, TSqlParser.RULE_create_assembly);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1561;
			this.match(TSqlParser.CREATE);
			this.state = 1562;
			this.match(TSqlParser.ASSEMBLY);
			this.state = 1563;
			_localctx._assembly_name = this.id();
			this.state = 1566;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 1564;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 1565;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 1568;
			this.match(TSqlParser.FROM);
			this.state = 1573;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1569;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1572;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.STRING || _la === TSqlParser.BINARY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1575;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 75, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1581;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 76, this._ctx) ) {
			case 1:
				{
				this.state = 1577;
				this.match(TSqlParser.WITH);
				this.state = 1578;
				this.match(TSqlParser.PERMISSION_SET);
				this.state = 1579;
				this.match(TSqlParser.EQUAL);
				this.state = 1580;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.EXTERNAL_ACCESS || _la === TSqlParser.SAFE || _la === TSqlParser.UNSAFE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_assembly(): Drop_assemblyContext {
		let _localctx: Drop_assemblyContext = new Drop_assemblyContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, TSqlParser.RULE_drop_assembly);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1583;
			this.match(TSqlParser.DROP);
			this.state = 1584;
			this.match(TSqlParser.ASSEMBLY);
			this.state = 1587;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 1585;
				this.match(TSqlParser.IF);
				this.state = 1586;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 1593;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1590;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1589;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1592;
					_localctx._assembly_name = this.id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1595;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1600;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 80, this._ctx) ) {
			case 1:
				{
				this.state = 1597;
				this.match(TSqlParser.WITH);
				this.state = 1598;
				this.match(TSqlParser.NO);
				this.state = 1599;
				this.match(TSqlParser.DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_asymmetric_key(): Alter_asymmetric_keyContext {
		let _localctx: Alter_asymmetric_keyContext = new Alter_asymmetric_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, TSqlParser.RULE_alter_asymmetric_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1602;
			this.alter_asymmetric_key_start();
			this.state = 1603;
			_localctx._Asym_Key_Name = this.id();
			this.state = 1608;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.WITH:
				{
				this.state = 1604;
				this.asymmetric_key_option();
				}
				break;
			case TSqlParser.REMOVE:
				{
				this.state = 1605;
				this.match(TSqlParser.REMOVE);
				this.state = 1606;
				this.match(TSqlParser.PRIVATE);
				this.state = 1607;
				this.match(TSqlParser.KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_asymmetric_key_start(): Alter_asymmetric_key_startContext {
		let _localctx: Alter_asymmetric_key_startContext = new Alter_asymmetric_key_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, TSqlParser.RULE_alter_asymmetric_key_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1610;
			this.match(TSqlParser.ALTER);
			this.state = 1611;
			this.match(TSqlParser.ASYMMETRIC);
			this.state = 1612;
			this.match(TSqlParser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public asymmetric_key_option(): Asymmetric_key_optionContext {
		let _localctx: Asymmetric_key_optionContext = new Asymmetric_key_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, TSqlParser.RULE_asymmetric_key_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1614;
			this.asymmetric_key_option_start();
			this.state = 1615;
			this.asymmetric_key_password_change_option();
			this.state = 1618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 1616;
				this.match(TSqlParser.COMMA);
				this.state = 1617;
				this.asymmetric_key_password_change_option();
				}
			}

			this.state = 1620;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public asymmetric_key_option_start(): Asymmetric_key_option_startContext {
		let _localctx: Asymmetric_key_option_startContext = new Asymmetric_key_option_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, TSqlParser.RULE_asymmetric_key_option_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1622;
			this.match(TSqlParser.WITH);
			this.state = 1623;
			this.match(TSqlParser.PRIVATE);
			this.state = 1624;
			this.match(TSqlParser.KEY);
			this.state = 1625;
			this.match(TSqlParser.LR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public asymmetric_key_password_change_option(): Asymmetric_key_password_change_optionContext {
		let _localctx: Asymmetric_key_password_change_optionContext = new Asymmetric_key_password_change_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, TSqlParser.RULE_asymmetric_key_password_change_option);
		try {
			this.state = 1637;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DECRYPTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1627;
				this.match(TSqlParser.DECRYPTION);
				this.state = 1628;
				this.match(TSqlParser.BY);
				this.state = 1629;
				this.match(TSqlParser.PASSWORD);
				this.state = 1630;
				this.match(TSqlParser.EQUAL);
				this.state = 1631;
				this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.ENCRYPTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1632;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 1633;
				this.match(TSqlParser.BY);
				this.state = 1634;
				this.match(TSqlParser.PASSWORD);
				this.state = 1635;
				this.match(TSqlParser.EQUAL);
				this.state = 1636;
				this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_asymmetric_key(): Create_asymmetric_keyContext {
		let _localctx: Create_asymmetric_keyContext = new Create_asymmetric_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, TSqlParser.RULE_create_asymmetric_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1639;
			this.match(TSqlParser.CREATE);
			this.state = 1640;
			this.match(TSqlParser.ASYMMETRIC);
			this.state = 1641;
			this.match(TSqlParser.KEY);
			this.state = 1642;
			_localctx._Asym_Key_Nam = this.id();
			this.state = 1645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 1643;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 1644;
				_localctx._database_principal_name = this.id();
				}
			}

			this.state = 1660;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 1647;
				this.match(TSqlParser.FROM);
				this.state = 1658;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.FILE:
					{
					this.state = 1648;
					this.match(TSqlParser.FILE);
					this.state = 1649;
					this.match(TSqlParser.EQUAL);
					this.state = 1650;
					this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.EXECUTABLE_FILE:
					{
					this.state = 1651;
					this.match(TSqlParser.EXECUTABLE_FILE);
					this.state = 1652;
					this.match(TSqlParser.EQUAL);
					this.state = 1653;
					this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.ASSEMBLY:
					{
					this.state = 1654;
					this.match(TSqlParser.ASSEMBLY);
					this.state = 1655;
					_localctx._Assembly_Name = this.id();
					}
					break;
				case TSqlParser.PROVIDER:
					{
					this.state = 1656;
					this.match(TSqlParser.PROVIDER);
					this.state = 1657;
					_localctx._Provider_Name = this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 1674;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 88, this._ctx) ) {
			case 1:
				{
				this.state = 1662;
				this.match(TSqlParser.WITH);
				this.state = 1672;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ALGORITHM:
					{
					this.state = 1663;
					this.match(TSqlParser.ALGORITHM);
					this.state = 1664;
					this.match(TSqlParser.EQUAL);
					this.state = 1665;
					_la = this._input.LA(1);
					if (!(((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (TSqlParser.RSA_512 - 290)) | (1 << (TSqlParser.RSA_1024 - 290)) | (1 << (TSqlParser.RSA_2048 - 290)) | (1 << (TSqlParser.RSA_3072 - 290)) | (1 << (TSqlParser.RSA_4096 - 290)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.PROVIDER_KEY_NAME:
					{
					this.state = 1666;
					this.match(TSqlParser.PROVIDER_KEY_NAME);
					this.state = 1667;
					this.match(TSqlParser.EQUAL);
					this.state = 1668;
					_localctx._provider_key_name = this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.CREATION_DISPOSITION:
					{
					this.state = 1669;
					this.match(TSqlParser.CREATION_DISPOSITION);
					this.state = 1670;
					this.match(TSqlParser.EQUAL);
					this.state = 1671;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.CREATE_NEW || _la === TSqlParser.OPEN_EXISTING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 1681;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 89, this._ctx) ) {
			case 1:
				{
				this.state = 1676;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 1677;
				this.match(TSqlParser.BY);
				this.state = 1678;
				this.match(TSqlParser.PASSWORD);
				this.state = 1679;
				this.match(TSqlParser.EQUAL);
				this.state = 1680;
				_localctx._asymmetric_key_password = this.match(TSqlParser.STRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_asymmetric_key(): Drop_asymmetric_keyContext {
		let _localctx: Drop_asymmetric_keyContext = new Drop_asymmetric_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, TSqlParser.RULE_drop_asymmetric_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1683;
			this.match(TSqlParser.DROP);
			this.state = 1684;
			this.match(TSqlParser.ASYMMETRIC);
			this.state = 1685;
			this.match(TSqlParser.KEY);
			this.state = 1686;
			_localctx._key_name = this.id();
			this.state = 1690;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1687;
				this.match(TSqlParser.REMOVE);
				this.state = 1688;
				this.match(TSqlParser.PROVIDER);
				this.state = 1689;
				this.match(TSqlParser.KEY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_authorization(): Alter_authorizationContext {
		let _localctx: Alter_authorizationContext = new Alter_authorizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, TSqlParser.RULE_alter_authorization);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1692;
			this.alter_authorization_start();
			this.state = 1696;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 91, this._ctx) ) {
			case 1:
				{
				this.state = 1693;
				this.class_type();
				this.state = 1694;
				this.colon_colon();
				}
				break;
			}
			this.state = 1698;
			_localctx._entity = this.entity_name();
			this.state = 1699;
			this.entity_to();
			this.state = 1700;
			this.authorization_grantee();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authorization_grantee(): Authorization_granteeContext {
		let _localctx: Authorization_granteeContext = new Authorization_granteeContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, TSqlParser.RULE_authorization_grantee);
		try {
			this.state = 1705;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1702;
				_localctx._principal_name = this.id();
				}
				break;
			case TSqlParser.SCHEMA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1703;
				this.match(TSqlParser.SCHEMA);
				this.state = 1704;
				this.match(TSqlParser.OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entity_to(): Entity_toContext {
		let _localctx: Entity_toContext = new Entity_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, TSqlParser.RULE_entity_to);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1707;
			this.match(TSqlParser.TO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colon_colon(): Colon_colonContext {
		let _localctx: Colon_colonContext = new Colon_colonContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, TSqlParser.RULE_colon_colon);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1709;
			this.match(TSqlParser.COLON);
			this.state = 1710;
			this.match(TSqlParser.COLON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_authorization_start(): Alter_authorization_startContext {
		let _localctx: Alter_authorization_startContext = new Alter_authorization_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, TSqlParser.RULE_alter_authorization_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1712;
			this.match(TSqlParser.ALTER);
			this.state = 1713;
			this.match(TSqlParser.AUTHORIZATION);
			this.state = 1714;
			this.match(TSqlParser.ON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_authorization_for_sql_database(): Alter_authorization_for_sql_databaseContext {
		let _localctx: Alter_authorization_for_sql_databaseContext = new Alter_authorization_for_sql_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, TSqlParser.RULE_alter_authorization_for_sql_database);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1716;
			this.alter_authorization_start();
			this.state = 1720;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
			case 1:
				{
				this.state = 1717;
				this.class_type_for_sql_database();
				this.state = 1718;
				this.colon_colon();
				}
				break;
			}
			this.state = 1722;
			_localctx._entity = this.entity_name();
			this.state = 1723;
			this.entity_to();
			this.state = 1724;
			this.authorization_grantee();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_authorization_for_azure_dw(): Alter_authorization_for_azure_dwContext {
		let _localctx: Alter_authorization_for_azure_dwContext = new Alter_authorization_for_azure_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, TSqlParser.RULE_alter_authorization_for_azure_dw);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1726;
			this.alter_authorization_start();
			this.state = 1730;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
			case 1:
				{
				this.state = 1727;
				this.class_type_for_azure_dw();
				this.state = 1728;
				this.colon_colon();
				}
				break;
			}
			this.state = 1732;
			_localctx._entity = this.entity_name_for_azure_dw();
			this.state = 1733;
			this.entity_to();
			this.state = 1734;
			this.authorization_grantee();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_authorization_for_parallel_dw(): Alter_authorization_for_parallel_dwContext {
		let _localctx: Alter_authorization_for_parallel_dwContext = new Alter_authorization_for_parallel_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, TSqlParser.RULE_alter_authorization_for_parallel_dw);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1736;
			this.alter_authorization_start();
			this.state = 1740;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
			case 1:
				{
				this.state = 1737;
				this.class_type_for_parallel_dw();
				this.state = 1738;
				this.colon_colon();
				}
				break;
			}
			this.state = 1742;
			_localctx._entity = this.entity_name_for_parallel_dw();
			this.state = 1743;
			this.entity_to();
			this.state = 1744;
			this.authorization_grantee();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_type(): Class_typeContext {
		let _localctx: Class_typeContext = new Class_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, TSqlParser.RULE_class_type);
		try {
			this.state = 1780;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 96, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1746;
				this.match(TSqlParser.OBJECT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1747;
				this.match(TSqlParser.ASSEMBLY);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1748;
				this.match(TSqlParser.ASYMMETRIC);
				this.state = 1749;
				this.match(TSqlParser.KEY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1750;
				this.match(TSqlParser.AVAILABILITY);
				this.state = 1751;
				this.match(TSqlParser.GROUP);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1752;
				this.match(TSqlParser.CERTIFICATE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1753;
				this.match(TSqlParser.CONTRACT);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1754;
				this.match(TSqlParser.TYPE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1755;
				this.match(TSqlParser.DATABASE);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1756;
				this.match(TSqlParser.ENDPOINT);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1757;
				this.match(TSqlParser.FULLTEXT);
				this.state = 1758;
				this.match(TSqlParser.CATALOG);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1759;
				this.match(TSqlParser.FULLTEXT);
				this.state = 1760;
				this.match(TSqlParser.STOPLIST);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1761;
				this.match(TSqlParser.MESSAGE);
				this.state = 1762;
				this.match(TSqlParser.TYPE);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1763;
				this.match(TSqlParser.REMOTE);
				this.state = 1764;
				this.match(TSqlParser.SERVICE);
				this.state = 1765;
				this.match(TSqlParser.BINDING);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1766;
				this.match(TSqlParser.ROLE);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1767;
				this.match(TSqlParser.ROUTE);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1768;
				this.match(TSqlParser.SCHEMA);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1769;
				this.match(TSqlParser.SEARCH);
				this.state = 1770;
				this.match(TSqlParser.PROPERTY);
				this.state = 1771;
				this.match(TSqlParser.LIST);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1772;
				this.match(TSqlParser.SERVER);
				this.state = 1773;
				this.match(TSqlParser.ROLE);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1774;
				this.match(TSqlParser.SERVICE);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1775;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 1776;
				this.match(TSqlParser.KEY);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1777;
				this.match(TSqlParser.XML);
				this.state = 1778;
				this.match(TSqlParser.SCHEMA);
				this.state = 1779;
				this.match(TSqlParser.COLLECTION);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_type_for_sql_database(): Class_type_for_sql_databaseContext {
		let _localctx: Class_type_for_sql_databaseContext = new Class_type_for_sql_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, TSqlParser.RULE_class_type_for_sql_database);
		try {
			this.state = 1803;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 97, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1782;
				this.match(TSqlParser.OBJECT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1783;
				this.match(TSqlParser.ASSEMBLY);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1784;
				this.match(TSqlParser.ASYMMETRIC);
				this.state = 1785;
				this.match(TSqlParser.KEY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1786;
				this.match(TSqlParser.CERTIFICATE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1787;
				this.match(TSqlParser.TYPE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1788;
				this.match(TSqlParser.DATABASE);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1789;
				this.match(TSqlParser.FULLTEXT);
				this.state = 1790;
				this.match(TSqlParser.CATALOG);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1791;
				this.match(TSqlParser.FULLTEXT);
				this.state = 1792;
				this.match(TSqlParser.STOPLIST);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1793;
				this.match(TSqlParser.ROLE);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1794;
				this.match(TSqlParser.SCHEMA);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1795;
				this.match(TSqlParser.SEARCH);
				this.state = 1796;
				this.match(TSqlParser.PROPERTY);
				this.state = 1797;
				this.match(TSqlParser.LIST);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1798;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 1799;
				this.match(TSqlParser.KEY);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1800;
				this.match(TSqlParser.XML);
				this.state = 1801;
				this.match(TSqlParser.SCHEMA);
				this.state = 1802;
				this.match(TSqlParser.COLLECTION);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_type_for_azure_dw(): Class_type_for_azure_dwContext {
		let _localctx: Class_type_for_azure_dwContext = new Class_type_for_azure_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, TSqlParser.RULE_class_type_for_azure_dw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1805;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.SCHEMA || _la === TSqlParser.OBJECT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_type_for_parallel_dw(): Class_type_for_parallel_dwContext {
		let _localctx: Class_type_for_parallel_dwContext = new Class_type_for_parallel_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, TSqlParser.RULE_class_type_for_parallel_dw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1807;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.DATABASE || _la === TSqlParser.SCHEMA || _la === TSqlParser.OBJECT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_availability_group(): Drop_availability_groupContext {
		let _localctx: Drop_availability_groupContext = new Drop_availability_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, TSqlParser.RULE_drop_availability_group);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1809;
			this.match(TSqlParser.DROP);
			this.state = 1810;
			this.match(TSqlParser.AVAILABILITY);
			this.state = 1811;
			this.match(TSqlParser.GROUP);
			this.state = 1812;
			_localctx._group_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_availability_group(): Alter_availability_groupContext {
		let _localctx: Alter_availability_groupContext = new Alter_availability_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, TSqlParser.RULE_alter_availability_group);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1814;
			this.alter_availability_group_start();
			this.state = 1815;
			this.alter_availability_group_options();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_availability_group_start(): Alter_availability_group_startContext {
		let _localctx: Alter_availability_group_startContext = new Alter_availability_group_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, TSqlParser.RULE_alter_availability_group_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1817;
			this.match(TSqlParser.ALTER);
			this.state = 1818;
			this.match(TSqlParser.AVAILABILITY);
			this.state = 1819;
			this.match(TSqlParser.GROUP);
			this.state = 1820;
			_localctx._group_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_availability_group_options(): Alter_availability_group_optionsContext {
		let _localctx: Alter_availability_group_optionsContext = new Alter_availability_group_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, TSqlParser.RULE_alter_availability_group_options);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2172;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 141, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1822;
				this.match(TSqlParser.SET);
				this.state = 1823;
				this.match(TSqlParser.LR_BRACKET);
				{
				this.state = 1839;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.AUTOMATED_BACKUP_PREFERENCE:
					{
					this.state = 1824;
					this.match(TSqlParser.AUTOMATED_BACKUP_PREFERENCE);
					this.state = 1825;
					this.match(TSqlParser.EQUAL);
					this.state = 1826;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.NONE || _la === TSqlParser.PRIMARY || _la === TSqlParser.SECONDARY || _la === TSqlParser.SECONDARY_ONLY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.FAILURE_CONDITION_LEVEL:
					{
					this.state = 1827;
					this.match(TSqlParser.FAILURE_CONDITION_LEVEL);
					this.state = 1828;
					this.match(TSqlParser.EQUAL);
					this.state = 1829;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
					{
					this.state = 1830;
					this.match(TSqlParser.HEALTH_CHECK_TIMEOUT);
					this.state = 1831;
					this.match(TSqlParser.EQUAL);
					this.state = 1832;
					_localctx._milliseconds = this.match(TSqlParser.DECIMAL);
					}
					break;
				case TSqlParser.DB_FAILOVER:
					{
					this.state = 1833;
					this.match(TSqlParser.DB_FAILOVER);
					this.state = 1834;
					this.match(TSqlParser.EQUAL);
					this.state = 1835;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					this.state = 1836;
					this.match(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					this.state = 1837;
					this.match(TSqlParser.EQUAL);
					this.state = 1838;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1841;
				this.match(TSqlParser.RR_BRACKET);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1842;
				this.match(TSqlParser.ADD);
				this.state = 1843;
				this.match(TSqlParser.DATABASE);
				this.state = 1844;
				_localctx._database_name = this.id();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1845;
				this.match(TSqlParser.REMOVE);
				this.state = 1846;
				this.match(TSqlParser.DATABASE);
				this.state = 1847;
				_localctx._database_name = this.id();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1848;
				this.match(TSqlParser.ADD);
				this.state = 1849;
				this.match(TSqlParser.REPLICA);
				this.state = 1850;
				this.match(TSqlParser.ON);
				this.state = 1851;
				_localctx._server_instance = this.match(TSqlParser.STRING);
				{
				this.state = 1852;
				this.match(TSqlParser.WITH);
				this.state = 1853;
				this.match(TSqlParser.LR_BRACKET);
				{
				this.state = 1857;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ENDPOINT_URL) {
					{
					this.state = 1854;
					this.match(TSqlParser.ENDPOINT_URL);
					this.state = 1855;
					this.match(TSqlParser.EQUAL);
					this.state = 1856;
					this.match(TSqlParser.STRING);
					}
				}

				this.state = 1865;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 101, this._ctx) ) {
				case 1:
					{
					this.state = 1860;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1859;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1862;
					this.match(TSqlParser.AVAILABILITY_MODE);
					this.state = 1863;
					this.match(TSqlParser.EQUAL);
					this.state = 1864;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ASYNCHRONOUS_COMMIT || _la === TSqlParser.SYNCHRONOUS_COMMIT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1873;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
				case 1:
					{
					this.state = 1868;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1867;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1870;
					this.match(TSqlParser.FAILOVER_MODE);
					this.state = 1871;
					this.match(TSqlParser.EQUAL);
					this.state = 1872;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.AUTOMATIC || _la === TSqlParser.MANUAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1881;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
				case 1:
					{
					this.state = 1876;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1875;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1878;
					this.match(TSqlParser.SEEDING_MODE);
					this.state = 1879;
					this.match(TSqlParser.EQUAL);
					this.state = 1880;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.AUTOMATIC || _la === TSqlParser.MANUAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1889;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 107, this._ctx) ) {
				case 1:
					{
					this.state = 1884;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1883;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1886;
					this.match(TSqlParser.BACKUP_PRIORITY);
					this.state = 1887;
					this.match(TSqlParser.EQUAL);
					this.state = 1888;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 1900;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 109, this._ctx) ) {
				case 1:
					{
					this.state = 1892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1891;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1894;
					this.match(TSqlParser.PRIMARY_ROLE);
					this.state = 1895;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 1896;
					this.match(TSqlParser.ALLOW_CONNECTIONS);
					this.state = 1897;
					this.match(TSqlParser.EQUAL);
					this.state = 1898;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ALL || _la === TSqlParser.READ_WRITE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1899;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 1911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.SECONDARY_ROLE || _la === TSqlParser.COMMA) {
					{
					this.state = 1903;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 1902;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 1905;
					this.match(TSqlParser.SECONDARY_ROLE);
					this.state = 1906;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 1907;
					this.match(TSqlParser.ALLOW_CONNECTIONS);
					this.state = 1908;
					this.match(TSqlParser.EQUAL);
					{
					this.state = 1909;
					this.match(TSqlParser.READ_ONLY);
					}
					this.state = 1910;
					this.match(TSqlParser.RR_BRACKET);
					}
				}

				}
				}
				this.state = 1913;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1914;
				this.match(TSqlParser.SECONDARY_ROLE);
				this.state = 1915;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 1924;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ALLOW_CONNECTIONS:
					{
					this.state = 1916;
					this.match(TSqlParser.ALLOW_CONNECTIONS);
					this.state = 1917;
					this.match(TSqlParser.EQUAL);
					this.state = 1918;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ALL || _la === TSqlParser.NO || _la === TSqlParser.READ_ONLY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.READ_ONLY_ROUTING_LIST:
					{
					this.state = 1919;
					this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
					this.state = 1920;
					this.match(TSqlParser.EQUAL);
					{
					this.state = 1921;
					this.match(TSqlParser.LR_BRACKET);
					{
					{
					this.state = 1922;
					this.match(TSqlParser.STRING);
					}
					}
					this.state = 1923;
					this.match(TSqlParser.RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1926;
				this.match(TSqlParser.PRIMARY_ROLE);
				this.state = 1927;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 1950;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ALLOW_CONNECTIONS:
					{
					this.state = 1928;
					this.match(TSqlParser.ALLOW_CONNECTIONS);
					this.state = 1929;
					this.match(TSqlParser.EQUAL);
					this.state = 1930;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ALL || _la === TSqlParser.NO || _la === TSqlParser.READ_ONLY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.READ_ONLY_ROUTING_LIST:
					{
					this.state = 1931;
					this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
					this.state = 1932;
					this.match(TSqlParser.EQUAL);
					{
					this.state = 1933;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 1944;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.STRING:
					case TSqlParser.RR_BRACKET:
					case TSqlParser.COMMA:
						{
						this.state = 1940;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TSqlParser.STRING || _la === TSqlParser.COMMA) {
							{
							{
							this.state = 1935;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 1934;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 1937;
							this.match(TSqlParser.STRING);
							}
							}
							this.state = 1942;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					case TSqlParser.NONE:
						{
						this.state = 1943;
						this.match(TSqlParser.NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1946;
					this.match(TSqlParser.RR_BRACKET);
					}
					}
					break;
				case TSqlParser.SESSION_TIMEOUT:
					{
					this.state = 1947;
					this.match(TSqlParser.SESSION_TIMEOUT);
					this.state = 1948;
					this.match(TSqlParser.EQUAL);
					this.state = 1949;
					_localctx._session_timeout = this.match(TSqlParser.DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1952;
				this.match(TSqlParser.MODIFY);
				this.state = 1953;
				this.match(TSqlParser.REPLICA);
				this.state = 1954;
				this.match(TSqlParser.ON);
				this.state = 1955;
				_localctx._server_instance = this.match(TSqlParser.STRING);
				this.state = 2013;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.WITH:
					{
					this.state = 1956;
					this.match(TSqlParser.WITH);
					this.state = 1957;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 1973;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.ENDPOINT_URL:
						{
						this.state = 1958;
						this.match(TSqlParser.ENDPOINT_URL);
						this.state = 1959;
						this.match(TSqlParser.EQUAL);
						this.state = 1960;
						this.match(TSqlParser.STRING);
						}
						break;
					case TSqlParser.AVAILABILITY_MODE:
						{
						this.state = 1961;
						this.match(TSqlParser.AVAILABILITY_MODE);
						this.state = 1962;
						this.match(TSqlParser.EQUAL);
						this.state = 1963;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.ASYNCHRONOUS_COMMIT || _la === TSqlParser.SYNCHRONOUS_COMMIT)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case TSqlParser.FAILOVER_MODE:
						{
						this.state = 1964;
						this.match(TSqlParser.FAILOVER_MODE);
						this.state = 1965;
						this.match(TSqlParser.EQUAL);
						this.state = 1966;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.AUTOMATIC || _la === TSqlParser.MANUAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case TSqlParser.SEEDING_MODE:
						{
						this.state = 1967;
						this.match(TSqlParser.SEEDING_MODE);
						this.state = 1968;
						this.match(TSqlParser.EQUAL);
						this.state = 1969;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.AUTOMATIC || _la === TSqlParser.MANUAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case TSqlParser.BACKUP_PRIORITY:
						{
						this.state = 1970;
						this.match(TSqlParser.BACKUP_PRIORITY);
						this.state = 1971;
						this.match(TSqlParser.EQUAL);
						this.state = 1972;
						this.match(TSqlParser.DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case TSqlParser.SECONDARY_ROLE:
					{
					this.state = 1975;
					this.match(TSqlParser.SECONDARY_ROLE);
					this.state = 1976;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 1985;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.ALLOW_CONNECTIONS:
						{
						this.state = 1977;
						this.match(TSqlParser.ALLOW_CONNECTIONS);
						this.state = 1978;
						this.match(TSqlParser.EQUAL);
						this.state = 1979;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.ALL || _la === TSqlParser.NO || _la === TSqlParser.READ_ONLY)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case TSqlParser.READ_ONLY_ROUTING_LIST:
						{
						this.state = 1980;
						this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
						this.state = 1981;
						this.match(TSqlParser.EQUAL);
						{
						this.state = 1982;
						this.match(TSqlParser.LR_BRACKET);
						{
						{
						this.state = 1983;
						this.match(TSqlParser.STRING);
						}
						}
						this.state = 1984;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case TSqlParser.PRIMARY_ROLE:
					{
					this.state = 1987;
					this.match(TSqlParser.PRIMARY_ROLE);
					this.state = 1988;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 2011;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.ALLOW_CONNECTIONS:
						{
						this.state = 1989;
						this.match(TSqlParser.ALLOW_CONNECTIONS);
						this.state = 1990;
						this.match(TSqlParser.EQUAL);
						this.state = 1991;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.ALL || _la === TSqlParser.NO || _la === TSqlParser.READ_ONLY)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case TSqlParser.READ_ONLY_ROUTING_LIST:
						{
						this.state = 1992;
						this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
						this.state = 1993;
						this.match(TSqlParser.EQUAL);
						{
						this.state = 1994;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 2005;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.STRING:
						case TSqlParser.RR_BRACKET:
						case TSqlParser.COMMA:
							{
							this.state = 2001;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === TSqlParser.STRING || _la === TSqlParser.COMMA) {
								{
								{
								this.state = 1996;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 1995;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 1998;
								this.match(TSqlParser.STRING);
								}
								}
								this.state = 2003;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							}
							break;
						case TSqlParser.NONE:
							{
							this.state = 2004;
							this.match(TSqlParser.NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 2007;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						break;
					case TSqlParser.SESSION_TIMEOUT:
						{
						this.state = 2008;
						this.match(TSqlParser.SESSION_TIMEOUT);
						this.state = 2009;
						this.match(TSqlParser.EQUAL);
						this.state = 2010;
						_localctx._session_timeout = this.match(TSqlParser.DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2015;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2016;
				this.match(TSqlParser.REMOVE);
				this.state = 2017;
				this.match(TSqlParser.REPLICA);
				this.state = 2018;
				this.match(TSqlParser.ON);
				this.state = 2019;
				this.match(TSqlParser.STRING);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2020;
				this.match(TSqlParser.JOIN);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2021;
				this.match(TSqlParser.JOIN);
				this.state = 2022;
				this.match(TSqlParser.AVAILABILITY);
				this.state = 2023;
				this.match(TSqlParser.GROUP);
				this.state = 2024;
				this.match(TSqlParser.ON);
				this.state = 2047;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2026;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 2025;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 2028;
						_localctx._ag_name = this.match(TSqlParser.STRING);
						this.state = 2029;
						this.match(TSqlParser.WITH);
						this.state = 2030;
						this.match(TSqlParser.LR_BRACKET);
						{
						this.state = 2031;
						this.match(TSqlParser.LISTENER_URL);
						this.state = 2032;
						this.match(TSqlParser.EQUAL);
						this.state = 2033;
						this.match(TSqlParser.STRING);
						this.state = 2034;
						this.match(TSqlParser.COMMA);
						this.state = 2035;
						this.match(TSqlParser.AVAILABILITY_MODE);
						this.state = 2036;
						this.match(TSqlParser.EQUAL);
						this.state = 2037;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.ASYNCHRONOUS_COMMIT || _la === TSqlParser.SYNCHRONOUS_COMMIT)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 2038;
						this.match(TSqlParser.COMMA);
						this.state = 2039;
						this.match(TSqlParser.FAILOVER_MODE);
						this.state = 2040;
						this.match(TSqlParser.EQUAL);
						this.state = 2041;
						this.match(TSqlParser.MANUAL);
						this.state = 2042;
						this.match(TSqlParser.COMMA);
						this.state = 2043;
						this.match(TSqlParser.SEEDING_MODE);
						this.state = 2044;
						this.match(TSqlParser.EQUAL);
						this.state = 2045;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.AUTOMATIC || _la === TSqlParser.MANUAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 2046;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2049;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 125, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2051;
				this.match(TSqlParser.MODIFY);
				this.state = 2052;
				this.match(TSqlParser.AVAILABILITY);
				this.state = 2053;
				this.match(TSqlParser.GROUP);
				this.state = 2054;
				this.match(TSqlParser.ON);
				this.state = 2089;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2056;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 2055;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 2058;
						_localctx._ag_name_modified = this.match(TSqlParser.STRING);
						this.state = 2059;
						this.match(TSqlParser.WITH);
						this.state = 2060;
						this.match(TSqlParser.LR_BRACKET);
						{
						this.state = 2061;
						this.match(TSqlParser.LISTENER_URL);
						this.state = 2062;
						this.match(TSqlParser.EQUAL);
						this.state = 2063;
						this.match(TSqlParser.STRING);
						this.state = 2070;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 128, this._ctx) ) {
						case 1:
							{
							this.state = 2065;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 2064;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 2067;
							this.match(TSqlParser.AVAILABILITY_MODE);
							this.state = 2068;
							this.match(TSqlParser.EQUAL);
							this.state = 2069;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.ASYNCHRONOUS_COMMIT || _la === TSqlParser.SYNCHRONOUS_COMMIT)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;
						}
						this.state = 2078;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 130, this._ctx) ) {
						case 1:
							{
							this.state = 2073;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 2072;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 2075;
							this.match(TSqlParser.FAILOVER_MODE);
							this.state = 2076;
							this.match(TSqlParser.EQUAL);
							this.state = 2077;
							this.match(TSqlParser.MANUAL);
							}
							break;
						}
						this.state = 2086;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.SEEDING_MODE || _la === TSqlParser.COMMA) {
							{
							this.state = 2081;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 2080;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 2083;
							this.match(TSqlParser.SEEDING_MODE);
							this.state = 2084;
							this.match(TSqlParser.EQUAL);
							this.state = 2085;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.AUTOMATIC || _la === TSqlParser.MANUAL)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
						}

						this.state = 2088;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2091;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2093;
				this.match(TSqlParser.GRANT);
				this.state = 2094;
				this.match(TSqlParser.CREATE);
				this.state = 2095;
				this.match(TSqlParser.ANY);
				this.state = 2096;
				this.match(TSqlParser.DATABASE);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2097;
				this.match(TSqlParser.DENY);
				this.state = 2098;
				this.match(TSqlParser.CREATE);
				this.state = 2099;
				this.match(TSqlParser.ANY);
				this.state = 2100;
				this.match(TSqlParser.DATABASE);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2101;
				this.match(TSqlParser.FAILOVER);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2102;
				this.match(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2103;
				this.match(TSqlParser.ADD);
				this.state = 2104;
				this.match(TSqlParser.LISTENER);
				this.state = 2105;
				_localctx._listener_name = this.match(TSqlParser.STRING);
				this.state = 2106;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 2140;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
				case 1:
					{
					this.state = 2107;
					this.match(TSqlParser.WITH);
					this.state = 2108;
					this.match(TSqlParser.DHCP);
					{
					this.state = 2109;
					this.match(TSqlParser.ON);
					this.state = 2110;
					this.match(TSqlParser.LR_BRACKET);
					{
					this.state = 2111;
					this.match(TSqlParser.IPV4_ADDR);
					this.state = 2112;
					this.match(TSqlParser.IPV4_ADDR);
					}
					this.state = 2114;
					this.match(TSqlParser.RR_BRACKET);
					}
					}
					break;

				case 2:
					{
					this.state = 2115;
					this.match(TSqlParser.WITH);
					this.state = 2116;
					this.match(TSqlParser.IP);
					this.state = 2117;
					this.match(TSqlParser.LR_BRACKET);
					{
					this.state = 2129;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2119;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 2118;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 2121;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 2126;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.IPV4_ADDR:
							{
							this.state = 2122;
							this.match(TSqlParser.IPV4_ADDR);
							this.state = 2123;
							this.match(TSqlParser.COMMA);
							this.state = 2124;
							this.match(TSqlParser.IPV4_ADDR);
							}
							break;
						case TSqlParser.IPV6_ADDR:
							{
							this.state = 2125;
							this.match(TSqlParser.IPV6_ADDR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 2128;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						this.state = 2131;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === TSqlParser.LR_BRACKET || _la === TSqlParser.COMMA);
					this.state = 2133;
					this.match(TSqlParser.RR_BRACKET);
					this.state = 2138;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2134;
						this.match(TSqlParser.COMMA);
						this.state = 2135;
						this.match(TSqlParser.PORT);
						this.state = 2136;
						this.match(TSqlParser.EQUAL);
						this.state = 2137;
						this.match(TSqlParser.DECIMAL);
						}
					}

					}
					}
					break;
				}
				this.state = 2142;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2143;
				this.match(TSqlParser.MODIFY);
				this.state = 2144;
				this.match(TSqlParser.LISTENER);
				this.state = 2157;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ADD:
					{
					this.state = 2145;
					this.match(TSqlParser.ADD);
					this.state = 2146;
					this.match(TSqlParser.IP);
					this.state = 2147;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 2151;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.IPV4_ADDR:
						{
						this.state = 2148;
						this.match(TSqlParser.IPV4_ADDR);
						this.state = 2149;
						this.match(TSqlParser.IPV4_ADDR);
						}
						break;
					case TSqlParser.IPV6_ADDR:
						{
						this.state = 2150;
						this.match(TSqlParser.IPV6_ADDR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2153;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				case TSqlParser.PORT:
					{
					this.state = 2154;
					this.match(TSqlParser.PORT);
					this.state = 2155;
					this.match(TSqlParser.EQUAL);
					this.state = 2156;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2159;
				this.match(TSqlParser.RESTART);
				this.state = 2160;
				this.match(TSqlParser.LISTENER);
				this.state = 2161;
				this.match(TSqlParser.STRING);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2162;
				this.match(TSqlParser.REMOVE);
				this.state = 2163;
				this.match(TSqlParser.LISTENER);
				this.state = 2164;
				this.match(TSqlParser.STRING);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2165;
				this.match(TSqlParser.OFFLINE);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2166;
				this.match(TSqlParser.WITH);
				this.state = 2167;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 2168;
				this.match(TSqlParser.DTC_SUPPORT);
				this.state = 2169;
				this.match(TSqlParser.EQUAL);
				this.state = 2170;
				this.match(TSqlParser.PER_DB);
				this.state = 2171;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_broker_priority(): Create_or_alter_broker_priorityContext {
		let _localctx: Create_or_alter_broker_priorityContext = new Create_or_alter_broker_priorityContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, TSqlParser.RULE_create_or_alter_broker_priority);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2174;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ALTER || _la === TSqlParser.CREATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2175;
			this.match(TSqlParser.BROKER);
			this.state = 2176;
			this.match(TSqlParser.PRIORITY);
			this.state = 2177;
			_localctx._ConversationPriorityName = this.id();
			this.state = 2178;
			this.match(TSqlParser.FOR);
			this.state = 2179;
			this.match(TSqlParser.CONVERSATION);
			this.state = 2180;
			this.match(TSqlParser.SET);
			this.state = 2181;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 2191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONTRACT_NAME) {
				{
				this.state = 2182;
				this.match(TSqlParser.CONTRACT_NAME);
				this.state = 2183;
				this.match(TSqlParser.EQUAL);
				this.state = 2186;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					{
					this.state = 2184;
					this.id();
					}
					}
					break;
				case TSqlParser.ANY:
					{
					this.state = 2185;
					this.match(TSqlParser.ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2189;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2188;
					this.match(TSqlParser.COMMA);
					}
				}

				}
			}

			this.state = 2205;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LOCAL_SERVICE_NAME) {
				{
				this.state = 2193;
				this.match(TSqlParser.LOCAL_SERVICE_NAME);
				this.state = 2194;
				this.match(TSqlParser.EQUAL);
				this.state = 2200;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.DOUBLE_FORWARD_SLASH:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 2196;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.DOUBLE_FORWARD_SLASH) {
						{
						this.state = 2195;
						this.match(TSqlParser.DOUBLE_FORWARD_SLASH);
						}
					}

					this.state = 2198;
					this.id();
					}
					break;
				case TSqlParser.ANY:
					{
					this.state = 2199;
					this.match(TSqlParser.ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2202;
					this.match(TSqlParser.COMMA);
					}
				}

				}
			}

			this.state = 2216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.REMOTE_SERVICE_NAME) {
				{
				this.state = 2207;
				this.match(TSqlParser.REMOTE_SERVICE_NAME);
				this.state = 2208;
				this.match(TSqlParser.EQUAL);
				this.state = 2211;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.STRING:
					{
					this.state = 2209;
					_localctx._RemoteServiceName = this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.ANY:
					{
					this.state = 2210;
					this.match(TSqlParser.ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2213;
					this.match(TSqlParser.COMMA);
					}
				}

				}
			}

			this.state = 2224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.PRIORITY_LEVEL) {
				{
				this.state = 2218;
				this.match(TSqlParser.PRIORITY_LEVEL);
				this.state = 2219;
				this.match(TSqlParser.EQUAL);
				this.state = 2222;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.DECIMAL:
					{
					this.state = 2220;
					_localctx._PriorityValue = this.match(TSqlParser.DECIMAL);
					}
					break;
				case TSqlParser.DEFAULT:
					{
					this.state = 2221;
					this.match(TSqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 2226;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_broker_priority(): Drop_broker_priorityContext {
		let _localctx: Drop_broker_priorityContext = new Drop_broker_priorityContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, TSqlParser.RULE_drop_broker_priority);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2228;
			this.match(TSqlParser.DROP);
			this.state = 2229;
			this.match(TSqlParser.BROKER);
			this.state = 2230;
			this.match(TSqlParser.PRIORITY);
			this.state = 2231;
			_localctx._ConversationPriorityName = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_certificate(): Alter_certificateContext {
		let _localctx: Alter_certificateContext = new Alter_certificateContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, TSqlParser.RULE_alter_certificate);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2233;
			this.match(TSqlParser.ALTER);
			this.state = 2234;
			this.match(TSqlParser.CERTIFICATE);
			this.state = 2235;
			_localctx._certificate_name = this.id();
			this.state = 2275;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				{
				this.state = 2236;
				this.match(TSqlParser.REMOVE);
				this.state = 2237;
				this.match(TSqlParser.PRIVATE_KEY);
				}
				break;

			case 2:
				{
				this.state = 2238;
				this.match(TSqlParser.WITH);
				this.state = 2239;
				this.match(TSqlParser.PRIVATE);
				this.state = 2240;
				this.match(TSqlParser.KEY);
				this.state = 2241;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 2264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 2264;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.FILE:
						{
						this.state = 2242;
						this.match(TSqlParser.FILE);
						this.state = 2243;
						this.match(TSqlParser.EQUAL);
						this.state = 2244;
						this.match(TSqlParser.STRING);
						this.state = 2246;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 2245;
							this.match(TSqlParser.COMMA);
							}
						}

						}
						break;
					case TSqlParser.DECRYPTION:
						{
						this.state = 2248;
						this.match(TSqlParser.DECRYPTION);
						this.state = 2249;
						this.match(TSqlParser.BY);
						this.state = 2250;
						this.match(TSqlParser.PASSWORD);
						this.state = 2251;
						this.match(TSqlParser.EQUAL);
						this.state = 2252;
						this.match(TSqlParser.STRING);
						this.state = 2254;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 2253;
							this.match(TSqlParser.COMMA);
							}
						}

						}
						break;
					case TSqlParser.ENCRYPTION:
						{
						this.state = 2256;
						this.match(TSqlParser.ENCRYPTION);
						this.state = 2257;
						this.match(TSqlParser.BY);
						this.state = 2258;
						this.match(TSqlParser.PASSWORD);
						this.state = 2259;
						this.match(TSqlParser.EQUAL);
						this.state = 2260;
						this.match(TSqlParser.STRING);
						this.state = 2262;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 2261;
							this.match(TSqlParser.COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 2266;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.FILE || _la === TSqlParser.DECRYPTION || _la === TSqlParser.ENCRYPTION);
				this.state = 2268;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 3:
				{
				this.state = 2269;
				this.match(TSqlParser.WITH);
				this.state = 2270;
				this.match(TSqlParser.ACTIVE);
				this.state = 2271;
				this.match(TSqlParser.FOR);
				this.state = 2272;
				this.match(TSqlParser.BEGIN_DIALOG);
				this.state = 2273;
				this.match(TSqlParser.EQUAL);
				this.state = 2274;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_column_encryption_key(): Alter_column_encryption_keyContext {
		let _localctx: Alter_column_encryption_keyContext = new Alter_column_encryption_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, TSqlParser.RULE_alter_column_encryption_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2277;
			this.match(TSqlParser.ALTER);
			this.state = 2278;
			this.match(TSqlParser.COLUMN);
			this.state = 2279;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 2280;
			this.match(TSqlParser.KEY);
			this.state = 2281;
			_localctx._column_encryption_key = this.id();
			this.state = 2282;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2283;
			this.match(TSqlParser.VALUE);
			this.state = 2284;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 2285;
			this.match(TSqlParser.COLUMN_MASTER_KEY);
			this.state = 2286;
			this.match(TSqlParser.EQUAL);
			this.state = 2287;
			_localctx._column_master_key_name = this.id();
			this.state = 2296;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 2288;
				this.match(TSqlParser.COMMA);
				this.state = 2289;
				this.match(TSqlParser.ALGORITHM);
				this.state = 2290;
				this.match(TSqlParser.EQUAL);
				this.state = 2291;
				_localctx._algorithm_name = this.match(TSqlParser.STRING);
				this.state = 2292;
				this.match(TSqlParser.COMMA);
				this.state = 2293;
				this.match(TSqlParser.ENCRYPTED_VALUE);
				this.state = 2294;
				this.match(TSqlParser.EQUAL);
				this.state = 2295;
				this.match(TSqlParser.BINARY);
				}
			}

			this.state = 2298;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_column_encryption_key(): Create_column_encryption_keyContext {
		let _localctx: Create_column_encryption_keyContext = new Create_column_encryption_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, TSqlParser.RULE_create_column_encryption_key);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2300;
			this.match(TSqlParser.CREATE);
			this.state = 2301;
			this.match(TSqlParser.COLUMN);
			this.state = 2302;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 2303;
			this.match(TSqlParser.KEY);
			this.state = 2304;
			_localctx._column_encryption_key = this.id();
			this.state = 2305;
			this.match(TSqlParser.WITH);
			this.state = 2306;
			this.match(TSqlParser.VALUES);
			this.state = 2326;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2307;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 2309;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2308;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2311;
					this.match(TSqlParser.COLUMN_MASTER_KEY);
					this.state = 2312;
					this.match(TSqlParser.EQUAL);
					this.state = 2313;
					_localctx._column_master_key_name = this.id();
					this.state = 2314;
					this.match(TSqlParser.COMMA);
					this.state = 2315;
					this.match(TSqlParser.ALGORITHM);
					this.state = 2316;
					this.match(TSqlParser.EQUAL);
					this.state = 2317;
					_localctx._algorithm_name = this.match(TSqlParser.STRING);
					this.state = 2318;
					this.match(TSqlParser.COMMA);
					this.state = 2319;
					this.match(TSqlParser.ENCRYPTED_VALUE);
					this.state = 2320;
					this.match(TSqlParser.EQUAL);
					this.state = 2321;
					_localctx._encrypted_value = this.match(TSqlParser.BINARY);
					this.state = 2322;
					this.match(TSqlParser.RR_BRACKET);
					this.state = 2324;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2323;
						this.match(TSqlParser.COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2328;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_certificate(): Drop_certificateContext {
		let _localctx: Drop_certificateContext = new Drop_certificateContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, TSqlParser.RULE_drop_certificate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2330;
			this.match(TSqlParser.DROP);
			this.state = 2331;
			this.match(TSqlParser.CERTIFICATE);
			this.state = 2332;
			_localctx._certificate_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_column_encryption_key(): Drop_column_encryption_keyContext {
		let _localctx: Drop_column_encryption_keyContext = new Drop_column_encryption_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, TSqlParser.RULE_drop_column_encryption_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2334;
			this.match(TSqlParser.DROP);
			this.state = 2335;
			this.match(TSqlParser.COLUMN);
			this.state = 2336;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 2337;
			this.match(TSqlParser.KEY);
			this.state = 2338;
			_localctx._key_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_column_master_key(): Drop_column_master_keyContext {
		let _localctx: Drop_column_master_keyContext = new Drop_column_master_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, TSqlParser.RULE_drop_column_master_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2340;
			this.match(TSqlParser.DROP);
			this.state = 2341;
			this.match(TSqlParser.COLUMN);
			this.state = 2342;
			this.match(TSqlParser.MASTER);
			this.state = 2343;
			this.match(TSqlParser.KEY);
			this.state = 2344;
			_localctx._key_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_contract(): Drop_contractContext {
		let _localctx: Drop_contractContext = new Drop_contractContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, TSqlParser.RULE_drop_contract);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2346;
			this.match(TSqlParser.DROP);
			this.state = 2347;
			this.match(TSqlParser.CONTRACT);
			this.state = 2348;
			_localctx._dropped_contract_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_credential(): Drop_credentialContext {
		let _localctx: Drop_credentialContext = new Drop_credentialContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, TSqlParser.RULE_drop_credential);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2350;
			this.match(TSqlParser.DROP);
			this.state = 2351;
			this.match(TSqlParser.CREDENTIAL);
			this.state = 2352;
			_localctx._credential_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_cryptograhic_provider(): Drop_cryptograhic_providerContext {
		let _localctx: Drop_cryptograhic_providerContext = new Drop_cryptograhic_providerContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, TSqlParser.RULE_drop_cryptograhic_provider);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2354;
			this.match(TSqlParser.DROP);
			this.state = 2355;
			this.match(TSqlParser.CRYPTOGRAPHIC);
			this.state = 2356;
			this.match(TSqlParser.PROVIDER);
			this.state = 2357;
			_localctx._provider_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_database(): Drop_databaseContext {
		let _localctx: Drop_databaseContext = new Drop_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, TSqlParser.RULE_drop_database);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2359;
			this.match(TSqlParser.DROP);
			this.state = 2360;
			this.match(TSqlParser.DATABASE);
			this.state = 2363;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2361;
				this.match(TSqlParser.IF);
				this.state = 2362;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 2369;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2366;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2365;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2368;
					_localctx._database_name_or_database_snapshot_name = this.id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2371;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_database_audit_specification(): Drop_database_audit_specificationContext {
		let _localctx: Drop_database_audit_specificationContext = new Drop_database_audit_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, TSqlParser.RULE_drop_database_audit_specification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2373;
			this.match(TSqlParser.DROP);
			this.state = 2374;
			this.match(TSqlParser.DATABASE);
			this.state = 2375;
			this.match(TSqlParser.AUDIT);
			this.state = 2376;
			this.match(TSqlParser.SPECIFICATION);
			this.state = 2377;
			_localctx._audit_specification_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_database_scoped_credential(): Drop_database_scoped_credentialContext {
		let _localctx: Drop_database_scoped_credentialContext = new Drop_database_scoped_credentialContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, TSqlParser.RULE_drop_database_scoped_credential);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2379;
			this.match(TSqlParser.DROP);
			this.state = 2380;
			this.match(TSqlParser.DATABASE);
			this.state = 2381;
			this.match(TSqlParser.SCOPED);
			this.state = 2382;
			this.match(TSqlParser.CREDENTIAL);
			this.state = 2383;
			_localctx._credential_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_default(): Drop_defaultContext {
		let _localctx: Drop_defaultContext = new Drop_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, TSqlParser.RULE_drop_default);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2385;
			this.match(TSqlParser.DROP);
			this.state = 2386;
			this.match(TSqlParser.DEFAULT);
			this.state = 2389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2387;
				this.match(TSqlParser.IF);
				this.state = 2388;
				this.match(TSqlParser.EXISTS);
				}
			}

			{
			this.state = 2392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 2391;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 2397;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
			case 1:
				{
				this.state = 2394;
				_localctx._schema_name = this.id();
				this.state = 2395;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2399;
			_localctx._default_name = this.id();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_endpoint(): Drop_endpointContext {
		let _localctx: Drop_endpointContext = new Drop_endpointContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, TSqlParser.RULE_drop_endpoint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2401;
			this.match(TSqlParser.DROP);
			this.state = 2402;
			this.match(TSqlParser.ENDPOINT);
			this.state = 2403;
			_localctx._endPointName = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_external_data_source(): Drop_external_data_sourceContext {
		let _localctx: Drop_external_data_sourceContext = new Drop_external_data_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, TSqlParser.RULE_drop_external_data_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2405;
			this.match(TSqlParser.DROP);
			this.state = 2406;
			this.match(TSqlParser.EXTERNAL);
			this.state = 2407;
			this.match(TSqlParser.DATA);
			this.state = 2408;
			this.match(TSqlParser.SOURCE);
			this.state = 2409;
			_localctx._external_data_source_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_external_file_format(): Drop_external_file_formatContext {
		let _localctx: Drop_external_file_formatContext = new Drop_external_file_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, TSqlParser.RULE_drop_external_file_format);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2411;
			this.match(TSqlParser.DROP);
			this.state = 2412;
			this.match(TSqlParser.EXTERNAL);
			this.state = 2413;
			this.match(TSqlParser.FILE);
			this.state = 2414;
			this.match(TSqlParser.FORMAT);
			this.state = 2415;
			_localctx._external_file_format_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_external_library(): Drop_external_libraryContext {
		let _localctx: Drop_external_libraryContext = new Drop_external_libraryContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, TSqlParser.RULE_drop_external_library);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2417;
			this.match(TSqlParser.DROP);
			this.state = 2418;
			this.match(TSqlParser.EXTERNAL);
			this.state = 2419;
			this.match(TSqlParser.LIBRARY);
			this.state = 2420;
			_localctx._library_name = this.id();
			this.state = 2423;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 2421;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 2422;
				_localctx._owner_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_external_resource_pool(): Drop_external_resource_poolContext {
		let _localctx: Drop_external_resource_poolContext = new Drop_external_resource_poolContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, TSqlParser.RULE_drop_external_resource_pool);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2425;
			this.match(TSqlParser.DROP);
			this.state = 2426;
			this.match(TSqlParser.EXTERNAL);
			this.state = 2427;
			this.match(TSqlParser.RESOURCE);
			this.state = 2428;
			this.match(TSqlParser.POOL);
			this.state = 2429;
			_localctx._pool_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_external_table(): Drop_external_tableContext {
		let _localctx: Drop_external_tableContext = new Drop_external_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, TSqlParser.RULE_drop_external_table);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2431;
			this.match(TSqlParser.DROP);
			this.state = 2432;
			this.match(TSqlParser.EXTERNAL);
			this.state = 2433;
			this.match(TSqlParser.TABLE);
			this.state = 2437;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				{
				this.state = 2434;
				_localctx._database_name = this.id();
				this.state = 2435;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				{
				this.state = 2439;
				_localctx._schema_name = this.id();
				this.state = 2440;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2444;
			_localctx._table = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_event_notifications(): Drop_event_notificationsContext {
		let _localctx: Drop_event_notificationsContext = new Drop_event_notificationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, TSqlParser.RULE_drop_event_notifications);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2446;
			this.match(TSqlParser.DROP);
			this.state = 2447;
			this.match(TSqlParser.EVENT);
			this.state = 2448;
			this.match(TSqlParser.NOTIFICATION);
			this.state = 2453;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2449;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 2452;
				_localctx._notification_name = this.id();
				}
				}
				this.state = 2455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
			this.state = 2457;
			this.match(TSqlParser.ON);
			this.state = 2462;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.SERVER:
				{
				this.state = 2458;
				this.match(TSqlParser.SERVER);
				}
				break;
			case TSqlParser.DATABASE:
				{
				this.state = 2459;
				this.match(TSqlParser.DATABASE);
				}
				break;
			case TSqlParser.QUEUE:
				{
				this.state = 2460;
				this.match(TSqlParser.QUEUE);
				this.state = 2461;
				_localctx._queue_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_event_session(): Drop_event_sessionContext {
		let _localctx: Drop_event_sessionContext = new Drop_event_sessionContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, TSqlParser.RULE_drop_event_session);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2464;
			this.match(TSqlParser.DROP);
			this.state = 2465;
			this.match(TSqlParser.EVENT);
			this.state = 2466;
			this.match(TSqlParser.SESSION);
			this.state = 2467;
			_localctx._event_session_name = this.id();
			this.state = 2468;
			this.match(TSqlParser.ON);
			this.state = 2469;
			this.match(TSqlParser.SERVER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_fulltext_catalog(): Drop_fulltext_catalogContext {
		let _localctx: Drop_fulltext_catalogContext = new Drop_fulltext_catalogContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, TSqlParser.RULE_drop_fulltext_catalog);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2471;
			this.match(TSqlParser.DROP);
			this.state = 2472;
			this.match(TSqlParser.FULLTEXT);
			this.state = 2473;
			this.match(TSqlParser.CATALOG);
			this.state = 2474;
			_localctx._catalog_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_fulltext_index(): Drop_fulltext_indexContext {
		let _localctx: Drop_fulltext_indexContext = new Drop_fulltext_indexContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, TSqlParser.RULE_drop_fulltext_index);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2476;
			this.match(TSqlParser.DROP);
			this.state = 2477;
			this.match(TSqlParser.FULLTEXT);
			this.state = 2478;
			this.match(TSqlParser.INDEX);
			this.state = 2479;
			this.match(TSqlParser.ON);
			this.state = 2483;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 176, this._ctx) ) {
			case 1:
				{
				this.state = 2480;
				_localctx._schema = this.id();
				this.state = 2481;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2485;
			_localctx._table = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_fulltext_stoplist(): Drop_fulltext_stoplistContext {
		let _localctx: Drop_fulltext_stoplistContext = new Drop_fulltext_stoplistContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, TSqlParser.RULE_drop_fulltext_stoplist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2487;
			this.match(TSqlParser.DROP);
			this.state = 2488;
			this.match(TSqlParser.FULLTEXT);
			this.state = 2489;
			this.match(TSqlParser.STOPLIST);
			this.state = 2490;
			_localctx._stoplist_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_login(): Drop_loginContext {
		let _localctx: Drop_loginContext = new Drop_loginContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, TSqlParser.RULE_drop_login);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2492;
			this.match(TSqlParser.DROP);
			this.state = 2493;
			this.match(TSqlParser.LOGIN);
			this.state = 2494;
			_localctx._login_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_master_key(): Drop_master_keyContext {
		let _localctx: Drop_master_keyContext = new Drop_master_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, TSqlParser.RULE_drop_master_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2496;
			this.match(TSqlParser.DROP);
			this.state = 2497;
			this.match(TSqlParser.MASTER);
			this.state = 2498;
			this.match(TSqlParser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_message_type(): Drop_message_typeContext {
		let _localctx: Drop_message_typeContext = new Drop_message_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, TSqlParser.RULE_drop_message_type);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2500;
			this.match(TSqlParser.DROP);
			this.state = 2501;
			this.match(TSqlParser.MESSAGE);
			this.state = 2502;
			this.match(TSqlParser.TYPE);
			this.state = 2503;
			_localctx._message_type_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_partition_function(): Drop_partition_functionContext {
		let _localctx: Drop_partition_functionContext = new Drop_partition_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, TSqlParser.RULE_drop_partition_function);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2505;
			this.match(TSqlParser.DROP);
			this.state = 2506;
			this.match(TSqlParser.PARTITION);
			this.state = 2507;
			this.match(TSqlParser.FUNCTION);
			this.state = 2508;
			_localctx._partition_function_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_partition_scheme(): Drop_partition_schemeContext {
		let _localctx: Drop_partition_schemeContext = new Drop_partition_schemeContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, TSqlParser.RULE_drop_partition_scheme);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2510;
			this.match(TSqlParser.DROP);
			this.state = 2511;
			this.match(TSqlParser.PARTITION);
			this.state = 2512;
			this.match(TSqlParser.SCHEME);
			this.state = 2513;
			_localctx._partition_scheme_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_queue(): Drop_queueContext {
		let _localctx: Drop_queueContext = new Drop_queueContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, TSqlParser.RULE_drop_queue);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2515;
			this.match(TSqlParser.DROP);
			this.state = 2516;
			this.match(TSqlParser.QUEUE);
			this.state = 2520;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
			case 1:
				{
				this.state = 2517;
				_localctx._database_name = this.id();
				this.state = 2518;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 178, this._ctx) ) {
			case 1:
				{
				this.state = 2522;
				_localctx._schema_name = this.id();
				this.state = 2523;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2527;
			_localctx._queue_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_remote_service_binding(): Drop_remote_service_bindingContext {
		let _localctx: Drop_remote_service_bindingContext = new Drop_remote_service_bindingContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, TSqlParser.RULE_drop_remote_service_binding);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2529;
			this.match(TSqlParser.DROP);
			this.state = 2530;
			this.match(TSqlParser.REMOTE);
			this.state = 2531;
			this.match(TSqlParser.SERVICE);
			this.state = 2532;
			this.match(TSqlParser.BINDING);
			this.state = 2533;
			_localctx._binding_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_resource_pool(): Drop_resource_poolContext {
		let _localctx: Drop_resource_poolContext = new Drop_resource_poolContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, TSqlParser.RULE_drop_resource_pool);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2535;
			this.match(TSqlParser.DROP);
			this.state = 2536;
			this.match(TSqlParser.RESOURCE);
			this.state = 2537;
			this.match(TSqlParser.POOL);
			this.state = 2538;
			_localctx._pool_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_db_role(): Drop_db_roleContext {
		let _localctx: Drop_db_roleContext = new Drop_db_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, TSqlParser.RULE_drop_db_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2540;
			this.match(TSqlParser.DROP);
			this.state = 2541;
			this.match(TSqlParser.ROLE);
			this.state = 2544;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2542;
				this.match(TSqlParser.IF);
				this.state = 2543;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 2546;
			_localctx._role_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_route(): Drop_routeContext {
		let _localctx: Drop_routeContext = new Drop_routeContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, TSqlParser.RULE_drop_route);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2548;
			this.match(TSqlParser.DROP);
			this.state = 2549;
			this.match(TSqlParser.ROUTE);
			this.state = 2550;
			_localctx._route_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_rule(): Drop_ruleContext {
		let _localctx: Drop_ruleContext = new Drop_ruleContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, TSqlParser.RULE_drop_rule);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2552;
			this.match(TSqlParser.DROP);
			this.state = 2553;
			this.match(TSqlParser.RULE);
			this.state = 2556;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				{
				this.state = 2554;
				this.match(TSqlParser.IF);
				this.state = 2555;
				this.match(TSqlParser.EXISTS);
				}
				break;
			}
			this.state = 2567;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				{
				this.state = 2559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2558;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 2564;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 182, this._ctx) ) {
				case 1:
					{
					this.state = 2561;
					_localctx._schema_name = this.id();
					this.state = 2562;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 2566;
				_localctx._rule_name = this.id();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_schema(): Drop_schemaContext {
		let _localctx: Drop_schemaContext = new Drop_schemaContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, TSqlParser.RULE_drop_schema);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2569;
			this.match(TSqlParser.DROP);
			this.state = 2570;
			this.match(TSqlParser.SCHEMA);
			this.state = 2573;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2571;
				this.match(TSqlParser.IF);
				this.state = 2572;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 2575;
			_localctx._schema_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_search_property_list(): Drop_search_property_listContext {
		let _localctx: Drop_search_property_listContext = new Drop_search_property_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, TSqlParser.RULE_drop_search_property_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2577;
			this.match(TSqlParser.DROP);
			this.state = 2578;
			this.match(TSqlParser.SEARCH);
			this.state = 2579;
			this.match(TSqlParser.PROPERTY);
			this.state = 2580;
			this.match(TSqlParser.LIST);
			this.state = 2581;
			_localctx._property_list_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_security_policy(): Drop_security_policyContext {
		let _localctx: Drop_security_policyContext = new Drop_security_policyContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, TSqlParser.RULE_drop_security_policy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2583;
			this.match(TSqlParser.DROP);
			this.state = 2584;
			this.match(TSqlParser.SECURITY);
			this.state = 2585;
			this.match(TSqlParser.POLICY);
			this.state = 2588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2586;
				this.match(TSqlParser.IF);
				this.state = 2587;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 2593;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 186, this._ctx) ) {
			case 1:
				{
				this.state = 2590;
				_localctx._schema_name = this.id();
				this.state = 2591;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2595;
			_localctx._security_policy_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_sequence(): Drop_sequenceContext {
		let _localctx: Drop_sequenceContext = new Drop_sequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, TSqlParser.RULE_drop_sequence);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2597;
			this.match(TSqlParser.DROP);
			this.state = 2598;
			this.match(TSqlParser.SEQUENCE);
			this.state = 2601;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 2599;
				this.match(TSqlParser.IF);
				this.state = 2600;
				this.match(TSqlParser.EXISTS);
				}
				break;
			}
			this.state = 2617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				{
				this.state = 2604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2603;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 2609;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
				case 1:
					{
					this.state = 2606;
					_localctx._database_name = this.id();
					this.state = 2607;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 2614;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 190, this._ctx) ) {
				case 1:
					{
					this.state = 2611;
					_localctx._schema_name = this.id();
					this.state = 2612;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 2616;
				_localctx._sequence_name = this.id();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_server_audit(): Drop_server_auditContext {
		let _localctx: Drop_server_auditContext = new Drop_server_auditContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, TSqlParser.RULE_drop_server_audit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2619;
			this.match(TSqlParser.DROP);
			this.state = 2620;
			this.match(TSqlParser.SERVER);
			this.state = 2621;
			this.match(TSqlParser.AUDIT);
			this.state = 2622;
			_localctx._audit_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_server_audit_specification(): Drop_server_audit_specificationContext {
		let _localctx: Drop_server_audit_specificationContext = new Drop_server_audit_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, TSqlParser.RULE_drop_server_audit_specification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2624;
			this.match(TSqlParser.DROP);
			this.state = 2625;
			this.match(TSqlParser.SERVER);
			this.state = 2626;
			this.match(TSqlParser.AUDIT);
			this.state = 2627;
			this.match(TSqlParser.SPECIFICATION);
			this.state = 2628;
			_localctx._audit_specification_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_server_role(): Drop_server_roleContext {
		let _localctx: Drop_server_roleContext = new Drop_server_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, TSqlParser.RULE_drop_server_role);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2630;
			this.match(TSqlParser.DROP);
			this.state = 2631;
			this.match(TSqlParser.SERVER);
			this.state = 2632;
			this.match(TSqlParser.ROLE);
			this.state = 2633;
			_localctx._role_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_service(): Drop_serviceContext {
		let _localctx: Drop_serviceContext = new Drop_serviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, TSqlParser.RULE_drop_service);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2635;
			this.match(TSqlParser.DROP);
			this.state = 2636;
			this.match(TSqlParser.SERVICE);
			this.state = 2637;
			_localctx._dropped_service_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_signature(): Drop_signatureContext {
		let _localctx: Drop_signatureContext = new Drop_signatureContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, TSqlParser.RULE_drop_signature);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2639;
			this.match(TSqlParser.DROP);
			this.state = 2641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COUNTER) {
				{
				this.state = 2640;
				this.match(TSqlParser.COUNTER);
				}
			}

			this.state = 2643;
			this.match(TSqlParser.SIGNATURE);
			this.state = 2644;
			this.match(TSqlParser.FROM);
			this.state = 2648;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 193, this._ctx) ) {
			case 1:
				{
				this.state = 2645;
				_localctx._schema_name = this.id();
				this.state = 2646;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2650;
			_localctx._module_name = this.id();
			this.state = 2651;
			this.match(TSqlParser.BY);
			this.state = 2663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 2663;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
				case 1:
					{
					this.state = 2653;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2652;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2655;
					this.match(TSqlParser.CERTIFICATE);
					this.state = 2656;
					_localctx._cert_name = this.id();
					}
					break;

				case 2:
					{
					this.state = 2658;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2657;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2660;
					this.match(TSqlParser.ASYMMETRIC);
					this.state = 2661;
					this.match(TSqlParser.KEY);
					this.state = 2662;
					_localctx._Asym_key_name = this.id();
					}
					break;
				}
				}
				this.state = 2665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.ASYMMETRIC || _la === TSqlParser.CERTIFICATE || _la === TSqlParser.COMMA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_statistics_name_azure_dw_and_pdw(): Drop_statistics_name_azure_dw_and_pdwContext {
		let _localctx: Drop_statistics_name_azure_dw_and_pdwContext = new Drop_statistics_name_azure_dw_and_pdwContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2667;
			this.match(TSqlParser.DROP);
			this.state = 2668;
			this.match(TSqlParser.STATISTICS);
			this.state = 2672;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
			case 1:
				{
				this.state = 2669;
				_localctx._schema_name = this.id();
				this.state = 2670;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2674;
			_localctx._object_name = this.id();
			this.state = 2675;
			this.match(TSqlParser.DOT);
			this.state = 2676;
			_localctx._statistics_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_symmetric_key(): Drop_symmetric_keyContext {
		let _localctx: Drop_symmetric_keyContext = new Drop_symmetric_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, TSqlParser.RULE_drop_symmetric_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2678;
			this.match(TSqlParser.DROP);
			this.state = 2679;
			this.match(TSqlParser.SYMMETRIC);
			this.state = 2680;
			this.match(TSqlParser.KEY);
			this.state = 2681;
			_localctx._symmetric_key_name = this.id();
			this.state = 2685;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 199, this._ctx) ) {
			case 1:
				{
				this.state = 2682;
				this.match(TSqlParser.REMOVE);
				this.state = 2683;
				this.match(TSqlParser.PROVIDER);
				this.state = 2684;
				this.match(TSqlParser.KEY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_synonym(): Drop_synonymContext {
		let _localctx: Drop_synonymContext = new Drop_synonymContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, TSqlParser.RULE_drop_synonym);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2687;
			this.match(TSqlParser.DROP);
			this.state = 2688;
			this.match(TSqlParser.SYNONYM);
			this.state = 2691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2689;
				this.match(TSqlParser.IF);
				this.state = 2690;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 2696;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
			case 1:
				{
				this.state = 2693;
				_localctx._schema = this.id();
				this.state = 2694;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2698;
			_localctx._synonym_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_user(): Drop_userContext {
		let _localctx: Drop_userContext = new Drop_userContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, TSqlParser.RULE_drop_user);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2700;
			this.match(TSqlParser.DROP);
			this.state = 2701;
			this.match(TSqlParser.USER);
			this.state = 2704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 2702;
				this.match(TSqlParser.IF);
				this.state = 2703;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 2706;
			_localctx._user_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_workload_group(): Drop_workload_groupContext {
		let _localctx: Drop_workload_groupContext = new Drop_workload_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, TSqlParser.RULE_drop_workload_group);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2708;
			this.match(TSqlParser.DROP);
			this.state = 2709;
			this.match(TSqlParser.WORKLOAD);
			this.state = 2710;
			this.match(TSqlParser.GROUP);
			this.state = 2711;
			_localctx._group_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_xml_schema_collection(): Drop_xml_schema_collectionContext {
		let _localctx: Drop_xml_schema_collectionContext = new Drop_xml_schema_collectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, TSqlParser.RULE_drop_xml_schema_collection);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2713;
			this.match(TSqlParser.DROP);
			this.state = 2714;
			this.match(TSqlParser.XML);
			this.state = 2715;
			this.match(TSqlParser.SCHEMA);
			this.state = 2716;
			this.match(TSqlParser.COLLECTION);
			this.state = 2720;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 203, this._ctx) ) {
			case 1:
				{
				this.state = 2717;
				_localctx._relational_schema = this.id();
				this.state = 2718;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 2722;
			_localctx._sql_identifier = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disable_trigger(): Disable_triggerContext {
		let _localctx: Disable_triggerContext = new Disable_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, TSqlParser.RULE_disable_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2724;
			this.match(TSqlParser.DISABLE);
			this.state = 2725;
			this.match(TSqlParser.TRIGGER);
			this.state = 2740;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
			case TSqlParser.COMMA:
				{
				this.state = 2735;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2726;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2732;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
					case 1:
						{
						this.state = 2729;
						_localctx._schema_name = this.id();
						this.state = 2730;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 2734;
					_localctx._trigger_name = this.id();
					}
					}
					this.state = 2737;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
				}
				break;
			case TSqlParser.ALL:
				{
				this.state = 2739;
				this.match(TSqlParser.ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2742;
			this.match(TSqlParser.ON);
			this.state = 2752;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				{
				this.state = 2746;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 208, this._ctx) ) {
				case 1:
					{
					this.state = 2743;
					_localctx._schema_id = this.id();
					this.state = 2744;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 2748;
				_localctx._object_name = this.id();
				}
				break;
			case TSqlParser.DATABASE:
				{
				this.state = 2749;
				this.match(TSqlParser.DATABASE);
				}
				break;
			case TSqlParser.ALL:
				{
				this.state = 2750;
				this.match(TSqlParser.ALL);
				this.state = 2751;
				this.match(TSqlParser.SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enable_trigger(): Enable_triggerContext {
		let _localctx: Enable_triggerContext = new Enable_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, TSqlParser.RULE_enable_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2754;
			this.match(TSqlParser.ENABLE);
			this.state = 2755;
			this.match(TSqlParser.TRIGGER);
			this.state = 2770;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
			case TSqlParser.COMMA:
				{
				this.state = 2765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2757;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2756;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2762;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
					case 1:
						{
						this.state = 2759;
						_localctx._schema_name = this.id();
						this.state = 2760;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 2764;
					_localctx._trigger_name = this.id();
					}
					}
					this.state = 2767;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
				}
				break;
			case TSqlParser.ALL:
				{
				this.state = 2769;
				this.match(TSqlParser.ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2772;
			this.match(TSqlParser.ON);
			this.state = 2782;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				{
				this.state = 2776;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
				case 1:
					{
					this.state = 2773;
					_localctx._schema_id = this.id();
					this.state = 2774;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 2778;
				_localctx._object_name = this.id();
				}
				break;
			case TSqlParser.DATABASE:
				{
				this.state = 2779;
				this.match(TSqlParser.DATABASE);
				}
				break;
			case TSqlParser.ALL:
				{
				this.state = 2780;
				this.match(TSqlParser.ALL);
				this.state = 2781;
				this.match(TSqlParser.SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_table(): Lock_tableContext {
		let _localctx: Lock_tableContext = new Lock_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, TSqlParser.RULE_lock_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2784;
			this.match(TSqlParser.LOCK);
			this.state = 2785;
			this.match(TSqlParser.TABLE);
			this.state = 2786;
			this.table_name();
			this.state = 2787;
			this.match(TSqlParser.IN);
			this.state = 2788;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.EXCLUSIVE || _la === TSqlParser.SHARE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2789;
			this.match(TSqlParser.MODE);
			this.state = 2793;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 216, this._ctx) ) {
			case 1:
				{
				this.state = 2790;
				this.match(TSqlParser.WAIT);
				this.state = 2791;
				_localctx._seconds = this.match(TSqlParser.DECIMAL);
				}
				break;

			case 2:
				{
				this.state = 2792;
				this.match(TSqlParser.NOWAIT);
				}
				break;
			}
			this.state = 2796;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 217, this._ctx) ) {
			case 1:
				{
				this.state = 2795;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncate_table(): Truncate_tableContext {
		let _localctx: Truncate_tableContext = new Truncate_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, TSqlParser.RULE_truncate_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2798;
			this.match(TSqlParser.TRUNCATE);
			this.state = 2799;
			this.match(TSqlParser.TABLE);
			this.state = 2800;
			this.table_name();
			this.state = 2820;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 221, this._ctx) ) {
			case 1:
				{
				this.state = 2801;
				this.match(TSqlParser.WITH);
				this.state = 2802;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 2803;
				this.match(TSqlParser.PARTITIONS);
				this.state = 2804;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 2814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2806;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2805;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2812;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 219, this._ctx) ) {
					case 1:
						{
						this.state = 2808;
						this.match(TSqlParser.DECIMAL);
						}
						break;

					case 2:
						{
						this.state = 2809;
						this.match(TSqlParser.DECIMAL);
						this.state = 2810;
						this.match(TSqlParser.TO);
						this.state = 2811;
						this.match(TSqlParser.DECIMAL);
						}
						break;
					}
					}
					}
					this.state = 2816;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.DECIMAL || _la === TSqlParser.COMMA);
				this.state = 2818;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 2819;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_column_master_key(): Create_column_master_keyContext {
		let _localctx: Create_column_master_keyContext = new Create_column_master_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, TSqlParser.RULE_create_column_master_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2822;
			this.match(TSqlParser.CREATE);
			this.state = 2823;
			this.match(TSqlParser.COLUMN);
			this.state = 2824;
			this.match(TSqlParser.MASTER);
			this.state = 2825;
			this.match(TSqlParser.KEY);
			this.state = 2826;
			_localctx._key_name = this.id();
			this.state = 2827;
			this.match(TSqlParser.WITH);
			this.state = 2828;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 2829;
			this.match(TSqlParser.KEY_STORE_PROVIDER_NAME);
			this.state = 2830;
			this.match(TSqlParser.EQUAL);
			this.state = 2831;
			_localctx._key_store_provider_name = this.match(TSqlParser.STRING);
			this.state = 2832;
			this.match(TSqlParser.COMMA);
			this.state = 2833;
			this.match(TSqlParser.KEY_PATH);
			this.state = 2834;
			this.match(TSqlParser.EQUAL);
			this.state = 2835;
			_localctx._key_path = this.match(TSqlParser.STRING);
			this.state = 2836;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_credential(): Alter_credentialContext {
		let _localctx: Alter_credentialContext = new Alter_credentialContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, TSqlParser.RULE_alter_credential);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2838;
			this.match(TSqlParser.ALTER);
			this.state = 2839;
			this.match(TSqlParser.CREDENTIAL);
			this.state = 2840;
			_localctx._credential_name = this.id();
			this.state = 2841;
			this.match(TSqlParser.WITH);
			this.state = 2842;
			this.match(TSqlParser.IDENTITY);
			this.state = 2843;
			this.match(TSqlParser.EQUAL);
			this.state = 2844;
			_localctx._identity_name = this.match(TSqlParser.STRING);
			this.state = 2849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 2845;
				this.match(TSqlParser.COMMA);
				this.state = 2846;
				this.match(TSqlParser.SECRET);
				this.state = 2847;
				this.match(TSqlParser.EQUAL);
				this.state = 2848;
				_localctx._secret = this.match(TSqlParser.STRING);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_credential(): Create_credentialContext {
		let _localctx: Create_credentialContext = new Create_credentialContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, TSqlParser.RULE_create_credential);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2851;
			this.match(TSqlParser.CREATE);
			this.state = 2852;
			this.match(TSqlParser.CREDENTIAL);
			this.state = 2853;
			_localctx._credential_name = this.id();
			this.state = 2854;
			this.match(TSqlParser.WITH);
			this.state = 2855;
			this.match(TSqlParser.IDENTITY);
			this.state = 2856;
			this.match(TSqlParser.EQUAL);
			this.state = 2857;
			_localctx._identity_name = this.match(TSqlParser.STRING);
			this.state = 2862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 2858;
				this.match(TSqlParser.COMMA);
				this.state = 2859;
				this.match(TSqlParser.SECRET);
				this.state = 2860;
				this.match(TSqlParser.EQUAL);
				this.state = 2861;
				_localctx._secret = this.match(TSqlParser.STRING);
				}
			}

			this.state = 2868;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 2864;
				this.match(TSqlParser.FOR);
				this.state = 2865;
				this.match(TSqlParser.CRYPTOGRAPHIC);
				this.state = 2866;
				this.match(TSqlParser.PROVIDER);
				this.state = 2867;
				_localctx._cryptographic_provider_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_cryptographic_provider(): Alter_cryptographic_providerContext {
		let _localctx: Alter_cryptographic_providerContext = new Alter_cryptographic_providerContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, TSqlParser.RULE_alter_cryptographic_provider);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2870;
			this.match(TSqlParser.ALTER);
			this.state = 2871;
			this.match(TSqlParser.CRYPTOGRAPHIC);
			this.state = 2872;
			this.match(TSqlParser.PROVIDER);
			this.state = 2873;
			_localctx._provider_name = this.id();
			this.state = 2878;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 2874;
				this.match(TSqlParser.FROM);
				this.state = 2875;
				this.match(TSqlParser.FILE);
				this.state = 2876;
				this.match(TSqlParser.EQUAL);
				this.state = 2877;
				_localctx._crypto_provider_ddl_file = this.match(TSqlParser.STRING);
				}
			}

			this.state = 2881;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 226, this._ctx) ) {
			case 1:
				{
				this.state = 2880;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DISABLE || _la === TSqlParser.ENABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_cryptographic_provider(): Create_cryptographic_providerContext {
		let _localctx: Create_cryptographic_providerContext = new Create_cryptographic_providerContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, TSqlParser.RULE_create_cryptographic_provider);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2883;
			this.match(TSqlParser.CREATE);
			this.state = 2884;
			this.match(TSqlParser.CRYPTOGRAPHIC);
			this.state = 2885;
			this.match(TSqlParser.PROVIDER);
			this.state = 2886;
			_localctx._provider_name = this.id();
			this.state = 2887;
			this.match(TSqlParser.FROM);
			this.state = 2888;
			this.match(TSqlParser.FILE);
			this.state = 2889;
			this.match(TSqlParser.EQUAL);
			this.state = 2890;
			_localctx._path_of_DLL = this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_event_notification(): Create_event_notificationContext {
		let _localctx: Create_event_notificationContext = new Create_event_notificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, TSqlParser.RULE_create_event_notification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2892;
			this.match(TSqlParser.CREATE);
			this.state = 2893;
			this.match(TSqlParser.EVENT);
			this.state = 2894;
			this.match(TSqlParser.NOTIFICATION);
			this.state = 2895;
			_localctx._event_notification_name = this.id();
			this.state = 2896;
			this.match(TSqlParser.ON);
			this.state = 2901;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.SERVER:
				{
				this.state = 2897;
				this.match(TSqlParser.SERVER);
				}
				break;
			case TSqlParser.DATABASE:
				{
				this.state = 2898;
				this.match(TSqlParser.DATABASE);
				}
				break;
			case TSqlParser.QUEUE:
				{
				this.state = 2899;
				this.match(TSqlParser.QUEUE);
				this.state = 2900;
				_localctx._queue_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 2903;
				this.match(TSqlParser.WITH);
				this.state = 2904;
				this.match(TSqlParser.FAN_IN);
				}
			}

			this.state = 2907;
			this.match(TSqlParser.FOR);
			this.state = 2912;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 2908;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 2911;
				_localctx._event_type_or_group = this.id();
				}
				}
				this.state = 2914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
			this.state = 2916;
			this.match(TSqlParser.TO);
			this.state = 2917;
			this.match(TSqlParser.SERVICE);
			this.state = 2918;
			_localctx._broker_service = this.match(TSqlParser.STRING);
			this.state = 2919;
			this.match(TSqlParser.COMMA);
			this.state = 2920;
			_localctx._broker_service_specifier_or_current_database = this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_event_session(): Create_or_alter_event_sessionContext {
		let _localctx: Create_or_alter_event_sessionContext = new Create_or_alter_event_sessionContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, TSqlParser.RULE_create_or_alter_event_session);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2922;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ALTER || _la === TSqlParser.CREATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2923;
			this.match(TSqlParser.EVENT);
			this.state = 2924;
			this.match(TSqlParser.SESSION);
			this.state = 2925;
			_localctx._event_session_name = this.id();
			this.state = 2926;
			this.match(TSqlParser.ON);
			this.state = 2927;
			this.match(TSqlParser.SERVER);
			this.state = 2995;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2929;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2928;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 2931;
					this.match(TSqlParser.ADD);
					this.state = 2932;
					this.match(TSqlParser.EVENT);
					{
					this.state = 2936;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
					case 1:
						{
						this.state = 2933;
						_localctx._event_module_guid = this.id();
						this.state = 2934;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 2938;
					_localctx._event_package_name = this.id();
					this.state = 2939;
					this.match(TSqlParser.DOT);
					this.state = 2940;
					_localctx._event_name = this.id();
					}
					this.state = 2990;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2942;
							this.match(TSqlParser.LR_BRACKET);
							this.state = 2956;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.SET) {
								{
								this.state = 2943;
								this.match(TSqlParser.SET);
								this.state = 2953;
								this._errHandler.sync(this);
								_alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
								while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
									if (_alt === 1) {
										{
										{
										this.state = 2945;
										this._errHandler.sync(this);
										_la = this._input.LA(1);
										if (_la === TSqlParser.COMMA) {
											{
											this.state = 2944;
											this.match(TSqlParser.COMMA);
											}
										}

										this.state = 2947;
										_localctx._event_customizable_attributue = this.id();
										this.state = 2948;
										this.match(TSqlParser.EQUAL);
										this.state = 2949;
										_la = this._input.LA(1);
										if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
										this._errHandler.recoverInline(this);
										} else {
											if (this._input.LA(1) === Token.EOF) {
												this.matchedEOF = true;
											}

											this._errHandler.reportMatch(this);
											this.consume();
										}
										}
										}
									}
									this.state = 2955;
									this._errHandler.sync(this);
									_alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
								}
								}
							}

							this.state = 2978;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2958;
								this.match(TSqlParser.ACTION);
								this.state = 2959;
								this.match(TSqlParser.LR_BRACKET);
								this.state = 2972;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								do {
									{
									{
									this.state = 2961;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 2960;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 2966;
									this._errHandler.sync(this);
									switch ( this.interpreter.adaptivePredict(this._input, 237, this._ctx) ) {
									case 1:
										{
										this.state = 2963;
										_localctx._event_module_guid = this.id();
										this.state = 2964;
										this.match(TSqlParser.DOT);
										}
										break;
									}
									this.state = 2968;
									_localctx._event_package_name = this.id();
									this.state = 2969;
									this.match(TSqlParser.DOT);
									this.state = 2970;
									_localctx._action_name = this.id();
									}
									}
									this.state = 2974;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
								} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
								this.state = 2976;
								this.match(TSqlParser.RR_BRACKET);
								}
								}
								this.state = 2980;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (_la === TSqlParser.ACTION);
							this.state = 2984;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.WHERE) {
								{
								this.state = 2982;
								this.match(TSqlParser.WHERE);
								this.state = 2983;
								this.event_session_predicate_expression();
								}
							}

							this.state = 2986;
							this.match(TSqlParser.RR_BRACKET);
							}
							}
						}
						this.state = 2992;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
					}
					}
					}
				}
				this.state = 2997;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
			}
			this.state = 3014;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2999;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 2998;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3001;
					this.match(TSqlParser.DROP);
					this.state = 3002;
					this.match(TSqlParser.EVENT);
					this.state = 3006;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 244, this._ctx) ) {
					case 1:
						{
						this.state = 3003;
						_localctx._event_module_guid = this.id();
						this.state = 3004;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 3008;
					_localctx._event_package_name = this.id();
					this.state = 3009;
					this.match(TSqlParser.DOT);
					this.state = 3010;
					_localctx._event_name = this.id();
					}
					}
				}
				this.state = 3016;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
			}
			this.state = 3058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.ADD) {
				{
				{
				{
				this.state = 3017;
				this.match(TSqlParser.ADD);
				this.state = 3018;
				this.match(TSqlParser.TARGET);
				this.state = 3022;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 246, this._ctx) ) {
				case 1:
					{
					this.state = 3019;
					_localctx._event_module_guid = this.id();
					this.state = 3020;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 3024;
				_localctx._event_package_name = this.id();
				this.state = 3025;
				this.match(TSqlParser.DOT);
				this.state = 3026;
				_localctx._target_name = this.id();
				}
				this.state = 3053;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3028;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 3029;
						this.match(TSqlParser.SET);
						this.state = 3045;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3031;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3030;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 3033;
							_localctx._target_parameter_name = this.id();
							this.state = 3034;
							this.match(TSqlParser.EQUAL);
							this.state = 3043;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
							case TSqlParser.LR_BRACKET:
								{
								this.state = 3036;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.LR_BRACKET) {
									{
									this.state = 3035;
									this.match(TSqlParser.LR_BRACKET);
									}
								}

								this.state = 3038;
								this.match(TSqlParser.DECIMAL);
								this.state = 3040;
								this._errHandler.sync(this);
								switch ( this.interpreter.adaptivePredict(this._input, 249, this._ctx) ) {
								case 1:
									{
									this.state = 3039;
									this.match(TSqlParser.RR_BRACKET);
									}
									break;
								}
								}
								break;
							case TSqlParser.STRING:
								{
								this.state = 3042;
								this.match(TSqlParser.STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							this.state = 3047;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
						this.state = 3049;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
					}
					this.state = 3055;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
				}
				}
				}
				this.state = 3060;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3074;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3061;
					this.match(TSqlParser.DROP);
					this.state = 3062;
					this.match(TSqlParser.TARGET);
					this.state = 3066;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
					case 1:
						{
						this.state = 3063;
						_localctx._event_module_guid = this.id();
						this.state = 3064;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 3068;
					_localctx._event_package_name = this.id();
					this.state = 3069;
					this.match(TSqlParser.DOT);
					this.state = 3070;
					_localctx._target_name = this.id();
					}
					}
				}
				this.state = 3076;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
			}
			this.state = 3142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				{
				this.state = 3077;
				this.match(TSqlParser.WITH);
				this.state = 3078;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 3086;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 257, this._ctx) ) {
				case 1:
					{
					this.state = 3080;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3079;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3082;
					this.match(TSqlParser.MAX_MEMORY);
					this.state = 3083;
					this.match(TSqlParser.EQUAL);
					this.state = 3084;
					_localctx._max_memory = this.match(TSqlParser.DECIMAL);
					this.state = 3085;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.KB || _la === TSqlParser.MB)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3094;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
				case 1:
					{
					this.state = 3089;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3088;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3091;
					this.match(TSqlParser.EVENT_RETENTION_MODE);
					this.state = 3092;
					this.match(TSqlParser.EQUAL);
					this.state = 3093;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS || _la === TSqlParser.ALLOW_SINGLE_EVENT_LOSS || _la === TSqlParser.NO_EVENT_LOSS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3106;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 262, this._ctx) ) {
				case 1:
					{
					this.state = 3097;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3096;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3099;
					this.match(TSqlParser.MAX_DISPATCH_LATENCY);
					this.state = 3100;
					this.match(TSqlParser.EQUAL);
					this.state = 3104;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.DECIMAL:
						{
						this.state = 3101;
						_localctx._max_dispatch_latency_seconds = this.match(TSqlParser.DECIMAL);
						this.state = 3102;
						this.match(TSqlParser.SECONDS);
						}
						break;
					case TSqlParser.INFINITE:
						{
						this.state = 3103;
						this.match(TSqlParser.INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				this.state = 3115;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 264, this._ctx) ) {
				case 1:
					{
					this.state = 3109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3108;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3111;
					this.match(TSqlParser.MAX_EVENT_SIZE);
					this.state = 3112;
					this.match(TSqlParser.EQUAL);
					this.state = 3113;
					_localctx._max_event_size = this.match(TSqlParser.DECIMAL);
					this.state = 3114;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.KB || _la === TSqlParser.MB)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3123;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
				case 1:
					{
					this.state = 3118;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3117;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3120;
					this.match(TSqlParser.MEMORY_PARTITION_MODE);
					this.state = 3121;
					this.match(TSqlParser.EQUAL);
					this.state = 3122;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.NONE || _la === TSqlParser.PER_CPU || _la === TSqlParser.PER_NODE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3131;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 268, this._ctx) ) {
				case 1:
					{
					this.state = 3126;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3125;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3128;
					this.match(TSqlParser.TRACK_CAUSALITY);
					this.state = 3129;
					this.match(TSqlParser.EQUAL);
					this.state = 3130;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3139;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.STARTUP_STATE || _la === TSqlParser.COMMA) {
					{
					this.state = 3134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3133;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3136;
					this.match(TSqlParser.STARTUP_STATE);
					this.state = 3137;
					this.match(TSqlParser.EQUAL);
					this.state = 3138;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3141;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 3147;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 272, this._ctx) ) {
			case 1:
				{
				this.state = 3144;
				this.match(TSqlParser.STATE);
				this.state = 3145;
				this.match(TSqlParser.EQUAL);
				this.state = 3146;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.START || _la === TSqlParser.STOP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_session_predicate_expression(): Event_session_predicate_expressionContext {
		let _localctx: Event_session_predicate_expressionContext = new Event_session_predicate_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, TSqlParser.RULE_event_session_predicate_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3165;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3149;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AND || _la === TSqlParser.OR) {
					{
					this.state = 3152;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.AND || _la === TSqlParser.OR)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.NOT) {
					{
					this.state = 3155;
					this.match(TSqlParser.NOT);
					}
				}

				this.state = 3163;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
				case 1:
					{
					this.state = 3158;
					this.event_session_predicate_factor();
					}
					break;

				case 2:
					{
					this.state = 3159;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 3160;
					this.event_session_predicate_expression();
					this.state = 3161;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				}
				}
				this.state = 3167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.AND || _la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || ((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (TSqlParser.NOT - 218)) | (1 << (TSqlParser.OFFSETS - 218)) | (1 << (TSqlParser.OR - 218)) | (1 << (TSqlParser.PAGE - 218)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.LR_BRACKET || _la === TSqlParser.COMMA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_session_predicate_factor(): Event_session_predicate_factorContext {
		let _localctx: Event_session_predicate_factorContext = new Event_session_predicate_factorContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, TSqlParser.RULE_event_session_predicate_factor);
		try {
			this.state = 3174;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3169;
				this.event_session_predicate_leaf();
				}
				break;
			case TSqlParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3170;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 3171;
				this.event_session_predicate_expression();
				this.state = 3172;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_session_predicate_leaf(): Event_session_predicate_leafContext {
		let _localctx: Event_session_predicate_leafContext = new Event_session_predicate_leafContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, TSqlParser.RULE_event_session_predicate_leaf);
		let _la: number;
		try {
			this.state = 3232;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 286, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3204;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 282, this._ctx) ) {
				case 1:
					{
					this.state = 3176;
					_localctx._event_field_name = this.id();
					}
					break;

				case 2:
					{
					this.state = 3187;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 280, this._ctx) ) {
					case 1:
						{
						this.state = 3177;
						_localctx._event_field_name = this.id();
						}
						break;

					case 2:
						{
						{
						this.state = 3181;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
						case 1:
							{
							this.state = 3178;
							_localctx._event_module_guid = this.id();
							this.state = 3179;
							this.match(TSqlParser.DOT);
							}
							break;
						}
						this.state = 3183;
						_localctx._event_package_name = this.id();
						this.state = 3184;
						this.match(TSqlParser.DOT);
						this.state = 3185;
						_localctx._predicate_source_name = this.id();
						}
						}
						break;
					}
					this.state = 3200;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 281, this._ctx) ) {
					case 1:
						{
						this.state = 3189;
						this.match(TSqlParser.EQUAL);
						}
						break;

					case 2:
						{
						{
						this.state = 3190;
						this.match(TSqlParser.LESS);
						this.state = 3191;
						this.match(TSqlParser.GREATER);
						}
						}
						break;

					case 3:
						{
						{
						this.state = 3192;
						this.match(TSqlParser.EXCLAMATION);
						this.state = 3193;
						this.match(TSqlParser.EQUAL);
						}
						}
						break;

					case 4:
						{
						this.state = 3194;
						this.match(TSqlParser.GREATER);
						}
						break;

					case 5:
						{
						{
						this.state = 3195;
						this.match(TSqlParser.GREATER);
						this.state = 3196;
						this.match(TSqlParser.EQUAL);
						}
						}
						break;

					case 6:
						{
						this.state = 3197;
						this.match(TSqlParser.LESS);
						}
						break;

					case 7:
						{
						this.state = 3198;
						this.match(TSqlParser.LESS);
						this.state = 3199;
						this.match(TSqlParser.EQUAL);
						}
						break;
					}
					this.state = 3202;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3209;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
				case 1:
					{
					this.state = 3206;
					_localctx._event_module_guid = this.id();
					this.state = 3207;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 3211;
				_localctx._event_package_name = this.id();
				this.state = 3212;
				this.match(TSqlParser.DOT);
				this.state = 3213;
				_localctx._predicate_compare_name = this.id();
				this.state = 3214;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 3228;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 285, this._ctx) ) {
				case 1:
					{
					this.state = 3215;
					_localctx._event_field_name = this.id();
					}
					break;

				case 2:
					{
					{
					this.state = 3219;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 284, this._ctx) ) {
					case 1:
						{
						this.state = 3216;
						_localctx._event_module_guid = this.id();
						this.state = 3217;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 3221;
					_localctx._event_package_name = this.id();
					this.state = 3222;
					this.match(TSqlParser.DOT);
					this.state = 3223;
					_localctx._predicate_source_name = this.id();
					}
					this.state = 3225;
					this.match(TSqlParser.COMMA);
					this.state = 3226;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3230;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_external_data_source(): Alter_external_data_sourceContext {
		let _localctx: Alter_external_data_sourceContext = new Alter_external_data_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, TSqlParser.RULE_alter_external_data_source);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3281;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 292, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3234;
				this.match(TSqlParser.ALTER);
				this.state = 3235;
				this.match(TSqlParser.EXTERNAL);
				this.state = 3236;
				this.match(TSqlParser.DATA);
				this.state = 3237;
				this.match(TSqlParser.SOURCE);
				this.state = 3238;
				_localctx._data_source_name = this.id();
				this.state = 3239;
				this.match(TSqlParser.SET);
				this.state = 3255;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						this.state = 3255;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.LOCATION:
							{
							this.state = 3240;
							this.match(TSqlParser.LOCATION);
							this.state = 3241;
							this.match(TSqlParser.EQUAL);
							this.state = 3242;
							_localctx._location = this._input.LT(1);
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.QUOTED_URL || _la === TSqlParser.QUOTED_HOST_AND_PORT)) {
								_localctx._location = this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 3244;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3243;
								this.match(TSqlParser.COMMA);
								}
							}

							}
							break;
						case TSqlParser.RESOURCE_MANAGER_LOCATION:
							{
							this.state = 3246;
							this.match(TSqlParser.RESOURCE_MANAGER_LOCATION);
							this.state = 3247;
							this.match(TSqlParser.EQUAL);
							this.state = 3248;
							_localctx._resource_manager_location = this._input.LT(1);
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.QUOTED_URL || _la === TSqlParser.QUOTED_HOST_AND_PORT)) {
								_localctx._resource_manager_location = this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 3250;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3249;
								this.match(TSqlParser.COMMA);
								}
							}

							}
							break;
						case TSqlParser.CREDENTIAL:
							{
							this.state = 3252;
							this.match(TSqlParser.CREDENTIAL);
							this.state = 3253;
							this.match(TSqlParser.EQUAL);
							this.state = 3254;
							_localctx._credential_name = this.id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3257;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3259;
				this.match(TSqlParser.ALTER);
				this.state = 3260;
				this.match(TSqlParser.EXTERNAL);
				this.state = 3261;
				this.match(TSqlParser.DATA);
				this.state = 3262;
				this.match(TSqlParser.SOURCE);
				this.state = 3263;
				_localctx._data_source_name = this.id();
				this.state = 3264;
				this.match(TSqlParser.WITH);
				this.state = 3265;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 3266;
				this.match(TSqlParser.TYPE);
				this.state = 3267;
				this.match(TSqlParser.EQUAL);
				this.state = 3268;
				this.match(TSqlParser.BLOB_STORAGE);
				this.state = 3269;
				this.match(TSqlParser.COMMA);
				this.state = 3270;
				this.match(TSqlParser.LOCATION);
				this.state = 3271;
				this.match(TSqlParser.EQUAL);
				this.state = 3272;
				_localctx._location = this.match(TSqlParser.STRING);
				this.state = 3277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3273;
					this.match(TSqlParser.COMMA);
					this.state = 3274;
					this.match(TSqlParser.CREDENTIAL);
					this.state = 3275;
					this.match(TSqlParser.EQUAL);
					this.state = 3276;
					_localctx._credential_name = this.id();
					}
				}

				this.state = 3279;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_external_library(): Alter_external_libraryContext {
		let _localctx: Alter_external_libraryContext = new Alter_external_libraryContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, TSqlParser.RULE_alter_external_library);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3283;
			this.match(TSqlParser.ALTER);
			this.state = 3284;
			this.match(TSqlParser.EXTERNAL);
			this.state = 3285;
			this.match(TSqlParser.LIBRARY);
			this.state = 3286;
			_localctx._library_name = this.id();
			this.state = 3289;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 3287;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 3288;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 3291;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ADD || _la === TSqlParser.SET)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			{
			this.state = 3292;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 3293;
			this.match(TSqlParser.CONTENT);
			this.state = 3294;
			this.match(TSqlParser.EQUAL);
			this.state = 3298;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.STRING:
				{
				this.state = 3295;
				_localctx._client_library = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.BINARY:
				{
				this.state = 3296;
				this.match(TSqlParser.BINARY);
				}
				break;
			case TSqlParser.NONE:
				{
				this.state = 3297;
				this.match(TSqlParser.NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			this.state = 3300;
			this.match(TSqlParser.COMMA);
			this.state = 3301;
			this.match(TSqlParser.PLATFORM);
			this.state = 3302;
			this.match(TSqlParser.EQUAL);
			this.state = 3304;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LINUX || _la === TSqlParser.WINDOWS) {
				{
				this.state = 3303;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.LINUX || _la === TSqlParser.WINDOWS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3306;
			this.match(TSqlParser.RR_BRACKET);
			}
			this.state = 3308;
			this.match(TSqlParser.WITH);
			this.state = 3318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 3318;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.LANGUAGE:
				case TSqlParser.COMMA:
					{
					this.state = 3310;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3309;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3312;
					this.match(TSqlParser.LANGUAGE);
					this.state = 3313;
					this.match(TSqlParser.EQUAL);
					this.state = 3314;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.PYTHON || _la === TSqlParser.R)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.DATA_SOURCE:
					{
					this.state = 3315;
					this.match(TSqlParser.DATA_SOURCE);
					this.state = 3316;
					this.match(TSqlParser.EQUAL);
					this.state = 3317;
					_localctx._external_data_source_name = this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 3320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.DATA_SOURCE || _la === TSqlParser.LANGUAGE || _la === TSqlParser.COMMA);
			this.state = 3322;
			this.match(TSqlParser.RR_BRACKET);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_external_library(): Create_external_libraryContext {
		let _localctx: Create_external_libraryContext = new Create_external_libraryContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, TSqlParser.RULE_create_external_library);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3324;
			this.match(TSqlParser.CREATE);
			this.state = 3325;
			this.match(TSqlParser.EXTERNAL);
			this.state = 3326;
			this.match(TSqlParser.LIBRARY);
			this.state = 3327;
			_localctx._library_name = this.id();
			this.state = 3330;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 3328;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 3329;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 3332;
			this.match(TSqlParser.FROM);
			{
			this.state = 3334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 3333;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 3337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LR_BRACKET) {
				{
				this.state = 3336;
				this.match(TSqlParser.LR_BRACKET);
				}
			}

			this.state = 3341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONTENT) {
				{
				this.state = 3339;
				this.match(TSqlParser.CONTENT);
				this.state = 3340;
				this.match(TSqlParser.EQUAL);
				}
			}

			this.state = 3346;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.STRING:
				{
				this.state = 3343;
				_localctx._client_library = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.BINARY:
				{
				this.state = 3344;
				this.match(TSqlParser.BINARY);
				}
				break;
			case TSqlParser.NONE:
				{
				this.state = 3345;
				this.match(TSqlParser.NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3355;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 3348;
				this.match(TSqlParser.COMMA);
				this.state = 3349;
				this.match(TSqlParser.PLATFORM);
				this.state = 3350;
				this.match(TSqlParser.EQUAL);
				this.state = 3352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.LINUX || _la === TSqlParser.WINDOWS) {
					{
					this.state = 3351;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.LINUX || _la === TSqlParser.WINDOWS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3354;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			}
			this.state = 3372;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 309, this._ctx) ) {
			case 1:
				{
				this.state = 3357;
				this.match(TSqlParser.WITH);
				this.state = 3367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 3367;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.LANGUAGE:
					case TSqlParser.COMMA:
						{
						this.state = 3359;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 3358;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 3361;
						this.match(TSqlParser.LANGUAGE);
						this.state = 3362;
						this.match(TSqlParser.EQUAL);
						this.state = 3363;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.PYTHON || _la === TSqlParser.R)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case TSqlParser.DATA_SOURCE:
						{
						this.state = 3364;
						this.match(TSqlParser.DATA_SOURCE);
						this.state = 3365;
						this.match(TSqlParser.EQUAL);
						this.state = 3366;
						_localctx._external_data_source_name = this.id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 3369;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.DATA_SOURCE || _la === TSqlParser.LANGUAGE || _la === TSqlParser.COMMA);
				this.state = 3371;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_external_resource_pool(): Alter_external_resource_poolContext {
		let _localctx: Alter_external_resource_poolContext = new Alter_external_resource_poolContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, TSqlParser.RULE_alter_external_resource_pool);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3374;
			this.match(TSqlParser.ALTER);
			this.state = 3375;
			this.match(TSqlParser.EXTERNAL);
			this.state = 3376;
			this.match(TSqlParser.RESOURCE);
			this.state = 3377;
			this.match(TSqlParser.POOL);
			this.state = 3380;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 310, this._ctx) ) {
			case 1:
				{
				this.state = 3378;
				_localctx._pool_name = this.id();
				}
				break;

			case 2:
				{
				this.state = 3379;
				this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			this.state = 3382;
			this.match(TSqlParser.WITH);
			this.state = 3383;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 3384;
			this.match(TSqlParser.MAX_CPU_PERCENT);
			this.state = 3385;
			this.match(TSqlParser.EQUAL);
			this.state = 3386;
			_localctx._max_cpu_percent = this.match(TSqlParser.DECIMAL);
			this.state = 3424;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.AFFINITY:
			case TSqlParser.COMMA:
				{
				this.state = 3388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3387;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3390;
				this.match(TSqlParser.AFFINITY);
				this.state = 3391;
				this.match(TSqlParser.CPU);
				this.state = 3392;
				this.match(TSqlParser.EQUAL);
				this.state = 3406;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.AUTO:
					{
					this.state = 3393;
					this.match(TSqlParser.AUTO);
					}
					break;
				case TSqlParser.DECIMAL:
				case TSqlParser.COMMA:
					{
					this.state = 3402;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							this.state = 3402;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
							case 1:
								{
								this.state = 3395;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 3394;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 3397;
								this.match(TSqlParser.DECIMAL);
								this.state = 3398;
								this.match(TSqlParser.TO);
								this.state = 3399;
								this.match(TSqlParser.DECIMAL);
								}
								break;

							case 2:
								{
								this.state = 3400;
								this.match(TSqlParser.COMMA);
								this.state = 3401;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 3404;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.NUMANODE:
				{
				this.state = 3408;
				this.match(TSqlParser.NUMANODE);
				this.state = 3409;
				this.match(TSqlParser.EQUAL);
				this.state = 3420;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						this.state = 3420;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 318, this._ctx) ) {
						case 1:
							{
							this.state = 3411;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3410;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 3413;
							this.match(TSqlParser.DECIMAL);
							this.state = 3414;
							this.match(TSqlParser.TO);
							this.state = 3415;
							this.match(TSqlParser.DECIMAL);
							}
							break;

						case 2:
							{
							this.state = 3417;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3416;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 3419;
							this.match(TSqlParser.DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3422;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3432;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 322, this._ctx) ) {
			case 1:
				{
				this.state = 3427;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3426;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3429;
				this.match(TSqlParser.MAX_MEMORY_PERCENT);
				this.state = 3430;
				this.match(TSqlParser.EQUAL);
				this.state = 3431;
				_localctx._max_memory_percent = this.match(TSqlParser.DECIMAL);
				}
				break;
			}
			this.state = 3440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.MAX_PROCESSES || _la === TSqlParser.COMMA) {
				{
				this.state = 3435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3434;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3437;
				this.match(TSqlParser.MAX_PROCESSES);
				this.state = 3438;
				this.match(TSqlParser.EQUAL);
				this.state = 3439;
				_localctx._max_processes = this.match(TSqlParser.DECIMAL);
				}
			}

			this.state = 3442;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_external_resource_pool(): Create_external_resource_poolContext {
		let _localctx: Create_external_resource_poolContext = new Create_external_resource_poolContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, TSqlParser.RULE_create_external_resource_pool);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3444;
			this.match(TSqlParser.CREATE);
			this.state = 3445;
			this.match(TSqlParser.EXTERNAL);
			this.state = 3446;
			this.match(TSqlParser.RESOURCE);
			this.state = 3447;
			this.match(TSqlParser.POOL);
			this.state = 3448;
			_localctx._pool_name = this.id();
			this.state = 3449;
			this.match(TSqlParser.WITH);
			this.state = 3450;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 3451;
			this.match(TSqlParser.MAX_CPU_PERCENT);
			this.state = 3452;
			this.match(TSqlParser.EQUAL);
			this.state = 3453;
			_localctx._max_cpu_percent = this.match(TSqlParser.DECIMAL);
			this.state = 3491;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.AFFINITY:
			case TSqlParser.COMMA:
				{
				this.state = 3455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3454;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3457;
				this.match(TSqlParser.AFFINITY);
				this.state = 3458;
				this.match(TSqlParser.CPU);
				this.state = 3459;
				this.match(TSqlParser.EQUAL);
				this.state = 3473;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.AUTO:
					{
					this.state = 3460;
					this.match(TSqlParser.AUTO);
					}
					break;
				case TSqlParser.DECIMAL:
				case TSqlParser.COMMA:
					{
					this.state = 3469;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							this.state = 3469;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 327, this._ctx) ) {
							case 1:
								{
								this.state = 3462;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 3461;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 3464;
								this.match(TSqlParser.DECIMAL);
								this.state = 3465;
								this.match(TSqlParser.TO);
								this.state = 3466;
								this.match(TSqlParser.DECIMAL);
								}
								break;

							case 2:
								{
								this.state = 3467;
								this.match(TSqlParser.COMMA);
								this.state = 3468;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 3471;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.NUMANODE:
				{
				this.state = 3475;
				this.match(TSqlParser.NUMANODE);
				this.state = 3476;
				this.match(TSqlParser.EQUAL);
				this.state = 3487;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						this.state = 3487;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
						case 1:
							{
							this.state = 3478;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3477;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 3480;
							this.match(TSqlParser.DECIMAL);
							this.state = 3481;
							this.match(TSqlParser.TO);
							this.state = 3482;
							this.match(TSqlParser.DECIMAL);
							}
							break;

						case 2:
							{
							this.state = 3484;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 3483;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 3486;
							this.match(TSqlParser.DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3489;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3499;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
			case 1:
				{
				this.state = 3494;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3493;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3496;
				this.match(TSqlParser.MAX_MEMORY_PERCENT);
				this.state = 3497;
				this.match(TSqlParser.EQUAL);
				this.state = 3498;
				_localctx._max_memory_percent = this.match(TSqlParser.DECIMAL);
				}
				break;
			}
			this.state = 3507;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.MAX_PROCESSES || _la === TSqlParser.COMMA) {
				{
				this.state = 3502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 3501;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 3504;
				this.match(TSqlParser.MAX_PROCESSES);
				this.state = 3505;
				this.match(TSqlParser.EQUAL);
				this.state = 3506;
				_localctx._max_processes = this.match(TSqlParser.DECIMAL);
				}
			}

			this.state = 3509;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_fulltext_catalog(): Alter_fulltext_catalogContext {
		let _localctx: Alter_fulltext_catalogContext = new Alter_fulltext_catalogContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, TSqlParser.RULE_alter_fulltext_catalog);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3511;
			this.match(TSqlParser.ALTER);
			this.state = 3512;
			this.match(TSqlParser.FULLTEXT);
			this.state = 3513;
			this.match(TSqlParser.CATALOG);
			this.state = 3514;
			_localctx._catalog_name = this.id();
			this.state = 3525;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.REBUILD:
				{
				this.state = 3515;
				this.match(TSqlParser.REBUILD);
				this.state = 3520;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 339, this._ctx) ) {
				case 1:
					{
					this.state = 3516;
					this.match(TSqlParser.WITH);
					this.state = 3517;
					this.match(TSqlParser.ACCENT_SENSITIVITY);
					this.state = 3518;
					this.match(TSqlParser.EQUAL);
					this.state = 3519;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case TSqlParser.REORGANIZE:
				{
				this.state = 3522;
				this.match(TSqlParser.REORGANIZE);
				}
				break;
			case TSqlParser.AS:
				{
				this.state = 3523;
				this.match(TSqlParser.AS);
				this.state = 3524;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_fulltext_catalog(): Create_fulltext_catalogContext {
		let _localctx: Create_fulltext_catalogContext = new Create_fulltext_catalogContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, TSqlParser.RULE_create_fulltext_catalog);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3527;
			this.match(TSqlParser.CREATE);
			this.state = 3528;
			this.match(TSqlParser.FULLTEXT);
			this.state = 3529;
			this.match(TSqlParser.CATALOG);
			this.state = 3530;
			_localctx._catalog_name = this.id();
			this.state = 3534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ON) {
				{
				this.state = 3531;
				this.match(TSqlParser.ON);
				this.state = 3532;
				this.match(TSqlParser.FILEGROUP);
				this.state = 3533;
				_localctx._filegroup = this.id();
				}
			}

			this.state = 3539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IN) {
				{
				this.state = 3536;
				this.match(TSqlParser.IN);
				this.state = 3537;
				this.match(TSqlParser.PATH);
				this.state = 3538;
				_localctx._rootpath = this.match(TSqlParser.STRING);
				}
			}

			this.state = 3545;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 343, this._ctx) ) {
			case 1:
				{
				this.state = 3541;
				this.match(TSqlParser.WITH);
				this.state = 3542;
				this.match(TSqlParser.ACCENT_SENSITIVITY);
				this.state = 3543;
				this.match(TSqlParser.EQUAL);
				this.state = 3544;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 3549;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 3547;
				this.match(TSqlParser.AS);
				this.state = 3548;
				this.match(TSqlParser.DEFAULT);
				}
			}

			this.state = 3553;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 3551;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 3552;
				_localctx._owner_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_fulltext_stoplist(): Alter_fulltext_stoplistContext {
		let _localctx: Alter_fulltext_stoplistContext = new Alter_fulltext_stoplistContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, TSqlParser.RULE_alter_fulltext_stoplist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3555;
			this.match(TSqlParser.ALTER);
			this.state = 3556;
			this.match(TSqlParser.FULLTEXT);
			this.state = 3557;
			this.match(TSqlParser.STOPLIST);
			this.state = 3558;
			_localctx._stoplist_name = this.id();
			this.state = 3572;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ADD:
				{
				this.state = 3559;
				this.match(TSqlParser.ADD);
				this.state = 3560;
				_localctx._stopword = this.match(TSqlParser.STRING);
				this.state = 3561;
				this.match(TSqlParser.LANGUAGE);
				this.state = 3562;
				_la = this._input.LA(1);
				if (!(((((_la - 793)) & ~0x1F) === 0 && ((1 << (_la - 793)) & ((1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)) | (1 << (TSqlParser.BINARY - 793)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.DROP:
				{
				this.state = 3563;
				this.match(TSqlParser.DROP);
				this.state = 3570;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 346, this._ctx) ) {
				case 1:
					{
					this.state = 3564;
					_localctx._stopword = this.match(TSqlParser.STRING);
					this.state = 3565;
					this.match(TSqlParser.LANGUAGE);
					this.state = 3566;
					_la = this._input.LA(1);
					if (!(((((_la - 793)) & ~0x1F) === 0 && ((1 << (_la - 793)) & ((1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)) | (1 << (TSqlParser.BINARY - 793)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;

				case 2:
					{
					this.state = 3567;
					this.match(TSqlParser.ALL);
					this.state = 3568;
					_la = this._input.LA(1);
					if (!(((((_la - 793)) & ~0x1F) === 0 && ((1 << (_la - 793)) & ((1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)) | (1 << (TSqlParser.BINARY - 793)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;

				case 3:
					{
					this.state = 3569;
					this.match(TSqlParser.ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_fulltext_stoplist(): Create_fulltext_stoplistContext {
		let _localctx: Create_fulltext_stoplistContext = new Create_fulltext_stoplistContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, TSqlParser.RULE_create_fulltext_stoplist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3574;
			this.match(TSqlParser.CREATE);
			this.state = 3575;
			this.match(TSqlParser.FULLTEXT);
			this.state = 3576;
			this.match(TSqlParser.STOPLIST);
			this.state = 3577;
			_localctx._stoplist_name = this.id();
			this.state = 3589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 3578;
				this.match(TSqlParser.FROM);
				this.state = 3587;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 3582;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 348, this._ctx) ) {
					case 1:
						{
						this.state = 3579;
						_localctx._database_name = this.id();
						this.state = 3580;
						this.match(TSqlParser.DOT);
						}
						break;
					}
					this.state = 3584;
					_localctx._source_stoplist_name = this.id();
					}
					break;
				case TSqlParser.SYSTEM:
					{
					this.state = 3585;
					this.match(TSqlParser.SYSTEM);
					this.state = 3586;
					this.match(TSqlParser.STOPLIST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 3593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 3591;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 3592;
				_localctx._owner_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_login_sql_server(): Alter_login_sql_serverContext {
		let _localctx: Alter_login_sql_serverContext = new Alter_login_sql_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, TSqlParser.RULE_alter_login_sql_server);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3595;
			this.match(TSqlParser.ALTER);
			this.state = 3596;
			this.match(TSqlParser.LOGIN);
			this.state = 3597;
			_localctx._login_name = this.id();
			this.state = 3665;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 365, this._ctx) ) {
			case 1:
				{
				this.state = 3599;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 352, this._ctx) ) {
				case 1:
					{
					this.state = 3598;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DISABLE || _la === TSqlParser.ENABLE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 3601;
				this.match(TSqlParser.WITH);
				this.state = 3615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PASSWORD) {
					{
					{
					this.state = 3602;
					this.match(TSqlParser.PASSWORD);
					this.state = 3603;
					this.match(TSqlParser.EQUAL);
					this.state = 3607;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.STRING:
						{
						this.state = 3604;
						_localctx._password = this.match(TSqlParser.STRING);
						}
						break;
					case TSqlParser.BINARY:
						{
						this.state = 3605;
						_localctx._password_hash = this.match(TSqlParser.BINARY);
						this.state = 3606;
						this.match(TSqlParser.HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 3612;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK) {
						{
						{
						this.state = 3609;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
						this.state = 3614;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.OLD_PASSWORD) {
					{
					this.state = 3617;
					this.match(TSqlParser.OLD_PASSWORD);
					this.state = 3618;
					this.match(TSqlParser.EQUAL);
					this.state = 3619;
					_localctx._old_password = this.match(TSqlParser.STRING);
					this.state = 3623;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK) {
						{
						{
						this.state = 3620;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
						this.state = 3625;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.DEFAULT_DATABASE) {
					{
					this.state = 3628;
					this.match(TSqlParser.DEFAULT_DATABASE);
					this.state = 3629;
					this.match(TSqlParser.EQUAL);
					this.state = 3630;
					_localctx._default_database = this.id();
					}
				}

				this.state = 3636;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
				case 1:
					{
					this.state = 3633;
					this.match(TSqlParser.DEFAULT_LANGUAGE);
					this.state = 3634;
					this.match(TSqlParser.EQUAL);
					this.state = 3635;
					_localctx._default_laguage = this.id();
					}
					break;
				}
				this.state = 3641;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
				case 1:
					{
					this.state = 3638;
					this.match(TSqlParser.NAME);
					this.state = 3639;
					this.match(TSqlParser.EQUAL);
					this.state = 3640;
					_localctx._login_name = this.id();
					}
					break;
				}
				this.state = 3646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CHECK_POLICY) {
					{
					this.state = 3643;
					this.match(TSqlParser.CHECK_POLICY);
					this.state = 3644;
					this.match(TSqlParser.EQUAL);
					this.state = 3645;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CHECK_EXPIRATION) {
					{
					this.state = 3648;
					this.match(TSqlParser.CHECK_EXPIRATION);
					this.state = 3649;
					this.match(TSqlParser.EQUAL);
					this.state = 3650;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3656;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 363, this._ctx) ) {
				case 1:
					{
					this.state = 3653;
					this.match(TSqlParser.CREDENTIAL);
					this.state = 3654;
					this.match(TSqlParser.EQUAL);
					this.state = 3655;
					_localctx._credential_name = this.id();
					}
					break;
				}
				this.state = 3660;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
				case 1:
					{
					this.state = 3658;
					this.match(TSqlParser.NO);
					this.state = 3659;
					this.match(TSqlParser.CREDENTIAL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 3662;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3663;
				this.match(TSqlParser.CREDENTIAL);
				this.state = 3664;
				_localctx._credential_name = this.id();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_login_sql_server(): Create_login_sql_serverContext {
		let _localctx: Create_login_sql_serverContext = new Create_login_sql_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, TSqlParser.RULE_create_login_sql_server);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3667;
			this.match(TSqlParser.CREATE);
			this.state = 3668;
			this.match(TSqlParser.LOGIN);
			this.state = 3669;
			_localctx._login_name = this.id();
			this.state = 3760;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.WITH:
				{
				this.state = 3670;
				this.match(TSqlParser.WITH);
				this.state = 3684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PASSWORD) {
					{
					{
					this.state = 3671;
					this.match(TSqlParser.PASSWORD);
					this.state = 3672;
					this.match(TSqlParser.EQUAL);
					this.state = 3676;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.STRING:
						{
						this.state = 3673;
						_localctx._password = this.match(TSqlParser.STRING);
						}
						break;
					case TSqlParser.BINARY:
						{
						this.state = 3674;
						_localctx._password_hash = this.match(TSqlParser.BINARY);
						this.state = 3675;
						this.match(TSqlParser.HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 3681;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK) {
						{
						{
						this.state = 3678;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
						this.state = 3683;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3692;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 370, this._ctx) ) {
				case 1:
					{
					this.state = 3687;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3686;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3689;
					this.match(TSqlParser.SID);
					this.state = 3690;
					this.match(TSqlParser.EQUAL);
					this.state = 3691;
					_localctx._sid = this.match(TSqlParser.BINARY);
					}
					break;
				}
				this.state = 3700;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 3695;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3694;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3697;
					this.match(TSqlParser.DEFAULT_DATABASE);
					this.state = 3698;
					this.match(TSqlParser.EQUAL);
					this.state = 3699;
					_localctx._default_database = this.id();
					}
					break;
				}
				this.state = 3708;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
				case 1:
					{
					this.state = 3703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3702;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3705;
					this.match(TSqlParser.DEFAULT_LANGUAGE);
					this.state = 3706;
					this.match(TSqlParser.EQUAL);
					this.state = 3707;
					_localctx._default_laguage = this.id();
					}
					break;
				}
				this.state = 3716;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
				case 1:
					{
					this.state = 3711;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3710;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3713;
					this.match(TSqlParser.CHECK_EXPIRATION);
					this.state = 3714;
					this.match(TSqlParser.EQUAL);
					this.state = 3715;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3724;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 378, this._ctx) ) {
				case 1:
					{
					this.state = 3719;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3718;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3721;
					this.match(TSqlParser.CHECK_POLICY);
					this.state = 3722;
					this.match(TSqlParser.EQUAL);
					this.state = 3723;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3732;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 380, this._ctx) ) {
				case 1:
					{
					this.state = 3727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 3726;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 3729;
					this.match(TSqlParser.CREDENTIAL);
					this.state = 3730;
					this.match(TSqlParser.EQUAL);
					this.state = 3731;
					_localctx._credential_name = this.id();
					}
					break;
				}
				}
				break;
			case TSqlParser.FROM:
				{
				{
				this.state = 3734;
				this.match(TSqlParser.FROM);
				this.state = 3758;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.WINDOWS:
					{
					this.state = 3735;
					this.match(TSqlParser.WINDOWS);
					{
					this.state = 3736;
					this.match(TSqlParser.WITH);
					this.state = 3743;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 382, this._ctx) ) {
					case 1:
						{
						this.state = 3738;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 3737;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 3740;
						this.match(TSqlParser.DEFAULT_DATABASE);
						this.state = 3741;
						this.match(TSqlParser.EQUAL);
						this.state = 3742;
						_localctx._default_database = this.id();
						}
						break;
					}
					this.state = 3751;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 384, this._ctx) ) {
					case 1:
						{
						this.state = 3746;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 3745;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 3748;
						this.match(TSqlParser.DEFAULT_LANGUAGE);
						this.state = 3749;
						this.match(TSqlParser.EQUAL);
						this.state = 3750;
						_localctx._default_language = this.match(TSqlParser.STRING);
						}
						break;
					}
					}
					}
					break;
				case TSqlParser.CERTIFICATE:
					{
					this.state = 3753;
					this.match(TSqlParser.CERTIFICATE);
					this.state = 3754;
					_localctx._certname = this.id();
					}
					break;
				case TSqlParser.ASYMMETRIC:
					{
					this.state = 3755;
					this.match(TSqlParser.ASYMMETRIC);
					this.state = 3756;
					this.match(TSqlParser.KEY);
					this.state = 3757;
					_localctx._asym_key_name = this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_login_azure_sql(): Alter_login_azure_sqlContext {
		let _localctx: Alter_login_azure_sqlContext = new Alter_login_azure_sqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, TSqlParser.RULE_alter_login_azure_sql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3762;
			this.match(TSqlParser.ALTER);
			this.state = 3763;
			this.match(TSqlParser.LOGIN);
			this.state = 3764;
			_localctx._login_name = this.id();
			this.state = 3782;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 3766;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 387, this._ctx) ) {
				case 1:
					{
					this.state = 3765;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DISABLE || _la === TSqlParser.ENABLE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 3768;
				this.match(TSqlParser.WITH);
				this.state = 3780;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.PASSWORD:
					{
					this.state = 3769;
					this.match(TSqlParser.PASSWORD);
					this.state = 3770;
					this.match(TSqlParser.EQUAL);
					this.state = 3771;
					_localctx._password = this.match(TSqlParser.STRING);
					this.state = 3775;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.OLD_PASSWORD) {
						{
						this.state = 3772;
						this.match(TSqlParser.OLD_PASSWORD);
						this.state = 3773;
						this.match(TSqlParser.EQUAL);
						this.state = 3774;
						_localctx._old_password = this.match(TSqlParser.STRING);
						}
					}

					}
					break;
				case TSqlParser.NAME:
					{
					this.state = 3777;
					this.match(TSqlParser.NAME);
					this.state = 3778;
					this.match(TSqlParser.EQUAL);
					this.state = 3779;
					_localctx._login_name = this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_login_azure_sql(): Create_login_azure_sqlContext {
		let _localctx: Create_login_azure_sqlContext = new Create_login_azure_sqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, TSqlParser.RULE_create_login_azure_sql);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3784;
			this.match(TSqlParser.CREATE);
			this.state = 3785;
			this.match(TSqlParser.LOGIN);
			this.state = 3786;
			_localctx._login_name = this.id();
			this.state = 3787;
			this.match(TSqlParser.WITH);
			this.state = 3788;
			this.match(TSqlParser.PASSWORD);
			this.state = 3789;
			this.match(TSqlParser.EQUAL);
			this.state = 3790;
			this.match(TSqlParser.STRING);
			this.state = 3794;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				{
				this.state = 3791;
				this.match(TSqlParser.SID);
				this.state = 3792;
				this.match(TSqlParser.EQUAL);
				this.state = 3793;
				_localctx._sid = this.match(TSqlParser.BINARY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_login_azure_sql_dw_and_pdw(): Alter_login_azure_sql_dw_and_pdwContext {
		let _localctx: Alter_login_azure_sql_dw_and_pdwContext = new Alter_login_azure_sql_dw_and_pdwContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3796;
			this.match(TSqlParser.ALTER);
			this.state = 3797;
			this.match(TSqlParser.LOGIN);
			this.state = 3798;
			_localctx._login_name = this.id();
			this.state = 3822;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
			case 1:
				{
				this.state = 3800;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
				case 1:
					{
					this.state = 3799;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DISABLE || _la === TSqlParser.ENABLE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 3802;
				this.match(TSqlParser.WITH);
				this.state = 3820;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.PASSWORD:
					{
					this.state = 3803;
					this.match(TSqlParser.PASSWORD);
					this.state = 3804;
					this.match(TSqlParser.EQUAL);
					this.state = 3805;
					_localctx._password = this.match(TSqlParser.STRING);
					this.state = 3815;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.OLD_PASSWORD) {
						{
						this.state = 3806;
						this.match(TSqlParser.OLD_PASSWORD);
						this.state = 3807;
						this.match(TSqlParser.EQUAL);
						this.state = 3808;
						_localctx._old_password = this.match(TSqlParser.STRING);
						this.state = 3812;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK) {
							{
							{
							this.state = 3809;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.MUST_CHANGE || _la === TSqlParser.UNLOCK)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							}
							this.state = 3814;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
					}

					}
					break;
				case TSqlParser.NAME:
					{
					this.state = 3817;
					this.match(TSqlParser.NAME);
					this.state = 3818;
					this.match(TSqlParser.EQUAL);
					this.state = 3819;
					_localctx._login_name = this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_login_pdw(): Create_login_pdwContext {
		let _localctx: Create_login_pdwContext = new Create_login_pdwContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, TSqlParser.RULE_create_login_pdw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3824;
			this.match(TSqlParser.CREATE);
			this.state = 3825;
			this.match(TSqlParser.LOGIN);
			this.state = 3826;
			_localctx._loginName = this.id();
			this.state = 3843;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.WITH:
				{
				this.state = 3827;
				this.match(TSqlParser.WITH);
				{
				this.state = 3828;
				this.match(TSqlParser.PASSWORD);
				this.state = 3829;
				this.match(TSqlParser.EQUAL);
				this.state = 3830;
				_localctx._password = this.match(TSqlParser.STRING);
				this.state = 3832;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.MUST_CHANGE) {
					{
					this.state = 3831;
					this.match(TSqlParser.MUST_CHANGE);
					}
				}

				this.state = 3839;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CHECK_POLICY) {
					{
					this.state = 3834;
					this.match(TSqlParser.CHECK_POLICY);
					this.state = 3835;
					this.match(TSqlParser.EQUAL);
					this.state = 3837;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.OFF || _la === TSqlParser.ON) {
						{
						this.state = 3836;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
				}

				}
				}
				break;
			case TSqlParser.FROM:
				{
				this.state = 3841;
				this.match(TSqlParser.FROM);
				this.state = 3842;
				this.match(TSqlParser.WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_master_key_sql_server(): Alter_master_key_sql_serverContext {
		let _localctx: Alter_master_key_sql_serverContext = new Alter_master_key_sql_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, TSqlParser.RULE_alter_master_key_sql_server);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3845;
			this.match(TSqlParser.ALTER);
			this.state = 3846;
			this.match(TSqlParser.MASTER);
			this.state = 3847;
			this.match(TSqlParser.KEY);
			this.state = 3869;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.REGENERATE:
			case TSqlParser.FORCE:
				{
				this.state = 3849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FORCE) {
					{
					this.state = 3848;
					this.match(TSqlParser.FORCE);
					}
				}

				this.state = 3851;
				this.match(TSqlParser.REGENERATE);
				this.state = 3852;
				this.match(TSqlParser.WITH);
				this.state = 3853;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 3854;
				this.match(TSqlParser.BY);
				this.state = 3855;
				this.match(TSqlParser.PASSWORD);
				this.state = 3856;
				this.match(TSqlParser.EQUAL);
				this.state = 3857;
				_localctx._password = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.ADD:
			case TSqlParser.DROP:
				{
				this.state = 3858;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3859;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 3860;
				this.match(TSqlParser.BY);
				this.state = 3867;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.SERVICE:
					{
					this.state = 3861;
					this.match(TSqlParser.SERVICE);
					this.state = 3862;
					this.match(TSqlParser.MASTER);
					this.state = 3863;
					this.match(TSqlParser.KEY);
					}
					break;
				case TSqlParser.PASSWORD:
					{
					this.state = 3864;
					this.match(TSqlParser.PASSWORD);
					this.state = 3865;
					this.match(TSqlParser.EQUAL);
					this.state = 3866;
					_localctx._encryption_password = this.match(TSqlParser.STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_master_key_sql_server(): Create_master_key_sql_serverContext {
		let _localctx: Create_master_key_sql_serverContext = new Create_master_key_sql_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, TSqlParser.RULE_create_master_key_sql_server);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3871;
			this.match(TSqlParser.CREATE);
			this.state = 3872;
			this.match(TSqlParser.MASTER);
			this.state = 3873;
			this.match(TSqlParser.KEY);
			this.state = 3874;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 3875;
			this.match(TSqlParser.BY);
			this.state = 3876;
			this.match(TSqlParser.PASSWORD);
			this.state = 3877;
			this.match(TSqlParser.EQUAL);
			this.state = 3878;
			_localctx._password = this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_master_key_azure_sql(): Alter_master_key_azure_sqlContext {
		let _localctx: Alter_master_key_azure_sqlContext = new Alter_master_key_azure_sqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, TSqlParser.RULE_alter_master_key_azure_sql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3880;
			this.match(TSqlParser.ALTER);
			this.state = 3881;
			this.match(TSqlParser.MASTER);
			this.state = 3882;
			this.match(TSqlParser.KEY);
			this.state = 3910;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.REGENERATE:
			case TSqlParser.FORCE:
				{
				this.state = 3884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FORCE) {
					{
					this.state = 3883;
					this.match(TSqlParser.FORCE);
					}
				}

				this.state = 3886;
				this.match(TSqlParser.REGENERATE);
				this.state = 3887;
				this.match(TSqlParser.WITH);
				this.state = 3888;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 3889;
				this.match(TSqlParser.BY);
				this.state = 3890;
				this.match(TSqlParser.PASSWORD);
				this.state = 3891;
				this.match(TSqlParser.EQUAL);
				this.state = 3892;
				_localctx._password = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.ADD:
				{
				this.state = 3893;
				this.match(TSqlParser.ADD);
				this.state = 3894;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 3895;
				this.match(TSqlParser.BY);
				this.state = 3902;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.SERVICE:
					{
					this.state = 3896;
					this.match(TSqlParser.SERVICE);
					this.state = 3897;
					this.match(TSqlParser.MASTER);
					this.state = 3898;
					this.match(TSqlParser.KEY);
					}
					break;
				case TSqlParser.PASSWORD:
					{
					this.state = 3899;
					this.match(TSqlParser.PASSWORD);
					this.state = 3900;
					this.match(TSqlParser.EQUAL);
					this.state = 3901;
					_localctx._encryption_password = this.match(TSqlParser.STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.DROP:
				{
				this.state = 3904;
				this.match(TSqlParser.DROP);
				this.state = 3905;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 3906;
				this.match(TSqlParser.BY);
				this.state = 3907;
				this.match(TSqlParser.PASSWORD);
				this.state = 3908;
				this.match(TSqlParser.EQUAL);
				this.state = 3909;
				_localctx._encryption_password = this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_master_key_azure_sql(): Create_master_key_azure_sqlContext {
		let _localctx: Create_master_key_azure_sqlContext = new Create_master_key_azure_sqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, TSqlParser.RULE_create_master_key_azure_sql);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3912;
			this.match(TSqlParser.CREATE);
			this.state = 3913;
			this.match(TSqlParser.MASTER);
			this.state = 3914;
			this.match(TSqlParser.KEY);
			this.state = 3920;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 407, this._ctx) ) {
			case 1:
				{
				this.state = 3915;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 3916;
				this.match(TSqlParser.BY);
				this.state = 3917;
				this.match(TSqlParser.PASSWORD);
				this.state = 3918;
				this.match(TSqlParser.EQUAL);
				this.state = 3919;
				_localctx._password = this.match(TSqlParser.STRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_message_type(): Alter_message_typeContext {
		let _localctx: Alter_message_typeContext = new Alter_message_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, TSqlParser.RULE_alter_message_type);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3922;
			this.match(TSqlParser.ALTER);
			this.state = 3923;
			this.match(TSqlParser.MESSAGE);
			this.state = 3924;
			this.match(TSqlParser.TYPE);
			this.state = 3925;
			_localctx._message_type_name = this.id();
			this.state = 3926;
			this.match(TSqlParser.VALIDATION);
			this.state = 3927;
			this.match(TSqlParser.EQUAL);
			this.state = 3936;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.NONE:
				{
				this.state = 3928;
				this.match(TSqlParser.NONE);
				}
				break;
			case TSqlParser.EMPTY:
				{
				this.state = 3929;
				this.match(TSqlParser.EMPTY);
				}
				break;
			case TSqlParser.WELL_FORMED_XML:
				{
				this.state = 3930;
				this.match(TSqlParser.WELL_FORMED_XML);
				}
				break;
			case TSqlParser.VALID_XML:
				{
				this.state = 3931;
				this.match(TSqlParser.VALID_XML);
				this.state = 3932;
				this.match(TSqlParser.WITH);
				this.state = 3933;
				this.match(TSqlParser.SCHEMA);
				this.state = 3934;
				this.match(TSqlParser.COLLECTION);
				this.state = 3935;
				_localctx._schema_collection_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_partition_function(): Alter_partition_functionContext {
		let _localctx: Alter_partition_functionContext = new Alter_partition_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, TSqlParser.RULE_alter_partition_function);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3938;
			this.match(TSqlParser.ALTER);
			this.state = 3939;
			this.match(TSqlParser.PARTITION);
			this.state = 3940;
			this.match(TSqlParser.FUNCTION);
			this.state = 3941;
			_localctx._partition_function_name = this.id();
			this.state = 3942;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 3943;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 3944;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.MERGE || _la === TSqlParser.SPLIT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3945;
			this.match(TSqlParser.RANGE);
			this.state = 3946;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 3947;
			this.match(TSqlParser.DECIMAL);
			this.state = 3948;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_partition_scheme(): Alter_partition_schemeContext {
		let _localctx: Alter_partition_schemeContext = new Alter_partition_schemeContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, TSqlParser.RULE_alter_partition_scheme);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3950;
			this.match(TSqlParser.ALTER);
			this.state = 3951;
			this.match(TSqlParser.PARTITION);
			this.state = 3952;
			this.match(TSqlParser.SCHEME);
			this.state = 3953;
			_localctx._partition_scheme_name = this.id();
			this.state = 3954;
			this.match(TSqlParser.NEXT);
			this.state = 3955;
			this.match(TSqlParser.USED);
			this.state = 3957;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
			case 1:
				{
				this.state = 3956;
				_localctx._file_group_name = this.id();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_remote_service_binding(): Alter_remote_service_bindingContext {
		let _localctx: Alter_remote_service_bindingContext = new Alter_remote_service_bindingContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, TSqlParser.RULE_alter_remote_service_binding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3959;
			this.match(TSqlParser.ALTER);
			this.state = 3960;
			this.match(TSqlParser.REMOTE);
			this.state = 3961;
			this.match(TSqlParser.SERVICE);
			this.state = 3962;
			this.match(TSqlParser.BINDING);
			this.state = 3963;
			_localctx._binding_name = this.id();
			this.state = 3964;
			this.match(TSqlParser.WITH);
			this.state = 3968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.USER) {
				{
				this.state = 3965;
				this.match(TSqlParser.USER);
				this.state = 3966;
				this.match(TSqlParser.EQUAL);
				this.state = 3967;
				_localctx._user_name = this.id();
				}
			}

			this.state = 3974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 3970;
				this.match(TSqlParser.COMMA);
				this.state = 3971;
				this.match(TSqlParser.ANONYMOUS);
				this.state = 3972;
				this.match(TSqlParser.EQUAL);
				this.state = 3973;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_remote_service_binding(): Create_remote_service_bindingContext {
		let _localctx: Create_remote_service_bindingContext = new Create_remote_service_bindingContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, TSqlParser.RULE_create_remote_service_binding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3976;
			this.match(TSqlParser.CREATE);
			this.state = 3977;
			this.match(TSqlParser.REMOTE);
			this.state = 3978;
			this.match(TSqlParser.SERVICE);
			this.state = 3979;
			this.match(TSqlParser.BINDING);
			this.state = 3980;
			_localctx._binding_name = this.id();
			this.state = 3983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 3981;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 3982;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 3985;
			this.match(TSqlParser.TO);
			this.state = 3986;
			this.match(TSqlParser.SERVICE);
			this.state = 3987;
			_localctx._remote_service_name = this.match(TSqlParser.STRING);
			this.state = 3988;
			this.match(TSqlParser.WITH);
			this.state = 3992;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.USER) {
				{
				this.state = 3989;
				this.match(TSqlParser.USER);
				this.state = 3990;
				this.match(TSqlParser.EQUAL);
				this.state = 3991;
				_localctx._user_name = this.id();
				}
			}

			this.state = 3998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 3994;
				this.match(TSqlParser.COMMA);
				this.state = 3995;
				this.match(TSqlParser.ANONYMOUS);
				this.state = 3996;
				this.match(TSqlParser.EQUAL);
				this.state = 3997;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_resource_pool(): Create_resource_poolContext {
		let _localctx: Create_resource_poolContext = new Create_resource_poolContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, TSqlParser.RULE_create_resource_pool);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4000;
			this.match(TSqlParser.CREATE);
			this.state = 4001;
			this.match(TSqlParser.RESOURCE);
			this.state = 4002;
			this.match(TSqlParser.POOL);
			this.state = 4003;
			_localctx._pool_name = this.id();
			this.state = 4106;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 438, this._ctx) ) {
			case 1:
				{
				this.state = 4004;
				this.match(TSqlParser.WITH);
				this.state = 4005;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4012;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
				case 1:
					{
					this.state = 4007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4006;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4009;
					this.match(TSqlParser.MIN_CPU_PERCENT);
					this.state = 4010;
					this.match(TSqlParser.EQUAL);
					this.state = 4011;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 4020;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 418, this._ctx) ) {
				case 1:
					{
					this.state = 4015;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4014;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4017;
					this.match(TSqlParser.MAX_CPU_PERCENT);
					this.state = 4018;
					this.match(TSqlParser.EQUAL);
					this.state = 4019;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 4028;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 420, this._ctx) ) {
				case 1:
					{
					this.state = 4023;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4022;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4025;
					this.match(TSqlParser.CAP_CPU_PERCENT);
					this.state = 4026;
					this.match(TSqlParser.EQUAL);
					this.state = 4027;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 4071;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 429, this._ctx) ) {
				case 1:
					{
					this.state = 4031;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4030;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4033;
					this.match(TSqlParser.AFFINITY);
					this.state = 4034;
					this.match(TSqlParser.SCHEDULER);
					this.state = 4035;
					this.match(TSqlParser.EQUAL);
					this.state = 4069;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.AUTO:
						{
						this.state = 4036;
						this.match(TSqlParser.AUTO);
						}
						break;
					case TSqlParser.LR_BRACKET:
						{
						this.state = 4037;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 4047;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4039;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4038;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4045;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
							case 1:
								{
								this.state = 4041;
								this.match(TSqlParser.DECIMAL);
								}
								break;

							case 2:
								{
								this.state = 4042;
								this.match(TSqlParser.DECIMAL);
								this.state = 4043;
								this.match(TSqlParser.TO);
								this.state = 4044;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							}
							}
							}
							this.state = 4049;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === TSqlParser.DECIMAL || _la === TSqlParser.COMMA);
						this.state = 4051;
						this.match(TSqlParser.RR_BRACKET);
						}
						break;
					case TSqlParser.NUMANODE:
						{
						this.state = 4052;
						this.match(TSqlParser.NUMANODE);
						this.state = 4053;
						this.match(TSqlParser.EQUAL);
						this.state = 4054;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 4064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4056;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4055;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4062;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
							case 1:
								{
								this.state = 4058;
								this.match(TSqlParser.DECIMAL);
								}
								break;

							case 2:
								{
								this.state = 4059;
								this.match(TSqlParser.DECIMAL);
								this.state = 4060;
								this.match(TSqlParser.TO);
								this.state = 4061;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							}
							}
							}
							this.state = 4066;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === TSqlParser.DECIMAL || _la === TSqlParser.COMMA);
						this.state = 4068;
						this.match(TSqlParser.RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				this.state = 4079;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 431, this._ctx) ) {
				case 1:
					{
					this.state = 4074;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4073;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4076;
					this.match(TSqlParser.MIN_MEMORY_PERCENT);
					this.state = 4077;
					this.match(TSqlParser.EQUAL);
					this.state = 4078;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 4087;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
				case 1:
					{
					this.state = 4082;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4081;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4084;
					this.match(TSqlParser.MAX_MEMORY_PERCENT);
					this.state = 4085;
					this.match(TSqlParser.EQUAL);
					this.state = 4086;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 4095;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 435, this._ctx) ) {
				case 1:
					{
					this.state = 4090;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4089;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4092;
					this.match(TSqlParser.MIN_IOPS_PER_VOLUME);
					this.state = 4093;
					this.match(TSqlParser.EQUAL);
					this.state = 4094;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 4103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.MAX_IOPS_PER_VOLUME || _la === TSqlParser.COMMA) {
					{
					this.state = 4098;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4097;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4100;
					this.match(TSqlParser.MAX_IOPS_PER_VOLUME);
					this.state = 4101;
					this.match(TSqlParser.EQUAL);
					this.state = 4102;
					this.match(TSqlParser.DECIMAL);
					}
				}

				this.state = 4105;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_resource_governor(): Alter_resource_governorContext {
		let _localctx: Alter_resource_governorContext = new Alter_resource_governorContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, TSqlParser.RULE_alter_resource_governor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4108;
			this.match(TSqlParser.ALTER);
			this.state = 4109;
			this.match(TSqlParser.RESOURCE);
			this.state = 4110;
			this.match(TSqlParser.GOVERNOR);
			this.state = 4132;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
			case 1:
				{
				this.state = 4111;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.RECONFIGURE || _la === TSqlParser.DISABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				{
				this.state = 4112;
				this.match(TSqlParser.WITH);
				this.state = 4113;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4114;
				this.match(TSqlParser.CLASSIFIER_FUNCTION);
				this.state = 4115;
				this.match(TSqlParser.EQUAL);
				this.state = 4121;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 4116;
					_localctx._schema_name = this.id();
					this.state = 4117;
					this.match(TSqlParser.DOT);
					this.state = 4118;
					_localctx._function_name = this.id();
					}
					break;
				case TSqlParser.NULL:
					{
					this.state = 4120;
					this.match(TSqlParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4123;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 3:
				{
				this.state = 4124;
				this.match(TSqlParser.RESET);
				this.state = 4125;
				this.match(TSqlParser.STATISTICS);
				}
				break;

			case 4:
				{
				this.state = 4126;
				this.match(TSqlParser.WITH);
				this.state = 4127;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4128;
				this.match(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME);
				this.state = 4129;
				this.match(TSqlParser.EQUAL);
				this.state = 4130;
				_localctx._max_outstanding_io_per_volume = this.match(TSqlParser.DECIMAL);
				this.state = 4131;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_db_role(): Alter_db_roleContext {
		let _localctx: Alter_db_roleContext = new Alter_db_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, TSqlParser.RULE_alter_db_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4134;
			this.match(TSqlParser.ALTER);
			this.state = 4135;
			this.match(TSqlParser.ROLE);
			this.state = 4136;
			_localctx._role_name = this.id();
			this.state = 4144;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ADD:
			case TSqlParser.DROP:
				{
				this.state = 4137;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4138;
				this.match(TSqlParser.MEMBER);
				this.state = 4139;
				_localctx._database_principal = this.id();
				}
				break;
			case TSqlParser.WITH:
				{
				this.state = 4140;
				this.match(TSqlParser.WITH);
				this.state = 4141;
				this.match(TSqlParser.NAME);
				this.state = 4142;
				this.match(TSqlParser.EQUAL);
				this.state = 4143;
				_localctx._new_role_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_db_role(): Create_db_roleContext {
		let _localctx: Create_db_roleContext = new Create_db_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, TSqlParser.RULE_create_db_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4146;
			this.match(TSqlParser.CREATE);
			this.state = 4147;
			this.match(TSqlParser.ROLE);
			this.state = 4148;
			_localctx._role_name = this.id();
			this.state = 4151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 4149;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4150;
				_localctx._owner_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_route(): Create_routeContext {
		let _localctx: Create_routeContext = new Create_routeContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, TSqlParser.RULE_create_route);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4153;
			this.match(TSqlParser.CREATE);
			this.state = 4154;
			this.match(TSqlParser.ROUTE);
			this.state = 4155;
			_localctx._route_name = this.id();
			this.state = 4158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 4156;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4157;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 4160;
			this.match(TSqlParser.WITH);
			this.state = 4167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				{
				this.state = 4162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 4161;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 4164;
				this.match(TSqlParser.SERVICE_NAME);
				this.state = 4165;
				this.match(TSqlParser.EQUAL);
				this.state = 4166;
				_localctx._route_service_name = this.match(TSqlParser.STRING);
				}
				break;
			}
			this.state = 4175;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 447, this._ctx) ) {
			case 1:
				{
				this.state = 4170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 4169;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 4172;
				this.match(TSqlParser.BROKER_INSTANCE);
				this.state = 4173;
				this.match(TSqlParser.EQUAL);
				this.state = 4174;
				_localctx._broker_instance_identifier = this.match(TSqlParser.STRING);
				}
				break;
			}
			this.state = 4183;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 449, this._ctx) ) {
			case 1:
				{
				this.state = 4178;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 4177;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 4180;
				this.match(TSqlParser.LIFETIME);
				this.state = 4181;
				this.match(TSqlParser.EQUAL);
				this.state = 4182;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			}
			this.state = 4186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 4185;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 4188;
			this.match(TSqlParser.ADDRESS);
			this.state = 4189;
			this.match(TSqlParser.EQUAL);
			this.state = 4190;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.QUOTED_URL || _la === TSqlParser.STRING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4195;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 4191;
				this.match(TSqlParser.COMMA);
				this.state = 4192;
				this.match(TSqlParser.MIRROR_ADDRESS);
				this.state = 4193;
				this.match(TSqlParser.EQUAL);
				this.state = 4194;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.QUOTED_URL || _la === TSqlParser.STRING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_rule(): Create_ruleContext {
		let _localctx: Create_ruleContext = new Create_ruleContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, TSqlParser.RULE_create_rule);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4197;
			this.match(TSqlParser.CREATE);
			this.state = 4198;
			this.match(TSqlParser.RULE);
			this.state = 4202;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 452, this._ctx) ) {
			case 1:
				{
				this.state = 4199;
				_localctx._schema_name = this.id();
				this.state = 4200;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 4204;
			_localctx._rule_name = this.id();
			this.state = 4205;
			this.match(TSqlParser.AS);
			this.state = 4206;
			this.search_condition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_schema_sql(): Alter_schema_sqlContext {
		let _localctx: Alter_schema_sqlContext = new Alter_schema_sqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, TSqlParser.RULE_alter_schema_sql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4208;
			this.match(TSqlParser.ALTER);
			this.state = 4209;
			this.match(TSqlParser.SCHEMA);
			this.state = 4210;
			_localctx._schema_name = this.id();
			this.state = 4211;
			this.match(TSqlParser.TRANSFER);
			this.state = 4221;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 454, this._ctx) ) {
			case 1:
				{
				this.state = 4217;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.OBJECT:
					{
					this.state = 4212;
					this.match(TSqlParser.OBJECT);
					}
					break;
				case TSqlParser.TYPE:
					{
					this.state = 4213;
					this.match(TSqlParser.TYPE);
					}
					break;
				case TSqlParser.XML:
					{
					this.state = 4214;
					this.match(TSqlParser.XML);
					this.state = 4215;
					this.match(TSqlParser.SCHEMA);
					this.state = 4216;
					this.match(TSqlParser.COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4219;
				this.match(TSqlParser.COLON);
				this.state = 4220;
				this.match(TSqlParser.COLON);
				}
				break;
			}
			this.state = 4223;
			this.id();
			this.state = 4226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.DOT) {
				{
				this.state = 4224;
				this.match(TSqlParser.DOT);
				this.state = 4225;
				this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_schema(): Create_schemaContext {
		let _localctx: Create_schemaContext = new Create_schemaContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, TSqlParser.RULE_create_schema);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4228;
			this.match(TSqlParser.CREATE);
			this.state = 4229;
			this.match(TSqlParser.SCHEMA);
			this.state = 4237;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
			case 1:
				{
				this.state = 4230;
				_localctx._schema_name = this.id();
				}
				break;

			case 2:
				{
				this.state = 4231;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4232;
				_localctx._owner_name = this.id();
				}
				break;

			case 3:
				{
				this.state = 4233;
				_localctx._schema_name = this.id();
				this.state = 4234;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4235;
				_localctx._owner_name = this.id();
				}
				break;
			}
			this.state = 4267;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 4265;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
					case 1:
						{
						this.state = 4239;
						this.create_table();
						}
						break;

					case 2:
						{
						this.state = 4240;
						this.create_view();
						}
						break;

					case 3:
						{
						this.state = 4241;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DENY || _la === TSqlParser.GRANT)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4242;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DELETE || _la === TSqlParser.INSERT || _la === TSqlParser.SELECT || _la === TSqlParser.UPDATE)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4243;
						this.match(TSqlParser.ON);
						this.state = 4247;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.SCHEMA) {
							{
							this.state = 4244;
							this.match(TSqlParser.SCHEMA);
							this.state = 4245;
							this.match(TSqlParser.COLON);
							this.state = 4246;
							this.match(TSqlParser.COLON);
							}
						}

						this.state = 4249;
						_localctx._object_name = this.id();
						this.state = 4250;
						this.match(TSqlParser.TO);
						this.state = 4251;
						_localctx._owner_name = this.id();
						}
						break;

					case 4:
						{
						this.state = 4253;
						this.match(TSqlParser.REVOKE);
						this.state = 4254;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DELETE || _la === TSqlParser.INSERT || _la === TSqlParser.SELECT || _la === TSqlParser.UPDATE)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4255;
						this.match(TSqlParser.ON);
						this.state = 4259;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.SCHEMA) {
							{
							this.state = 4256;
							this.match(TSqlParser.SCHEMA);
							this.state = 4257;
							this.match(TSqlParser.COLON);
							this.state = 4258;
							this.match(TSqlParser.COLON);
							}
						}

						this.state = 4261;
						_localctx._object_name = this.id();
						this.state = 4262;
						this.match(TSqlParser.FROM);
						this.state = 4263;
						_localctx._owner_name = this.id();
						}
						break;
					}
					}
				}
				this.state = 4269;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_schema_azure_sql_dw_and_pdw(): Create_schema_azure_sql_dw_and_pdwContext {
		let _localctx: Create_schema_azure_sql_dw_and_pdwContext = new Create_schema_azure_sql_dw_and_pdwContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4270;
			this.match(TSqlParser.CREATE);
			this.state = 4271;
			this.match(TSqlParser.SCHEMA);
			this.state = 4272;
			_localctx._schema_name = this.id();
			this.state = 4275;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 4273;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4274;
				_localctx._owner_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_schema_azure_sql_dw_and_pdw(): Alter_schema_azure_sql_dw_and_pdwContext {
		let _localctx: Alter_schema_azure_sql_dw_and_pdwContext = new Alter_schema_azure_sql_dw_and_pdwContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4277;
			this.match(TSqlParser.ALTER);
			this.state = 4278;
			this.match(TSqlParser.SCHEMA);
			this.state = 4279;
			_localctx._schema_name = this.id();
			this.state = 4280;
			this.match(TSqlParser.TRANSFER);
			this.state = 4284;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
			case 1:
				{
				this.state = 4281;
				this.match(TSqlParser.OBJECT);
				this.state = 4282;
				this.match(TSqlParser.COLON);
				this.state = 4283;
				this.match(TSqlParser.COLON);
				}
				break;
			}
			this.state = 4286;
			this.id();
			this.state = 4289;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.DOT) {
				{
				this.state = 4287;
				this.match(TSqlParser.DOT);
				this.state = 4288;
				this.match(TSqlParser.ID);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_search_property_list(): Create_search_property_listContext {
		let _localctx: Create_search_property_listContext = new Create_search_property_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, TSqlParser.RULE_create_search_property_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4291;
			this.match(TSqlParser.CREATE);
			this.state = 4292;
			this.match(TSqlParser.SEARCH);
			this.state = 4293;
			this.match(TSqlParser.PROPERTY);
			this.state = 4294;
			this.match(TSqlParser.LIST);
			this.state = 4295;
			_localctx._new_list_name = this.id();
			this.state = 4303;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 4296;
				this.match(TSqlParser.FROM);
				this.state = 4300;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
				case 1:
					{
					this.state = 4297;
					_localctx._database_name = this.id();
					this.state = 4298;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 4302;
				_localctx._source_list_name = this.id();
				}
			}

			this.state = 4307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 4305;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4306;
				_localctx._owner_name = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_security_policy(): Create_security_policyContext {
		let _localctx: Create_security_policyContext = new Create_security_policyContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, TSqlParser.RULE_create_security_policy);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4309;
			this.match(TSqlParser.CREATE);
			this.state = 4310;
			this.match(TSqlParser.SECURITY);
			this.state = 4311;
			this.match(TSqlParser.POLICY);
			this.state = 4315;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 467, this._ctx) ) {
			case 1:
				{
				this.state = 4312;
				_localctx._schema_name = this.id();
				this.state = 4313;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 4317;
			_localctx._security_policy_name = this.id();
			this.state = 4358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4319;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 4318;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 4321;
				this.match(TSqlParser.ADD);
				this.state = 4323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.BLOCK || _la === TSqlParser.FILTER) {
					{
					this.state = 4322;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.BLOCK || _la === TSqlParser.FILTER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4325;
				this.match(TSqlParser.PREDICATE);
				this.state = 4326;
				_localctx._tvf_schema_name = this.id();
				this.state = 4327;
				this.match(TSqlParser.DOT);
				this.state = 4328;
				_localctx._security_predicate_function_name = this.id();
				this.state = 4329;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4331;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4330;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4333;
					_localctx._column_name_or_arguments = this.id();
					}
					}
					this.state = 4336;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
				this.state = 4338;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 4339;
				this.match(TSqlParser.ON);
				this.state = 4340;
				_localctx._table_schema_name = this.id();
				this.state = 4341;
				this.match(TSqlParser.DOT);
				this.state = 4342;
				_localctx._name = this.id();
				this.state = 4355;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 4353;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 474, this._ctx) ) {
						case 1:
							{
							this.state = 4344;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4343;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4346;
							this.match(TSqlParser.AFTER);
							this.state = 4347;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.INSERT || _la === TSqlParser.UPDATE)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 2:
							{
							this.state = 4349;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4348;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4351;
							this.match(TSqlParser.BEFORE);
							this.state = 4352;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.DELETE || _la === TSqlParser.UPDATE)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;
						}
						}
					}
					this.state = 4357;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
				}
				}
				}
				this.state = 4360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.ADD || _la === TSqlParser.COMMA);
			this.state = 4372;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 478, this._ctx) ) {
			case 1:
				{
				this.state = 4362;
				this.match(TSqlParser.WITH);
				this.state = 4363;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4364;
				this.match(TSqlParser.STATE);
				this.state = 4365;
				this.match(TSqlParser.EQUAL);
				this.state = 4366;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.SCHEMABINDING) {
					{
					this.state = 4367;
					this.match(TSqlParser.SCHEMABINDING);
					this.state = 4368;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4371;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 4377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.NOT) {
				{
				this.state = 4374;
				this.match(TSqlParser.NOT);
				this.state = 4375;
				this.match(TSqlParser.FOR);
				this.state = 4376;
				this.match(TSqlParser.REPLICATION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_sequence(): Alter_sequenceContext {
		let _localctx: Alter_sequenceContext = new Alter_sequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, TSqlParser.RULE_alter_sequence);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4379;
			this.match(TSqlParser.ALTER);
			this.state = 4380;
			this.match(TSqlParser.SEQUENCE);
			this.state = 4384;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 480, this._ctx) ) {
			case 1:
				{
				this.state = 4381;
				_localctx._schema_name = this.id();
				this.state = 4382;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 4386;
			_localctx._sequence_name = this.id();
			this.state = 4392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.RESTART) {
				{
				this.state = 4387;
				this.match(TSqlParser.RESTART);
				this.state = 4390;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 481, this._ctx) ) {
				case 1:
					{
					this.state = 4388;
					this.match(TSqlParser.WITH);
					this.state = 4389;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				}
			}

			this.state = 4397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INCREMENT) {
				{
				this.state = 4394;
				this.match(TSqlParser.INCREMENT);
				this.state = 4395;
				this.match(TSqlParser.BY);
				this.state = 4396;
				_localctx._sequnce_increment = this.match(TSqlParser.DECIMAL);
				}
			}

			this.state = 4403;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
			case 1:
				{
				this.state = 4399;
				this.match(TSqlParser.MINVALUE);
				this.state = 4400;
				this.match(TSqlParser.DECIMAL);
				}
				break;

			case 2:
				{
				this.state = 4401;
				this.match(TSqlParser.NO);
				this.state = 4402;
				this.match(TSqlParser.MINVALUE);
				}
				break;
			}
			this.state = 4409;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 485, this._ctx) ) {
			case 1:
				{
				this.state = 4405;
				this.match(TSqlParser.MAXVALUE);
				this.state = 4406;
				this.match(TSqlParser.DECIMAL);
				}
				break;

			case 2:
				{
				this.state = 4407;
				this.match(TSqlParser.NO);
				this.state = 4408;
				this.match(TSqlParser.MAXVALUE);
				}
				break;
			}
			this.state = 4414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 486, this._ctx) ) {
			case 1:
				{
				this.state = 4411;
				this.match(TSqlParser.CYCLE);
				}
				break;

			case 2:
				{
				this.state = 4412;
				this.match(TSqlParser.NO);
				this.state = 4413;
				this.match(TSqlParser.CYCLE);
				}
				break;
			}
			this.state = 4420;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 487, this._ctx) ) {
			case 1:
				{
				this.state = 4416;
				this.match(TSqlParser.CACHE);
				this.state = 4417;
				this.match(TSqlParser.DECIMAL);
				}
				break;

			case 2:
				{
				this.state = 4418;
				this.match(TSqlParser.NO);
				this.state = 4419;
				this.match(TSqlParser.CACHE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_sequence(): Create_sequenceContext {
		let _localctx: Create_sequenceContext = new Create_sequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, TSqlParser.RULE_create_sequence);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4422;
			this.match(TSqlParser.CREATE);
			this.state = 4423;
			this.match(TSqlParser.SEQUENCE);
			this.state = 4427;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 488, this._ctx) ) {
			case 1:
				{
				this.state = 4424;
				_localctx._schema_name = this.id();
				this.state = 4425;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 4429;
			_localctx._sequence_name = this.id();
			this.state = 4432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 4430;
				this.match(TSqlParser.AS);
				this.state = 4431;
				this.data_type();
				}
			}

			this.state = 4437;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				{
				this.state = 4434;
				this.match(TSqlParser.START);
				this.state = 4435;
				this.match(TSqlParser.WITH);
				this.state = 4436;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			}
			this.state = 4445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INCREMENT) {
				{
				this.state = 4439;
				this.match(TSqlParser.INCREMENT);
				this.state = 4440;
				this.match(TSqlParser.BY);
				this.state = 4442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.MINUS) {
					{
					this.state = 4441;
					this.match(TSqlParser.MINUS);
					}
				}

				this.state = 4444;
				this.match(TSqlParser.DECIMAL);
				}
			}

			this.state = 4453;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
			case 1:
				{
				this.state = 4447;
				this.match(TSqlParser.MINVALUE);
				this.state = 4449;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 493, this._ctx) ) {
				case 1:
					{
					this.state = 4448;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 4451;
				this.match(TSqlParser.NO);
				this.state = 4452;
				this.match(TSqlParser.MINVALUE);
				}
				break;
			}
			this.state = 4461;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
			case 1:
				{
				this.state = 4455;
				this.match(TSqlParser.MAXVALUE);
				this.state = 4457;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
				case 1:
					{
					this.state = 4456;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 4459;
				this.match(TSqlParser.NO);
				this.state = 4460;
				this.match(TSqlParser.MAXVALUE);
				}
				break;
			}
			this.state = 4466;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				{
				this.state = 4463;
				this.match(TSqlParser.CYCLE);
				}
				break;

			case 2:
				{
				this.state = 4464;
				this.match(TSqlParser.NO);
				this.state = 4465;
				this.match(TSqlParser.CYCLE);
				}
				break;
			}
			this.state = 4474;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
			case 1:
				{
				this.state = 4468;
				this.match(TSqlParser.CACHE);
				this.state = 4470;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 498, this._ctx) ) {
				case 1:
					{
					this.state = 4469;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 4472;
				this.match(TSqlParser.NO);
				this.state = 4473;
				this.match(TSqlParser.CACHE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_audit(): Alter_server_auditContext {
		let _localctx: Alter_server_auditContext = new Alter_server_auditContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, TSqlParser.RULE_alter_server_audit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4476;
			this.match(TSqlParser.ALTER);
			this.state = 4477;
			this.match(TSqlParser.SERVER);
			this.state = 4478;
			this.match(TSqlParser.AUDIT);
			this.state = 4479;
			_localctx._audit_name = this.id();
			this.state = 4611;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 524, this._ctx) ) {
			case 1:
				{
				this.state = 4527;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.TO) {
					{
					this.state = 4480;
					this.match(TSqlParser.TO);
					this.state = 4525;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.FILE:
						{
						this.state = 4481;
						this.match(TSqlParser.FILE);
						{
						this.state = 4482;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 4519;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TSqlParser.FILEPATH || ((((_la - 579)) & ~0x1F) === 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_FILES - 579)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXSIZE - 579)))) !== 0) || _la === TSqlParser.RESERVE_DISK_SPACE || _la === TSqlParser.COMMA) {
							{
							this.state = 4517;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 506, this._ctx) ) {
							case 1:
								{
								this.state = 4484;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4483;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4486;
								this.match(TSqlParser.FILEPATH);
								this.state = 4487;
								this.match(TSqlParser.EQUAL);
								this.state = 4488;
								_localctx._filepath = this.match(TSqlParser.STRING);
								}
								break;

							case 2:
								{
								this.state = 4490;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4489;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4492;
								this.match(TSqlParser.MAXSIZE);
								this.state = 4493;
								this.match(TSqlParser.EQUAL);
								this.state = 4497;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.DECIMAL:
									{
									this.state = 4494;
									this.match(TSqlParser.DECIMAL);
									this.state = 4495;
									_la = this._input.LA(1);
									if (!(_la === TSqlParser.GB || _la === TSqlParser.MB || _la === TSqlParser.TB)) {
									this._errHandler.recoverInline(this);
									} else {
										if (this._input.LA(1) === Token.EOF) {
											this.matchedEOF = true;
										}

										this._errHandler.reportMatch(this);
										this.consume();
									}
									}
									break;
								case TSqlParser.UNLIMITED:
									{
									this.state = 4496;
									this.match(TSqlParser.UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;

							case 3:
								{
								this.state = 4500;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4499;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4502;
								this.match(TSqlParser.MAX_ROLLOVER_FILES);
								this.state = 4503;
								this.match(TSqlParser.EQUAL);
								this.state = 4504;
								_localctx._max_rollover_files = this._input.LT(1);
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.UNLIMITED || _la === TSqlParser.DECIMAL)) {
									_localctx._max_rollover_files = this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;

							case 4:
								{
								this.state = 4506;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4505;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4508;
								this.match(TSqlParser.MAX_FILES);
								this.state = 4509;
								this.match(TSqlParser.EQUAL);
								this.state = 4510;
								_localctx._max_files = this.match(TSqlParser.DECIMAL);
								}
								break;

							case 5:
								{
								this.state = 4512;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4511;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4514;
								this.match(TSqlParser.RESERVE_DISK_SPACE);
								this.state = 4515;
								this.match(TSqlParser.EQUAL);
								this.state = 4516;
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
								this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;
							}
							}
							this.state = 4521;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 4522;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						break;
					case TSqlParser.APPLICATION_LOG:
						{
						this.state = 4523;
						this.match(TSqlParser.APPLICATION_LOG);
						}
						break;
					case TSqlParser.SECURITY_LOG:
						{
						this.state = 4524;
						this.match(TSqlParser.SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4555;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 515, this._ctx) ) {
				case 1:
					{
					this.state = 4529;
					this.match(TSqlParser.WITH);
					this.state = 4530;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 4551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.ON_FAILURE || _la === TSqlParser.STATE || _la === TSqlParser.QUEUE_DELAY || _la === TSqlParser.COMMA) {
						{
						this.state = 4549;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 513, this._ctx) ) {
						case 1:
							{
							this.state = 4532;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4531;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4534;
							this.match(TSqlParser.QUEUE_DELAY);
							this.state = 4535;
							this.match(TSqlParser.EQUAL);
							this.state = 4536;
							_localctx._queue_delay = this.match(TSqlParser.DECIMAL);
							}
							break;

						case 2:
							{
							this.state = 4538;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4537;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4540;
							this.match(TSqlParser.ON_FAILURE);
							this.state = 4541;
							this.match(TSqlParser.EQUAL);
							this.state = 4542;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.CONTINUE || _la === TSqlParser.SHUTDOWN || _la === TSqlParser.FAIL_OPERATION)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 3:
							{
							this.state = 4544;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4543;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4546;
							this.match(TSqlParser.STATE);
							this.state = 4547;
							this.match(TSqlParser.EQUAL);
							this.state = 4548;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;
						}
						}
						this.state = 4553;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4554;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 4603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.WHERE) {
					{
					this.state = 4557;
					this.match(TSqlParser.WHERE);
					this.state = 4601;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 522, this._ctx) ) {
					case 1:
						{
						this.state = 4559;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 4558;
							this.match(TSqlParser.COMMA);
							}
						}

						{
						this.state = 4562;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.NOT) {
							{
							this.state = 4561;
							this.match(TSqlParser.NOT);
							}
						}

						}
						this.state = 4564;
						_localctx._event_field_name = this.id();
						this.state = 4576;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 518, this._ctx) ) {
						case 1:
							{
							this.state = 4565;
							this.match(TSqlParser.EQUAL);
							}
							break;

						case 2:
							{
							{
							this.state = 4566;
							this.match(TSqlParser.LESS);
							this.state = 4567;
							this.match(TSqlParser.GREATER);
							}
							}
							break;

						case 3:
							{
							{
							this.state = 4568;
							this.match(TSqlParser.EXCLAMATION);
							this.state = 4569;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 4:
							{
							this.state = 4570;
							this.match(TSqlParser.GREATER);
							}
							break;

						case 5:
							{
							{
							this.state = 4571;
							this.match(TSqlParser.GREATER);
							this.state = 4572;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 6:
							{
							this.state = 4573;
							this.match(TSqlParser.LESS);
							}
							break;

						case 7:
							{
							this.state = 4574;
							this.match(TSqlParser.LESS);
							this.state = 4575;
							this.match(TSqlParser.EQUAL);
							}
							break;
						}
						this.state = 4578;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 2:
						{
						this.state = 4581;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 4580;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 4583;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.AND || _la === TSqlParser.OR)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4585;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.NOT) {
							{
							this.state = 4584;
							this.match(TSqlParser.NOT);
							}
						}

						this.state = 4598;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 521, this._ctx) ) {
						case 1:
							{
							this.state = 4587;
							this.match(TSqlParser.EQUAL);
							}
							break;

						case 2:
							{
							{
							this.state = 4588;
							this.match(TSqlParser.LESS);
							this.state = 4589;
							this.match(TSqlParser.GREATER);
							}
							}
							break;

						case 3:
							{
							{
							this.state = 4590;
							this.match(TSqlParser.EXCLAMATION);
							this.state = 4591;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 4:
							{
							this.state = 4592;
							this.match(TSqlParser.GREATER);
							}
							break;

						case 5:
							{
							{
							this.state = 4593;
							this.match(TSqlParser.GREATER);
							this.state = 4594;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 6:
							{
							this.state = 4595;
							this.match(TSqlParser.LESS);
							}
							break;

						case 7:
							{
							this.state = 4596;
							this.match(TSqlParser.LESS);
							this.state = 4597;
							this.match(TSqlParser.EQUAL);
							}
							break;
						}
						this.state = 4600;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				{
				this.state = 4605;
				this.match(TSqlParser.REMOVE);
				this.state = 4606;
				this.match(TSqlParser.WHERE);
				}
				break;

			case 3:
				{
				this.state = 4607;
				this.match(TSqlParser.MODIFY);
				this.state = 4608;
				this.match(TSqlParser.NAME);
				this.state = 4609;
				this.match(TSqlParser.EQUAL);
				this.state = 4610;
				_localctx._new_audit_name = this.id();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_server_audit(): Create_server_auditContext {
		let _localctx: Create_server_auditContext = new Create_server_auditContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, TSqlParser.RULE_create_server_audit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4613;
			this.match(TSqlParser.CREATE);
			this.state = 4614;
			this.match(TSqlParser.SERVER);
			this.state = 4615;
			this.match(TSqlParser.AUDIT);
			this.state = 4616;
			_localctx._audit_name = this.id();
			this.state = 4754;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 550, this._ctx) ) {
			case 1:
				{
				this.state = 4664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.TO) {
					{
					this.state = 4617;
					this.match(TSqlParser.TO);
					this.state = 4662;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.FILE:
						{
						this.state = 4618;
						this.match(TSqlParser.FILE);
						{
						this.state = 4619;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 4656;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TSqlParser.FILEPATH || ((((_la - 579)) & ~0x1F) === 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_FILES - 579)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXSIZE - 579)))) !== 0) || _la === TSqlParser.RESERVE_DISK_SPACE || _la === TSqlParser.COMMA) {
							{
							this.state = 4654;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
							case 1:
								{
								this.state = 4621;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4620;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4623;
								this.match(TSqlParser.FILEPATH);
								this.state = 4624;
								this.match(TSqlParser.EQUAL);
								this.state = 4625;
								_localctx._filepath = this.match(TSqlParser.STRING);
								}
								break;

							case 2:
								{
								this.state = 4627;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4626;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4629;
								this.match(TSqlParser.MAXSIZE);
								this.state = 4630;
								this.match(TSqlParser.EQUAL);
								this.state = 4634;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.DECIMAL:
									{
									this.state = 4631;
									this.match(TSqlParser.DECIMAL);
									this.state = 4632;
									_la = this._input.LA(1);
									if (!(_la === TSqlParser.GB || _la === TSqlParser.MB || _la === TSqlParser.TB)) {
									this._errHandler.recoverInline(this);
									} else {
										if (this._input.LA(1) === Token.EOF) {
											this.matchedEOF = true;
										}

										this._errHandler.reportMatch(this);
										this.consume();
									}
									}
									break;
								case TSqlParser.UNLIMITED:
									{
									this.state = 4633;
									this.match(TSqlParser.UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;

							case 3:
								{
								this.state = 4637;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4636;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4639;
								this.match(TSqlParser.MAX_ROLLOVER_FILES);
								this.state = 4640;
								this.match(TSqlParser.EQUAL);
								this.state = 4641;
								_localctx._max_rollover_files = this._input.LT(1);
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.UNLIMITED || _la === TSqlParser.DECIMAL)) {
									_localctx._max_rollover_files = this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;

							case 4:
								{
								this.state = 4643;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4642;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4645;
								this.match(TSqlParser.MAX_FILES);
								this.state = 4646;
								this.match(TSqlParser.EQUAL);
								this.state = 4647;
								_localctx._max_files = this.match(TSqlParser.DECIMAL);
								}
								break;

							case 5:
								{
								this.state = 4649;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4648;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4651;
								this.match(TSqlParser.RESERVE_DISK_SPACE);
								this.state = 4652;
								this.match(TSqlParser.EQUAL);
								this.state = 4653;
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
								this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;
							}
							}
							this.state = 4658;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 4659;
						this.match(TSqlParser.RR_BRACKET);
						}
						}
						break;
					case TSqlParser.APPLICATION_LOG:
						{
						this.state = 4660;
						this.match(TSqlParser.APPLICATION_LOG);
						}
						break;
					case TSqlParser.SECURITY_LOG:
						{
						this.state = 4661;
						this.match(TSqlParser.SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4698;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 541, this._ctx) ) {
				case 1:
					{
					this.state = 4666;
					this.match(TSqlParser.WITH);
					this.state = 4667;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 4694;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.ON_FAILURE || _la === TSqlParser.STATE || _la === TSqlParser.AUDIT_GUID || _la === TSqlParser.QUEUE_DELAY || _la === TSqlParser.COMMA) {
						{
						this.state = 4692;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 539, this._ctx) ) {
						case 1:
							{
							this.state = 4669;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4668;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4671;
							this.match(TSqlParser.QUEUE_DELAY);
							this.state = 4672;
							this.match(TSqlParser.EQUAL);
							this.state = 4673;
							_localctx._queue_delay = this.match(TSqlParser.DECIMAL);
							}
							break;

						case 2:
							{
							this.state = 4675;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4674;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4677;
							this.match(TSqlParser.ON_FAILURE);
							this.state = 4678;
							this.match(TSqlParser.EQUAL);
							this.state = 4679;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.CONTINUE || _la === TSqlParser.SHUTDOWN || _la === TSqlParser.FAIL_OPERATION)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 3:
							{
							this.state = 4681;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4680;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4683;
							this.match(TSqlParser.STATE);
							this.state = 4684;
							this.match(TSqlParser.EQUAL);
							this.state = 4685;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 4:
							{
							this.state = 4687;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 4686;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 4689;
							this.match(TSqlParser.AUDIT_GUID);
							this.state = 4690;
							this.match(TSqlParser.EQUAL);
							this.state = 4691;
							_localctx._audit_guid = this.id();
							}
							break;
						}
						}
						this.state = 4696;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4697;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 4746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.WHERE) {
					{
					this.state = 4700;
					this.match(TSqlParser.WHERE);
					this.state = 4744;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 548, this._ctx) ) {
					case 1:
						{
						this.state = 4702;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 4701;
							this.match(TSqlParser.COMMA);
							}
						}

						{
						this.state = 4705;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.NOT) {
							{
							this.state = 4704;
							this.match(TSqlParser.NOT);
							}
						}

						}
						this.state = 4707;
						_localctx._event_field_name = this.id();
						this.state = 4719;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 544, this._ctx) ) {
						case 1:
							{
							this.state = 4708;
							this.match(TSqlParser.EQUAL);
							}
							break;

						case 2:
							{
							{
							this.state = 4709;
							this.match(TSqlParser.LESS);
							this.state = 4710;
							this.match(TSqlParser.GREATER);
							}
							}
							break;

						case 3:
							{
							{
							this.state = 4711;
							this.match(TSqlParser.EXCLAMATION);
							this.state = 4712;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 4:
							{
							this.state = 4713;
							this.match(TSqlParser.GREATER);
							}
							break;

						case 5:
							{
							{
							this.state = 4714;
							this.match(TSqlParser.GREATER);
							this.state = 4715;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 6:
							{
							this.state = 4716;
							this.match(TSqlParser.LESS);
							}
							break;

						case 7:
							{
							this.state = 4717;
							this.match(TSqlParser.LESS);
							this.state = 4718;
							this.match(TSqlParser.EQUAL);
							}
							break;
						}
						this.state = 4721;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 2:
						{
						this.state = 4724;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 4723;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 4726;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.AND || _la === TSqlParser.OR)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4728;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.NOT) {
							{
							this.state = 4727;
							this.match(TSqlParser.NOT);
							}
						}

						this.state = 4741;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 547, this._ctx) ) {
						case 1:
							{
							this.state = 4730;
							this.match(TSqlParser.EQUAL);
							}
							break;

						case 2:
							{
							{
							this.state = 4731;
							this.match(TSqlParser.LESS);
							this.state = 4732;
							this.match(TSqlParser.GREATER);
							}
							}
							break;

						case 3:
							{
							{
							this.state = 4733;
							this.match(TSqlParser.EXCLAMATION);
							this.state = 4734;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 4:
							{
							this.state = 4735;
							this.match(TSqlParser.GREATER);
							}
							break;

						case 5:
							{
							{
							this.state = 4736;
							this.match(TSqlParser.GREATER);
							this.state = 4737;
							this.match(TSqlParser.EQUAL);
							}
							}
							break;

						case 6:
							{
							this.state = 4738;
							this.match(TSqlParser.LESS);
							}
							break;

						case 7:
							{
							this.state = 4739;
							this.match(TSqlParser.LESS);
							this.state = 4740;
							this.match(TSqlParser.EQUAL);
							}
							break;
						}
						this.state = 4743;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				{
				this.state = 4748;
				this.match(TSqlParser.REMOVE);
				this.state = 4749;
				this.match(TSqlParser.WHERE);
				}
				break;

			case 3:
				{
				this.state = 4750;
				this.match(TSqlParser.MODIFY);
				this.state = 4751;
				this.match(TSqlParser.NAME);
				this.state = 4752;
				this.match(TSqlParser.EQUAL);
				this.state = 4753;
				_localctx._new_audit_name = this.id();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_audit_specification(): Alter_server_audit_specificationContext {
		let _localctx: Alter_server_audit_specificationContext = new Alter_server_audit_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, TSqlParser.RULE_alter_server_audit_specification);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4756;
			this.match(TSqlParser.ALTER);
			this.state = 4757;
			this.match(TSqlParser.SERVER);
			this.state = 4758;
			this.match(TSqlParser.AUDIT);
			this.state = 4759;
			this.match(TSqlParser.SPECIFICATION);
			this.state = 4760;
			_localctx._audit_specification_name = this.id();
			this.state = 4765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 4761;
				this.match(TSqlParser.FOR);
				this.state = 4762;
				this.match(TSqlParser.SERVER);
				this.state = 4763;
				this.match(TSqlParser.AUDIT);
				this.state = 4764;
				_localctx._audit_name = this.id();
				}
			}

			this.state = 4774;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4767;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4768;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 4769;
					_localctx._audit_action_group_name = this.id();
					this.state = 4770;
					this.match(TSqlParser.RR_BRACKET);
					}
					}
				}
				this.state = 4776;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			}
			this.state = 4783;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				{
				this.state = 4777;
				this.match(TSqlParser.WITH);
				this.state = 4778;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4779;
				this.match(TSqlParser.STATE);
				this.state = 4780;
				this.match(TSqlParser.EQUAL);
				this.state = 4781;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4782;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_server_audit_specification(): Create_server_audit_specificationContext {
		let _localctx: Create_server_audit_specificationContext = new Create_server_audit_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, TSqlParser.RULE_create_server_audit_specification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4785;
			this.match(TSqlParser.CREATE);
			this.state = 4786;
			this.match(TSqlParser.SERVER);
			this.state = 4787;
			this.match(TSqlParser.AUDIT);
			this.state = 4788;
			this.match(TSqlParser.SPECIFICATION);
			this.state = 4789;
			_localctx._audit_specification_name = this.id();
			this.state = 4794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 4790;
				this.match(TSqlParser.FOR);
				this.state = 4791;
				this.match(TSqlParser.SERVER);
				this.state = 4792;
				this.match(TSqlParser.AUDIT);
				this.state = 4793;
				_localctx._audit_name = this.id();
				}
			}

			this.state = 4803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.ADD) {
				{
				{
				this.state = 4796;
				this.match(TSqlParser.ADD);
				this.state = 4797;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4798;
				_localctx._audit_action_group_name = this.id();
				this.state = 4799;
				this.match(TSqlParser.RR_BRACKET);
				}
				}
				this.state = 4805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4812;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 556, this._ctx) ) {
			case 1:
				{
				this.state = 4806;
				this.match(TSqlParser.WITH);
				this.state = 4807;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4808;
				this.match(TSqlParser.STATE);
				this.state = 4809;
				this.match(TSqlParser.EQUAL);
				this.state = 4810;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4811;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_configuration(): Alter_server_configurationContext {
		let _localctx: Alter_server_configurationContext = new Alter_server_configurationContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, TSqlParser.RULE_alter_server_configuration);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4814;
			this.match(TSqlParser.ALTER);
			this.state = 4815;
			this.match(TSqlParser.SERVER);
			this.state = 4816;
			this.match(TSqlParser.CONFIGURATION);
			this.state = 4817;
			this.match(TSqlParser.SET);
			{
			this.state = 4923;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.PROCESS:
				{
				this.state = 4818;
				this.match(TSqlParser.PROCESS);
				this.state = 4819;
				this.match(TSqlParser.AFFINITY);
				this.state = 4855;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CPU:
					{
					this.state = 4820;
					this.match(TSqlParser.CPU);
					this.state = 4821;
					this.match(TSqlParser.EQUAL);
					this.state = 4837;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.AUTO:
						{
						this.state = 4822;
						this.match(TSqlParser.AUTO);
						}
						break;
					case TSqlParser.DECIMAL:
					case TSqlParser.COMMA:
						{
						this.state = 4833;
						this._errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								this.state = 4833;
								this._errHandler.sync(this);
								switch ( this.interpreter.adaptivePredict(this._input, 559, this._ctx) ) {
								case 1:
									{
									this.state = 4824;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 4823;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 4826;
									this.match(TSqlParser.DECIMAL);
									}
									break;

								case 2:
									{
									this.state = 4828;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 4827;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 4830;
									this.match(TSqlParser.DECIMAL);
									this.state = 4831;
									this.match(TSqlParser.TO);
									this.state = 4832;
									this.match(TSqlParser.DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							this.state = 4835;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
						} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case TSqlParser.NUMANODE:
					{
					this.state = 4839;
					this.match(TSqlParser.NUMANODE);
					this.state = 4840;
					this.match(TSqlParser.EQUAL);
					this.state = 4851;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							this.state = 4851;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 564, this._ctx) ) {
							case 1:
								{
								this.state = 4842;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4841;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4844;
								this.match(TSqlParser.DECIMAL);
								}
								break;

							case 2:
								{
								this.state = 4846;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 4845;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 4848;
								this.match(TSqlParser.DECIMAL);
								this.state = 4849;
								this.match(TSqlParser.TO);
								this.state = 4850;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 4853;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 565, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.DIAGNOSTICS:
				{
				this.state = 4857;
				this.match(TSqlParser.DIAGNOSTICS);
				this.state = 4858;
				this.match(TSqlParser.LOG);
				this.state = 4874;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ON:
					{
					this.state = 4859;
					this.match(TSqlParser.ON);
					}
					break;
				case TSqlParser.OFF:
					{
					this.state = 4860;
					this.match(TSqlParser.OFF);
					}
					break;
				case TSqlParser.PATH:
					{
					this.state = 4861;
					this.match(TSqlParser.PATH);
					this.state = 4862;
					this.match(TSqlParser.EQUAL);
					this.state = 4863;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.MAX_SIZE:
					{
					this.state = 4864;
					this.match(TSqlParser.MAX_SIZE);
					this.state = 4865;
					this.match(TSqlParser.EQUAL);
					this.state = 4869;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.DECIMAL:
						{
						this.state = 4866;
						this.match(TSqlParser.DECIMAL);
						this.state = 4867;
						this.match(TSqlParser.MB);
						}
						break;
					case TSqlParser.DEFAULT:
						{
						this.state = 4868;
						this.match(TSqlParser.DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case TSqlParser.MAX_FILES:
					{
					this.state = 4871;
					this.match(TSqlParser.MAX_FILES);
					this.state = 4872;
					this.match(TSqlParser.EQUAL);
					this.state = 4873;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.DECIMAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.FAILOVER:
				{
				this.state = 4876;
				this.match(TSqlParser.FAILOVER);
				this.state = 4877;
				this.match(TSqlParser.CLUSTER);
				this.state = 4878;
				this.match(TSqlParser.PROPERTY);
				this.state = 4896;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.VERBOSELOGGING:
					{
					this.state = 4879;
					this.match(TSqlParser.VERBOSELOGGING);
					this.state = 4880;
					this.match(TSqlParser.EQUAL);
					this.state = 4881;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.SQLDUMPERFLAGS:
					{
					this.state = 4882;
					this.match(TSqlParser.SQLDUMPERFLAGS);
					this.state = 4883;
					this.match(TSqlParser.EQUAL);
					this.state = 4884;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.SQLDUMPERPATH:
					{
					this.state = 4885;
					this.match(TSqlParser.SQLDUMPERPATH);
					this.state = 4886;
					this.match(TSqlParser.EQUAL);
					this.state = 4887;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.SQLDUMPERTIMEOUT:
					{
					this.state = 4888;
					this.match(TSqlParser.SQLDUMPERTIMEOUT);
					this.state = 4889;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.FAILURECONDITIONLEVEL:
					{
					this.state = 4890;
					this.match(TSqlParser.FAILURECONDITIONLEVEL);
					this.state = 4891;
					this.match(TSqlParser.EQUAL);
					this.state = 4892;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.STRING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.HEALTHCHECKTIMEOUT:
					{
					this.state = 4893;
					this.match(TSqlParser.HEALTHCHECKTIMEOUT);
					this.state = 4894;
					this.match(TSqlParser.EQUAL);
					this.state = 4895;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DEFAULT || _la === TSqlParser.DECIMAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.HADR:
				{
				this.state = 4898;
				this.match(TSqlParser.HADR);
				this.state = 4899;
				this.match(TSqlParser.CLUSTER);
				this.state = 4900;
				this.match(TSqlParser.CONTEXT);
				this.state = 4901;
				this.match(TSqlParser.EQUAL);
				this.state = 4902;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.LOCAL || _la === TSqlParser.STRING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.BUFFER:
				{
				this.state = 4903;
				this.match(TSqlParser.BUFFER);
				this.state = 4904;
				this.match(TSqlParser.POOL);
				this.state = 4905;
				this.match(TSqlParser.EXTENSION);
				this.state = 4918;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ON:
					{
					this.state = 4906;
					this.match(TSqlParser.ON);
					this.state = 4907;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 4908;
					this.match(TSqlParser.FILENAME);
					this.state = 4909;
					this.match(TSqlParser.EQUAL);
					this.state = 4910;
					this.match(TSqlParser.STRING);
					this.state = 4911;
					this.match(TSqlParser.COMMA);
					this.state = 4912;
					this.match(TSqlParser.SIZE);
					this.state = 4913;
					this.match(TSqlParser.EQUAL);
					this.state = 4914;
					this.match(TSqlParser.DECIMAL);
					this.state = 4915;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.GB || _la === TSqlParser.KB || _la === TSqlParser.MB)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4916;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				case TSqlParser.OFF:
					{
					this.state = 4917;
					this.match(TSqlParser.OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.SET:
				{
				this.state = 4920;
				this.match(TSqlParser.SET);
				this.state = 4921;
				this.match(TSqlParser.SOFTNUMA);
				this.state = 4922;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_role(): Alter_server_roleContext {
		let _localctx: Alter_server_roleContext = new Alter_server_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, TSqlParser.RULE_alter_server_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4925;
			this.match(TSqlParser.ALTER);
			this.state = 4926;
			this.match(TSqlParser.SERVER);
			this.state = 4927;
			this.match(TSqlParser.ROLE);
			this.state = 4928;
			_localctx._server_role_name = this.id();
			this.state = 4936;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ADD:
			case TSqlParser.DROP:
				{
				this.state = 4929;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4930;
				this.match(TSqlParser.MEMBER);
				this.state = 4931;
				_localctx._server_principal = this.id();
				}
				break;
			case TSqlParser.WITH:
				{
				this.state = 4932;
				this.match(TSqlParser.WITH);
				this.state = 4933;
				this.match(TSqlParser.NAME);
				this.state = 4934;
				this.match(TSqlParser.EQUAL);
				this.state = 4935;
				_localctx._new_server_role_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_server_role(): Create_server_roleContext {
		let _localctx: Create_server_roleContext = new Create_server_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, TSqlParser.RULE_create_server_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4938;
			this.match(TSqlParser.CREATE);
			this.state = 4939;
			this.match(TSqlParser.SERVER);
			this.state = 4940;
			this.match(TSqlParser.ROLE);
			this.state = 4941;
			_localctx._server_role = this.id();
			this.state = 4944;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 4942;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4943;
				_localctx._server_principal = this.id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_role_pdw(): Alter_server_role_pdwContext {
		let _localctx: Alter_server_role_pdwContext = new Alter_server_role_pdwContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, TSqlParser.RULE_alter_server_role_pdw);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4946;
			this.match(TSqlParser.ALTER);
			this.state = 4947;
			this.match(TSqlParser.SERVER);
			this.state = 4948;
			this.match(TSqlParser.ROLE);
			this.state = 4949;
			_localctx._server_role_name = this.id();
			this.state = 4950;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4951;
			this.match(TSqlParser.MEMBER);
			this.state = 4952;
			_localctx._login = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_service(): Alter_serviceContext {
		let _localctx: Alter_serviceContext = new Alter_serviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, TSqlParser.RULE_alter_service);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4954;
			this.match(TSqlParser.ALTER);
			this.state = 4955;
			this.match(TSqlParser.SERVICE);
			this.state = 4956;
			_localctx._modified_service_name = this.id();
			this.state = 4964;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ON) {
				{
				this.state = 4957;
				this.match(TSqlParser.ON);
				this.state = 4958;
				this.match(TSqlParser.QUEUE);
				{
				this.state = 4959;
				_localctx._schema_name = this.id();
				this.state = 4960;
				this.match(TSqlParser.DOT);
				}
				this.state = 4962;
				_localctx._queue_name = this.id();
				}
			}

			this.state = 4973;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 576, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4967;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4966;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4969;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4970;
					_localctx._modified_contract_name = this.id();
					}
					}
				}
				this.state = 4975;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 576, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_service(): Create_serviceContext {
		let _localctx: Create_serviceContext = new Create_serviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, TSqlParser.RULE_create_service);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4976;
			this.match(TSqlParser.CREATE);
			this.state = 4977;
			this.match(TSqlParser.SERVICE);
			this.state = 4978;
			_localctx._create_service_name = this.id();
			this.state = 4981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 4979;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 4980;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 4983;
			this.match(TSqlParser.ON);
			this.state = 4984;
			this.match(TSqlParser.QUEUE);
			this.state = 4988;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 578, this._ctx) ) {
			case 1:
				{
				this.state = 4985;
				_localctx._schema_name = this.id();
				this.state = 4986;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 4990;
			_localctx._queue_name = this.id();
			this.state = 5004;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
			case 1:
				{
				this.state = 4991;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 4999;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4993;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 4992;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 4997;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.CALLED:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.INIT:
					case TSqlParser.KEY:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.ID:
						{
						this.state = 4995;
						this.id();
						}
						break;
					case TSqlParser.DEFAULT:
						{
						this.state = 4996;
						this.match(TSqlParser.DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					this.state = 5001;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || _la === TSqlParser.DEFAULT || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
				this.state = 5003;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_service_master_key(): Alter_service_master_keyContext {
		let _localctx: Alter_service_master_keyContext = new Alter_service_master_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, TSqlParser.RULE_alter_service_master_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5006;
			this.match(TSqlParser.ALTER);
			this.state = 5007;
			this.match(TSqlParser.SERVICE);
			this.state = 5008;
			this.match(TSqlParser.MASTER);
			this.state = 5009;
			this.match(TSqlParser.KEY);
			this.state = 5031;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.REGENERATE:
			case TSqlParser.FORCE:
				{
				this.state = 5011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FORCE) {
					{
					this.state = 5010;
					this.match(TSqlParser.FORCE);
					}
				}

				this.state = 5013;
				this.match(TSqlParser.REGENERATE);
				}
				break;
			case TSqlParser.WITH:
				{
				{
				this.state = 5014;
				this.match(TSqlParser.WITH);
				this.state = 5029;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 584, this._ctx) ) {
				case 1:
					{
					this.state = 5015;
					this.match(TSqlParser.OLD_ACCOUNT);
					this.state = 5016;
					this.match(TSqlParser.EQUAL);
					this.state = 5017;
					_localctx._acold_account_name = this.match(TSqlParser.STRING);
					this.state = 5018;
					this.match(TSqlParser.COMMA);
					this.state = 5019;
					this.match(TSqlParser.OLD_PASSWORD);
					this.state = 5020;
					this.match(TSqlParser.EQUAL);
					this.state = 5021;
					_localctx._old_password = this.match(TSqlParser.STRING);
					}
					break;

				case 2:
					{
					this.state = 5022;
					this.match(TSqlParser.NEW_ACCOUNT);
					this.state = 5023;
					this.match(TSqlParser.EQUAL);
					this.state = 5024;
					_localctx._new_account_name = this.match(TSqlParser.STRING);
					this.state = 5025;
					this.match(TSqlParser.COMMA);
					this.state = 5026;
					this.match(TSqlParser.NEW_PASSWORD);
					this.state = 5027;
					this.match(TSqlParser.EQUAL);
					this.state = 5028;
					_localctx._new_password = this.match(TSqlParser.STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_symmetric_key(): Alter_symmetric_keyContext {
		let _localctx: Alter_symmetric_keyContext = new Alter_symmetric_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, TSqlParser.RULE_alter_symmetric_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5033;
			this.match(TSqlParser.ALTER);
			this.state = 5034;
			this.match(TSqlParser.SYMMETRIC);
			this.state = 5035;
			this.match(TSqlParser.KEY);
			this.state = 5036;
			_localctx._key_name = this.id();
			{
			this.state = 5037;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ADD || _la === TSqlParser.DROP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5038;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 5039;
			this.match(TSqlParser.BY);
			this.state = 5051;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CERTIFICATE:
				{
				this.state = 5040;
				this.match(TSqlParser.CERTIFICATE);
				this.state = 5041;
				_localctx._certificate_name = this.id();
				}
				break;
			case TSqlParser.PASSWORD:
				{
				this.state = 5042;
				this.match(TSqlParser.PASSWORD);
				this.state = 5043;
				this.match(TSqlParser.EQUAL);
				this.state = 5044;
				_localctx._password = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.SYMMETRIC:
				{
				this.state = 5045;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 5046;
				this.match(TSqlParser.KEY);
				this.state = 5047;
				_localctx._symmetric_key_name = this.id();
				}
				break;
			case TSqlParser.ASYMMETRIC:
				{
				this.state = 5048;
				this.match(TSqlParser.ASYMMETRIC);
				this.state = 5049;
				this.match(TSqlParser.KEY);
				this.state = 5050;
				_localctx._Asym_key_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_symmetric_key(): Create_symmetric_keyContext {
		let _localctx: Create_symmetric_keyContext = new Create_symmetric_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, TSqlParser.RULE_create_symmetric_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5053;
			this.match(TSqlParser.ALTER);
			this.state = 5054;
			this.match(TSqlParser.SYMMETRIC);
			this.state = 5055;
			this.match(TSqlParser.KEY);
			this.state = 5056;
			_localctx._key_name = this.id();
			this.state = 5059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 5057;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 5058;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 5064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 5061;
				this.match(TSqlParser.FROM);
				this.state = 5062;
				this.match(TSqlParser.PROVIDER);
				this.state = 5063;
				_localctx._provider_name = this.id();
				}
			}

			{
			this.state = 5066;
			this.match(TSqlParser.WITH);
			this.state = 5099;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ALGORITHM:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.PROVIDER_KEY_NAME:
				{
				this.state = 5082;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.KEY_SOURCE:
					{
					this.state = 5067;
					this.match(TSqlParser.KEY_SOURCE);
					this.state = 5068;
					this.match(TSqlParser.EQUAL);
					this.state = 5069;
					_localctx._key_pass_phrase = this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.ALGORITHM:
					{
					this.state = 5070;
					this.match(TSqlParser.ALGORITHM);
					this.state = 5071;
					this.match(TSqlParser.EQUAL);
					this.state = 5072;
					_la = this._input.LA(1);
					if (!(((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) !== 0) || _la === TSqlParser.DES || _la === TSqlParser.DESX || ((((_la - 663)) & ~0x1F) === 0 && ((1 << (_la - 663)) & ((1 << (TSqlParser.RC2 - 663)) | (1 << (TSqlParser.RC4 - 663)) | (1 << (TSqlParser.RC4_128 - 663)))) !== 0) || _la === TSqlParser.TRIPLE_DES || _la === TSqlParser.TRIPLE_DES_3KEY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.IDENTITY_VALUE:
					{
					this.state = 5073;
					this.match(TSqlParser.IDENTITY_VALUE);
					this.state = 5074;
					this.match(TSqlParser.EQUAL);
					this.state = 5075;
					_localctx._identity_phrase = this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.PROVIDER_KEY_NAME:
					{
					this.state = 5076;
					this.match(TSqlParser.PROVIDER_KEY_NAME);
					this.state = 5077;
					this.match(TSqlParser.EQUAL);
					this.state = 5078;
					_localctx._provider_key_name = this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.CREATION_DISPOSITION:
					{
					this.state = 5079;
					this.match(TSqlParser.CREATION_DISPOSITION);
					this.state = 5080;
					this.match(TSqlParser.EQUAL);
					this.state = 5081;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.CREATE_NEW || _la === TSqlParser.OPEN_EXISTING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.ENCRYPTION:
				{
				this.state = 5084;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 5085;
				this.match(TSqlParser.BY);
				this.state = 5097;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CERTIFICATE:
					{
					this.state = 5086;
					this.match(TSqlParser.CERTIFICATE);
					this.state = 5087;
					_localctx._certificate_name = this.id();
					}
					break;
				case TSqlParser.PASSWORD:
					{
					this.state = 5088;
					this.match(TSqlParser.PASSWORD);
					this.state = 5089;
					this.match(TSqlParser.EQUAL);
					this.state = 5090;
					_localctx._password = this.match(TSqlParser.STRING);
					}
					break;
				case TSqlParser.SYMMETRIC:
					{
					this.state = 5091;
					this.match(TSqlParser.SYMMETRIC);
					this.state = 5092;
					this.match(TSqlParser.KEY);
					this.state = 5093;
					_localctx._symmetric_key_name = this.id();
					}
					break;
				case TSqlParser.ASYMMETRIC:
					{
					this.state = 5094;
					this.match(TSqlParser.ASYMMETRIC);
					this.state = 5095;
					this.match(TSqlParser.KEY);
					this.state = 5096;
					_localctx._asym_key_name = this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_synonym(): Create_synonymContext {
		let _localctx: Create_synonymContext = new Create_synonymContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, TSqlParser.RULE_create_synonym);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5101;
			this.match(TSqlParser.CREATE);
			this.state = 5102;
			this.match(TSqlParser.SYNONYM);
			this.state = 5106;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 592, this._ctx) ) {
			case 1:
				{
				this.state = 5103;
				_localctx._schema_name_1 = this.id();
				this.state = 5104;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 5108;
			_localctx._synonym_name = this.id();
			this.state = 5109;
			this.match(TSqlParser.FOR);
			this.state = 5136;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 598, this._ctx) ) {
			case 1:
				{
				this.state = 5113;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 593, this._ctx) ) {
				case 1:
					{
					this.state = 5110;
					_localctx._server_name = this.id();
					this.state = 5111;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 5118;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
				case 1:
					{
					this.state = 5115;
					_localctx._database_name = this.id();
					this.state = 5116;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 5123;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 595, this._ctx) ) {
				case 1:
					{
					this.state = 5120;
					_localctx._schema_name_2 = this.id();
					this.state = 5121;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 5125;
				_localctx._object_name = this.id();
				}
				break;

			case 2:
				{
				this.state = 5129;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
				case 1:
					{
					this.state = 5126;
					_localctx._database_or_schema2 = this.id();
					this.state = 5127;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 5134;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 597, this._ctx) ) {
				case 1:
					{
					this.state = 5131;
					_localctx._schema_id_2_or_object_name = this.id();
					this.state = 5132;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user(): Alter_userContext {
		let _localctx: Alter_userContext = new Alter_userContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, TSqlParser.RULE_alter_user);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5138;
			this.match(TSqlParser.ALTER);
			this.state = 5139;
			this.match(TSqlParser.USER);
			this.state = 5140;
			_localctx._username = this.id();
			this.state = 5141;
			this.match(TSqlParser.WITH);
			this.state = 5192;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					this.state = 5192;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 608, this._ctx) ) {
					case 1:
						{
						this.state = 5143;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5142;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5145;
						this.match(TSqlParser.NAME);
						this.state = 5146;
						this.match(TSqlParser.EQUAL);
						this.state = 5147;
						_localctx._newusername = this.id();
						}
						break;

					case 2:
						{
						this.state = 5149;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5148;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5151;
						this.match(TSqlParser.DEFAULT_SCHEMA);
						this.state = 5152;
						this.match(TSqlParser.EQUAL);
						this.state = 5155;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.CALLED:
						case TSqlParser.DATA_COMPRESSION:
						case TSqlParser.EVENTDATA:
						case TSqlParser.FILENAME:
						case TSqlParser.FILLFACTOR:
						case TSqlParser.FORCESEEK:
						case TSqlParser.INIT:
						case TSqlParser.KEY:
						case TSqlParser.MASTER:
						case TSqlParser.MAX_MEMORY:
						case TSqlParser.OFFSETS:
						case TSqlParser.PAGE:
						case TSqlParser.PUBLIC:
						case TSqlParser.R:
						case TSqlParser.RAW:
						case TSqlParser.RETURN:
						case TSqlParser.RETURNS:
						case TSqlParser.ROWCOUNT:
						case TSqlParser.SAFETY:
						case TSqlParser.SERVER:
						case TSqlParser.SID:
						case TSqlParser.SOURCE:
						case TSqlParser.STATE:
						case TSqlParser.START:
						case TSqlParser.TARGET:
						case TSqlParser.ABSOLUTE:
						case TSqlParser.ACCENT_SENSITIVITY:
						case TSqlParser.ACTION:
						case TSqlParser.ACTIVATION:
						case TSqlParser.ACTIVE:
						case TSqlParser.ADDRESS:
						case TSqlParser.AES_128:
						case TSqlParser.AES_192:
						case TSqlParser.AES_256:
						case TSqlParser.AFFINITY:
						case TSqlParser.AFTER:
						case TSqlParser.AGGREGATE:
						case TSqlParser.ALGORITHM:
						case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
						case TSqlParser.ALLOWED:
						case TSqlParser.ANSI_NULL_DEFAULT:
						case TSqlParser.ANSI_NULLS:
						case TSqlParser.ANSI_PADDING:
						case TSqlParser.ANSI_WARNINGS:
						case TSqlParser.APPLICATION_LOG:
						case TSqlParser.APPLY:
						case TSqlParser.ARITHABORT:
						case TSqlParser.ASSEMBLY:
						case TSqlParser.AUDIT:
						case TSqlParser.AUDIT_GUID:
						case TSqlParser.AUTO:
						case TSqlParser.AUTO_CLEANUP:
						case TSqlParser.AUTO_CLOSE:
						case TSqlParser.AUTO_CREATE_STATISTICS:
						case TSqlParser.AUTO_SHRINK:
						case TSqlParser.AUTO_UPDATE_STATISTICS:
						case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
						case TSqlParser.AVAILABILITY:
						case TSqlParser.AVG:
						case TSqlParser.BACKUP_PRIORITY:
						case TSqlParser.BEGIN_DIALOG:
						case TSqlParser.BIGINT:
						case TSqlParser.BINARY_BASE64:
						case TSqlParser.BINARY_CHECKSUM:
						case TSqlParser.BINDING:
						case TSqlParser.BLOB_STORAGE:
						case TSqlParser.BROKER:
						case TSqlParser.BROKER_INSTANCE:
						case TSqlParser.BULK_LOGGED:
						case TSqlParser.CALLER:
						case TSqlParser.CAP_CPU_PERCENT:
						case TSqlParser.CAST:
						case TSqlParser.CATALOG:
						case TSqlParser.CATCH:
						case TSqlParser.CHANGE_RETENTION:
						case TSqlParser.CHANGE_TRACKING:
						case TSqlParser.CHECKSUM:
						case TSqlParser.CHECKSUM_AGG:
						case TSqlParser.CLEANUP:
						case TSqlParser.COLLECTION:
						case TSqlParser.COLUMN_MASTER_KEY:
						case TSqlParser.COMMITTED:
						case TSqlParser.COMPATIBILITY_LEVEL:
						case TSqlParser.CONCAT:
						case TSqlParser.CONCAT_NULL_YIELDS_NULL:
						case TSqlParser.CONTENT:
						case TSqlParser.CONTROL:
						case TSqlParser.COOKIE:
						case TSqlParser.COUNT:
						case TSqlParser.COUNT_BIG:
						case TSqlParser.COUNTER:
						case TSqlParser.CPU:
						case TSqlParser.CREATE_NEW:
						case TSqlParser.CREATION_DISPOSITION:
						case TSqlParser.CREDENTIAL:
						case TSqlParser.CRYPTOGRAPHIC:
						case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
						case TSqlParser.CURSOR_DEFAULT:
						case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
						case TSqlParser.DATEADD:
						case TSqlParser.DATEDIFF:
						case TSqlParser.DATENAME:
						case TSqlParser.DATEPART:
						case TSqlParser.DAYS:
						case TSqlParser.DB_CHAINING:
						case TSqlParser.DB_FAILOVER:
						case TSqlParser.DECRYPTION:
						case TSqlParser.DEFAULT_DOUBLE_QUOTE:
						case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
						case TSqlParser.DEFAULT_LANGUAGE:
						case TSqlParser.DELAY:
						case TSqlParser.DELAYED_DURABILITY:
						case TSqlParser.DELETED:
						case TSqlParser.DENSE_RANK:
						case TSqlParser.DEPENDENTS:
						case TSqlParser.DES:
						case TSqlParser.DESCRIPTION:
						case TSqlParser.DESX:
						case TSqlParser.DHCP:
						case TSqlParser.DIALOG:
						case TSqlParser.DIRECTORY_NAME:
						case TSqlParser.DISABLE:
						case TSqlParser.DISABLE_BROKER:
						case TSqlParser.DISABLED:
						case TSqlParser.DISK_DRIVE:
						case TSqlParser.DOCUMENT:
						case TSqlParser.DYNAMIC:
						case TSqlParser.EMERGENCY:
						case TSqlParser.EMPTY:
						case TSqlParser.ENABLE:
						case TSqlParser.ENABLE_BROKER:
						case TSqlParser.ENCRYPTED_VALUE:
						case TSqlParser.ENCRYPTION:
						case TSqlParser.ENDPOINT_URL:
						case TSqlParser.ERROR_BROKER_CONVERSATIONS:
						case TSqlParser.EXCLUSIVE:
						case TSqlParser.EXECUTABLE:
						case TSqlParser.EXIST:
						case TSqlParser.EXPAND:
						case TSqlParser.EXPIRY_DATE:
						case TSqlParser.EXPLICIT:
						case TSqlParser.FAIL_OPERATION:
						case TSqlParser.FAILOVER_MODE:
						case TSqlParser.FAILURE:
						case TSqlParser.FAILURE_CONDITION_LEVEL:
						case TSqlParser.FAST:
						case TSqlParser.FAST_FORWARD:
						case TSqlParser.FILEGROUP:
						case TSqlParser.FILEGROWTH:
						case TSqlParser.FILEPATH:
						case TSqlParser.FILESTREAM:
						case TSqlParser.FILTER:
						case TSqlParser.FIRST:
						case TSqlParser.FIRST_VALUE:
						case TSqlParser.FOLLOWING:
						case TSqlParser.FORCE:
						case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case TSqlParser.FORCED:
						case TSqlParser.FORMAT:
						case TSqlParser.FORWARD_ONLY:
						case TSqlParser.FULLSCAN:
						case TSqlParser.FULLTEXT:
						case TSqlParser.GB:
						case TSqlParser.GETDATE:
						case TSqlParser.GETUTCDATE:
						case TSqlParser.GLOBAL:
						case TSqlParser.GO:
						case TSqlParser.GROUP_MAX_REQUESTS:
						case TSqlParser.GROUPING:
						case TSqlParser.GROUPING_ID:
						case TSqlParser.HADR:
						case TSqlParser.HASH:
						case TSqlParser.HEALTH_CHECK_TIMEOUT:
						case TSqlParser.HIGH:
						case TSqlParser.HONOR_BROKER_PRIORITY:
						case TSqlParser.HOURS:
						case TSqlParser.IDENTITY_VALUE:
						case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case TSqlParser.IMMEDIATE:
						case TSqlParser.IMPERSONATE:
						case TSqlParser.IMPORTANCE:
						case TSqlParser.INCREMENTAL:
						case TSqlParser.INITIATOR:
						case TSqlParser.INPUT:
						case TSqlParser.INSENSITIVE:
						case TSqlParser.INSERTED:
						case TSqlParser.INT:
						case TSqlParser.IP:
						case TSqlParser.ISOLATION:
						case TSqlParser.KB:
						case TSqlParser.KEEP:
						case TSqlParser.KEEPFIXED:
						case TSqlParser.KEY_SOURCE:
						case TSqlParser.KEYS:
						case TSqlParser.KEYSET:
						case TSqlParser.LAG:
						case TSqlParser.LAST:
						case TSqlParser.LAST_VALUE:
						case TSqlParser.LEAD:
						case TSqlParser.LEVEL:
						case TSqlParser.LIST:
						case TSqlParser.LISTENER:
						case TSqlParser.LISTENER_URL:
						case TSqlParser.LOB_COMPACTION:
						case TSqlParser.LOCAL:
						case TSqlParser.LOCATION:
						case TSqlParser.LOCK:
						case TSqlParser.LOCK_ESCALATION:
						case TSqlParser.LOGIN:
						case TSqlParser.LOOP:
						case TSqlParser.LOW:
						case TSqlParser.MANUAL:
						case TSqlParser.MARK:
						case TSqlParser.MATERIALIZED:
						case TSqlParser.MAX:
						case TSqlParser.MAX_CPU_PERCENT:
						case TSqlParser.MAX_DOP:
						case TSqlParser.MAX_FILES:
						case TSqlParser.MAX_IOPS_PER_VOLUME:
						case TSqlParser.MAX_MEMORY_PERCENT:
						case TSqlParser.MAX_PROCESSES:
						case TSqlParser.MAX_QUEUE_READERS:
						case TSqlParser.MAX_ROLLOVER_FILES:
						case TSqlParser.MAXDOP:
						case TSqlParser.MAXRECURSION:
						case TSqlParser.MAXSIZE:
						case TSqlParser.MB:
						case TSqlParser.MEDIUM:
						case TSqlParser.MEMORY_OPTIMIZED_DATA:
						case TSqlParser.MESSAGE:
						case TSqlParser.MIN:
						case TSqlParser.MIN_ACTIVE_ROWVERSION:
						case TSqlParser.MIN_CPU_PERCENT:
						case TSqlParser.MIN_IOPS_PER_VOLUME:
						case TSqlParser.MIN_MEMORY_PERCENT:
						case TSqlParser.MINUTES:
						case TSqlParser.MIRROR_ADDRESS:
						case TSqlParser.MIXED_PAGE_ALLOCATION:
						case TSqlParser.MODE:
						case TSqlParser.MODIFY:
						case TSqlParser.MOVE:
						case TSqlParser.MULTI_USER:
						case TSqlParser.NAME:
						case TSqlParser.NESTED_TRIGGERS:
						case TSqlParser.NEW_ACCOUNT:
						case TSqlParser.NEW_BROKER:
						case TSqlParser.NEW_PASSWORD:
						case TSqlParser.NEXT:
						case TSqlParser.NO:
						case TSqlParser.NO_TRUNCATE:
						case TSqlParser.NO_WAIT:
						case TSqlParser.NOCOUNT:
						case TSqlParser.NODES:
						case TSqlParser.NOEXPAND:
						case TSqlParser.NON_TRANSACTED_ACCESS:
						case TSqlParser.NORECOMPUTE:
						case TSqlParser.NORECOVERY:
						case TSqlParser.NOWAIT:
						case TSqlParser.NTILE:
						case TSqlParser.NUMANODE:
						case TSqlParser.NUMBER:
						case TSqlParser.NUMERIC_ROUNDABORT:
						case TSqlParser.OBJECT:
						case TSqlParser.OFFLINE:
						case TSqlParser.OFFSET:
						case TSqlParser.OLD_ACCOUNT:
						case TSqlParser.ONLINE:
						case TSqlParser.ONLY:
						case TSqlParser.OPEN_EXISTING:
						case TSqlParser.OPTIMISTIC:
						case TSqlParser.OPTIMIZE:
						case TSqlParser.OUT:
						case TSqlParser.OUTPUT:
						case TSqlParser.OWNER:
						case TSqlParser.PAGE_VERIFY:
						case TSqlParser.PARAMETERIZATION:
						case TSqlParser.PARTITION:
						case TSqlParser.PARTITIONS:
						case TSqlParser.PARTNER:
						case TSqlParser.PATH:
						case TSqlParser.POISON_MESSAGE_HANDLING:
						case TSqlParser.POOL:
						case TSqlParser.PORT:
						case TSqlParser.PRECEDING:
						case TSqlParser.PRIMARY_ROLE:
						case TSqlParser.PRIOR:
						case TSqlParser.PRIORITY:
						case TSqlParser.PRIORITY_LEVEL:
						case TSqlParser.PRIVATE:
						case TSqlParser.PRIVATE_KEY:
						case TSqlParser.PRIVILEGES:
						case TSqlParser.PROCEDURE_NAME:
						case TSqlParser.PROPERTY:
						case TSqlParser.PROVIDER:
						case TSqlParser.PROVIDER_KEY_NAME:
						case TSqlParser.QUERY:
						case TSqlParser.QUEUE:
						case TSqlParser.QUEUE_DELAY:
						case TSqlParser.QUOTED_IDENTIFIER:
						case TSqlParser.RANGE:
						case TSqlParser.RANK:
						case TSqlParser.RC2:
						case TSqlParser.RC4:
						case TSqlParser.RC4_128:
						case TSqlParser.READ_COMMITTED_SNAPSHOT:
						case TSqlParser.READ_ONLY:
						case TSqlParser.READ_ONLY_ROUTING_LIST:
						case TSqlParser.READ_WRITE:
						case TSqlParser.READONLY:
						case TSqlParser.REBUILD:
						case TSqlParser.RECEIVE:
						case TSqlParser.RECOMPILE:
						case TSqlParser.RECOVERY:
						case TSqlParser.RECURSIVE_TRIGGERS:
						case TSqlParser.RELATIVE:
						case TSqlParser.REMOTE:
						case TSqlParser.REMOTE_SERVICE_NAME:
						case TSqlParser.REMOVE:
						case TSqlParser.REORGANIZE:
						case TSqlParser.REPEATABLE:
						case TSqlParser.REPLICA:
						case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
						case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case TSqlParser.RESERVE_DISK_SPACE:
						case TSqlParser.RESOURCE:
						case TSqlParser.RESOURCE_MANAGER_LOCATION:
						case TSqlParser.RESTRICTED_USER:
						case TSqlParser.RETENTION:
						case TSqlParser.ROBUST:
						case TSqlParser.ROOT:
						case TSqlParser.ROUTE:
						case TSqlParser.ROW:
						case TSqlParser.ROW_NUMBER:
						case TSqlParser.ROWGUID:
						case TSqlParser.ROWS:
						case TSqlParser.SAMPLE:
						case TSqlParser.SCHEMABINDING:
						case TSqlParser.SCOPED:
						case TSqlParser.SCROLL:
						case TSqlParser.SCROLL_LOCKS:
						case TSqlParser.SEARCH:
						case TSqlParser.SECONDARY:
						case TSqlParser.SECONDARY_ONLY:
						case TSqlParser.SECONDARY_ROLE:
						case TSqlParser.SECONDS:
						case TSqlParser.SECRET:
						case TSqlParser.SECURITY_LOG:
						case TSqlParser.SEEDING_MODE:
						case TSqlParser.SELF:
						case TSqlParser.SEMI_SENSITIVE:
						case TSqlParser.SEND:
						case TSqlParser.SENT:
						case TSqlParser.SERIALIZABLE:
						case TSqlParser.SESSION_TIMEOUT:
						case TSqlParser.SETERROR:
						case TSqlParser.SHARE:
						case TSqlParser.SHOWPLAN:
						case TSqlParser.SIGNATURE:
						case TSqlParser.SIMPLE:
						case TSqlParser.SINGLE_USER:
						case TSqlParser.SIZE:
						case TSqlParser.SMALLINT:
						case TSqlParser.SNAPSHOT:
						case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
						case TSqlParser.STANDBY:
						case TSqlParser.START_DATE:
						case TSqlParser.STATIC:
						case TSqlParser.STATS_STREAM:
						case TSqlParser.STATUS:
						case TSqlParser.STDEV:
						case TSqlParser.STDEVP:
						case TSqlParser.STOPLIST:
						case TSqlParser.STUFF:
						case TSqlParser.SUBJECT:
						case TSqlParser.SUM:
						case TSqlParser.SUSPEND:
						case TSqlParser.SYMMETRIC:
						case TSqlParser.SYNCHRONOUS_COMMIT:
						case TSqlParser.SYNONYM:
						case TSqlParser.TAKE:
						case TSqlParser.TARGET_RECOVERY_TIME:
						case TSqlParser.TB:
						case TSqlParser.TEXTIMAGE_ON:
						case TSqlParser.THROW:
						case TSqlParser.TIES:
						case TSqlParser.TIME:
						case TSqlParser.TIMEOUT:
						case TSqlParser.TIMER:
						case TSqlParser.TINYINT:
						case TSqlParser.TORN_PAGE_DETECTION:
						case TSqlParser.TRANSFORM_NOISE_WORDS:
						case TSqlParser.TRIPLE_DES:
						case TSqlParser.TRIPLE_DES_3KEY:
						case TSqlParser.TRUSTWORTHY:
						case TSqlParser.TRY:
						case TSqlParser.TSQL:
						case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
						case TSqlParser.TYPE:
						case TSqlParser.TYPE_WARNING:
						case TSqlParser.UNBOUNDED:
						case TSqlParser.UNCOMMITTED:
						case TSqlParser.UNKNOWN:
						case TSqlParser.UNLIMITED:
						case TSqlParser.USING:
						case TSqlParser.VALID_XML:
						case TSqlParser.VALIDATION:
						case TSqlParser.VALUE:
						case TSqlParser.VAR:
						case TSqlParser.VARP:
						case TSqlParser.VIEW_METADATA:
						case TSqlParser.VIEWS:
						case TSqlParser.WAIT:
						case TSqlParser.WELL_FORMED_XML:
						case TSqlParser.WORK:
						case TSqlParser.WORKLOAD:
						case TSqlParser.XML:
						case TSqlParser.XMLNAMESPACES:
						case TSqlParser.DOUBLE_QUOTE_ID:
						case TSqlParser.SQUARE_BRACKET_ID:
						case TSqlParser.ID:
							{
							this.state = 5153;
							_localctx._schema_name = this.id();
							}
							break;
						case TSqlParser.NULL:
							{
							this.state = 5154;
							this.match(TSqlParser.NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 3:
						{
						this.state = 5158;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5157;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5160;
						this.match(TSqlParser.LOGIN);
						this.state = 5161;
						this.match(TSqlParser.EQUAL);
						this.state = 5162;
						_localctx._loginame = this.id();
						}
						break;

					case 4:
						{
						this.state = 5164;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5163;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5166;
						this.match(TSqlParser.PASSWORD);
						this.state = 5167;
						this.match(TSqlParser.EQUAL);
						this.state = 5168;
						this.match(TSqlParser.STRING);
						this.state = 5172;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5169;
							this.match(TSqlParser.OLD_PASSWORD);
							this.state = 5170;
							this.match(TSqlParser.EQUAL);
							this.state = 5171;
							this.match(TSqlParser.STRING);
							}
							}
							this.state = 5174;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === TSqlParser.OLD_PASSWORD);
						}
						break;

					case 5:
						{
						this.state = 5177;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5176;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5179;
						this.match(TSqlParser.DEFAULT_LANGUAGE);
						this.state = 5180;
						this.match(TSqlParser.EQUAL);
						this.state = 5184;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.NONE:
							{
							this.state = 5181;
							this.match(TSqlParser.NONE);
							}
							break;
						case TSqlParser.DECIMAL:
							{
							this.state = 5182;
							_localctx._lcid = this.match(TSqlParser.DECIMAL);
							}
							break;
						case TSqlParser.CALLED:
						case TSqlParser.DATA_COMPRESSION:
						case TSqlParser.EVENTDATA:
						case TSqlParser.FILENAME:
						case TSqlParser.FILLFACTOR:
						case TSqlParser.FORCESEEK:
						case TSqlParser.INIT:
						case TSqlParser.KEY:
						case TSqlParser.MASTER:
						case TSqlParser.MAX_MEMORY:
						case TSqlParser.OFFSETS:
						case TSqlParser.PAGE:
						case TSqlParser.PUBLIC:
						case TSqlParser.R:
						case TSqlParser.RAW:
						case TSqlParser.RETURN:
						case TSqlParser.RETURNS:
						case TSqlParser.ROWCOUNT:
						case TSqlParser.SAFETY:
						case TSqlParser.SERVER:
						case TSqlParser.SID:
						case TSqlParser.SOURCE:
						case TSqlParser.STATE:
						case TSqlParser.START:
						case TSqlParser.TARGET:
						case TSqlParser.ABSOLUTE:
						case TSqlParser.ACCENT_SENSITIVITY:
						case TSqlParser.ACTION:
						case TSqlParser.ACTIVATION:
						case TSqlParser.ACTIVE:
						case TSqlParser.ADDRESS:
						case TSqlParser.AES_128:
						case TSqlParser.AES_192:
						case TSqlParser.AES_256:
						case TSqlParser.AFFINITY:
						case TSqlParser.AFTER:
						case TSqlParser.AGGREGATE:
						case TSqlParser.ALGORITHM:
						case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
						case TSqlParser.ALLOWED:
						case TSqlParser.ANSI_NULL_DEFAULT:
						case TSqlParser.ANSI_NULLS:
						case TSqlParser.ANSI_PADDING:
						case TSqlParser.ANSI_WARNINGS:
						case TSqlParser.APPLICATION_LOG:
						case TSqlParser.APPLY:
						case TSqlParser.ARITHABORT:
						case TSqlParser.ASSEMBLY:
						case TSqlParser.AUDIT:
						case TSqlParser.AUDIT_GUID:
						case TSqlParser.AUTO:
						case TSqlParser.AUTO_CLEANUP:
						case TSqlParser.AUTO_CLOSE:
						case TSqlParser.AUTO_CREATE_STATISTICS:
						case TSqlParser.AUTO_SHRINK:
						case TSqlParser.AUTO_UPDATE_STATISTICS:
						case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
						case TSqlParser.AVAILABILITY:
						case TSqlParser.AVG:
						case TSqlParser.BACKUP_PRIORITY:
						case TSqlParser.BEGIN_DIALOG:
						case TSqlParser.BIGINT:
						case TSqlParser.BINARY_BASE64:
						case TSqlParser.BINARY_CHECKSUM:
						case TSqlParser.BINDING:
						case TSqlParser.BLOB_STORAGE:
						case TSqlParser.BROKER:
						case TSqlParser.BROKER_INSTANCE:
						case TSqlParser.BULK_LOGGED:
						case TSqlParser.CALLER:
						case TSqlParser.CAP_CPU_PERCENT:
						case TSqlParser.CAST:
						case TSqlParser.CATALOG:
						case TSqlParser.CATCH:
						case TSqlParser.CHANGE_RETENTION:
						case TSqlParser.CHANGE_TRACKING:
						case TSqlParser.CHECKSUM:
						case TSqlParser.CHECKSUM_AGG:
						case TSqlParser.CLEANUP:
						case TSqlParser.COLLECTION:
						case TSqlParser.COLUMN_MASTER_KEY:
						case TSqlParser.COMMITTED:
						case TSqlParser.COMPATIBILITY_LEVEL:
						case TSqlParser.CONCAT:
						case TSqlParser.CONCAT_NULL_YIELDS_NULL:
						case TSqlParser.CONTENT:
						case TSqlParser.CONTROL:
						case TSqlParser.COOKIE:
						case TSqlParser.COUNT:
						case TSqlParser.COUNT_BIG:
						case TSqlParser.COUNTER:
						case TSqlParser.CPU:
						case TSqlParser.CREATE_NEW:
						case TSqlParser.CREATION_DISPOSITION:
						case TSqlParser.CREDENTIAL:
						case TSqlParser.CRYPTOGRAPHIC:
						case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
						case TSqlParser.CURSOR_DEFAULT:
						case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
						case TSqlParser.DATEADD:
						case TSqlParser.DATEDIFF:
						case TSqlParser.DATENAME:
						case TSqlParser.DATEPART:
						case TSqlParser.DAYS:
						case TSqlParser.DB_CHAINING:
						case TSqlParser.DB_FAILOVER:
						case TSqlParser.DECRYPTION:
						case TSqlParser.DEFAULT_DOUBLE_QUOTE:
						case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
						case TSqlParser.DEFAULT_LANGUAGE:
						case TSqlParser.DELAY:
						case TSqlParser.DELAYED_DURABILITY:
						case TSqlParser.DELETED:
						case TSqlParser.DENSE_RANK:
						case TSqlParser.DEPENDENTS:
						case TSqlParser.DES:
						case TSqlParser.DESCRIPTION:
						case TSqlParser.DESX:
						case TSqlParser.DHCP:
						case TSqlParser.DIALOG:
						case TSqlParser.DIRECTORY_NAME:
						case TSqlParser.DISABLE:
						case TSqlParser.DISABLE_BROKER:
						case TSqlParser.DISABLED:
						case TSqlParser.DISK_DRIVE:
						case TSqlParser.DOCUMENT:
						case TSqlParser.DYNAMIC:
						case TSqlParser.EMERGENCY:
						case TSqlParser.EMPTY:
						case TSqlParser.ENABLE:
						case TSqlParser.ENABLE_BROKER:
						case TSqlParser.ENCRYPTED_VALUE:
						case TSqlParser.ENCRYPTION:
						case TSqlParser.ENDPOINT_URL:
						case TSqlParser.ERROR_BROKER_CONVERSATIONS:
						case TSqlParser.EXCLUSIVE:
						case TSqlParser.EXECUTABLE:
						case TSqlParser.EXIST:
						case TSqlParser.EXPAND:
						case TSqlParser.EXPIRY_DATE:
						case TSqlParser.EXPLICIT:
						case TSqlParser.FAIL_OPERATION:
						case TSqlParser.FAILOVER_MODE:
						case TSqlParser.FAILURE:
						case TSqlParser.FAILURE_CONDITION_LEVEL:
						case TSqlParser.FAST:
						case TSqlParser.FAST_FORWARD:
						case TSqlParser.FILEGROUP:
						case TSqlParser.FILEGROWTH:
						case TSqlParser.FILEPATH:
						case TSqlParser.FILESTREAM:
						case TSqlParser.FILTER:
						case TSqlParser.FIRST:
						case TSqlParser.FIRST_VALUE:
						case TSqlParser.FOLLOWING:
						case TSqlParser.FORCE:
						case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case TSqlParser.FORCED:
						case TSqlParser.FORMAT:
						case TSqlParser.FORWARD_ONLY:
						case TSqlParser.FULLSCAN:
						case TSqlParser.FULLTEXT:
						case TSqlParser.GB:
						case TSqlParser.GETDATE:
						case TSqlParser.GETUTCDATE:
						case TSqlParser.GLOBAL:
						case TSqlParser.GO:
						case TSqlParser.GROUP_MAX_REQUESTS:
						case TSqlParser.GROUPING:
						case TSqlParser.GROUPING_ID:
						case TSqlParser.HADR:
						case TSqlParser.HASH:
						case TSqlParser.HEALTH_CHECK_TIMEOUT:
						case TSqlParser.HIGH:
						case TSqlParser.HONOR_BROKER_PRIORITY:
						case TSqlParser.HOURS:
						case TSqlParser.IDENTITY_VALUE:
						case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case TSqlParser.IMMEDIATE:
						case TSqlParser.IMPERSONATE:
						case TSqlParser.IMPORTANCE:
						case TSqlParser.INCREMENTAL:
						case TSqlParser.INITIATOR:
						case TSqlParser.INPUT:
						case TSqlParser.INSENSITIVE:
						case TSqlParser.INSERTED:
						case TSqlParser.INT:
						case TSqlParser.IP:
						case TSqlParser.ISOLATION:
						case TSqlParser.KB:
						case TSqlParser.KEEP:
						case TSqlParser.KEEPFIXED:
						case TSqlParser.KEY_SOURCE:
						case TSqlParser.KEYS:
						case TSqlParser.KEYSET:
						case TSqlParser.LAG:
						case TSqlParser.LAST:
						case TSqlParser.LAST_VALUE:
						case TSqlParser.LEAD:
						case TSqlParser.LEVEL:
						case TSqlParser.LIST:
						case TSqlParser.LISTENER:
						case TSqlParser.LISTENER_URL:
						case TSqlParser.LOB_COMPACTION:
						case TSqlParser.LOCAL:
						case TSqlParser.LOCATION:
						case TSqlParser.LOCK:
						case TSqlParser.LOCK_ESCALATION:
						case TSqlParser.LOGIN:
						case TSqlParser.LOOP:
						case TSqlParser.LOW:
						case TSqlParser.MANUAL:
						case TSqlParser.MARK:
						case TSqlParser.MATERIALIZED:
						case TSqlParser.MAX:
						case TSqlParser.MAX_CPU_PERCENT:
						case TSqlParser.MAX_DOP:
						case TSqlParser.MAX_FILES:
						case TSqlParser.MAX_IOPS_PER_VOLUME:
						case TSqlParser.MAX_MEMORY_PERCENT:
						case TSqlParser.MAX_PROCESSES:
						case TSqlParser.MAX_QUEUE_READERS:
						case TSqlParser.MAX_ROLLOVER_FILES:
						case TSqlParser.MAXDOP:
						case TSqlParser.MAXRECURSION:
						case TSqlParser.MAXSIZE:
						case TSqlParser.MB:
						case TSqlParser.MEDIUM:
						case TSqlParser.MEMORY_OPTIMIZED_DATA:
						case TSqlParser.MESSAGE:
						case TSqlParser.MIN:
						case TSqlParser.MIN_ACTIVE_ROWVERSION:
						case TSqlParser.MIN_CPU_PERCENT:
						case TSqlParser.MIN_IOPS_PER_VOLUME:
						case TSqlParser.MIN_MEMORY_PERCENT:
						case TSqlParser.MINUTES:
						case TSqlParser.MIRROR_ADDRESS:
						case TSqlParser.MIXED_PAGE_ALLOCATION:
						case TSqlParser.MODE:
						case TSqlParser.MODIFY:
						case TSqlParser.MOVE:
						case TSqlParser.MULTI_USER:
						case TSqlParser.NAME:
						case TSqlParser.NESTED_TRIGGERS:
						case TSqlParser.NEW_ACCOUNT:
						case TSqlParser.NEW_BROKER:
						case TSqlParser.NEW_PASSWORD:
						case TSqlParser.NEXT:
						case TSqlParser.NO:
						case TSqlParser.NO_TRUNCATE:
						case TSqlParser.NO_WAIT:
						case TSqlParser.NOCOUNT:
						case TSqlParser.NODES:
						case TSqlParser.NOEXPAND:
						case TSqlParser.NON_TRANSACTED_ACCESS:
						case TSqlParser.NORECOMPUTE:
						case TSqlParser.NORECOVERY:
						case TSqlParser.NOWAIT:
						case TSqlParser.NTILE:
						case TSqlParser.NUMANODE:
						case TSqlParser.NUMBER:
						case TSqlParser.NUMERIC_ROUNDABORT:
						case TSqlParser.OBJECT:
						case TSqlParser.OFFLINE:
						case TSqlParser.OFFSET:
						case TSqlParser.OLD_ACCOUNT:
						case TSqlParser.ONLINE:
						case TSqlParser.ONLY:
						case TSqlParser.OPEN_EXISTING:
						case TSqlParser.OPTIMISTIC:
						case TSqlParser.OPTIMIZE:
						case TSqlParser.OUT:
						case TSqlParser.OUTPUT:
						case TSqlParser.OWNER:
						case TSqlParser.PAGE_VERIFY:
						case TSqlParser.PARAMETERIZATION:
						case TSqlParser.PARTITION:
						case TSqlParser.PARTITIONS:
						case TSqlParser.PARTNER:
						case TSqlParser.PATH:
						case TSqlParser.POISON_MESSAGE_HANDLING:
						case TSqlParser.POOL:
						case TSqlParser.PORT:
						case TSqlParser.PRECEDING:
						case TSqlParser.PRIMARY_ROLE:
						case TSqlParser.PRIOR:
						case TSqlParser.PRIORITY:
						case TSqlParser.PRIORITY_LEVEL:
						case TSqlParser.PRIVATE:
						case TSqlParser.PRIVATE_KEY:
						case TSqlParser.PRIVILEGES:
						case TSqlParser.PROCEDURE_NAME:
						case TSqlParser.PROPERTY:
						case TSqlParser.PROVIDER:
						case TSqlParser.PROVIDER_KEY_NAME:
						case TSqlParser.QUERY:
						case TSqlParser.QUEUE:
						case TSqlParser.QUEUE_DELAY:
						case TSqlParser.QUOTED_IDENTIFIER:
						case TSqlParser.RANGE:
						case TSqlParser.RANK:
						case TSqlParser.RC2:
						case TSqlParser.RC4:
						case TSqlParser.RC4_128:
						case TSqlParser.READ_COMMITTED_SNAPSHOT:
						case TSqlParser.READ_ONLY:
						case TSqlParser.READ_ONLY_ROUTING_LIST:
						case TSqlParser.READ_WRITE:
						case TSqlParser.READONLY:
						case TSqlParser.REBUILD:
						case TSqlParser.RECEIVE:
						case TSqlParser.RECOMPILE:
						case TSqlParser.RECOVERY:
						case TSqlParser.RECURSIVE_TRIGGERS:
						case TSqlParser.RELATIVE:
						case TSqlParser.REMOTE:
						case TSqlParser.REMOTE_SERVICE_NAME:
						case TSqlParser.REMOVE:
						case TSqlParser.REORGANIZE:
						case TSqlParser.REPEATABLE:
						case TSqlParser.REPLICA:
						case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
						case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case TSqlParser.RESERVE_DISK_SPACE:
						case TSqlParser.RESOURCE:
						case TSqlParser.RESOURCE_MANAGER_LOCATION:
						case TSqlParser.RESTRICTED_USER:
						case TSqlParser.RETENTION:
						case TSqlParser.ROBUST:
						case TSqlParser.ROOT:
						case TSqlParser.ROUTE:
						case TSqlParser.ROW:
						case TSqlParser.ROW_NUMBER:
						case TSqlParser.ROWGUID:
						case TSqlParser.ROWS:
						case TSqlParser.SAMPLE:
						case TSqlParser.SCHEMABINDING:
						case TSqlParser.SCOPED:
						case TSqlParser.SCROLL:
						case TSqlParser.SCROLL_LOCKS:
						case TSqlParser.SEARCH:
						case TSqlParser.SECONDARY:
						case TSqlParser.SECONDARY_ONLY:
						case TSqlParser.SECONDARY_ROLE:
						case TSqlParser.SECONDS:
						case TSqlParser.SECRET:
						case TSqlParser.SECURITY_LOG:
						case TSqlParser.SEEDING_MODE:
						case TSqlParser.SELF:
						case TSqlParser.SEMI_SENSITIVE:
						case TSqlParser.SEND:
						case TSqlParser.SENT:
						case TSqlParser.SERIALIZABLE:
						case TSqlParser.SESSION_TIMEOUT:
						case TSqlParser.SETERROR:
						case TSqlParser.SHARE:
						case TSqlParser.SHOWPLAN:
						case TSqlParser.SIGNATURE:
						case TSqlParser.SIMPLE:
						case TSqlParser.SINGLE_USER:
						case TSqlParser.SIZE:
						case TSqlParser.SMALLINT:
						case TSqlParser.SNAPSHOT:
						case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
						case TSqlParser.STANDBY:
						case TSqlParser.START_DATE:
						case TSqlParser.STATIC:
						case TSqlParser.STATS_STREAM:
						case TSqlParser.STATUS:
						case TSqlParser.STDEV:
						case TSqlParser.STDEVP:
						case TSqlParser.STOPLIST:
						case TSqlParser.STUFF:
						case TSqlParser.SUBJECT:
						case TSqlParser.SUM:
						case TSqlParser.SUSPEND:
						case TSqlParser.SYMMETRIC:
						case TSqlParser.SYNCHRONOUS_COMMIT:
						case TSqlParser.SYNONYM:
						case TSqlParser.TAKE:
						case TSqlParser.TARGET_RECOVERY_TIME:
						case TSqlParser.TB:
						case TSqlParser.TEXTIMAGE_ON:
						case TSqlParser.THROW:
						case TSqlParser.TIES:
						case TSqlParser.TIME:
						case TSqlParser.TIMEOUT:
						case TSqlParser.TIMER:
						case TSqlParser.TINYINT:
						case TSqlParser.TORN_PAGE_DETECTION:
						case TSqlParser.TRANSFORM_NOISE_WORDS:
						case TSqlParser.TRIPLE_DES:
						case TSqlParser.TRIPLE_DES_3KEY:
						case TSqlParser.TRUSTWORTHY:
						case TSqlParser.TRY:
						case TSqlParser.TSQL:
						case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
						case TSqlParser.TYPE:
						case TSqlParser.TYPE_WARNING:
						case TSqlParser.UNBOUNDED:
						case TSqlParser.UNCOMMITTED:
						case TSqlParser.UNKNOWN:
						case TSqlParser.UNLIMITED:
						case TSqlParser.USING:
						case TSqlParser.VALID_XML:
						case TSqlParser.VALIDATION:
						case TSqlParser.VALUE:
						case TSqlParser.VAR:
						case TSqlParser.VARP:
						case TSqlParser.VIEW_METADATA:
						case TSqlParser.VIEWS:
						case TSqlParser.WAIT:
						case TSqlParser.WELL_FORMED_XML:
						case TSqlParser.WORK:
						case TSqlParser.WORKLOAD:
						case TSqlParser.XML:
						case TSqlParser.XMLNAMESPACES:
						case TSqlParser.DOUBLE_QUOTE_ID:
						case TSqlParser.SQUARE_BRACKET_ID:
						case TSqlParser.ID:
							{
							this.state = 5183;
							_localctx._language_name_or_alias = this.id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 6:
						{
						this.state = 5187;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5186;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5189;
						this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						this.state = 5190;
						this.match(TSqlParser.EQUAL);
						this.state = 5191;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5194;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_user(): Create_userContext {
		let _localctx: Create_userContext = new Create_userContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, TSqlParser.RULE_create_user);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5342;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 637, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5196;
				this.match(TSqlParser.CREATE);
				this.state = 5197;
				this.match(TSqlParser.USER);
				this.state = 5198;
				_localctx._user_name = this.id();
				this.state = 5202;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FOR || _la === TSqlParser.FROM) {
					{
					this.state = 5199;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.FOR || _la === TSqlParser.FROM)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5200;
					this.match(TSqlParser.LOGIN);
					this.state = 5201;
					_localctx._login_name = this.id();
					}
				}

				this.state = 5222;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 615, this._ctx) ) {
				case 1:
					{
					this.state = 5204;
					this.match(TSqlParser.WITH);
					this.state = 5219;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 614, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							this.state = 5217;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
							case 1:
								{
								this.state = 5206;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5205;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5208;
								this.match(TSqlParser.DEFAULT_SCHEMA);
								this.state = 5209;
								this.match(TSqlParser.EQUAL);
								this.state = 5210;
								_localctx._schema_name = this.id();
								}
								break;

							case 2:
								{
								this.state = 5212;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5211;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5214;
								this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								this.state = 5215;
								this.match(TSqlParser.EQUAL);
								this.state = 5216;
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
								this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;
							}
							}
						}
						this.state = 5221;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 614, this._ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5224;
				this.match(TSqlParser.CREATE);
				this.state = 5225;
				this.match(TSqlParser.USER);
				this.state = 5306;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 631, this._ctx) ) {
				case 1:
					{
					this.state = 5226;
					_localctx._windows_principal = this.id();
					this.state = 5261;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
					case 1:
						{
						this.state = 5227;
						this.match(TSqlParser.WITH);
						this.state = 5258;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								this.state = 5256;
								this._errHandler.sync(this);
								switch ( this.interpreter.adaptivePredict(this._input, 621, this._ctx) ) {
								case 1:
									{
									this.state = 5229;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 5228;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 5231;
									this.match(TSqlParser.DEFAULT_SCHEMA);
									this.state = 5232;
									this.match(TSqlParser.EQUAL);
									this.state = 5233;
									_localctx._schema_name = this.id();
									}
									break;

								case 2:
									{
									this.state = 5235;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 5234;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 5237;
									this.match(TSqlParser.DEFAULT_LANGUAGE);
									this.state = 5238;
									this.match(TSqlParser.EQUAL);
									this.state = 5242;
									this._errHandler.sync(this);
									switch (this._input.LA(1)) {
									case TSqlParser.NONE:
										{
										this.state = 5239;
										this.match(TSqlParser.NONE);
										}
										break;
									case TSqlParser.DECIMAL:
										{
										this.state = 5240;
										this.match(TSqlParser.DECIMAL);
										}
										break;
									case TSqlParser.CALLED:
									case TSqlParser.DATA_COMPRESSION:
									case TSqlParser.EVENTDATA:
									case TSqlParser.FILENAME:
									case TSqlParser.FILLFACTOR:
									case TSqlParser.FORCESEEK:
									case TSqlParser.INIT:
									case TSqlParser.KEY:
									case TSqlParser.MASTER:
									case TSqlParser.MAX_MEMORY:
									case TSqlParser.OFFSETS:
									case TSqlParser.PAGE:
									case TSqlParser.PUBLIC:
									case TSqlParser.R:
									case TSqlParser.RAW:
									case TSqlParser.RETURN:
									case TSqlParser.RETURNS:
									case TSqlParser.ROWCOUNT:
									case TSqlParser.SAFETY:
									case TSqlParser.SERVER:
									case TSqlParser.SID:
									case TSqlParser.SOURCE:
									case TSqlParser.STATE:
									case TSqlParser.START:
									case TSqlParser.TARGET:
									case TSqlParser.ABSOLUTE:
									case TSqlParser.ACCENT_SENSITIVITY:
									case TSqlParser.ACTION:
									case TSqlParser.ACTIVATION:
									case TSqlParser.ACTIVE:
									case TSqlParser.ADDRESS:
									case TSqlParser.AES_128:
									case TSqlParser.AES_192:
									case TSqlParser.AES_256:
									case TSqlParser.AFFINITY:
									case TSqlParser.AFTER:
									case TSqlParser.AGGREGATE:
									case TSqlParser.ALGORITHM:
									case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
									case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
									case TSqlParser.ALLOWED:
									case TSqlParser.ANSI_NULL_DEFAULT:
									case TSqlParser.ANSI_NULLS:
									case TSqlParser.ANSI_PADDING:
									case TSqlParser.ANSI_WARNINGS:
									case TSqlParser.APPLICATION_LOG:
									case TSqlParser.APPLY:
									case TSqlParser.ARITHABORT:
									case TSqlParser.ASSEMBLY:
									case TSqlParser.AUDIT:
									case TSqlParser.AUDIT_GUID:
									case TSqlParser.AUTO:
									case TSqlParser.AUTO_CLEANUP:
									case TSqlParser.AUTO_CLOSE:
									case TSqlParser.AUTO_CREATE_STATISTICS:
									case TSqlParser.AUTO_SHRINK:
									case TSqlParser.AUTO_UPDATE_STATISTICS:
									case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
									case TSqlParser.AVAILABILITY:
									case TSqlParser.AVG:
									case TSqlParser.BACKUP_PRIORITY:
									case TSqlParser.BEGIN_DIALOG:
									case TSqlParser.BIGINT:
									case TSqlParser.BINARY_BASE64:
									case TSqlParser.BINARY_CHECKSUM:
									case TSqlParser.BINDING:
									case TSqlParser.BLOB_STORAGE:
									case TSqlParser.BROKER:
									case TSqlParser.BROKER_INSTANCE:
									case TSqlParser.BULK_LOGGED:
									case TSqlParser.CALLER:
									case TSqlParser.CAP_CPU_PERCENT:
									case TSqlParser.CAST:
									case TSqlParser.CATALOG:
									case TSqlParser.CATCH:
									case TSqlParser.CHANGE_RETENTION:
									case TSqlParser.CHANGE_TRACKING:
									case TSqlParser.CHECKSUM:
									case TSqlParser.CHECKSUM_AGG:
									case TSqlParser.CLEANUP:
									case TSqlParser.COLLECTION:
									case TSqlParser.COLUMN_MASTER_KEY:
									case TSqlParser.COMMITTED:
									case TSqlParser.COMPATIBILITY_LEVEL:
									case TSqlParser.CONCAT:
									case TSqlParser.CONCAT_NULL_YIELDS_NULL:
									case TSqlParser.CONTENT:
									case TSqlParser.CONTROL:
									case TSqlParser.COOKIE:
									case TSqlParser.COUNT:
									case TSqlParser.COUNT_BIG:
									case TSqlParser.COUNTER:
									case TSqlParser.CPU:
									case TSqlParser.CREATE_NEW:
									case TSqlParser.CREATION_DISPOSITION:
									case TSqlParser.CREDENTIAL:
									case TSqlParser.CRYPTOGRAPHIC:
									case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
									case TSqlParser.CURSOR_DEFAULT:
									case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
									case TSqlParser.DATEADD:
									case TSqlParser.DATEDIFF:
									case TSqlParser.DATENAME:
									case TSqlParser.DATEPART:
									case TSqlParser.DAYS:
									case TSqlParser.DB_CHAINING:
									case TSqlParser.DB_FAILOVER:
									case TSqlParser.DECRYPTION:
									case TSqlParser.DEFAULT_DOUBLE_QUOTE:
									case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
									case TSqlParser.DEFAULT_LANGUAGE:
									case TSqlParser.DELAY:
									case TSqlParser.DELAYED_DURABILITY:
									case TSqlParser.DELETED:
									case TSqlParser.DENSE_RANK:
									case TSqlParser.DEPENDENTS:
									case TSqlParser.DES:
									case TSqlParser.DESCRIPTION:
									case TSqlParser.DESX:
									case TSqlParser.DHCP:
									case TSqlParser.DIALOG:
									case TSqlParser.DIRECTORY_NAME:
									case TSqlParser.DISABLE:
									case TSqlParser.DISABLE_BROKER:
									case TSqlParser.DISABLED:
									case TSqlParser.DISK_DRIVE:
									case TSqlParser.DOCUMENT:
									case TSqlParser.DYNAMIC:
									case TSqlParser.EMERGENCY:
									case TSqlParser.EMPTY:
									case TSqlParser.ENABLE:
									case TSqlParser.ENABLE_BROKER:
									case TSqlParser.ENCRYPTED_VALUE:
									case TSqlParser.ENCRYPTION:
									case TSqlParser.ENDPOINT_URL:
									case TSqlParser.ERROR_BROKER_CONVERSATIONS:
									case TSqlParser.EXCLUSIVE:
									case TSqlParser.EXECUTABLE:
									case TSqlParser.EXIST:
									case TSqlParser.EXPAND:
									case TSqlParser.EXPIRY_DATE:
									case TSqlParser.EXPLICIT:
									case TSqlParser.FAIL_OPERATION:
									case TSqlParser.FAILOVER_MODE:
									case TSqlParser.FAILURE:
									case TSqlParser.FAILURE_CONDITION_LEVEL:
									case TSqlParser.FAST:
									case TSqlParser.FAST_FORWARD:
									case TSqlParser.FILEGROUP:
									case TSqlParser.FILEGROWTH:
									case TSqlParser.FILEPATH:
									case TSqlParser.FILESTREAM:
									case TSqlParser.FILTER:
									case TSqlParser.FIRST:
									case TSqlParser.FIRST_VALUE:
									case TSqlParser.FOLLOWING:
									case TSqlParser.FORCE:
									case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
									case TSqlParser.FORCED:
									case TSqlParser.FORMAT:
									case TSqlParser.FORWARD_ONLY:
									case TSqlParser.FULLSCAN:
									case TSqlParser.FULLTEXT:
									case TSqlParser.GB:
									case TSqlParser.GETDATE:
									case TSqlParser.GETUTCDATE:
									case TSqlParser.GLOBAL:
									case TSqlParser.GO:
									case TSqlParser.GROUP_MAX_REQUESTS:
									case TSqlParser.GROUPING:
									case TSqlParser.GROUPING_ID:
									case TSqlParser.HADR:
									case TSqlParser.HASH:
									case TSqlParser.HEALTH_CHECK_TIMEOUT:
									case TSqlParser.HIGH:
									case TSqlParser.HONOR_BROKER_PRIORITY:
									case TSqlParser.HOURS:
									case TSqlParser.IDENTITY_VALUE:
									case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
									case TSqlParser.IMMEDIATE:
									case TSqlParser.IMPERSONATE:
									case TSqlParser.IMPORTANCE:
									case TSqlParser.INCREMENTAL:
									case TSqlParser.INITIATOR:
									case TSqlParser.INPUT:
									case TSqlParser.INSENSITIVE:
									case TSqlParser.INSERTED:
									case TSqlParser.INT:
									case TSqlParser.IP:
									case TSqlParser.ISOLATION:
									case TSqlParser.KB:
									case TSqlParser.KEEP:
									case TSqlParser.KEEPFIXED:
									case TSqlParser.KEY_SOURCE:
									case TSqlParser.KEYS:
									case TSqlParser.KEYSET:
									case TSqlParser.LAG:
									case TSqlParser.LAST:
									case TSqlParser.LAST_VALUE:
									case TSqlParser.LEAD:
									case TSqlParser.LEVEL:
									case TSqlParser.LIST:
									case TSqlParser.LISTENER:
									case TSqlParser.LISTENER_URL:
									case TSqlParser.LOB_COMPACTION:
									case TSqlParser.LOCAL:
									case TSqlParser.LOCATION:
									case TSqlParser.LOCK:
									case TSqlParser.LOCK_ESCALATION:
									case TSqlParser.LOGIN:
									case TSqlParser.LOOP:
									case TSqlParser.LOW:
									case TSqlParser.MANUAL:
									case TSqlParser.MARK:
									case TSqlParser.MATERIALIZED:
									case TSqlParser.MAX:
									case TSqlParser.MAX_CPU_PERCENT:
									case TSqlParser.MAX_DOP:
									case TSqlParser.MAX_FILES:
									case TSqlParser.MAX_IOPS_PER_VOLUME:
									case TSqlParser.MAX_MEMORY_PERCENT:
									case TSqlParser.MAX_PROCESSES:
									case TSqlParser.MAX_QUEUE_READERS:
									case TSqlParser.MAX_ROLLOVER_FILES:
									case TSqlParser.MAXDOP:
									case TSqlParser.MAXRECURSION:
									case TSqlParser.MAXSIZE:
									case TSqlParser.MB:
									case TSqlParser.MEDIUM:
									case TSqlParser.MEMORY_OPTIMIZED_DATA:
									case TSqlParser.MESSAGE:
									case TSqlParser.MIN:
									case TSqlParser.MIN_ACTIVE_ROWVERSION:
									case TSqlParser.MIN_CPU_PERCENT:
									case TSqlParser.MIN_IOPS_PER_VOLUME:
									case TSqlParser.MIN_MEMORY_PERCENT:
									case TSqlParser.MINUTES:
									case TSqlParser.MIRROR_ADDRESS:
									case TSqlParser.MIXED_PAGE_ALLOCATION:
									case TSqlParser.MODE:
									case TSqlParser.MODIFY:
									case TSqlParser.MOVE:
									case TSqlParser.MULTI_USER:
									case TSqlParser.NAME:
									case TSqlParser.NESTED_TRIGGERS:
									case TSqlParser.NEW_ACCOUNT:
									case TSqlParser.NEW_BROKER:
									case TSqlParser.NEW_PASSWORD:
									case TSqlParser.NEXT:
									case TSqlParser.NO:
									case TSqlParser.NO_TRUNCATE:
									case TSqlParser.NO_WAIT:
									case TSqlParser.NOCOUNT:
									case TSqlParser.NODES:
									case TSqlParser.NOEXPAND:
									case TSqlParser.NON_TRANSACTED_ACCESS:
									case TSqlParser.NORECOMPUTE:
									case TSqlParser.NORECOVERY:
									case TSqlParser.NOWAIT:
									case TSqlParser.NTILE:
									case TSqlParser.NUMANODE:
									case TSqlParser.NUMBER:
									case TSqlParser.NUMERIC_ROUNDABORT:
									case TSqlParser.OBJECT:
									case TSqlParser.OFFLINE:
									case TSqlParser.OFFSET:
									case TSqlParser.OLD_ACCOUNT:
									case TSqlParser.ONLINE:
									case TSqlParser.ONLY:
									case TSqlParser.OPEN_EXISTING:
									case TSqlParser.OPTIMISTIC:
									case TSqlParser.OPTIMIZE:
									case TSqlParser.OUT:
									case TSqlParser.OUTPUT:
									case TSqlParser.OWNER:
									case TSqlParser.PAGE_VERIFY:
									case TSqlParser.PARAMETERIZATION:
									case TSqlParser.PARTITION:
									case TSqlParser.PARTITIONS:
									case TSqlParser.PARTNER:
									case TSqlParser.PATH:
									case TSqlParser.POISON_MESSAGE_HANDLING:
									case TSqlParser.POOL:
									case TSqlParser.PORT:
									case TSqlParser.PRECEDING:
									case TSqlParser.PRIMARY_ROLE:
									case TSqlParser.PRIOR:
									case TSqlParser.PRIORITY:
									case TSqlParser.PRIORITY_LEVEL:
									case TSqlParser.PRIVATE:
									case TSqlParser.PRIVATE_KEY:
									case TSqlParser.PRIVILEGES:
									case TSqlParser.PROCEDURE_NAME:
									case TSqlParser.PROPERTY:
									case TSqlParser.PROVIDER:
									case TSqlParser.PROVIDER_KEY_NAME:
									case TSqlParser.QUERY:
									case TSqlParser.QUEUE:
									case TSqlParser.QUEUE_DELAY:
									case TSqlParser.QUOTED_IDENTIFIER:
									case TSqlParser.RANGE:
									case TSqlParser.RANK:
									case TSqlParser.RC2:
									case TSqlParser.RC4:
									case TSqlParser.RC4_128:
									case TSqlParser.READ_COMMITTED_SNAPSHOT:
									case TSqlParser.READ_ONLY:
									case TSqlParser.READ_ONLY_ROUTING_LIST:
									case TSqlParser.READ_WRITE:
									case TSqlParser.READONLY:
									case TSqlParser.REBUILD:
									case TSqlParser.RECEIVE:
									case TSqlParser.RECOMPILE:
									case TSqlParser.RECOVERY:
									case TSqlParser.RECURSIVE_TRIGGERS:
									case TSqlParser.RELATIVE:
									case TSqlParser.REMOTE:
									case TSqlParser.REMOTE_SERVICE_NAME:
									case TSqlParser.REMOVE:
									case TSqlParser.REORGANIZE:
									case TSqlParser.REPEATABLE:
									case TSqlParser.REPLICA:
									case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
									case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
									case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
									case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
									case TSqlParser.RESERVE_DISK_SPACE:
									case TSqlParser.RESOURCE:
									case TSqlParser.RESOURCE_MANAGER_LOCATION:
									case TSqlParser.RESTRICTED_USER:
									case TSqlParser.RETENTION:
									case TSqlParser.ROBUST:
									case TSqlParser.ROOT:
									case TSqlParser.ROUTE:
									case TSqlParser.ROW:
									case TSqlParser.ROW_NUMBER:
									case TSqlParser.ROWGUID:
									case TSqlParser.ROWS:
									case TSqlParser.SAMPLE:
									case TSqlParser.SCHEMABINDING:
									case TSqlParser.SCOPED:
									case TSqlParser.SCROLL:
									case TSqlParser.SCROLL_LOCKS:
									case TSqlParser.SEARCH:
									case TSqlParser.SECONDARY:
									case TSqlParser.SECONDARY_ONLY:
									case TSqlParser.SECONDARY_ROLE:
									case TSqlParser.SECONDS:
									case TSqlParser.SECRET:
									case TSqlParser.SECURITY_LOG:
									case TSqlParser.SEEDING_MODE:
									case TSqlParser.SELF:
									case TSqlParser.SEMI_SENSITIVE:
									case TSqlParser.SEND:
									case TSqlParser.SENT:
									case TSqlParser.SERIALIZABLE:
									case TSqlParser.SESSION_TIMEOUT:
									case TSqlParser.SETERROR:
									case TSqlParser.SHARE:
									case TSqlParser.SHOWPLAN:
									case TSqlParser.SIGNATURE:
									case TSqlParser.SIMPLE:
									case TSqlParser.SINGLE_USER:
									case TSqlParser.SIZE:
									case TSqlParser.SMALLINT:
									case TSqlParser.SNAPSHOT:
									case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
									case TSqlParser.STANDBY:
									case TSqlParser.START_DATE:
									case TSqlParser.STATIC:
									case TSqlParser.STATS_STREAM:
									case TSqlParser.STATUS:
									case TSqlParser.STDEV:
									case TSqlParser.STDEVP:
									case TSqlParser.STOPLIST:
									case TSqlParser.STUFF:
									case TSqlParser.SUBJECT:
									case TSqlParser.SUM:
									case TSqlParser.SUSPEND:
									case TSqlParser.SYMMETRIC:
									case TSqlParser.SYNCHRONOUS_COMMIT:
									case TSqlParser.SYNONYM:
									case TSqlParser.TAKE:
									case TSqlParser.TARGET_RECOVERY_TIME:
									case TSqlParser.TB:
									case TSqlParser.TEXTIMAGE_ON:
									case TSqlParser.THROW:
									case TSqlParser.TIES:
									case TSqlParser.TIME:
									case TSqlParser.TIMEOUT:
									case TSqlParser.TIMER:
									case TSqlParser.TINYINT:
									case TSqlParser.TORN_PAGE_DETECTION:
									case TSqlParser.TRANSFORM_NOISE_WORDS:
									case TSqlParser.TRIPLE_DES:
									case TSqlParser.TRIPLE_DES_3KEY:
									case TSqlParser.TRUSTWORTHY:
									case TSqlParser.TRY:
									case TSqlParser.TSQL:
									case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
									case TSqlParser.TYPE:
									case TSqlParser.TYPE_WARNING:
									case TSqlParser.UNBOUNDED:
									case TSqlParser.UNCOMMITTED:
									case TSqlParser.UNKNOWN:
									case TSqlParser.UNLIMITED:
									case TSqlParser.USING:
									case TSqlParser.VALID_XML:
									case TSqlParser.VALIDATION:
									case TSqlParser.VALUE:
									case TSqlParser.VAR:
									case TSqlParser.VARP:
									case TSqlParser.VIEW_METADATA:
									case TSqlParser.VIEWS:
									case TSqlParser.WAIT:
									case TSqlParser.WELL_FORMED_XML:
									case TSqlParser.WORK:
									case TSqlParser.WORKLOAD:
									case TSqlParser.XML:
									case TSqlParser.XMLNAMESPACES:
									case TSqlParser.DOUBLE_QUOTE_ID:
									case TSqlParser.SQUARE_BRACKET_ID:
									case TSqlParser.ID:
										{
										this.state = 5241;
										_localctx._language_name_or_alias = this.id();
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									}
									break;

								case 3:
									{
									this.state = 5245;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 5244;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 5247;
									this.match(TSqlParser.SID);
									this.state = 5248;
									this.match(TSqlParser.EQUAL);
									this.state = 5249;
									this.match(TSqlParser.BINARY);
									}
									break;

								case 4:
									{
									this.state = 5251;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === TSqlParser.COMMA) {
										{
										this.state = 5250;
										this.match(TSqlParser.COMMA);
										}
									}

									this.state = 5253;
									this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									this.state = 5254;
									this.match(TSqlParser.EQUAL);
									this.state = 5255;
									_la = this._input.LA(1);
									if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
									this._errHandler.recoverInline(this);
									} else {
										if (this._input.LA(1) === Token.EOF) {
											this.matchedEOF = true;
										}

										this._errHandler.reportMatch(this);
										this.consume();
									}
									}
									break;
								}
								}
							}
							this.state = 5260;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 5263;
					_localctx._user_name = this.id();
					this.state = 5264;
					this.match(TSqlParser.WITH);
					this.state = 5265;
					this.match(TSqlParser.PASSWORD);
					this.state = 5266;
					this.match(TSqlParser.EQUAL);
					this.state = 5267;
					_localctx._password = this.match(TSqlParser.STRING);
					this.state = 5298;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							this.state = 5296;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 629, this._ctx) ) {
							case 1:
								{
								this.state = 5269;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5268;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5271;
								this.match(TSqlParser.DEFAULT_SCHEMA);
								this.state = 5272;
								this.match(TSqlParser.EQUAL);
								this.state = 5273;
								_localctx._schema_name = this.id();
								}
								break;

							case 2:
								{
								this.state = 5275;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5274;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5277;
								this.match(TSqlParser.DEFAULT_LANGUAGE);
								this.state = 5278;
								this.match(TSqlParser.EQUAL);
								this.state = 5282;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.NONE:
									{
									this.state = 5279;
									this.match(TSqlParser.NONE);
									}
									break;
								case TSqlParser.DECIMAL:
									{
									this.state = 5280;
									this.match(TSqlParser.DECIMAL);
									}
									break;
								case TSqlParser.CALLED:
								case TSqlParser.DATA_COMPRESSION:
								case TSqlParser.EVENTDATA:
								case TSqlParser.FILENAME:
								case TSqlParser.FILLFACTOR:
								case TSqlParser.FORCESEEK:
								case TSqlParser.INIT:
								case TSqlParser.KEY:
								case TSqlParser.MASTER:
								case TSqlParser.MAX_MEMORY:
								case TSqlParser.OFFSETS:
								case TSqlParser.PAGE:
								case TSqlParser.PUBLIC:
								case TSqlParser.R:
								case TSqlParser.RAW:
								case TSqlParser.RETURN:
								case TSqlParser.RETURNS:
								case TSqlParser.ROWCOUNT:
								case TSqlParser.SAFETY:
								case TSqlParser.SERVER:
								case TSqlParser.SID:
								case TSqlParser.SOURCE:
								case TSqlParser.STATE:
								case TSqlParser.START:
								case TSqlParser.TARGET:
								case TSqlParser.ABSOLUTE:
								case TSqlParser.ACCENT_SENSITIVITY:
								case TSqlParser.ACTION:
								case TSqlParser.ACTIVATION:
								case TSqlParser.ACTIVE:
								case TSqlParser.ADDRESS:
								case TSqlParser.AES_128:
								case TSqlParser.AES_192:
								case TSqlParser.AES_256:
								case TSqlParser.AFFINITY:
								case TSqlParser.AFTER:
								case TSqlParser.AGGREGATE:
								case TSqlParser.ALGORITHM:
								case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
								case TSqlParser.ALLOWED:
								case TSqlParser.ANSI_NULL_DEFAULT:
								case TSqlParser.ANSI_NULLS:
								case TSqlParser.ANSI_PADDING:
								case TSqlParser.ANSI_WARNINGS:
								case TSqlParser.APPLICATION_LOG:
								case TSqlParser.APPLY:
								case TSqlParser.ARITHABORT:
								case TSqlParser.ASSEMBLY:
								case TSqlParser.AUDIT:
								case TSqlParser.AUDIT_GUID:
								case TSqlParser.AUTO:
								case TSqlParser.AUTO_CLEANUP:
								case TSqlParser.AUTO_CLOSE:
								case TSqlParser.AUTO_CREATE_STATISTICS:
								case TSqlParser.AUTO_SHRINK:
								case TSqlParser.AUTO_UPDATE_STATISTICS:
								case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
								case TSqlParser.AVAILABILITY:
								case TSqlParser.AVG:
								case TSqlParser.BACKUP_PRIORITY:
								case TSqlParser.BEGIN_DIALOG:
								case TSqlParser.BIGINT:
								case TSqlParser.BINARY_BASE64:
								case TSqlParser.BINARY_CHECKSUM:
								case TSqlParser.BINDING:
								case TSqlParser.BLOB_STORAGE:
								case TSqlParser.BROKER:
								case TSqlParser.BROKER_INSTANCE:
								case TSqlParser.BULK_LOGGED:
								case TSqlParser.CALLER:
								case TSqlParser.CAP_CPU_PERCENT:
								case TSqlParser.CAST:
								case TSqlParser.CATALOG:
								case TSqlParser.CATCH:
								case TSqlParser.CHANGE_RETENTION:
								case TSqlParser.CHANGE_TRACKING:
								case TSqlParser.CHECKSUM:
								case TSqlParser.CHECKSUM_AGG:
								case TSqlParser.CLEANUP:
								case TSqlParser.COLLECTION:
								case TSqlParser.COLUMN_MASTER_KEY:
								case TSqlParser.COMMITTED:
								case TSqlParser.COMPATIBILITY_LEVEL:
								case TSqlParser.CONCAT:
								case TSqlParser.CONCAT_NULL_YIELDS_NULL:
								case TSqlParser.CONTENT:
								case TSqlParser.CONTROL:
								case TSqlParser.COOKIE:
								case TSqlParser.COUNT:
								case TSqlParser.COUNT_BIG:
								case TSqlParser.COUNTER:
								case TSqlParser.CPU:
								case TSqlParser.CREATE_NEW:
								case TSqlParser.CREATION_DISPOSITION:
								case TSqlParser.CREDENTIAL:
								case TSqlParser.CRYPTOGRAPHIC:
								case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
								case TSqlParser.CURSOR_DEFAULT:
								case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
								case TSqlParser.DATEADD:
								case TSqlParser.DATEDIFF:
								case TSqlParser.DATENAME:
								case TSqlParser.DATEPART:
								case TSqlParser.DAYS:
								case TSqlParser.DB_CHAINING:
								case TSqlParser.DB_FAILOVER:
								case TSqlParser.DECRYPTION:
								case TSqlParser.DEFAULT_DOUBLE_QUOTE:
								case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
								case TSqlParser.DEFAULT_LANGUAGE:
								case TSqlParser.DELAY:
								case TSqlParser.DELAYED_DURABILITY:
								case TSqlParser.DELETED:
								case TSqlParser.DENSE_RANK:
								case TSqlParser.DEPENDENTS:
								case TSqlParser.DES:
								case TSqlParser.DESCRIPTION:
								case TSqlParser.DESX:
								case TSqlParser.DHCP:
								case TSqlParser.DIALOG:
								case TSqlParser.DIRECTORY_NAME:
								case TSqlParser.DISABLE:
								case TSqlParser.DISABLE_BROKER:
								case TSqlParser.DISABLED:
								case TSqlParser.DISK_DRIVE:
								case TSqlParser.DOCUMENT:
								case TSqlParser.DYNAMIC:
								case TSqlParser.EMERGENCY:
								case TSqlParser.EMPTY:
								case TSqlParser.ENABLE:
								case TSqlParser.ENABLE_BROKER:
								case TSqlParser.ENCRYPTED_VALUE:
								case TSqlParser.ENCRYPTION:
								case TSqlParser.ENDPOINT_URL:
								case TSqlParser.ERROR_BROKER_CONVERSATIONS:
								case TSqlParser.EXCLUSIVE:
								case TSqlParser.EXECUTABLE:
								case TSqlParser.EXIST:
								case TSqlParser.EXPAND:
								case TSqlParser.EXPIRY_DATE:
								case TSqlParser.EXPLICIT:
								case TSqlParser.FAIL_OPERATION:
								case TSqlParser.FAILOVER_MODE:
								case TSqlParser.FAILURE:
								case TSqlParser.FAILURE_CONDITION_LEVEL:
								case TSqlParser.FAST:
								case TSqlParser.FAST_FORWARD:
								case TSqlParser.FILEGROUP:
								case TSqlParser.FILEGROWTH:
								case TSqlParser.FILEPATH:
								case TSqlParser.FILESTREAM:
								case TSqlParser.FILTER:
								case TSqlParser.FIRST:
								case TSqlParser.FIRST_VALUE:
								case TSqlParser.FOLLOWING:
								case TSqlParser.FORCE:
								case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case TSqlParser.FORCED:
								case TSqlParser.FORMAT:
								case TSqlParser.FORWARD_ONLY:
								case TSqlParser.FULLSCAN:
								case TSqlParser.FULLTEXT:
								case TSqlParser.GB:
								case TSqlParser.GETDATE:
								case TSqlParser.GETUTCDATE:
								case TSqlParser.GLOBAL:
								case TSqlParser.GO:
								case TSqlParser.GROUP_MAX_REQUESTS:
								case TSqlParser.GROUPING:
								case TSqlParser.GROUPING_ID:
								case TSqlParser.HADR:
								case TSqlParser.HASH:
								case TSqlParser.HEALTH_CHECK_TIMEOUT:
								case TSqlParser.HIGH:
								case TSqlParser.HONOR_BROKER_PRIORITY:
								case TSqlParser.HOURS:
								case TSqlParser.IDENTITY_VALUE:
								case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case TSqlParser.IMMEDIATE:
								case TSqlParser.IMPERSONATE:
								case TSqlParser.IMPORTANCE:
								case TSqlParser.INCREMENTAL:
								case TSqlParser.INITIATOR:
								case TSqlParser.INPUT:
								case TSqlParser.INSENSITIVE:
								case TSqlParser.INSERTED:
								case TSqlParser.INT:
								case TSqlParser.IP:
								case TSqlParser.ISOLATION:
								case TSqlParser.KB:
								case TSqlParser.KEEP:
								case TSqlParser.KEEPFIXED:
								case TSqlParser.KEY_SOURCE:
								case TSqlParser.KEYS:
								case TSqlParser.KEYSET:
								case TSqlParser.LAG:
								case TSqlParser.LAST:
								case TSqlParser.LAST_VALUE:
								case TSqlParser.LEAD:
								case TSqlParser.LEVEL:
								case TSqlParser.LIST:
								case TSqlParser.LISTENER:
								case TSqlParser.LISTENER_URL:
								case TSqlParser.LOB_COMPACTION:
								case TSqlParser.LOCAL:
								case TSqlParser.LOCATION:
								case TSqlParser.LOCK:
								case TSqlParser.LOCK_ESCALATION:
								case TSqlParser.LOGIN:
								case TSqlParser.LOOP:
								case TSqlParser.LOW:
								case TSqlParser.MANUAL:
								case TSqlParser.MARK:
								case TSqlParser.MATERIALIZED:
								case TSqlParser.MAX:
								case TSqlParser.MAX_CPU_PERCENT:
								case TSqlParser.MAX_DOP:
								case TSqlParser.MAX_FILES:
								case TSqlParser.MAX_IOPS_PER_VOLUME:
								case TSqlParser.MAX_MEMORY_PERCENT:
								case TSqlParser.MAX_PROCESSES:
								case TSqlParser.MAX_QUEUE_READERS:
								case TSqlParser.MAX_ROLLOVER_FILES:
								case TSqlParser.MAXDOP:
								case TSqlParser.MAXRECURSION:
								case TSqlParser.MAXSIZE:
								case TSqlParser.MB:
								case TSqlParser.MEDIUM:
								case TSqlParser.MEMORY_OPTIMIZED_DATA:
								case TSqlParser.MESSAGE:
								case TSqlParser.MIN:
								case TSqlParser.MIN_ACTIVE_ROWVERSION:
								case TSqlParser.MIN_CPU_PERCENT:
								case TSqlParser.MIN_IOPS_PER_VOLUME:
								case TSqlParser.MIN_MEMORY_PERCENT:
								case TSqlParser.MINUTES:
								case TSqlParser.MIRROR_ADDRESS:
								case TSqlParser.MIXED_PAGE_ALLOCATION:
								case TSqlParser.MODE:
								case TSqlParser.MODIFY:
								case TSqlParser.MOVE:
								case TSqlParser.MULTI_USER:
								case TSqlParser.NAME:
								case TSqlParser.NESTED_TRIGGERS:
								case TSqlParser.NEW_ACCOUNT:
								case TSqlParser.NEW_BROKER:
								case TSqlParser.NEW_PASSWORD:
								case TSqlParser.NEXT:
								case TSqlParser.NO:
								case TSqlParser.NO_TRUNCATE:
								case TSqlParser.NO_WAIT:
								case TSqlParser.NOCOUNT:
								case TSqlParser.NODES:
								case TSqlParser.NOEXPAND:
								case TSqlParser.NON_TRANSACTED_ACCESS:
								case TSqlParser.NORECOMPUTE:
								case TSqlParser.NORECOVERY:
								case TSqlParser.NOWAIT:
								case TSqlParser.NTILE:
								case TSqlParser.NUMANODE:
								case TSqlParser.NUMBER:
								case TSqlParser.NUMERIC_ROUNDABORT:
								case TSqlParser.OBJECT:
								case TSqlParser.OFFLINE:
								case TSqlParser.OFFSET:
								case TSqlParser.OLD_ACCOUNT:
								case TSqlParser.ONLINE:
								case TSqlParser.ONLY:
								case TSqlParser.OPEN_EXISTING:
								case TSqlParser.OPTIMISTIC:
								case TSqlParser.OPTIMIZE:
								case TSqlParser.OUT:
								case TSqlParser.OUTPUT:
								case TSqlParser.OWNER:
								case TSqlParser.PAGE_VERIFY:
								case TSqlParser.PARAMETERIZATION:
								case TSqlParser.PARTITION:
								case TSqlParser.PARTITIONS:
								case TSqlParser.PARTNER:
								case TSqlParser.PATH:
								case TSqlParser.POISON_MESSAGE_HANDLING:
								case TSqlParser.POOL:
								case TSqlParser.PORT:
								case TSqlParser.PRECEDING:
								case TSqlParser.PRIMARY_ROLE:
								case TSqlParser.PRIOR:
								case TSqlParser.PRIORITY:
								case TSqlParser.PRIORITY_LEVEL:
								case TSqlParser.PRIVATE:
								case TSqlParser.PRIVATE_KEY:
								case TSqlParser.PRIVILEGES:
								case TSqlParser.PROCEDURE_NAME:
								case TSqlParser.PROPERTY:
								case TSqlParser.PROVIDER:
								case TSqlParser.PROVIDER_KEY_NAME:
								case TSqlParser.QUERY:
								case TSqlParser.QUEUE:
								case TSqlParser.QUEUE_DELAY:
								case TSqlParser.QUOTED_IDENTIFIER:
								case TSqlParser.RANGE:
								case TSqlParser.RANK:
								case TSqlParser.RC2:
								case TSqlParser.RC4:
								case TSqlParser.RC4_128:
								case TSqlParser.READ_COMMITTED_SNAPSHOT:
								case TSqlParser.READ_ONLY:
								case TSqlParser.READ_ONLY_ROUTING_LIST:
								case TSqlParser.READ_WRITE:
								case TSqlParser.READONLY:
								case TSqlParser.REBUILD:
								case TSqlParser.RECEIVE:
								case TSqlParser.RECOMPILE:
								case TSqlParser.RECOVERY:
								case TSqlParser.RECURSIVE_TRIGGERS:
								case TSqlParser.RELATIVE:
								case TSqlParser.REMOTE:
								case TSqlParser.REMOTE_SERVICE_NAME:
								case TSqlParser.REMOVE:
								case TSqlParser.REORGANIZE:
								case TSqlParser.REPEATABLE:
								case TSqlParser.REPLICA:
								case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
								case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case TSqlParser.RESERVE_DISK_SPACE:
								case TSqlParser.RESOURCE:
								case TSqlParser.RESOURCE_MANAGER_LOCATION:
								case TSqlParser.RESTRICTED_USER:
								case TSqlParser.RETENTION:
								case TSqlParser.ROBUST:
								case TSqlParser.ROOT:
								case TSqlParser.ROUTE:
								case TSqlParser.ROW:
								case TSqlParser.ROW_NUMBER:
								case TSqlParser.ROWGUID:
								case TSqlParser.ROWS:
								case TSqlParser.SAMPLE:
								case TSqlParser.SCHEMABINDING:
								case TSqlParser.SCOPED:
								case TSqlParser.SCROLL:
								case TSqlParser.SCROLL_LOCKS:
								case TSqlParser.SEARCH:
								case TSqlParser.SECONDARY:
								case TSqlParser.SECONDARY_ONLY:
								case TSqlParser.SECONDARY_ROLE:
								case TSqlParser.SECONDS:
								case TSqlParser.SECRET:
								case TSqlParser.SECURITY_LOG:
								case TSqlParser.SEEDING_MODE:
								case TSqlParser.SELF:
								case TSqlParser.SEMI_SENSITIVE:
								case TSqlParser.SEND:
								case TSqlParser.SENT:
								case TSqlParser.SERIALIZABLE:
								case TSqlParser.SESSION_TIMEOUT:
								case TSqlParser.SETERROR:
								case TSqlParser.SHARE:
								case TSqlParser.SHOWPLAN:
								case TSqlParser.SIGNATURE:
								case TSqlParser.SIMPLE:
								case TSqlParser.SINGLE_USER:
								case TSqlParser.SIZE:
								case TSqlParser.SMALLINT:
								case TSqlParser.SNAPSHOT:
								case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
								case TSqlParser.STANDBY:
								case TSqlParser.START_DATE:
								case TSqlParser.STATIC:
								case TSqlParser.STATS_STREAM:
								case TSqlParser.STATUS:
								case TSqlParser.STDEV:
								case TSqlParser.STDEVP:
								case TSqlParser.STOPLIST:
								case TSqlParser.STUFF:
								case TSqlParser.SUBJECT:
								case TSqlParser.SUM:
								case TSqlParser.SUSPEND:
								case TSqlParser.SYMMETRIC:
								case TSqlParser.SYNCHRONOUS_COMMIT:
								case TSqlParser.SYNONYM:
								case TSqlParser.TAKE:
								case TSqlParser.TARGET_RECOVERY_TIME:
								case TSqlParser.TB:
								case TSqlParser.TEXTIMAGE_ON:
								case TSqlParser.THROW:
								case TSqlParser.TIES:
								case TSqlParser.TIME:
								case TSqlParser.TIMEOUT:
								case TSqlParser.TIMER:
								case TSqlParser.TINYINT:
								case TSqlParser.TORN_PAGE_DETECTION:
								case TSqlParser.TRANSFORM_NOISE_WORDS:
								case TSqlParser.TRIPLE_DES:
								case TSqlParser.TRIPLE_DES_3KEY:
								case TSqlParser.TRUSTWORTHY:
								case TSqlParser.TRY:
								case TSqlParser.TSQL:
								case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
								case TSqlParser.TYPE:
								case TSqlParser.TYPE_WARNING:
								case TSqlParser.UNBOUNDED:
								case TSqlParser.UNCOMMITTED:
								case TSqlParser.UNKNOWN:
								case TSqlParser.UNLIMITED:
								case TSqlParser.USING:
								case TSqlParser.VALID_XML:
								case TSqlParser.VALIDATION:
								case TSqlParser.VALUE:
								case TSqlParser.VAR:
								case TSqlParser.VARP:
								case TSqlParser.VIEW_METADATA:
								case TSqlParser.VIEWS:
								case TSqlParser.WAIT:
								case TSqlParser.WELL_FORMED_XML:
								case TSqlParser.WORK:
								case TSqlParser.WORKLOAD:
								case TSqlParser.XML:
								case TSqlParser.XMLNAMESPACES:
								case TSqlParser.DOUBLE_QUOTE_ID:
								case TSqlParser.SQUARE_BRACKET_ID:
								case TSqlParser.ID:
									{
									this.state = 5281;
									_localctx._language_name_or_alias = this.id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;

							case 3:
								{
								this.state = 5285;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5284;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5287;
								this.match(TSqlParser.SID);
								this.state = 5288;
								this.match(TSqlParser.EQUAL);
								this.state = 5289;
								this.match(TSqlParser.BINARY);
								}
								break;

							case 4:
								{
								this.state = 5291;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5290;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5293;
								this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								this.state = 5294;
								this.match(TSqlParser.EQUAL);
								this.state = 5295;
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
								this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;
							}
							}
						}
						this.state = 5300;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
					}
					}
					break;

				case 3:
					{
					this.state = 5301;
					_localctx._Azure_Active_Directory_principal = this.id();
					this.state = 5302;
					this.match(TSqlParser.FROM);
					this.state = 5303;
					this.match(TSqlParser.EXTERNAL);
					this.state = 5304;
					this.match(TSqlParser.PROVIDER);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5308;
				this.match(TSqlParser.CREATE);
				this.state = 5309;
				this.match(TSqlParser.USER);
				this.state = 5310;
				_localctx._user_name = this.id();
				this.state = 5337;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 636, this._ctx) ) {
				case 1:
					{
					this.state = 5311;
					this.match(TSqlParser.WITHOUT);
					this.state = 5312;
					this.match(TSqlParser.LOGIN);
					this.state = 5327;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 635, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							this.state = 5325;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 634, this._ctx) ) {
							case 1:
								{
								this.state = 5314;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5313;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5316;
								this.match(TSqlParser.DEFAULT_SCHEMA);
								this.state = 5317;
								this.match(TSqlParser.EQUAL);
								this.state = 5318;
								_localctx._schema_name = this.id();
								}
								break;

							case 2:
								{
								this.state = 5320;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === TSqlParser.COMMA) {
									{
									this.state = 5319;
									this.match(TSqlParser.COMMA);
									}
								}

								this.state = 5322;
								this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								this.state = 5323;
								this.match(TSqlParser.EQUAL);
								this.state = 5324;
								_la = this._input.LA(1);
								if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
								this._errHandler.recoverInline(this);
								} else {
									if (this._input.LA(1) === Token.EOF) {
										this.matchedEOF = true;
									}

									this._errHandler.reportMatch(this);
									this.consume();
								}
								}
								break;
							}
							}
						}
						this.state = 5329;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 635, this._ctx);
					}
					}
					break;

				case 2:
					{
					this.state = 5330;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.FOR || _la === TSqlParser.FROM)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5331;
					this.match(TSqlParser.CERTIFICATE);
					this.state = 5332;
					_localctx._cert_name = this.id();
					}
					break;

				case 3:
					{
					this.state = 5333;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.FOR || _la === TSqlParser.FROM)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5334;
					this.match(TSqlParser.ASYMMETRIC);
					this.state = 5335;
					this.match(TSqlParser.KEY);
					this.state = 5336;
					_localctx._asym_key_name = this.id();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5339;
				this.match(TSqlParser.CREATE);
				this.state = 5340;
				this.match(TSqlParser.USER);
				this.state = 5341;
				_localctx._user_name = this.id();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_user_azure_sql_dw(): Create_user_azure_sql_dwContext {
		let _localctx: Create_user_azure_sql_dwContext = new Create_user_azure_sql_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, TSqlParser.RULE_create_user_azure_sql_dw);
		let _la: number;
		try {
			this.state = 5372;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 641, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5344;
				this.match(TSqlParser.CREATE);
				this.state = 5345;
				this.match(TSqlParser.USER);
				this.state = 5346;
				_localctx._user_name = this.id();
				this.state = 5352;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.FOR:
				case TSqlParser.FROM:
					{
					this.state = 5347;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.FOR || _la === TSqlParser.FROM)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5348;
					this.match(TSqlParser.LOGIN);
					this.state = 5349;
					_localctx._login_name = this.id();
					}
					break;
				case TSqlParser.WITHOUT:
					{
					this.state = 5350;
					this.match(TSqlParser.WITHOUT);
					this.state = 5351;
					this.match(TSqlParser.LOGIN);
					}
					break;
				case TSqlParser.EOF:
				case TSqlParser.ALTER:
				case TSqlParser.BACKUP:
				case TSqlParser.BEGIN:
				case TSqlParser.BLOCKING_HIERARCHY:
				case TSqlParser.BREAK:
				case TSqlParser.CALLED:
				case TSqlParser.CASE:
				case TSqlParser.CLOSE:
				case TSqlParser.COALESCE:
				case TSqlParser.COMMIT:
				case TSqlParser.CONTINUE:
				case TSqlParser.CONVERT:
				case TSqlParser.CREATE:
				case TSqlParser.CURRENT_TIMESTAMP:
				case TSqlParser.CURRENT_USER:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.DBCC:
				case TSqlParser.DEALLOCATE:
				case TSqlParser.DECLARE:
				case TSqlParser.DEFAULT:
				case TSqlParser.DELETE:
				case TSqlParser.DROP:
				case TSqlParser.ELSE:
				case TSqlParser.END:
				case TSqlParser.EVENTDATA:
				case TSqlParser.EXECUTE:
				case TSqlParser.FETCH:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.GET:
				case TSqlParser.GOTO:
				case TSqlParser.GRANT:
				case TSqlParser.IDENTITY:
				case TSqlParser.IF:
				case TSqlParser.INIT:
				case TSqlParser.INSERT:
				case TSqlParser.ISNULL:
				case TSqlParser.KEY:
				case TSqlParser.LEFT:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.MERGE:
				case TSqlParser.NULL:
				case TSqlParser.NULLIF:
				case TSqlParser.OFFSETS:
				case TSqlParser.OPEN:
				case TSqlParser.OVER:
				case TSqlParser.PAGE:
				case TSqlParser.PRINT:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAISERROR:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.REVERT:
				case TSqlParser.RIGHT:
				case TSqlParser.ROLLBACK:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SAVE:
				case TSqlParser.SELECT:
				case TSqlParser.SERVER:
				case TSqlParser.SESSION_USER:
				case TSqlParser.SET:
				case TSqlParser.SETUSER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.SYSTEM_USER:
				case TSqlParser.TARGET:
				case TSqlParser.TRUNCATE:
				case TSqlParser.UPDATE:
				case TSqlParser.USE:
				case TSqlParser.WAITFOR:
				case TSqlParser.WHILE:
				case TSqlParser.WITH:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.LOCAL_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.ID:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.LR_BRACKET:
				case TSqlParser.SEMI:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
				case TSqlParser.BIT_NOT:
					break;
				default:
					break;
				}
				this.state = 5358;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 639, this._ctx) ) {
				case 1:
					{
					this.state = 5354;
					this.match(TSqlParser.WITH);
					this.state = 5355;
					this.match(TSqlParser.DEFAULT_SCHEMA);
					this.state = 5356;
					this.match(TSqlParser.EQUAL);
					this.state = 5357;
					_localctx._schema_name = this.id();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5360;
				this.match(TSqlParser.CREATE);
				this.state = 5361;
				this.match(TSqlParser.USER);
				this.state = 5362;
				_localctx._Azure_Active_Directory_principal = this.id();
				this.state = 5363;
				this.match(TSqlParser.FROM);
				this.state = 5364;
				this.match(TSqlParser.EXTERNAL);
				this.state = 5365;
				this.match(TSqlParser.PROVIDER);
				this.state = 5370;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 640, this._ctx) ) {
				case 1:
					{
					this.state = 5366;
					this.match(TSqlParser.WITH);
					this.state = 5367;
					this.match(TSqlParser.DEFAULT_SCHEMA);
					this.state = 5368;
					this.match(TSqlParser.EQUAL);
					this.state = 5369;
					_localctx._schema_name = this.id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user_azure_sql(): Alter_user_azure_sqlContext {
		let _localctx: Alter_user_azure_sqlContext = new Alter_user_azure_sqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, TSqlParser.RULE_alter_user_azure_sql);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5374;
			this.match(TSqlParser.ALTER);
			this.state = 5375;
			this.match(TSqlParser.USER);
			this.state = 5376;
			_localctx._username = this.id();
			this.state = 5377;
			this.match(TSqlParser.WITH);
			this.state = 5402;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					this.state = 5402;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 646, this._ctx) ) {
					case 1:
						{
						this.state = 5379;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5378;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5381;
						this.match(TSqlParser.NAME);
						this.state = 5382;
						this.match(TSqlParser.EQUAL);
						this.state = 5383;
						_localctx._newusername = this.id();
						}
						break;

					case 2:
						{
						this.state = 5385;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5384;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5387;
						this.match(TSqlParser.DEFAULT_SCHEMA);
						this.state = 5388;
						this.match(TSqlParser.EQUAL);
						this.state = 5389;
						_localctx._schema_name = this.id();
						}
						break;

					case 3:
						{
						this.state = 5391;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5390;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5393;
						this.match(TSqlParser.LOGIN);
						this.state = 5394;
						this.match(TSqlParser.EQUAL);
						this.state = 5395;
						_localctx._loginame = this.id();
						}
						break;

					case 4:
						{
						this.state = 5397;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5396;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5399;
						this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						this.state = 5400;
						this.match(TSqlParser.EQUAL);
						this.state = 5401;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5404;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_workload_group(): Alter_workload_groupContext {
		let _localctx: Alter_workload_groupContext = new Alter_workload_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, TSqlParser.RULE_alter_workload_group);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5406;
			this.match(TSqlParser.ALTER);
			this.state = 5407;
			this.match(TSqlParser.WORKLOAD);
			this.state = 5408;
			this.match(TSqlParser.GROUP);
			this.state = 5411;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 648, this._ctx) ) {
			case 1:
				{
				this.state = 5409;
				_localctx._workload_group_group_name = this.id();
				}
				break;

			case 2:
				{
				this.state = 5410;
				this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			this.state = 5444;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 653, this._ctx) ) {
			case 1:
				{
				this.state = 5413;
				this.match(TSqlParser.WITH);
				this.state = 5414;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 5439;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 651, this._ctx) ) {
					case 1:
						{
						this.state = 5415;
						this.match(TSqlParser.IMPORTANCE);
						this.state = 5416;
						this.match(TSqlParser.EQUAL);
						this.state = 5417;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.HIGH || _la === TSqlParser.LOW || _la === TSqlParser.MEDIUM)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 2:
						{
						this.state = 5419;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5418;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5421;
						this.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
						this.state = 5422;
						this.match(TSqlParser.EQUAL);
						this.state = 5423;
						_localctx._request_max_memory_grant = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 3:
						{
						this.state = 5425;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5424;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5427;
						this.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
						this.state = 5428;
						this.match(TSqlParser.EQUAL);
						this.state = 5429;
						_localctx._request_max_cpu_time_sec = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 4:
						{
						this.state = 5430;
						this.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						this.state = 5431;
						this.match(TSqlParser.EQUAL);
						this.state = 5432;
						_localctx._request_memory_grant_timeout_sec = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 5:
						{
						this.state = 5433;
						this.match(TSqlParser.MAX_DOP);
						this.state = 5434;
						this.match(TSqlParser.EQUAL);
						this.state = 5435;
						_localctx._max_dop = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 6:
						{
						this.state = 5436;
						this.match(TSqlParser.GROUP_MAX_REQUESTS);
						this.state = 5437;
						this.match(TSqlParser.EQUAL);
						this.state = 5438;
						_localctx._group_max_requests = this.match(TSqlParser.DECIMAL);
						}
						break;
					}
					}
					this.state = 5441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.GROUP_MAX_REQUESTS || _la === TSqlParser.IMPORTANCE || _la === TSqlParser.MAX_DOP || ((((_la - 683)) & ~0x1F) === 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 683)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 683)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 683)))) !== 0) || _la === TSqlParser.COMMA);
				this.state = 5443;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 5451;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 655, this._ctx) ) {
			case 1:
				{
				this.state = 5446;
				this.match(TSqlParser.USING);
				this.state = 5449;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 654, this._ctx) ) {
				case 1:
					{
					this.state = 5447;
					_localctx._workload_group_pool_name = this.id();
					}
					break;

				case 2:
					{
					this.state = 5448;
					this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_workload_group(): Create_workload_groupContext {
		let _localctx: Create_workload_groupContext = new Create_workload_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, TSqlParser.RULE_create_workload_group);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5453;
			this.match(TSqlParser.CREATE);
			this.state = 5454;
			this.match(TSqlParser.WORKLOAD);
			this.state = 5455;
			this.match(TSqlParser.GROUP);
			this.state = 5456;
			_localctx._workload_group_group_name = this.id();
			this.state = 5488;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 660, this._ctx) ) {
			case 1:
				{
				this.state = 5457;
				this.match(TSqlParser.WITH);
				this.state = 5458;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 5483;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 658, this._ctx) ) {
					case 1:
						{
						this.state = 5459;
						this.match(TSqlParser.IMPORTANCE);
						this.state = 5460;
						this.match(TSqlParser.EQUAL);
						this.state = 5461;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.HIGH || _la === TSqlParser.LOW || _la === TSqlParser.MEDIUM)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 2:
						{
						this.state = 5463;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5462;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5465;
						this.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
						this.state = 5466;
						this.match(TSqlParser.EQUAL);
						this.state = 5467;
						_localctx._request_max_memory_grant = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 3:
						{
						this.state = 5469;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5468;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 5471;
						this.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
						this.state = 5472;
						this.match(TSqlParser.EQUAL);
						this.state = 5473;
						_localctx._request_max_cpu_time_sec = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 4:
						{
						this.state = 5474;
						this.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						this.state = 5475;
						this.match(TSqlParser.EQUAL);
						this.state = 5476;
						_localctx._request_memory_grant_timeout_sec = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 5:
						{
						this.state = 5477;
						this.match(TSqlParser.MAX_DOP);
						this.state = 5478;
						this.match(TSqlParser.EQUAL);
						this.state = 5479;
						_localctx._max_dop = this.match(TSqlParser.DECIMAL);
						}
						break;

					case 6:
						{
						this.state = 5480;
						this.match(TSqlParser.GROUP_MAX_REQUESTS);
						this.state = 5481;
						this.match(TSqlParser.EQUAL);
						this.state = 5482;
						_localctx._group_max_requests = this.match(TSqlParser.DECIMAL);
						}
						break;
					}
					}
					this.state = 5485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.GROUP_MAX_REQUESTS || _la === TSqlParser.IMPORTANCE || _la === TSqlParser.MAX_DOP || ((((_la - 683)) & ~0x1F) === 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 683)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 683)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 683)))) !== 0) || _la === TSqlParser.COMMA);
				this.state = 5487;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 5503;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 664, this._ctx) ) {
			case 1:
				{
				this.state = 5490;
				this.match(TSqlParser.USING);
				this.state = 5493;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
				case 1:
					{
					this.state = 5491;
					_localctx._workload_group_pool_name = this.id();
					}
					break;

				case 2:
					{
					this.state = 5492;
					this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				this.state = 5501;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
				case 1:
					{
					this.state = 5496;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 5495;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 5498;
					this.match(TSqlParser.EXTERNAL);
					this.state = 5499;
					_localctx._external_pool_name = this.id();
					}
					break;

				case 2:
					{
					this.state = 5500;
					this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_xml_schema_collection(): Create_xml_schema_collectionContext {
		let _localctx: Create_xml_schema_collectionContext = new Create_xml_schema_collectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, TSqlParser.RULE_create_xml_schema_collection);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5505;
			this.match(TSqlParser.CREATE);
			this.state = 5506;
			this.match(TSqlParser.XML);
			this.state = 5507;
			this.match(TSqlParser.SCHEMA);
			this.state = 5508;
			this.match(TSqlParser.COLLECTION);
			this.state = 5512;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
			case 1:
				{
				this.state = 5509;
				_localctx._relational_schema = this.id();
				this.state = 5510;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 5514;
			_localctx._sql_identifier = this.id();
			this.state = 5515;
			this.match(TSqlParser.AS);
			this.state = 5519;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.STRING:
				{
				this.state = 5516;
				this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				{
				this.state = 5517;
				this.id();
				}
				break;
			case TSqlParser.LOCAL_ID:
				{
				this.state = 5518;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_queue(): Create_queueContext {
		let _localctx: Create_queueContext = new Create_queueContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, TSqlParser.RULE_create_queue);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5521;
			this.match(TSqlParser.CREATE);
			this.state = 5522;
			this.match(TSqlParser.QUEUE);
			this.state = 5525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 667, this._ctx) ) {
			case 1:
				{
				this.state = 5523;
				this.full_table_name();
				}
				break;

			case 2:
				{
				this.state = 5524;
				_localctx._queue_name = this.id();
				}
				break;
			}
			this.state = 5528;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 668, this._ctx) ) {
			case 1:
				{
				this.state = 5527;
				this.queue_settings();
				}
				break;
			}
			this.state = 5533;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 669, this._ctx) ) {
			case 1:
				{
				this.state = 5530;
				this.match(TSqlParser.ON);
				this.state = 5531;
				_localctx._filegroup = this.id();
				}
				break;

			case 2:
				{
				this.state = 5532;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queue_settings(): Queue_settingsContext {
		let _localctx: Queue_settingsContext = new Queue_settingsContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, TSqlParser.RULE_queue_settings);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5535;
			this.match(TSqlParser.WITH);
			this.state = 5542;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 671, this._ctx) ) {
			case 1:
				{
				this.state = 5536;
				this.match(TSqlParser.STATUS);
				this.state = 5537;
				this.match(TSqlParser.EQUAL);
				this.state = 5538;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 5539;
					this.match(TSqlParser.COMMA);
					}
				}

				}
				break;
			}
			this.state = 5550;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 673, this._ctx) ) {
			case 1:
				{
				this.state = 5544;
				this.match(TSqlParser.RETENTION);
				this.state = 5545;
				this.match(TSqlParser.EQUAL);
				this.state = 5546;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 5547;
					this.match(TSqlParser.COMMA);
					}
				}

				}
				break;
			}
			this.state = 5597;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 685, this._ctx) ) {
			case 1:
				{
				this.state = 5552;
				this.match(TSqlParser.ACTIVATION);
				this.state = 5553;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5591;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.EXECUTE:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.STATUS:
				case TSqlParser.RR_BRACKET:
					{
					{
					this.state = 5560;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.STATUS) {
						{
						this.state = 5554;
						this.match(TSqlParser.STATUS);
						this.state = 5555;
						this.match(TSqlParser.EQUAL);
						this.state = 5556;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5558;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5557;
							this.match(TSqlParser.COMMA);
							}
						}

						}
					}

					this.state = 5568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.PROCEDURE_NAME) {
						{
						this.state = 5562;
						this.match(TSqlParser.PROCEDURE_NAME);
						this.state = 5563;
						this.match(TSqlParser.EQUAL);
						this.state = 5564;
						this.func_proc_name();
						this.state = 5566;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5565;
							this.match(TSqlParser.COMMA);
							}
						}

						}
					}

					this.state = 5576;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.MAX_QUEUE_READERS) {
						{
						this.state = 5570;
						this.match(TSqlParser.MAX_QUEUE_READERS);
						this.state = 5571;
						this.match(TSqlParser.EQUAL);
						this.state = 5572;
						_localctx._max_readers = this.match(TSqlParser.DECIMAL);
						this.state = 5574;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5573;
							this.match(TSqlParser.COMMA);
							}
						}

						}
					}

					this.state = 5588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.EXECUTE) {
						{
						this.state = 5578;
						this.match(TSqlParser.EXECUTE);
						this.state = 5579;
						this.match(TSqlParser.AS);
						this.state = 5583;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.SELF:
							{
							this.state = 5580;
							this.match(TSqlParser.SELF);
							}
							break;
						case TSqlParser.STRING:
							{
							this.state = 5581;
							_localctx._user_name = this.match(TSqlParser.STRING);
							}
							break;
						case TSqlParser.OWNER:
							{
							this.state = 5582;
							this.match(TSqlParser.OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 5586;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 5585;
							this.match(TSqlParser.COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case TSqlParser.DROP:
					{
					this.state = 5590;
					this.match(TSqlParser.DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5593;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 5595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 5594;
					this.match(TSqlParser.COMMA);
					}
				}

				}
				break;
			}
			this.state = 5606;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 686, this._ctx) ) {
			case 1:
				{
				this.state = 5599;
				this.match(TSqlParser.POISON_MESSAGE_HANDLING);
				this.state = 5600;
				this.match(TSqlParser.LR_BRACKET);
				{
				this.state = 5601;
				this.match(TSqlParser.STATUS);
				this.state = 5602;
				this.match(TSqlParser.EQUAL);
				this.state = 5603;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				this.state = 5605;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_queue(): Alter_queueContext {
		let _localctx: Alter_queueContext = new Alter_queueContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, TSqlParser.RULE_alter_queue);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5608;
			this.match(TSqlParser.ALTER);
			this.state = 5609;
			this.match(TSqlParser.QUEUE);
			this.state = 5612;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 687, this._ctx) ) {
			case 1:
				{
				this.state = 5610;
				this.full_table_name();
				}
				break;

			case 2:
				{
				this.state = 5611;
				_localctx._queue_name = this.id();
				}
				break;
			}
			this.state = 5616;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.WITH:
				{
				this.state = 5614;
				this.queue_settings();
				}
				break;
			case TSqlParser.MOVE:
			case TSqlParser.REBUILD:
			case TSqlParser.REORGANIZE:
				{
				this.state = 5615;
				this.queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queue_action(): Queue_actionContext {
		let _localctx: Queue_actionContext = new Queue_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, TSqlParser.RULE_queue_action);
		let _la: number;
		try {
			this.state = 5639;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.REBUILD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5618;
				this.match(TSqlParser.REBUILD);
				this.state = 5624;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 689, this._ctx) ) {
				case 1:
					{
					this.state = 5619;
					this.match(TSqlParser.WITH);
					this.state = 5620;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 5621;
					this.queue_rebuild_options();
					this.state = 5622;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case TSqlParser.REORGANIZE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5626;
				this.match(TSqlParser.REORGANIZE);
				this.state = 5631;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 690, this._ctx) ) {
				case 1:
					{
					this.state = 5627;
					this.match(TSqlParser.WITH);
					this.state = 5628;
					this.match(TSqlParser.LOB_COMPACTION);
					this.state = 5629;
					this.match(TSqlParser.EQUAL);
					this.state = 5630;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case TSqlParser.MOVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5633;
				this.match(TSqlParser.MOVE);
				this.state = 5634;
				this.match(TSqlParser.TO);
				this.state = 5637;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 5635;
					this.id();
					}
					break;
				case TSqlParser.DEFAULT:
					{
					this.state = 5636;
					this.match(TSqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queue_rebuild_options(): Queue_rebuild_optionsContext {
		let _localctx: Queue_rebuild_optionsContext = new Queue_rebuild_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, TSqlParser.RULE_queue_rebuild_options);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5641;
			this.match(TSqlParser.MAXDOP);
			this.state = 5642;
			this.match(TSqlParser.EQUAL);
			this.state = 5643;
			this.match(TSqlParser.DECIMAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_contract(): Create_contractContext {
		let _localctx: Create_contractContext = new Create_contractContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, TSqlParser.RULE_create_contract);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5645;
			this.match(TSqlParser.CREATE);
			this.state = 5646;
			this.match(TSqlParser.CONTRACT);
			this.state = 5647;
			this.contract_name();
			this.state = 5650;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 5648;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 5649;
				_localctx._owner_name = this.id();
				}
			}

			this.state = 5652;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 5663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5655;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 5653;
					_localctx._message_type_name = this.id();
					}
					break;
				case TSqlParser.DEFAULT:
					{
					this.state = 5654;
					this.match(TSqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5657;
				this.match(TSqlParser.SENT);
				this.state = 5658;
				this.match(TSqlParser.BY);
				this.state = 5659;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ANY || _la === TSqlParser.TARGET || _la === TSqlParser.INITIATOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5661;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 5660;
					this.match(TSqlParser.COMMA);
					}
				}

				}
				}
				this.state = 5665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || _la === TSqlParser.DEFAULT || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0));
			this.state = 5667;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conversation_statement(): Conversation_statementContext {
		let _localctx: Conversation_statementContext = new Conversation_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, TSqlParser.RULE_conversation_statement);
		try {
			this.state = 5675;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 697, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5669;
				this.begin_conversation_timer();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5670;
				this.begin_conversation_dialog();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5671;
				this.end_conversation();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5672;
				this.get_conversation();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5673;
				this.send_conversation();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5674;
				this.waitfor_conversation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public message_statement(): Message_statementContext {
		let _localctx: Message_statementContext = new Message_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, TSqlParser.RULE_message_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5677;
			this.match(TSqlParser.CREATE);
			this.state = 5678;
			this.match(TSqlParser.MESSAGE);
			this.state = 5679;
			this.match(TSqlParser.TYPE);
			this.state = 5680;
			_localctx._message_type_name = this.id();
			this.state = 5683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 5681;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 5682;
				_localctx._owner_name = this.id();
				}
			}

			{
			this.state = 5685;
			this.match(TSqlParser.VALIDATION);
			this.state = 5686;
			this.match(TSqlParser.EQUAL);
			this.state = 5695;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.NONE:
				{
				this.state = 5687;
				this.match(TSqlParser.NONE);
				}
				break;
			case TSqlParser.EMPTY:
				{
				this.state = 5688;
				this.match(TSqlParser.EMPTY);
				}
				break;
			case TSqlParser.WELL_FORMED_XML:
				{
				this.state = 5689;
				this.match(TSqlParser.WELL_FORMED_XML);
				}
				break;
			case TSqlParser.VALID_XML:
				{
				this.state = 5690;
				this.match(TSqlParser.VALID_XML);
				this.state = 5691;
				this.match(TSqlParser.WITH);
				this.state = 5692;
				this.match(TSqlParser.SCHEMA);
				this.state = 5693;
				this.match(TSqlParser.COLLECTION);
				this.state = 5694;
				_localctx._schema_collection_name = this.id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_statement(): Merge_statementContext {
		let _localctx: Merge_statementContext = new Merge_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, TSqlParser.RULE_merge_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5698;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 5697;
				this.with_expression();
				}
			}

			this.state = 5700;
			this.match(TSqlParser.MERGE);
			this.state = 5708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.TOP) {
				{
				this.state = 5701;
				this.match(TSqlParser.TOP);
				this.state = 5702;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5703;
				this.expression(0);
				this.state = 5704;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 5706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PERCENT) {
					{
					this.state = 5705;
					this.match(TSqlParser.PERCENT);
					}
				}

				}
			}

			this.state = 5711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INTO) {
				{
				this.state = 5710;
				this.match(TSqlParser.INTO);
				}
			}

			this.state = 5713;
			this.ddl_object();
			this.state = 5715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 5714;
				this.insert_with_table_hints();
				}
			}

			this.state = 5718;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 705, this._ctx) ) {
			case 1:
				{
				this.state = 5717;
				this.as_table_alias();
				}
				break;
			}
			this.state = 5720;
			this.match(TSqlParser.USING);
			this.state = 5721;
			this.table_sources();
			this.state = 5722;
			this.match(TSqlParser.ON);
			this.state = 5723;
			this.search_condition();
			this.state = 5734;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 707, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5724;
					this.match(TSqlParser.WHEN);
					this.state = 5725;
					this.match(TSqlParser.MATCHED);
					this.state = 5728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.AND) {
						{
						this.state = 5726;
						this.match(TSqlParser.AND);
						this.state = 5727;
						this.search_condition();
						}
					}

					this.state = 5730;
					this.match(TSqlParser.THEN);
					this.state = 5731;
					this.merge_matched();
					}
					}
				}
				this.state = 5736;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 707, this._ctx);
			}
			this.state = 5750;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 710, this._ctx) ) {
			case 1:
				{
				this.state = 5737;
				this.match(TSqlParser.WHEN);
				this.state = 5738;
				this.match(TSqlParser.NOT);
				this.state = 5739;
				this.match(TSqlParser.MATCHED);
				this.state = 5742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.BY) {
					{
					this.state = 5740;
					this.match(TSqlParser.BY);
					this.state = 5741;
					this.match(TSqlParser.TARGET);
					}
				}

				this.state = 5746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AND) {
					{
					this.state = 5744;
					this.match(TSqlParser.AND);
					this.state = 5745;
					this.search_condition();
					}
				}

				this.state = 5748;
				this.match(TSqlParser.THEN);
				this.state = 5749;
				this.merge_not_matched();
				}
				break;
			}
			this.state = 5765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.WHEN) {
				{
				{
				this.state = 5752;
				this.match(TSqlParser.WHEN);
				this.state = 5753;
				this.match(TSqlParser.NOT);
				this.state = 5754;
				this.match(TSqlParser.MATCHED);
				this.state = 5755;
				this.match(TSqlParser.BY);
				this.state = 5756;
				this.match(TSqlParser.SOURCE);
				this.state = 5759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AND) {
					{
					this.state = 5757;
					this.match(TSqlParser.AND);
					this.state = 5758;
					this.search_condition();
					}
				}

				this.state = 5761;
				this.match(TSqlParser.THEN);
				this.state = 5762;
				this.merge_matched();
				}
				}
				this.state = 5767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OUTPUT) {
				{
				this.state = 5768;
				this.output_clause();
				}
			}

			this.state = 5772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OPTION) {
				{
				this.state = 5771;
				this.option_clause();
				}
			}

			this.state = 5774;
			this.match(TSqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_matched(): Merge_matchedContext {
		let _localctx: Merge_matchedContext = new Merge_matchedContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, TSqlParser.RULE_merge_matched);
		let _la: number;
		try {
			this.state = 5787;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.UPDATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5776;
				this.match(TSqlParser.UPDATE);
				this.state = 5777;
				this.match(TSqlParser.SET);
				this.state = 5778;
				this.update_elem();
				this.state = 5783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 5779;
					this.match(TSqlParser.COMMA);
					this.state = 5780;
					this.update_elem();
					}
					}
					this.state = 5785;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case TSqlParser.DELETE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5786;
				this.match(TSqlParser.DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_not_matched(): Merge_not_matchedContext {
		let _localctx: Merge_not_matchedContext = new Merge_not_matchedContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, TSqlParser.RULE_merge_not_matched);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5789;
			this.match(TSqlParser.INSERT);
			this.state = 5794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LR_BRACKET) {
				{
				this.state = 5790;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5791;
				this.column_name_list();
				this.state = 5792;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			this.state = 5799;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.VALUES:
				{
				this.state = 5796;
				this.table_value_constructor();
				}
				break;
			case TSqlParser.DEFAULT:
				{
				this.state = 5797;
				this.match(TSqlParser.DEFAULT);
				this.state = 5798;
				this.match(TSqlParser.VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_statement(): Delete_statementContext {
		let _localctx: Delete_statementContext = new Delete_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, TSqlParser.RULE_delete_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5802;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 5801;
				this.with_expression();
				}
			}

			this.state = 5804;
			this.match(TSqlParser.DELETE);
			this.state = 5814;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 721, this._ctx) ) {
			case 1:
				{
				this.state = 5805;
				this.match(TSqlParser.TOP);
				this.state = 5806;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5807;
				this.expression(0);
				this.state = 5808;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 5810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PERCENT) {
					{
					this.state = 5809;
					this.match(TSqlParser.PERCENT);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 5812;
				this.match(TSqlParser.TOP);
				this.state = 5813;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			}
			this.state = 5817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 5816;
				this.match(TSqlParser.FROM);
				}
			}

			this.state = 5819;
			this.delete_statement_from();
			this.state = 5821;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 723, this._ctx) ) {
			case 1:
				{
				this.state = 5820;
				this.insert_with_table_hints();
				}
				break;
			}
			this.state = 5824;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 724, this._ctx) ) {
			case 1:
				{
				this.state = 5823;
				this.output_clause();
				}
				break;
			}
			this.state = 5828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 5826;
				this.match(TSqlParser.FROM);
				this.state = 5827;
				this.table_sources();
				}
			}

			this.state = 5843;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WHERE) {
				{
				this.state = 5830;
				this.match(TSqlParser.WHERE);
				this.state = 5841;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.BLOCKING_HIERARCHY:
				case TSqlParser.CALLED:
				case TSqlParser.CASE:
				case TSqlParser.COALESCE:
				case TSqlParser.CONVERT:
				case TSqlParser.CURRENT_TIMESTAMP:
				case TSqlParser.CURRENT_USER:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.DEFAULT:
				case TSqlParser.EVENTDATA:
				case TSqlParser.EXISTS:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.IDENTITY:
				case TSqlParser.INIT:
				case TSqlParser.ISNULL:
				case TSqlParser.KEY:
				case TSqlParser.LEFT:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.NOT:
				case TSqlParser.NULL:
				case TSqlParser.NULLIF:
				case TSqlParser.OFFSETS:
				case TSqlParser.OVER:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.RIGHT:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SESSION_USER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.SYSTEM_USER:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.LOCAL_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.ID:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.LR_BRACKET:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
				case TSqlParser.BIT_NOT:
					{
					this.state = 5831;
					this.search_condition();
					}
					break;
				case TSqlParser.CURRENT:
					{
					this.state = 5832;
					this.match(TSqlParser.CURRENT);
					this.state = 5833;
					this.match(TSqlParser.OF);
					this.state = 5839;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 727, this._ctx) ) {
					case 1:
						{
						this.state = 5835;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 726, this._ctx) ) {
						case 1:
							{
							this.state = 5834;
							this.match(TSqlParser.GLOBAL);
							}
							break;
						}
						this.state = 5837;
						this.cursor_name();
						}
						break;

					case 2:
						{
						this.state = 5838;
						_localctx._cursor_var = this.match(TSqlParser.LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 5846;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 5845;
				this.for_clause();
				}
			}

			this.state = 5849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OPTION) {
				{
				this.state = 5848;
				this.option_clause();
				}
			}

			this.state = 5852;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 732, this._ctx) ) {
			case 1:
				{
				this.state = 5851;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_statement_from(): Delete_statement_fromContext {
		let _localctx: Delete_statement_fromContext = new Delete_statement_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, TSqlParser.RULE_delete_statement_from);
		try {
			this.state = 5858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 733, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5854;
				this.ddl_object();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5855;
				this.table_alias();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5856;
				this.rowset_function_limited();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5857;
				_localctx._table_var = this.match(TSqlParser.LOCAL_ID);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_statement(): Insert_statementContext {
		let _localctx: Insert_statementContext = new Insert_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, TSqlParser.RULE_insert_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 5860;
				this.with_expression();
				}
			}

			this.state = 5863;
			this.match(TSqlParser.INSERT);
			this.state = 5871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.TOP) {
				{
				this.state = 5864;
				this.match(TSqlParser.TOP);
				this.state = 5865;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5866;
				this.expression(0);
				this.state = 5867;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 5869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PERCENT) {
					{
					this.state = 5868;
					this.match(TSqlParser.PERCENT);
					}
				}

				}
			}

			this.state = 5874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INTO) {
				{
				this.state = 5873;
				this.match(TSqlParser.INTO);
				}
			}

			this.state = 5878;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.LOCAL_ID:
			case TSqlParser.ID:
				{
				this.state = 5876;
				this.ddl_object();
				}
				break;
			case TSqlParser.OPENDATASOURCE:
			case TSqlParser.OPENQUERY:
				{
				this.state = 5877;
				this.rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5881;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 739, this._ctx) ) {
			case 1:
				{
				this.state = 5880;
				this.insert_with_table_hints();
				}
				break;
			}
			this.state = 5887;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 740, this._ctx) ) {
			case 1:
				{
				this.state = 5883;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5884;
				this.column_name_list();
				this.state = 5885;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 5890;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OUTPUT) {
				{
				this.state = 5889;
				this.output_clause();
				}
			}

			this.state = 5892;
			this.insert_statement_value();
			this.state = 5894;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 5893;
				this.for_clause();
				}
			}

			this.state = 5897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OPTION) {
				{
				this.state = 5896;
				this.option_clause();
				}
			}

			this.state = 5900;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 744, this._ctx) ) {
			case 1:
				{
				this.state = 5899;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_statement_value(): Insert_statement_valueContext {
		let _localctx: Insert_statement_valueContext = new Insert_statement_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, TSqlParser.RULE_insert_statement_value);
		try {
			this.state = 5907;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 745, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5902;
				this.table_value_constructor();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5903;
				this.derived_table();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5904;
				this.execute_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5905;
				this.match(TSqlParser.DEFAULT);
				this.state = 5906;
				this.match(TSqlParser.VALUES);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receive_statement(): Receive_statementContext {
		let _localctx: Receive_statementContext = new Receive_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, TSqlParser.RULE_receive_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LR_BRACKET) {
				{
				this.state = 5909;
				this.match(TSqlParser.LR_BRACKET);
				}
			}

			this.state = 5912;
			this.match(TSqlParser.RECEIVE);
			this.state = 5917;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ALL:
				{
				this.state = 5913;
				this.match(TSqlParser.ALL);
				}
				break;
			case TSqlParser.DISTINCT:
				{
				this.state = 5914;
				this.match(TSqlParser.DISTINCT);
				}
				break;
			case TSqlParser.TOP:
				{
				this.state = 5915;
				this.top_clause();
				}
				break;
			case TSqlParser.STAR:
				{
				this.state = 5916;
				this.match(TSqlParser.STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5927;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.LOCAL_ID) {
				{
				{
				this.state = 5919;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 5920;
				this.match(TSqlParser.EQUAL);
				this.state = 5921;
				this.expression(0);
				this.state = 5923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 5922;
					this.match(TSqlParser.COMMA);
					}
				}

				}
				}
				this.state = 5929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5930;
			this.match(TSqlParser.FROM);
			this.state = 5931;
			this.full_table_name();
			this.state = 5937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INTO) {
				{
				this.state = 5932;
				this.match(TSqlParser.INTO);
				this.state = 5933;
				_localctx._table_variable = this.id();
				{
				this.state = 5934;
				this.match(TSqlParser.WHERE);
				this.state = 5935;
				_localctx._where = this.search_condition();
				}
				}
			}

			this.state = 5940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.RR_BRACKET) {
				{
				this.state = 5939;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_statement(): Select_statementContext {
		let _localctx: Select_statementContext = new Select_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, TSqlParser.RULE_select_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5943;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 5942;
				this.with_expression();
				}
			}

			this.state = 5945;
			this.query_expression();
			this.state = 5947;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 753, this._ctx) ) {
			case 1:
				{
				this.state = 5946;
				this.order_by_clause();
				}
				break;
			}
			this.state = 5950;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				{
				this.state = 5949;
				this.for_clause();
				}
				break;
			}
			this.state = 5953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 755, this._ctx) ) {
			case 1:
				{
				this.state = 5952;
				this.option_clause();
				}
				break;
			}
			this.state = 5956;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 756, this._ctx) ) {
			case 1:
				{
				this.state = 5955;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public time(): TimeContext {
		let _localctx: TimeContext = new TimeContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, TSqlParser.RULE_time);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5960;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.LOCAL_ID:
				{
				this.state = 5958;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;
			case TSqlParser.DECIMAL:
			case TSqlParser.STRING:
			case TSqlParser.BINARY:
			case TSqlParser.FLOAT:
			case TSqlParser.REAL:
			case TSqlParser.DOLLAR:
			case TSqlParser.PLUS:
			case TSqlParser.MINUS:
				{
				this.state = 5959;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_statement(): Update_statementContext {
		let _localctx: Update_statementContext = new Update_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, TSqlParser.RULE_update_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 5962;
				this.with_expression();
				}
			}

			this.state = 5965;
			this.match(TSqlParser.UPDATE);
			this.state = 5973;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.TOP) {
				{
				this.state = 5966;
				this.match(TSqlParser.TOP);
				this.state = 5967;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 5968;
				this.expression(0);
				this.state = 5969;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 5971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PERCENT) {
					{
					this.state = 5970;
					this.match(TSqlParser.PERCENT);
					}
				}

				}
			}

			this.state = 5977;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.LOCAL_ID:
			case TSqlParser.ID:
				{
				this.state = 5975;
				this.ddl_object();
				}
				break;
			case TSqlParser.OPENDATASOURCE:
			case TSqlParser.OPENQUERY:
				{
				this.state = 5976;
				this.rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH || _la === TSqlParser.LR_BRACKET) {
				{
				this.state = 5979;
				this.with_table_hints();
				}
			}

			this.state = 5982;
			this.match(TSqlParser.SET);
			this.state = 5983;
			this.update_elem();
			this.state = 5988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 5984;
				this.match(TSqlParser.COMMA);
				this.state = 5985;
				this.update_elem();
				}
				}
				this.state = 5990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5992;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 764, this._ctx) ) {
			case 1:
				{
				this.state = 5991;
				this.output_clause();
				}
				break;
			}
			this.state = 5996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 5994;
				this.match(TSqlParser.FROM);
				this.state = 5995;
				this.table_sources();
				}
			}

			this.state = 6011;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WHERE) {
				{
				this.state = 5998;
				this.match(TSqlParser.WHERE);
				this.state = 6009;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.BLOCKING_HIERARCHY:
				case TSqlParser.CALLED:
				case TSqlParser.CASE:
				case TSqlParser.COALESCE:
				case TSqlParser.CONVERT:
				case TSqlParser.CURRENT_TIMESTAMP:
				case TSqlParser.CURRENT_USER:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.DEFAULT:
				case TSqlParser.EVENTDATA:
				case TSqlParser.EXISTS:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.IDENTITY:
				case TSqlParser.INIT:
				case TSqlParser.ISNULL:
				case TSqlParser.KEY:
				case TSqlParser.LEFT:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.NOT:
				case TSqlParser.NULL:
				case TSqlParser.NULLIF:
				case TSqlParser.OFFSETS:
				case TSqlParser.OVER:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.RIGHT:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SESSION_USER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.SYSTEM_USER:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.LOCAL_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.ID:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.LR_BRACKET:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
				case TSqlParser.BIT_NOT:
					{
					this.state = 5999;
					this.search_condition_list();
					}
					break;
				case TSqlParser.CURRENT:
					{
					this.state = 6000;
					this.match(TSqlParser.CURRENT);
					this.state = 6001;
					this.match(TSqlParser.OF);
					this.state = 6007;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 767, this._ctx) ) {
					case 1:
						{
						this.state = 6003;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 766, this._ctx) ) {
						case 1:
							{
							this.state = 6002;
							this.match(TSqlParser.GLOBAL);
							}
							break;
						}
						this.state = 6005;
						this.cursor_name();
						}
						break;

					case 2:
						{
						this.state = 6006;
						_localctx._cursor_var = this.match(TSqlParser.LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 6014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 6013;
				this.for_clause();
				}
			}

			this.state = 6017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OPTION) {
				{
				this.state = 6016;
				this.option_clause();
				}
			}

			this.state = 6020;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 772, this._ctx) ) {
			case 1:
				{
				this.state = 6019;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public output_clause(): Output_clauseContext {
		let _localctx: Output_clauseContext = new Output_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, TSqlParser.RULE_output_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6022;
			this.match(TSqlParser.OUTPUT);
			this.state = 6023;
			this.output_dml_list_elem();
			this.state = 6028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 6024;
				this.match(TSqlParser.COMMA);
				this.state = 6025;
				this.output_dml_list_elem();
				}
				}
				this.state = 6030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INTO) {
				{
				this.state = 6031;
				this.match(TSqlParser.INTO);
				this.state = 6034;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.LOCAL_ID:
					{
					this.state = 6032;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;
				case TSqlParser.BLOCKING_HIERARCHY:
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 6033;
					this.table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6040;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 775, this._ctx) ) {
				case 1:
					{
					this.state = 6036;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 6037;
					this.column_name_list();
					this.state = 6038;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public output_dml_list_elem(): Output_dml_list_elemContext {
		let _localctx: Output_dml_list_elemContext = new Output_dml_list_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, TSqlParser.RULE_output_dml_list_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6046;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 777, this._ctx) ) {
			case 1:
				{
				this.state = 6044;
				this.output_column_name();
				}
				break;

			case 2:
				{
				this.state = 6045;
				this.expression(0);
				}
				break;
			}
			this.state = 6049;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 778, this._ctx) ) {
			case 1:
				{
				this.state = 6048;
				this.as_column_alias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public output_column_name(): Output_column_nameContext {
		let _localctx: Output_column_nameContext = new Output_column_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, TSqlParser.RULE_output_column_name);
		try {
			this.state = 6062;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.BLOCKING_HIERARCHY:
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6054;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 779, this._ctx) ) {
				case 1:
					{
					this.state = 6051;
					this.match(TSqlParser.DELETED);
					}
					break;

				case 2:
					{
					this.state = 6052;
					this.match(TSqlParser.INSERTED);
					}
					break;

				case 3:
					{
					this.state = 6053;
					this.table_name();
					}
					break;
				}
				this.state = 6056;
				this.match(TSqlParser.DOT);
				this.state = 6059;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.STAR:
					{
					this.state = 6057;
					this.match(TSqlParser.STAR);
					}
					break;
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 6058;
					this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.DOLLAR_ACTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6061;
				this.match(TSqlParser.DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_database(): Create_databaseContext {
		let _localctx: Create_databaseContext = new Create_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, TSqlParser.RULE_create_database);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6064;
			this.match(TSqlParser.CREATE);
			this.state = 6065;
			this.match(TSqlParser.DATABASE);
			{
			this.state = 6066;
			_localctx._database = this.id();
			}
			this.state = 6070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONTAINMENT) {
				{
				this.state = 6067;
				this.match(TSqlParser.CONTAINMENT);
				this.state = 6068;
				this.match(TSqlParser.EQUAL);
				this.state = 6069;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.NONE || _la === TSqlParser.PARTIAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 6084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ON) {
				{
				this.state = 6072;
				this.match(TSqlParser.ON);
				this.state = 6074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PRIMARY) {
					{
					this.state = 6073;
					this.match(TSqlParser.PRIMARY);
					}
				}

				this.state = 6076;
				this.database_file_spec();
				this.state = 6081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6077;
					this.match(TSqlParser.COMMA);
					this.state = 6078;
					this.database_file_spec();
					}
					}
					this.state = 6083;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6096;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LOG) {
				{
				this.state = 6086;
				this.match(TSqlParser.LOG);
				this.state = 6087;
				this.match(TSqlParser.ON);
				this.state = 6088;
				this.database_file_spec();
				this.state = 6093;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6089;
					this.match(TSqlParser.COMMA);
					this.state = 6090;
					this.database_file_spec();
					}
					}
					this.state = 6095;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COLLATE) {
				{
				this.state = 6098;
				this.match(TSqlParser.COLLATE);
				this.state = 6099;
				_localctx._collation_name = this.id();
				}
			}

			this.state = 6111;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 790, this._ctx) ) {
			case 1:
				{
				this.state = 6102;
				this.match(TSqlParser.WITH);
				this.state = 6103;
				this.create_database_option();
				this.state = 6108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6104;
					this.match(TSqlParser.COMMA);
					this.state = 6105;
					this.create_database_option();
					}
					}
					this.state = 6110;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_index(): Create_indexContext {
		let _localctx: Create_indexContext = new Create_indexContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, TSqlParser.RULE_create_index);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6113;
			this.match(TSqlParser.CREATE);
			this.state = 6115;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.UNIQUE) {
				{
				this.state = 6114;
				this.match(TSqlParser.UNIQUE);
				}
			}

			this.state = 6118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CLUSTERED || _la === TSqlParser.NONCLUSTERED) {
				{
				this.state = 6117;
				this.clustered();
				}
			}

			this.state = 6120;
			this.match(TSqlParser.INDEX);
			this.state = 6121;
			this.id();
			this.state = 6122;
			this.match(TSqlParser.ON);
			this.state = 6123;
			this.table_name_with_hint();
			this.state = 6124;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 6125;
			this.column_name_list_with_order();
			this.state = 6126;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 6132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INCLUDE) {
				{
				this.state = 6127;
				this.match(TSqlParser.INCLUDE);
				this.state = 6128;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6129;
				this.column_name_list();
				this.state = 6130;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			this.state = 6136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WHERE) {
				{
				this.state = 6134;
				this.match(TSqlParser.WHERE);
				this.state = 6135;
				_localctx._where = this.search_condition();
				}
			}

			this.state = 6139;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 795, this._ctx) ) {
			case 1:
				{
				this.state = 6138;
				this.index_options();
				}
				break;
			}
			this.state = 6143;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ON) {
				{
				this.state = 6141;
				this.match(TSqlParser.ON);
				this.state = 6142;
				this.id();
				}
			}

			this.state = 6146;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 797, this._ctx) ) {
			case 1:
				{
				this.state = 6145;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_procedure(): Create_or_alter_procedureContext {
		let _localctx: Create_or_alter_procedureContext = new Create_or_alter_procedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, TSqlParser.RULE_create_or_alter_procedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6154;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CREATE:
				{
				{
				this.state = 6148;
				this.match(TSqlParser.CREATE);
				this.state = 6151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.OR) {
					{
					this.state = 6149;
					this.match(TSqlParser.OR);
					this.state = 6150;
					this.match(TSqlParser.ALTER);
					}
				}

				}
				}
				break;
			case TSqlParser.ALTER:
				{
				this.state = 6153;
				this.match(TSqlParser.ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6156;
			_localctx._proc = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.PROC || _la === TSqlParser.PROCEDURE)) {
				_localctx._proc = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6157;
			this.func_proc_name();
			this.state = 6160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.SEMI) {
				{
				this.state = 6158;
				this.match(TSqlParser.SEMI);
				this.state = 6159;
				this.match(TSqlParser.DECIMAL);
				}
			}

			this.state = 6176;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LOCAL_ID || _la === TSqlParser.LR_BRACKET) {
				{
				this.state = 6163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.LR_BRACKET) {
					{
					this.state = 6162;
					this.match(TSqlParser.LR_BRACKET);
					}
				}

				this.state = 6165;
				this.procedure_param();
				this.state = 6170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6166;
					this.match(TSqlParser.COMMA);
					this.state = 6167;
					this.procedure_param();
					}
					}
					this.state = 6172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.RR_BRACKET) {
					{
					this.state = 6173;
					this.match(TSqlParser.RR_BRACKET);
					}
				}

				}
			}

			this.state = 6187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6178;
				this.match(TSqlParser.WITH);
				this.state = 6179;
				this.procedure_option();
				this.state = 6184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6180;
					this.match(TSqlParser.COMMA);
					this.state = 6181;
					this.procedure_option();
					}
					}
					this.state = 6186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FOR) {
				{
				this.state = 6189;
				this.match(TSqlParser.FOR);
				this.state = 6190;
				this.match(TSqlParser.REPLICATION);
				}
			}

			this.state = 6193;
			this.match(TSqlParser.AS);
			this.state = 6194;
			this.sql_clauses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_trigger(): Create_or_alter_triggerContext {
		let _localctx: Create_or_alter_triggerContext = new Create_or_alter_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, TSqlParser.RULE_create_or_alter_trigger);
		try {
			this.state = 6198;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 808, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6196;
				this.create_or_alter_dml_trigger();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6197;
				this.create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_dml_trigger(): Create_or_alter_dml_triggerContext {
		let _localctx: Create_or_alter_dml_triggerContext = new Create_or_alter_dml_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, TSqlParser.RULE_create_or_alter_dml_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6206;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CREATE:
				{
				{
				this.state = 6200;
				this.match(TSqlParser.CREATE);
				this.state = 6203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.OR) {
					{
					this.state = 6201;
					this.match(TSqlParser.OR);
					this.state = 6202;
					this.match(TSqlParser.ALTER);
					}
				}

				}
				}
				break;
			case TSqlParser.ALTER:
				{
				this.state = 6205;
				this.match(TSqlParser.ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6208;
			this.match(TSqlParser.TRIGGER);
			this.state = 6209;
			this.simple_name();
			this.state = 6210;
			this.match(TSqlParser.ON);
			this.state = 6211;
			this.table_name();
			this.state = 6221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6212;
				this.match(TSqlParser.WITH);
				this.state = 6213;
				this.dml_trigger_option();
				this.state = 6218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6214;
					this.match(TSqlParser.COMMA);
					this.state = 6215;
					this.dml_trigger_option();
					}
					}
					this.state = 6220;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6227;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.FOR:
				{
				this.state = 6223;
				this.match(TSqlParser.FOR);
				}
				break;
			case TSqlParser.AFTER:
				{
				this.state = 6224;
				this.match(TSqlParser.AFTER);
				}
				break;
			case TSqlParser.INSTEAD:
				{
				this.state = 6225;
				this.match(TSqlParser.INSTEAD);
				this.state = 6226;
				this.match(TSqlParser.OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6229;
			this.dml_trigger_operation();
			this.state = 6234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 6230;
				this.match(TSqlParser.COMMA);
				this.state = 6231;
				this.dml_trigger_operation();
				}
				}
				this.state = 6236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6239;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6237;
				this.match(TSqlParser.WITH);
				this.state = 6238;
				this.match(TSqlParser.APPEND);
				}
			}

			this.state = 6244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.NOT) {
				{
				this.state = 6241;
				this.match(TSqlParser.NOT);
				this.state = 6242;
				this.match(TSqlParser.FOR);
				this.state = 6243;
				this.match(TSqlParser.REPLICATION);
				}
			}

			this.state = 6246;
			this.match(TSqlParser.AS);
			this.state = 6247;
			this.sql_clauses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dml_trigger_option(): Dml_trigger_optionContext {
		let _localctx: Dml_trigger_optionContext = new Dml_trigger_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, TSqlParser.RULE_dml_trigger_option);
		try {
			this.state = 6251;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ENCRYPTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6249;
				this.match(TSqlParser.ENCRYPTION);
				}
				break;
			case TSqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6250;
				this.execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dml_trigger_operation(): Dml_trigger_operationContext {
		let _localctx: Dml_trigger_operationContext = new Dml_trigger_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, TSqlParser.RULE_dml_trigger_operation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6253;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.DELETE || _la === TSqlParser.INSERT || _la === TSqlParser.UPDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_ddl_trigger(): Create_or_alter_ddl_triggerContext {
		let _localctx: Create_or_alter_ddl_triggerContext = new Create_or_alter_ddl_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, TSqlParser.RULE_create_or_alter_ddl_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CREATE:
				{
				{
				this.state = 6255;
				this.match(TSqlParser.CREATE);
				this.state = 6258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.OR) {
					{
					this.state = 6256;
					this.match(TSqlParser.OR);
					this.state = 6257;
					this.match(TSqlParser.ALTER);
					}
				}

				}
				}
				break;
			case TSqlParser.ALTER:
				{
				this.state = 6260;
				this.match(TSqlParser.ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6263;
			this.match(TSqlParser.TRIGGER);
			this.state = 6264;
			this.simple_name();
			this.state = 6265;
			this.match(TSqlParser.ON);
			this.state = 6269;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ALL:
				{
				this.state = 6266;
				this.match(TSqlParser.ALL);
				this.state = 6267;
				this.match(TSqlParser.SERVER);
				}
				break;
			case TSqlParser.DATABASE:
				{
				this.state = 6268;
				this.match(TSqlParser.DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6271;
				this.match(TSqlParser.WITH);
				this.state = 6272;
				this.dml_trigger_option();
				this.state = 6277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6273;
					this.match(TSqlParser.COMMA);
					this.state = 6274;
					this.dml_trigger_option();
					}
					}
					this.state = 6279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6282;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.FOR || _la === TSqlParser.AFTER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6283;
			this.ddl_trigger_operation();
			this.state = 6288;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 6284;
				this.match(TSqlParser.COMMA);
				this.state = 6285;
				this.dml_trigger_operation();
				}
				}
				this.state = 6290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6291;
			this.match(TSqlParser.AS);
			this.state = 6292;
			this.sql_clauses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddl_trigger_operation(): Ddl_trigger_operationContext {
		let _localctx: Ddl_trigger_operationContext = new Ddl_trigger_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, TSqlParser.RULE_ddl_trigger_operation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6294;
			this.simple_id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_or_alter_function(): Create_or_alter_functionContext {
		let _localctx: Create_or_alter_functionContext = new Create_or_alter_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, TSqlParser.RULE_create_or_alter_function);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6302;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CREATE:
				{
				{
				this.state = 6296;
				this.match(TSqlParser.CREATE);
				this.state = 6299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.OR) {
					{
					this.state = 6297;
					this.match(TSqlParser.OR);
					this.state = 6298;
					this.match(TSqlParser.ALTER);
					}
				}

				}
				}
				break;
			case TSqlParser.ALTER:
				{
				this.state = 6301;
				this.match(TSqlParser.ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6304;
			this.match(TSqlParser.FUNCTION);
			this.state = 6305;
			this.func_proc_name();
			this.state = 6319;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 827, this._ctx) ) {
			case 1:
				{
				{
				this.state = 6306;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6307;
				this.procedure_param();
				this.state = 6312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6308;
					this.match(TSqlParser.COMMA);
					this.state = 6309;
					this.procedure_param();
					}
					}
					this.state = 6314;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6315;
				this.match(TSqlParser.RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				this.state = 6317;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6318;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 6324;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 828, this._ctx) ) {
			case 1:
				{
				this.state = 6321;
				this.func_body_returns_select();
				}
				break;

			case 2:
				{
				this.state = 6322;
				this.func_body_returns_table();
				}
				break;

			case 3:
				{
				this.state = 6323;
				this.func_body_returns_scalar();
				}
				break;
			}
			this.state = 6327;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 829, this._ctx) ) {
			case 1:
				{
				this.state = 6326;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_body_returns_select(): Func_body_returns_selectContext {
		let _localctx: Func_body_returns_selectContext = new Func_body_returns_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, TSqlParser.RULE_func_body_returns_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6329;
			this.match(TSqlParser.RETURNS);
			this.state = 6330;
			this.match(TSqlParser.TABLE);
			this.state = 6340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6331;
				this.match(TSqlParser.WITH);
				this.state = 6332;
				this.function_option();
				this.state = 6337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6333;
					this.match(TSqlParser.COMMA);
					this.state = 6334;
					this.function_option();
					}
					}
					this.state = 6339;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 6342;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 6345;
			this.match(TSqlParser.RETURN);
			this.state = 6351;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 833, this._ctx) ) {
			case 1:
				{
				this.state = 6346;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6347;
				this.select_statement();
				this.state = 6348;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 2:
				{
				this.state = 6350;
				this.select_statement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_body_returns_table(): Func_body_returns_tableContext {
		let _localctx: Func_body_returns_tableContext = new Func_body_returns_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, TSqlParser.RULE_func_body_returns_table);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6353;
			this.match(TSqlParser.RETURNS);
			this.state = 6354;
			this.match(TSqlParser.LOCAL_ID);
			this.state = 6355;
			this.table_type_definition();
			this.state = 6365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6356;
				this.match(TSqlParser.WITH);
				this.state = 6357;
				this.function_option();
				this.state = 6362;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6358;
					this.match(TSqlParser.COMMA);
					this.state = 6359;
					this.function_option();
					}
					}
					this.state = 6364;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6368;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 6367;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 6370;
			this.match(TSqlParser.BEGIN);
			this.state = 6374;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 837, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6371;
					this.sql_clause();
					}
					}
				}
				this.state = 6376;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 837, this._ctx);
			}
			this.state = 6377;
			this.match(TSqlParser.RETURN);
			this.state = 6379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.SEMI) {
				{
				this.state = 6378;
				this.match(TSqlParser.SEMI);
				}
			}

			this.state = 6381;
			this.match(TSqlParser.END);
			this.state = 6383;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 839, this._ctx) ) {
			case 1:
				{
				this.state = 6382;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_body_returns_scalar(): Func_body_returns_scalarContext {
		let _localctx: Func_body_returns_scalarContext = new Func_body_returns_scalarContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, TSqlParser.RULE_func_body_returns_scalar);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6385;
			this.match(TSqlParser.RETURNS);
			this.state = 6386;
			this.data_type();
			this.state = 6396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6387;
				this.match(TSqlParser.WITH);
				this.state = 6388;
				this.function_option();
				this.state = 6393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6389;
					this.match(TSqlParser.COMMA);
					this.state = 6390;
					this.function_option();
					}
					}
					this.state = 6395;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6399;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 6398;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 6401;
			this.match(TSqlParser.BEGIN);
			this.state = 6405;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 843, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6402;
					this.sql_clause();
					}
					}
				}
				this.state = 6407;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 843, this._ctx);
			}
			this.state = 6408;
			this.match(TSqlParser.RETURN);
			this.state = 6409;
			_localctx._ret = this.expression(0);
			this.state = 6411;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.SEMI) {
				{
				this.state = 6410;
				this.match(TSqlParser.SEMI);
				}
			}

			this.state = 6413;
			this.match(TSqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_param(): Procedure_paramContext {
		let _localctx: Procedure_paramContext = new Procedure_paramContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, TSqlParser.RULE_procedure_param);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6415;
			this.match(TSqlParser.LOCAL_ID);
			this.state = 6419;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 845, this._ctx) ) {
			case 1:
				{
				this.state = 6416;
				this.id();
				this.state = 6417;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 6422;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 6421;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 6424;
			this.data_type();
			this.state = 6426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.VARYING) {
				{
				this.state = 6425;
				this.match(TSqlParser.VARYING);
				}
			}

			this.state = 6430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.EQUAL) {
				{
				this.state = 6428;
				this.match(TSqlParser.EQUAL);
				this.state = 6429;
				_localctx._default_val = this.default_value();
				}
			}

			this.state = 6433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.OUT || _la === TSqlParser.OUTPUT || _la === TSqlParser.READONLY) {
				{
				this.state = 6432;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OUT || _la === TSqlParser.OUTPUT || _la === TSqlParser.READONLY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_option(): Procedure_optionContext {
		let _localctx: Procedure_optionContext = new Procedure_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, TSqlParser.RULE_procedure_option);
		try {
			this.state = 6438;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ENCRYPTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6435;
				this.match(TSqlParser.ENCRYPTION);
				}
				break;
			case TSqlParser.RECOMPILE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6436;
				this.match(TSqlParser.RECOMPILE);
				}
				break;
			case TSqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6437;
				this.execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_option(): Function_optionContext {
		let _localctx: Function_optionContext = new Function_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, TSqlParser.RULE_function_option);
		try {
			this.state = 6452;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ENCRYPTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6440;
				this.match(TSqlParser.ENCRYPTION);
				}
				break;
			case TSqlParser.SCHEMABINDING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6441;
				this.match(TSqlParser.SCHEMABINDING);
				}
				break;
			case TSqlParser.RETURNS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6442;
				this.match(TSqlParser.RETURNS);
				this.state = 6443;
				this.match(TSqlParser.NULL);
				this.state = 6444;
				this.match(TSqlParser.ON);
				this.state = 6445;
				this.match(TSqlParser.NULL);
				this.state = 6446;
				this.match(TSqlParser.INPUT);
				}
				break;
			case TSqlParser.CALLED:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6447;
				this.match(TSqlParser.CALLED);
				this.state = 6448;
				this.match(TSqlParser.ON);
				this.state = 6449;
				this.match(TSqlParser.NULL);
				this.state = 6450;
				this.match(TSqlParser.INPUT);
				}
				break;
			case TSqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6451;
				this.execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_statistics(): Create_statisticsContext {
		let _localctx: Create_statisticsContext = new Create_statisticsContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, TSqlParser.RULE_create_statistics);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6454;
			this.match(TSqlParser.CREATE);
			this.state = 6455;
			this.match(TSqlParser.STATISTICS);
			this.state = 6456;
			this.id();
			this.state = 6457;
			this.match(TSqlParser.ON);
			this.state = 6458;
			this.table_name_with_hint();
			this.state = 6459;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 6460;
			this.column_name_list();
			this.state = 6461;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 6480;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 855, this._ctx) ) {
			case 1:
				{
				this.state = 6462;
				this.match(TSqlParser.WITH);
				this.state = 6468;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.FULLSCAN:
					{
					this.state = 6463;
					this.match(TSqlParser.FULLSCAN);
					}
					break;
				case TSqlParser.SAMPLE:
					{
					this.state = 6464;
					this.match(TSqlParser.SAMPLE);
					this.state = 6465;
					this.match(TSqlParser.DECIMAL);
					this.state = 6466;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.PERCENT || _la === TSqlParser.ROWS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case TSqlParser.STATS_STREAM:
					{
					this.state = 6467;
					this.match(TSqlParser.STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6472;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 853, this._ctx) ) {
				case 1:
					{
					this.state = 6470;
					this.match(TSqlParser.COMMA);
					this.state = 6471;
					this.match(TSqlParser.NORECOMPUTE);
					}
					break;
				}
				this.state = 6478;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 6474;
					this.match(TSqlParser.COMMA);
					this.state = 6475;
					this.match(TSqlParser.INCREMENTAL);
					this.state = 6476;
					this.match(TSqlParser.EQUAL);
					this.state = 6477;
					this.on_off();
					}
				}

				}
				break;
			}
			this.state = 6483;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 856, this._ctx) ) {
			case 1:
				{
				this.state = 6482;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_statistics(): Update_statisticsContext {
		let _localctx: Update_statisticsContext = new Update_statisticsContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, TSqlParser.RULE_update_statistics);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6485;
			this.match(TSqlParser.UPDATE);
			this.state = 6487;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ALL || _la === TSqlParser.INDEX) {
				{
				this.state = 6486;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ALL || _la === TSqlParser.INDEX)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 6489;
			this.match(TSqlParser.STATISTICS);
			this.state = 6490;
			this.full_table_name();
			this.state = 6492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 858, this._ctx) ) {
			case 1:
				{
				this.state = 6491;
				this.id();
				}
				break;
			}
			this.state = 6497;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 859, this._ctx) ) {
			case 1:
				{
				this.state = 6494;
				this.match(TSqlParser.USING);
				this.state = 6495;
				this.match(TSqlParser.DECIMAL);
				this.state = 6496;
				this.match(TSqlParser.VALUES);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table(): Create_tableContext {
		let _localctx: Create_tableContext = new Create_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, TSqlParser.RULE_create_table);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6499;
			this.match(TSqlParser.CREATE);
			this.state = 6500;
			this.match(TSqlParser.TABLE);
			this.state = 6501;
			this.table_name();
			this.state = 6502;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 6503;
			this.column_def_table_constraints();
			this.state = 6505;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 6504;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 6507;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 6510;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
			case 1:
				{
				this.state = 6508;
				this.match(TSqlParser.LOCK);
				this.state = 6509;
				this.simple_id();
				}
				break;
			}
			this.state = 6515;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 862, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6512;
					this.table_options();
					}
					}
				}
				this.state = 6517;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 862, this._ctx);
			}
			this.state = 6521;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 863, this._ctx) ) {
			case 1:
				{
				this.state = 6518;
				this.match(TSqlParser.ON);
				this.state = 6519;
				this.id();
				}
				break;

			case 2:
				{
				this.state = 6520;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			}
			this.state = 6526;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 864, this._ctx) ) {
			case 1:
				{
				this.state = 6523;
				this.match(TSqlParser.TEXTIMAGE_ON);
				this.state = 6524;
				this.id();
				}
				break;

			case 2:
				{
				this.state = 6525;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			}
			this.state = 6529;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 865, this._ctx) ) {
			case 1:
				{
				this.state = 6528;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_options(): Table_optionsContext {
		let _localctx: Table_optionsContext = new Table_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, TSqlParser.RULE_table_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6531;
			this.match(TSqlParser.WITH);
			this.state = 6551;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.LR_BRACKET:
				{
				this.state = 6532;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6533;
				this.index_option();
				this.state = 6538;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6534;
					this.match(TSqlParser.COMMA);
					this.state = 6535;
					this.index_option();
					}
					}
					this.state = 6540;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6541;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.ID:
				{
				this.state = 6543;
				this.index_option();
				this.state = 6548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6544;
					this.match(TSqlParser.COMMA);
					this.state = 6545;
					this.index_option();
					}
					}
					this.state = 6550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_view(): Create_viewContext {
		let _localctx: Create_viewContext = new Create_viewContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, TSqlParser.RULE_create_view);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6553;
			this.match(TSqlParser.CREATE);
			this.state = 6554;
			this.match(TSqlParser.VIEW);
			this.state = 6555;
			this.simple_name();
			this.state = 6560;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LR_BRACKET) {
				{
				this.state = 6556;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6557;
				this.column_name_list();
				this.state = 6558;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			this.state = 6571;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 6562;
				this.match(TSqlParser.WITH);
				this.state = 6563;
				this.view_attribute();
				this.state = 6568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 6564;
					this.match(TSqlParser.COMMA);
					this.state = 6565;
					this.view_attribute();
					}
					}
					this.state = 6570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6573;
			this.match(TSqlParser.AS);
			this.state = 6574;
			this.select_statement();
			this.state = 6578;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 872, this._ctx) ) {
			case 1:
				{
				this.state = 6575;
				this.match(TSqlParser.WITH);
				this.state = 6576;
				this.match(TSqlParser.CHECK);
				this.state = 6577;
				this.match(TSqlParser.OPTION);
				}
				break;
			}
			this.state = 6581;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 873, this._ctx) ) {
			case 1:
				{
				this.state = 6580;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public view_attribute(): View_attributeContext {
		let _localctx: View_attributeContext = new View_attributeContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, TSqlParser.RULE_view_attribute);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6583;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ENCRYPTION || _la === TSqlParser.SCHEMABINDING || _la === TSqlParser.VIEW_METADATA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table(): Alter_tableContext {
		let _localctx: Alter_tableContext = new Alter_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, TSqlParser.RULE_alter_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6585;
			this.match(TSqlParser.ALTER);
			this.state = 6586;
			this.match(TSqlParser.TABLE);
			this.state = 6587;
			this.table_name();
			this.state = 6631;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 875, this._ctx) ) {
			case 1:
				{
				this.state = 6588;
				this.match(TSqlParser.SET);
				this.state = 6589;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6590;
				this.match(TSqlParser.LOCK_ESCALATION);
				this.state = 6591;
				this.match(TSqlParser.EQUAL);
				this.state = 6592;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TABLE || _la === TSqlParser.AUTO || _la === TSqlParser.DISABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6593;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 2:
				{
				this.state = 6594;
				this.match(TSqlParser.ADD);
				this.state = 6595;
				this.column_def_table_constraint();
				}
				break;

			case 3:
				{
				this.state = 6596;
				this.match(TSqlParser.ALTER);
				this.state = 6597;
				this.match(TSqlParser.COLUMN);
				this.state = 6598;
				this.column_definition();
				}
				break;

			case 4:
				{
				this.state = 6599;
				this.match(TSqlParser.DROP);
				this.state = 6600;
				this.match(TSqlParser.COLUMN);
				this.state = 6601;
				this.id();
				}
				break;

			case 5:
				{
				this.state = 6602;
				this.match(TSqlParser.DROP);
				this.state = 6603;
				this.match(TSqlParser.CONSTRAINT);
				this.state = 6604;
				_localctx._constraint = this.id();
				}
				break;

			case 6:
				{
				this.state = 6605;
				this.match(TSqlParser.WITH);
				this.state = 6606;
				this.match(TSqlParser.CHECK);
				this.state = 6607;
				this.match(TSqlParser.ADD);
				this.state = 6608;
				this.match(TSqlParser.CONSTRAINT);
				this.state = 6609;
				_localctx._constraint = this.id();
				this.state = 6610;
				this.match(TSqlParser.FOREIGN);
				this.state = 6611;
				this.match(TSqlParser.KEY);
				this.state = 6612;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6613;
				_localctx._fk = this.column_name_list();
				this.state = 6614;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 6615;
				this.match(TSqlParser.REFERENCES);
				this.state = 6616;
				this.table_name();
				this.state = 6617;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6618;
				_localctx._pk = this.column_name_list();
				this.state = 6619;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 7:
				{
				this.state = 6621;
				this.match(TSqlParser.CHECK);
				this.state = 6622;
				this.match(TSqlParser.CONSTRAINT);
				this.state = 6623;
				_localctx._constraint = this.id();
				}
				break;

			case 8:
				{
				this.state = 6624;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DISABLE || _la === TSqlParser.ENABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6625;
				this.match(TSqlParser.TRIGGER);
				this.state = 6627;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 874, this._ctx) ) {
				case 1:
					{
					this.state = 6626;
					this.id();
					}
					break;
				}
				}
				break;

			case 9:
				{
				this.state = 6629;
				this.match(TSqlParser.REBUILD);
				this.state = 6630;
				this.table_options();
				}
				break;
			}
			this.state = 6634;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 876, this._ctx) ) {
			case 1:
				{
				this.state = 6633;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_database(): Alter_databaseContext {
		let _localctx: Alter_databaseContext = new Alter_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, TSqlParser.RULE_alter_database);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6636;
			this.match(TSqlParser.ALTER);
			this.state = 6637;
			this.match(TSqlParser.DATABASE);
			this.state = 6640;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				{
				this.state = 6638;
				_localctx._database = this.id();
				}
				break;
			case TSqlParser.CURRENT:
				{
				this.state = 6639;
				this.match(TSqlParser.CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.MODIFY:
				{
				this.state = 6642;
				this.match(TSqlParser.MODIFY);
				this.state = 6643;
				this.match(TSqlParser.NAME);
				this.state = 6644;
				this.match(TSqlParser.EQUAL);
				this.state = 6645;
				_localctx._new_name = this.id();
				}
				break;
			case TSqlParser.COLLATE:
				{
				this.state = 6646;
				this.match(TSqlParser.COLLATE);
				this.state = 6647;
				_localctx._collation = this.id();
				}
				break;
			case TSqlParser.SET:
				{
				this.state = 6648;
				this.match(TSqlParser.SET);
				this.state = 6649;
				this.database_optionspec();
				this.state = 6652;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 878, this._ctx) ) {
				case 1:
					{
					this.state = 6650;
					this.match(TSqlParser.WITH);
					this.state = 6651;
					this.termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6657;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 880, this._ctx) ) {
			case 1:
				{
				this.state = 6656;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public database_optionspec(): Database_optionspecContext {
		let _localctx: Database_optionspecContext = new Database_optionspecContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, TSqlParser.RULE_database_optionspec);
		try {
			this.state = 6682;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 881, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6659;
				this.auto_option();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6660;
				this.change_tracking_option();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6661;
				this.containment_option();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6662;
				this.cursor_option();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6663;
				this.database_mirroring_option();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6664;
				this.date_correlation_optimization_option();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6665;
				this.db_encryption_option();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6666;
				this.db_state_option();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6667;
				this.db_update_option();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6668;
				this.db_user_access_option();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6669;
				this.delayed_durability_option();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6670;
				this.external_access_option();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6671;
				this.match(TSqlParser.FILESTREAM);
				this.state = 6672;
				this.database_filestream_option();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6673;
				this.hadr_options();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6674;
				this.mixed_page_allocation_option();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6675;
				this.parameterization_option();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6676;
				this.recovery_option();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6677;
				this.service_broker_option();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6678;
				this.snapshot_option();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6679;
				this.sql_option();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6680;
				this.target_recovery_time_option();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6681;
				this.termination();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public auto_option(): Auto_optionContext {
		let _localctx: Auto_optionContext = new Auto_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, TSqlParser.RULE_auto_option);
		let _la: number;
		try {
			this.state = 6701;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.AUTO_CLOSE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6684;
				this.match(TSqlParser.AUTO_CLOSE);
				this.state = 6685;
				this.on_off();
				}
				break;
			case TSqlParser.AUTO_CREATE_STATISTICS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6686;
				this.match(TSqlParser.AUTO_CREATE_STATISTICS);
				this.state = 6687;
				this.match(TSqlParser.OFF);
				}
				break;
			case TSqlParser.ON:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6688;
				this.match(TSqlParser.ON);
				this.state = 6693;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.INCREMENTAL:
					{
					this.state = 6689;
					this.match(TSqlParser.INCREMENTAL);
					this.state = 6690;
					this.match(TSqlParser.EQUAL);
					this.state = 6691;
					this.match(TSqlParser.ON);
					}
					break;
				case TSqlParser.OFF:
					{
					this.state = 6692;
					this.match(TSqlParser.OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.AUTO_SHRINK:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6695;
				this.match(TSqlParser.AUTO_SHRINK);
				this.state = 6696;
				this.on_off();
				}
				break;
			case TSqlParser.AUTO_UPDATE_STATISTICS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6697;
				this.match(TSqlParser.AUTO_UPDATE_STATISTICS);
				this.state = 6698;
				this.on_off();
				}
				break;
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6699;
				this.match(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC);
				this.state = 6700;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public change_tracking_option(): Change_tracking_optionContext {
		let _localctx: Change_tracking_optionContext = new Change_tracking_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, TSqlParser.RULE_change_tracking_option);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6703;
			this.match(TSqlParser.CHANGE_TRACKING);
			this.state = 6704;
			this.match(TSqlParser.EQUAL);
			this.state = 6720;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.OFF:
				{
				this.state = 6705;
				this.match(TSqlParser.OFF);
				}
				break;
			case TSqlParser.ON:
				{
				this.state = 6706;
				this.match(TSqlParser.ON);
				this.state = 6717;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6707;
						this.change_tracking_option_list();
						this.state = 6712;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TSqlParser.COMMA) {
							{
							{
							this.state = 6708;
							this.match(TSqlParser.COMMA);
							this.state = 6709;
							this.change_tracking_option_list();
							}
							}
							this.state = 6714;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						}
					}
					this.state = 6719;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public change_tracking_option_list(): Change_tracking_option_listContext {
		let _localctx: Change_tracking_option_listContext = new Change_tracking_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, TSqlParser.RULE_change_tracking_option_list);
		let _la: number;
		try {
			this.state = 6728;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.AUTO_CLEANUP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6722;
				this.match(TSqlParser.AUTO_CLEANUP);
				this.state = 6723;
				this.match(TSqlParser.EQUAL);
				this.state = 6724;
				this.on_off();
				}
				break;
			case TSqlParser.CHANGE_RETENTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6725;
				this.match(TSqlParser.CHANGE_RETENTION);
				this.state = 6726;
				this.match(TSqlParser.EQUAL);
				this.state = 6727;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DAYS || _la === TSqlParser.HOURS || _la === TSqlParser.MINUTES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public containment_option(): Containment_optionContext {
		let _localctx: Containment_optionContext = new Containment_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, TSqlParser.RULE_containment_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6730;
			this.match(TSqlParser.CONTAINMENT);
			this.state = 6731;
			this.match(TSqlParser.EQUAL);
			this.state = 6732;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.NONE || _la === TSqlParser.PARTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_option(): Cursor_optionContext {
		let _localctx: Cursor_optionContext = new Cursor_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, TSqlParser.RULE_cursor_option);
		let _la: number;
		try {
			this.state = 6738;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6734;
				this.match(TSqlParser.CURSOR_CLOSE_ON_COMMIT);
				this.state = 6735;
				this.on_off();
				}
				break;
			case TSqlParser.CURSOR_DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6736;
				this.match(TSqlParser.CURSOR_DEFAULT);
				this.state = 6737;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.GLOBAL || _la === TSqlParser.LOCAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_endpoint(): Alter_endpointContext {
		let _localctx: Alter_endpointContext = new Alter_endpointContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, TSqlParser.RULE_alter_endpoint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6740;
			this.match(TSqlParser.ALTER);
			this.state = 6741;
			this.match(TSqlParser.ENDPOINT);
			this.state = 6742;
			_localctx._endpointname = this.id();
			this.state = 6745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 6743;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 6744;
				_localctx._login = this.id();
				}
			}

			this.state = 6754;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.STATE) {
				{
				this.state = 6747;
				this.match(TSqlParser.STATE);
				this.state = 6748;
				this.match(TSqlParser.EQUAL);
				this.state = 6752;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.STARTED:
					{
					this.state = 6749;
					_localctx._state = this.match(TSqlParser.STARTED);
					}
					break;
				case TSqlParser.STOPPED:
					{
					this.state = 6750;
					_localctx._state = this.match(TSqlParser.STOPPED);
					}
					break;
				case TSqlParser.DISABLED:
					{
					this.state = 6751;
					_localctx._state = this.match(TSqlParser.DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 6756;
			this.match(TSqlParser.AS);
			this.state = 6757;
			this.match(TSqlParser.TCP);
			this.state = 6758;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 6759;
			this.match(TSqlParser.LISTENER_PORT);
			this.state = 6760;
			this.match(TSqlParser.EQUAL);
			this.state = 6761;
			_localctx._port = this.match(TSqlParser.DECIMAL);
			this.state = 6766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 6762;
				this.match(TSqlParser.COMMA);
				this.state = 6763;
				this.match(TSqlParser.LISTENER_IP);
				this.state = 6764;
				this.match(TSqlParser.EQUAL);
				this.state = 6765;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ALL || _la === TSqlParser.IPV4_ADDR || _la === TSqlParser.IPV6_ADDR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 6768;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 6878;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 916, this._ctx) ) {
			case 1:
				{
				this.state = 6769;
				this.match(TSqlParser.TSQL);
				}
				break;

			case 2:
				{
				this.state = 6770;
				this.match(TSqlParser.FOR);
				this.state = 6771;
				this.match(TSqlParser.SERVICE_BROKER);
				this.state = 6772;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6773;
				this.match(TSqlParser.AUTHENTICATION);
				this.state = 6774;
				this.match(TSqlParser.EQUAL);
				this.state = 6791;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.WINDOWS:
					{
					this.state = 6775;
					this.match(TSqlParser.WINDOWS);
					this.state = 6777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM) {
						{
						this.state = 6776;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 6781;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.CERTIFICATE) {
						{
						this.state = 6779;
						this.match(TSqlParser.CERTIFICATE);
						this.state = 6780;
						_localctx._cert_name = this.id();
						}
					}

					}
					break;
				case TSqlParser.CERTIFICATE:
					{
					this.state = 6783;
					this.match(TSqlParser.CERTIFICATE);
					this.state = 6784;
					_localctx._cert_name = this.id();
					this.state = 6786;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.WINDOWS) {
						{
						this.state = 6785;
						this.match(TSqlParser.WINDOWS);
						}
					}

					this.state = 6789;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM) {
						{
						this.state = 6788;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6810;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 901, this._ctx) ) {
				case 1:
					{
					this.state = 6794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 6793;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 6796;
					this.match(TSqlParser.ENCRYPTION);
					this.state = 6797;
					this.match(TSqlParser.EQUAL);
					this.state = 6798;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.REQUIRED || _la === TSqlParser.SUPPORTED || _la === TSqlParser.DISABLED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.ALGORITHM) {
						{
						this.state = 6799;
						this.match(TSqlParser.ALGORITHM);
						this.state = 6806;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 899, this._ctx) ) {
						case 1:
							{
							this.state = 6800;
							this.match(TSqlParser.AES);
							}
							break;

						case 2:
							{
							this.state = 6801;
							this.match(TSqlParser.RC4);
							}
							break;

						case 3:
							{
							this.state = 6802;
							this.match(TSqlParser.AES);
							this.state = 6803;
							this.match(TSqlParser.RC4);
							}
							break;

						case 4:
							{
							this.state = 6804;
							this.match(TSqlParser.RC4);
							this.state = 6805;
							this.match(TSqlParser.AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				this.state = 6818;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 903, this._ctx) ) {
				case 1:
					{
					this.state = 6813;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 6812;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 6815;
					this.match(TSqlParser.MESSAGE_FORWARDING);
					this.state = 6816;
					this.match(TSqlParser.EQUAL);
					this.state = 6817;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ENABLED || _la === TSqlParser.DISABLED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 6826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.MESSAGE_FORWARD_SIZE || _la === TSqlParser.COMMA) {
					{
					this.state = 6821;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 6820;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 6823;
					this.match(TSqlParser.MESSAGE_FORWARD_SIZE);
					this.state = 6824;
					this.match(TSqlParser.EQUAL);
					this.state = 6825;
					this.match(TSqlParser.DECIMAL);
					}
				}

				this.state = 6828;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 3:
				{
				this.state = 6829;
				this.match(TSqlParser.FOR);
				this.state = 6830;
				this.match(TSqlParser.DATABASE_MIRRORING);
				this.state = 6831;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 6832;
				this.match(TSqlParser.AUTHENTICATION);
				this.state = 6833;
				this.match(TSqlParser.EQUAL);
				this.state = 6850;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.WINDOWS:
					{
					this.state = 6834;
					this.match(TSqlParser.WINDOWS);
					this.state = 6836;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM) {
						{
						this.state = 6835;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 6840;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.CERTIFICATE) {
						{
						this.state = 6838;
						this.match(TSqlParser.CERTIFICATE);
						this.state = 6839;
						_localctx._cert_name = this.id();
						}
					}

					}
					break;
				case TSqlParser.CERTIFICATE:
					{
					this.state = 6842;
					this.match(TSqlParser.CERTIFICATE);
					this.state = 6843;
					_localctx._cert_name = this.id();
					this.state = 6845;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.WINDOWS) {
						{
						this.state = 6844;
						this.match(TSqlParser.WINDOWS);
						}
					}

					this.state = 6848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM) {
						{
						this.state = 6847;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.KERBEROS || _la === TSqlParser.NEGOTIATE || _la === TSqlParser.NTLM)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6869;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 914, this._ctx) ) {
				case 1:
					{
					this.state = 6853;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 6852;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 6855;
					this.match(TSqlParser.ENCRYPTION);
					this.state = 6856;
					this.match(TSqlParser.EQUAL);
					this.state = 6857;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.REQUIRED || _la === TSqlParser.SUPPORTED || _la === TSqlParser.DISABLED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6867;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.ALGORITHM) {
						{
						this.state = 6858;
						this.match(TSqlParser.ALGORITHM);
						this.state = 6865;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 912, this._ctx) ) {
						case 1:
							{
							this.state = 6859;
							this.match(TSqlParser.AES);
							}
							break;

						case 2:
							{
							this.state = 6860;
							this.match(TSqlParser.RC4);
							}
							break;

						case 3:
							{
							this.state = 6861;
							this.match(TSqlParser.AES);
							this.state = 6862;
							this.match(TSqlParser.RC4);
							}
							break;

						case 4:
							{
							this.state = 6863;
							this.match(TSqlParser.RC4);
							this.state = 6864;
							this.match(TSqlParser.AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				this.state = 6872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 6871;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 6874;
				this.match(TSqlParser.ROLE);
				this.state = 6875;
				this.match(TSqlParser.EQUAL);
				this.state = 6876;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ALL || _la === TSqlParser.WITNESS || _la === TSqlParser.PARTNER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6877;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public database_mirroring_option(): Database_mirroring_optionContext {
		let _localctx: Database_mirroring_optionContext = new Database_mirroring_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, TSqlParser.RULE_database_mirroring_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6880;
			this.mirroring_set_option();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mirroring_set_option(): Mirroring_set_optionContext {
		let _localctx: Mirroring_set_optionContext = new Mirroring_set_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, TSqlParser.RULE_mirroring_set_option);
		try {
			this.state = 6888;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.PARTNER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6882;
				this.mirroring_partner();
				this.state = 6883;
				this.partner_option();
				}
				break;
			case TSqlParser.WITNESS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6885;
				this.mirroring_witness();
				this.state = 6886;
				this.witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mirroring_partner(): Mirroring_partnerContext {
		let _localctx: Mirroring_partnerContext = new Mirroring_partnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, TSqlParser.RULE_mirroring_partner);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6890;
			this.match(TSqlParser.PARTNER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mirroring_witness(): Mirroring_witnessContext {
		let _localctx: Mirroring_witnessContext = new Mirroring_witnessContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, TSqlParser.RULE_mirroring_witness);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6892;
			this.match(TSqlParser.WITNESS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public witness_partner_equal(): Witness_partner_equalContext {
		let _localctx: Witness_partner_equalContext = new Witness_partner_equalContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, TSqlParser.RULE_witness_partner_equal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6894;
			this.match(TSqlParser.EQUAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partner_option(): Partner_optionContext {
		let _localctx: Partner_optionContext = new Partner_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, TSqlParser.RULE_partner_option);
		let _la: number;
		try {
			this.state = 6908;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.EQUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6896;
				this.witness_partner_equal();
				this.state = 6897;
				this.partner_server();
				}
				break;
			case TSqlParser.FAILOVER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6899;
				this.match(TSqlParser.FAILOVER);
				}
				break;
			case TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6900;
				this.match(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case TSqlParser.OFF:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6901;
				this.match(TSqlParser.OFF);
				}
				break;
			case TSqlParser.RESUME:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6902;
				this.match(TSqlParser.RESUME);
				}
				break;
			case TSqlParser.SAFETY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6903;
				this.match(TSqlParser.SAFETY);
				this.state = 6904;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FULL || _la === TSqlParser.OFF)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.SUSPEND:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6905;
				this.match(TSqlParser.SUSPEND);
				}
				break;
			case TSqlParser.TIMEOUT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6906;
				this.match(TSqlParser.TIMEOUT);
				this.state = 6907;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public witness_option(): Witness_optionContext {
		let _localctx: Witness_optionContext = new Witness_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, TSqlParser.RULE_witness_option);
		try {
			this.state = 6914;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.EQUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6910;
				this.witness_partner_equal();
				this.state = 6911;
				this.witness_server();
				}
				break;
			case TSqlParser.OFF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6913;
				this.match(TSqlParser.OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public witness_server(): Witness_serverContext {
		let _localctx: Witness_serverContext = new Witness_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, TSqlParser.RULE_witness_server);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6916;
			this.partner_server();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partner_server(): Partner_serverContext {
		let _localctx: Partner_serverContext = new Partner_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, TSqlParser.RULE_partner_server);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6918;
			this.partner_server_tcp_prefix();
			this.state = 6919;
			this.host();
			this.state = 6920;
			this.mirroring_host_port_seperator();
			this.state = 6921;
			this.port_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mirroring_host_port_seperator(): Mirroring_host_port_seperatorContext {
		let _localctx: Mirroring_host_port_seperatorContext = new Mirroring_host_port_seperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, TSqlParser.RULE_mirroring_host_port_seperator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6923;
			this.match(TSqlParser.COLON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partner_server_tcp_prefix(): Partner_server_tcp_prefixContext {
		let _localctx: Partner_server_tcp_prefixContext = new Partner_server_tcp_prefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, TSqlParser.RULE_partner_server_tcp_prefix);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6925;
			this.match(TSqlParser.TCP);
			this.state = 6926;
			this.match(TSqlParser.COLON);
			this.state = 6927;
			this.match(TSqlParser.DOUBLE_FORWARD_SLASH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port_number(): Port_numberContext {
		let _localctx: Port_numberContext = new Port_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, TSqlParser.RULE_port_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6929;
			_localctx._port = this.match(TSqlParser.DECIMAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public host(): HostContext {
		let _localctx: HostContext = new HostContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, TSqlParser.RULE_host);
		try {
			this.state = 6941;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 921, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6931;
				this.id();
				this.state = 6932;
				this.match(TSqlParser.DOT);
				this.state = 6933;
				this.host();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6939;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 920, this._ctx) ) {
				case 1:
					{
					this.state = 6935;
					this.id();
					this.state = 6936;
					this.match(TSqlParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 6938;
					this.id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_correlation_optimization_option(): Date_correlation_optimization_optionContext {
		let _localctx: Date_correlation_optimization_optionContext = new Date_correlation_optimization_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, TSqlParser.RULE_date_correlation_optimization_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6943;
			this.match(TSqlParser.DATE_CORRELATION_OPTIMIZATION);
			this.state = 6944;
			this.on_off();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public db_encryption_option(): Db_encryption_optionContext {
		let _localctx: Db_encryption_optionContext = new Db_encryption_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, TSqlParser.RULE_db_encryption_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6946;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 6947;
			this.on_off();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public db_state_option(): Db_state_optionContext {
		let _localctx: Db_state_optionContext = new Db_state_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, TSqlParser.RULE_db_state_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6949;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.EMERGENCY || _la === TSqlParser.OFFLINE || _la === TSqlParser.ONLINE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public db_update_option(): Db_update_optionContext {
		let _localctx: Db_update_optionContext = new Db_update_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, TSqlParser.RULE_db_update_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6951;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.READ_ONLY || _la === TSqlParser.READ_WRITE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public db_user_access_option(): Db_user_access_optionContext {
		let _localctx: Db_user_access_optionContext = new Db_user_access_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, TSqlParser.RULE_db_user_access_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6953;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.MULTI_USER || _la === TSqlParser.RESTRICTED_USER || _la === TSqlParser.SINGLE_USER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delayed_durability_option(): Delayed_durability_optionContext {
		let _localctx: Delayed_durability_optionContext = new Delayed_durability_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, TSqlParser.RULE_delayed_durability_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6955;
			this.match(TSqlParser.DELAYED_DURABILITY);
			this.state = 6956;
			this.match(TSqlParser.EQUAL);
			this.state = 6957;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.ALLOWED || _la === TSqlParser.DISABLED || _la === TSqlParser.FORCED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_access_option(): External_access_optionContext {
		let _localctx: External_access_optionContext = new External_access_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, TSqlParser.RULE_external_access_option);
		let _la: number;
		try {
			this.state = 6984;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DB_CHAINING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6959;
				this.match(TSqlParser.DB_CHAINING);
				this.state = 6960;
				this.on_off();
				}
				break;
			case TSqlParser.TRUSTWORTHY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6961;
				this.match(TSqlParser.TRUSTWORTHY);
				this.state = 6962;
				this.on_off();
				}
				break;
			case TSqlParser.DEFAULT_LANGUAGE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6963;
				this.match(TSqlParser.DEFAULT_LANGUAGE);
				this.state = 6964;
				this.match(TSqlParser.EQUAL);
				this.state = 6967;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 6965;
					this.id();
					}
					break;
				case TSqlParser.STRING:
					{
					this.state = 6966;
					this.match(TSqlParser.STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6969;
				this.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE);
				this.state = 6970;
				this.match(TSqlParser.EQUAL);
				this.state = 6973;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 6971;
					this.id();
					}
					break;
				case TSqlParser.STRING:
					{
					this.state = 6972;
					this.match(TSqlParser.STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.NESTED_TRIGGERS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6975;
				this.match(TSqlParser.NESTED_TRIGGERS);
				this.state = 6976;
				this.match(TSqlParser.EQUAL);
				this.state = 6977;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TRANSFORM_NOISE_WORDS:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6978;
				this.match(TSqlParser.TRANSFORM_NOISE_WORDS);
				this.state = 6979;
				this.match(TSqlParser.EQUAL);
				this.state = 6980;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6981;
				this.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF);
				this.state = 6982;
				this.match(TSqlParser.EQUAL);
				this.state = 6983;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hadr_options(): Hadr_optionsContext {
		let _localctx: Hadr_optionsContext = new Hadr_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, TSqlParser.RULE_hadr_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6986;
			this.match(TSqlParser.HADR);
			this.state = 6995;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.OFF:
			case TSqlParser.AVAILABILITY:
				{
				this.state = 6992;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.AVAILABILITY:
					{
					this.state = 6987;
					this.match(TSqlParser.AVAILABILITY);
					this.state = 6988;
					this.match(TSqlParser.GROUP);
					this.state = 6989;
					this.match(TSqlParser.EQUAL);
					this.state = 6990;
					_localctx._availability_group_name = this.id();
					}
					break;
				case TSqlParser.OFF:
					{
					this.state = 6991;
					this.match(TSqlParser.OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.RESUME:
			case TSqlParser.SUSPEND:
				{
				this.state = 6994;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.RESUME || _la === TSqlParser.SUSPEND)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mixed_page_allocation_option(): Mixed_page_allocation_optionContext {
		let _localctx: Mixed_page_allocation_optionContext = new Mixed_page_allocation_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, TSqlParser.RULE_mixed_page_allocation_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6997;
			this.match(TSqlParser.MIXED_PAGE_ALLOCATION);
			this.state = 6998;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameterization_option(): Parameterization_optionContext {
		let _localctx: Parameterization_optionContext = new Parameterization_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, TSqlParser.RULE_parameterization_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7000;
			this.match(TSqlParser.PARAMETERIZATION);
			this.state = 7001;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.FORCED || _la === TSqlParser.SIMPLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recovery_option(): Recovery_optionContext {
		let _localctx: Recovery_optionContext = new Recovery_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, TSqlParser.RULE_recovery_option);
		let _la: number;
		try {
			this.state = 7009;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.RECOVERY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7003;
				this.match(TSqlParser.RECOVERY);
				this.state = 7004;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FULL || _la === TSqlParser.BULK_LOGGED || _la === TSqlParser.SIMPLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TORN_PAGE_DETECTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7005;
				this.match(TSqlParser.TORN_PAGE_DETECTION);
				this.state = 7006;
				this.on_off();
				}
				break;
			case TSqlParser.PAGE_VERIFY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7007;
				this.match(TSqlParser.PAGE_VERIFY);
				this.state = 7008;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.NONE || _la === TSqlParser.CHECKSUM || _la === TSqlParser.TORN_PAGE_DETECTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public service_broker_option(): Service_broker_optionContext {
		let _localctx: Service_broker_optionContext = new Service_broker_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, TSqlParser.RULE_service_broker_option);
		try {
			this.state = 7017;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ENABLE_BROKER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7011;
				this.match(TSqlParser.ENABLE_BROKER);
				}
				break;
			case TSqlParser.DISABLE_BROKER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7012;
				this.match(TSqlParser.DISABLE_BROKER);
				}
				break;
			case TSqlParser.NEW_BROKER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7013;
				this.match(TSqlParser.NEW_BROKER);
				}
				break;
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7014;
				this.match(TSqlParser.ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case TSqlParser.HONOR_BROKER_PRIORITY:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7015;
				this.match(TSqlParser.HONOR_BROKER_PRIORITY);
				this.state = 7016;
				this.on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public snapshot_option(): Snapshot_optionContext {
		let _localctx: Snapshot_optionContext = new Snapshot_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, TSqlParser.RULE_snapshot_option);
		let _la: number;
		try {
			this.state = 7024;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7019;
				this.match(TSqlParser.ALLOW_SNAPSHOT_ISOLATION);
				this.state = 7020;
				this.on_off();
				}
				break;
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7021;
				this.match(TSqlParser.READ_COMMITTED_SNAPSHOT);
				this.state = 7022;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.OFF:
			case TSqlParser.ON:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7023;
				_localctx._MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					_localctx._MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sql_option(): Sql_optionContext {
		let _localctx: Sql_optionContext = new Sql_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, TSqlParser.RULE_sql_option);
		try {
			this.state = 7047;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ANSI_NULL_DEFAULT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7026;
				this.match(TSqlParser.ANSI_NULL_DEFAULT);
				this.state = 7027;
				this.on_off();
				}
				break;
			case TSqlParser.ANSI_NULLS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7028;
				this.match(TSqlParser.ANSI_NULLS);
				this.state = 7029;
				this.on_off();
				}
				break;
			case TSqlParser.ANSI_PADDING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7030;
				this.match(TSqlParser.ANSI_PADDING);
				this.state = 7031;
				this.on_off();
				}
				break;
			case TSqlParser.ANSI_WARNINGS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7032;
				this.match(TSqlParser.ANSI_WARNINGS);
				this.state = 7033;
				this.on_off();
				}
				break;
			case TSqlParser.ARITHABORT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7034;
				this.match(TSqlParser.ARITHABORT);
				this.state = 7035;
				this.on_off();
				}
				break;
			case TSqlParser.COMPATIBILITY_LEVEL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7036;
				this.match(TSqlParser.COMPATIBILITY_LEVEL);
				this.state = 7037;
				this.match(TSqlParser.EQUAL);
				this.state = 7038;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7039;
				this.match(TSqlParser.CONCAT_NULL_YIELDS_NULL);
				this.state = 7040;
				this.on_off();
				}
				break;
			case TSqlParser.NUMERIC_ROUNDABORT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7041;
				this.match(TSqlParser.NUMERIC_ROUNDABORT);
				this.state = 7042;
				this.on_off();
				}
				break;
			case TSqlParser.QUOTED_IDENTIFIER:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7043;
				this.match(TSqlParser.QUOTED_IDENTIFIER);
				this.state = 7044;
				this.on_off();
				}
				break;
			case TSqlParser.RECURSIVE_TRIGGERS:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7045;
				this.match(TSqlParser.RECURSIVE_TRIGGERS);
				this.state = 7046;
				this.on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public target_recovery_time_option(): Target_recovery_time_optionContext {
		let _localctx: Target_recovery_time_optionContext = new Target_recovery_time_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, TSqlParser.RULE_target_recovery_time_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7049;
			this.match(TSqlParser.TARGET_RECOVERY_TIME);
			this.state = 7050;
			this.match(TSqlParser.EQUAL);
			this.state = 7051;
			this.match(TSqlParser.DECIMAL);
			this.state = 7052;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.MINUTES || _la === TSqlParser.SECONDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public termination(): TerminationContext {
		let _localctx: TerminationContext = new TerminationContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, TSqlParser.RULE_termination);
		try {
			this.state = 7060;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 931, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7054;
				this.match(TSqlParser.ROLLBACK);
				this.state = 7055;
				this.match(TSqlParser.AFTER);
				this.state = 7056;
				_localctx._seconds = this.match(TSqlParser.DECIMAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7057;
				this.match(TSqlParser.ROLLBACK);
				this.state = 7058;
				this.match(TSqlParser.IMMEDIATE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7059;
				this.match(TSqlParser.NO_WAIT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_index(): Drop_indexContext {
		let _localctx: Drop_indexContext = new Drop_indexContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, TSqlParser.RULE_drop_index);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7062;
			this.match(TSqlParser.DROP);
			this.state = 7063;
			this.match(TSqlParser.INDEX);
			this.state = 7066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7064;
				this.match(TSqlParser.IF);
				this.state = 7065;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7084;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 935, this._ctx) ) {
			case 1:
				{
				this.state = 7068;
				this.drop_relational_or_xml_or_spatial_index();
				this.state = 7073;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 7069;
					this.match(TSqlParser.COMMA);
					this.state = 7070;
					this.drop_relational_or_xml_or_spatial_index();
					}
					}
					this.state = 7075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				{
				this.state = 7076;
				this.drop_backward_compatible_index();
				this.state = 7081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 7077;
					this.match(TSqlParser.COMMA);
					this.state = 7078;
					this.drop_backward_compatible_index();
					}
					}
					this.state = 7083;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 7087;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 936, this._ctx) ) {
			case 1:
				{
				this.state = 7086;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_relational_or_xml_or_spatial_index(): Drop_relational_or_xml_or_spatial_indexContext {
		let _localctx: Drop_relational_or_xml_or_spatial_indexContext = new Drop_relational_or_xml_or_spatial_indexContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, TSqlParser.RULE_drop_relational_or_xml_or_spatial_index);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7089;
			_localctx._index_name = this.id();
			this.state = 7090;
			this.match(TSqlParser.ON);
			this.state = 7091;
			this.full_table_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_backward_compatible_index(): Drop_backward_compatible_indexContext {
		let _localctx: Drop_backward_compatible_indexContext = new Drop_backward_compatible_indexContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, TSqlParser.RULE_drop_backward_compatible_index);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7096;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 937, this._ctx) ) {
			case 1:
				{
				this.state = 7093;
				_localctx._owner_name = this.id();
				this.state = 7094;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 7098;
			_localctx._table_or_view_name = this.id();
			this.state = 7099;
			this.match(TSqlParser.DOT);
			this.state = 7100;
			_localctx._index_name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_procedure(): Drop_procedureContext {
		let _localctx: Drop_procedureContext = new Drop_procedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, TSqlParser.RULE_drop_procedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7102;
			this.match(TSqlParser.DROP);
			this.state = 7103;
			_localctx._proc = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.PROC || _la === TSqlParser.PROCEDURE)) {
				_localctx._proc = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7104;
				this.match(TSqlParser.IF);
				this.state = 7105;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7108;
			this.func_proc_name();
			this.state = 7113;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 7109;
				this.match(TSqlParser.COMMA);
				this.state = 7110;
				this.func_proc_name();
				}
				}
				this.state = 7115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7117;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 940, this._ctx) ) {
			case 1:
				{
				this.state = 7116;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_trigger(): Drop_triggerContext {
		let _localctx: Drop_triggerContext = new Drop_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, TSqlParser.RULE_drop_trigger);
		try {
			this.state = 7121;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 941, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7119;
				this.drop_dml_trigger();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7120;
				this.drop_ddl_trigger();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_dml_trigger(): Drop_dml_triggerContext {
		let _localctx: Drop_dml_triggerContext = new Drop_dml_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, TSqlParser.RULE_drop_dml_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7123;
			this.match(TSqlParser.DROP);
			this.state = 7124;
			this.match(TSqlParser.TRIGGER);
			this.state = 7127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7125;
				this.match(TSqlParser.IF);
				this.state = 7126;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7129;
			this.simple_name();
			this.state = 7134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 7130;
				this.match(TSqlParser.COMMA);
				this.state = 7131;
				this.simple_name();
				}
				}
				this.state = 7136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7138;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 944, this._ctx) ) {
			case 1:
				{
				this.state = 7137;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_ddl_trigger(): Drop_ddl_triggerContext {
		let _localctx: Drop_ddl_triggerContext = new Drop_ddl_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, TSqlParser.RULE_drop_ddl_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7140;
			this.match(TSqlParser.DROP);
			this.state = 7141;
			this.match(TSqlParser.TRIGGER);
			this.state = 7144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7142;
				this.match(TSqlParser.IF);
				this.state = 7143;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7146;
			this.simple_name();
			this.state = 7151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 7147;
				this.match(TSqlParser.COMMA);
				this.state = 7148;
				this.simple_name();
				}
				}
				this.state = 7153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7154;
			this.match(TSqlParser.ON);
			this.state = 7158;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DATABASE:
				{
				this.state = 7155;
				this.match(TSqlParser.DATABASE);
				}
				break;
			case TSqlParser.ALL:
				{
				this.state = 7156;
				this.match(TSqlParser.ALL);
				this.state = 7157;
				this.match(TSqlParser.SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 7161;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 948, this._ctx) ) {
			case 1:
				{
				this.state = 7160;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_function(): Drop_functionContext {
		let _localctx: Drop_functionContext = new Drop_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, TSqlParser.RULE_drop_function);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7163;
			this.match(TSqlParser.DROP);
			this.state = 7164;
			this.match(TSqlParser.FUNCTION);
			this.state = 7167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7165;
				this.match(TSqlParser.IF);
				this.state = 7166;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7169;
			this.func_proc_name();
			this.state = 7174;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 7170;
				this.match(TSqlParser.COMMA);
				this.state = 7171;
				this.func_proc_name();
				}
				}
				this.state = 7176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7178;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 951, this._ctx) ) {
			case 1:
				{
				this.state = 7177;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_statistics(): Drop_statisticsContext {
		let _localctx: Drop_statisticsContext = new Drop_statisticsContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, TSqlParser.RULE_drop_statistics);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7180;
			this.match(TSqlParser.DROP);
			this.state = 7181;
			this.match(TSqlParser.STATISTICS);
			this.state = 7191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 7182;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 7188;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 953, this._ctx) ) {
				case 1:
					{
					this.state = 7185;
					this.table_name();
					this.state = 7186;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 7190;
				_localctx._name = this.id();
				}
				}
				this.state = 7193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === TSqlParser.BLOCKING_HIERARCHY || _la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0) || _la === TSqlParser.COMMA);
			this.state = 7195;
			this.match(TSqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_table(): Drop_tableContext {
		let _localctx: Drop_tableContext = new Drop_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, TSqlParser.RULE_drop_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7197;
			this.match(TSqlParser.DROP);
			this.state = 7198;
			this.match(TSqlParser.TABLE);
			this.state = 7201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7199;
				this.match(TSqlParser.IF);
				this.state = 7200;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7203;
			this.table_name();
			this.state = 7205;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
			case 1:
				{
				this.state = 7204;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_view(): Drop_viewContext {
		let _localctx: Drop_viewContext = new Drop_viewContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, TSqlParser.RULE_drop_view);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7207;
			this.match(TSqlParser.DROP);
			this.state = 7208;
			this.match(TSqlParser.VIEW);
			this.state = 7211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7209;
				this.match(TSqlParser.IF);
				this.state = 7210;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7213;
			this.simple_name();
			this.state = 7218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 7214;
				this.match(TSqlParser.COMMA);
				this.state = 7215;
				this.simple_name();
				}
				}
				this.state = 7220;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7222;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 959, this._ctx) ) {
			case 1:
				{
				this.state = 7221;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_type(): Create_typeContext {
		let _localctx: Create_typeContext = new Create_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, TSqlParser.RULE_create_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7224;
			this.match(TSqlParser.CREATE);
			this.state = 7225;
			this.match(TSqlParser.TYPE);
			this.state = 7226;
			_localctx._name = this.simple_name();
			this.state = 7231;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 7227;
				this.match(TSqlParser.FROM);
				this.state = 7228;
				this.data_type();
				this.state = 7229;
				this.default_value();
				}
			}

			this.state = 7239;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 7233;
				this.match(TSqlParser.AS);
				this.state = 7234;
				this.match(TSqlParser.TABLE);
				this.state = 7235;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 7236;
				this.column_def_table_constraints();
				this.state = 7237;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_type(): Drop_typeContext {
		let _localctx: Drop_typeContext = new Drop_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, TSqlParser.RULE_drop_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7241;
			this.match(TSqlParser.DROP);
			this.state = 7242;
			this.match(TSqlParser.TYPE);
			this.state = 7245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.IF) {
				{
				this.state = 7243;
				this.match(TSqlParser.IF);
				this.state = 7244;
				this.match(TSqlParser.EXISTS);
				}
			}

			this.state = 7247;
			_localctx._name = this.simple_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowset_function_limited(): Rowset_function_limitedContext {
		let _localctx: Rowset_function_limitedContext = new Rowset_function_limitedContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, TSqlParser.RULE_rowset_function_limited);
		try {
			this.state = 7251;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.OPENQUERY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7249;
				this.openquery();
				}
				break;
			case TSqlParser.OPENDATASOURCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7250;
				this.opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openquery(): OpenqueryContext {
		let _localctx: OpenqueryContext = new OpenqueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, TSqlParser.RULE_openquery);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7253;
			this.match(TSqlParser.OPENQUERY);
			this.state = 7254;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 7255;
			_localctx._linked_server = this.id();
			this.state = 7256;
			this.match(TSqlParser.COMMA);
			this.state = 7257;
			_localctx._query = this.match(TSqlParser.STRING);
			this.state = 7258;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opendatasource(): OpendatasourceContext {
		let _localctx: OpendatasourceContext = new OpendatasourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, TSqlParser.RULE_opendatasource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7260;
			this.match(TSqlParser.OPENDATASOURCE);
			this.state = 7261;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 7262;
			_localctx._provider = this.match(TSqlParser.STRING);
			this.state = 7263;
			this.match(TSqlParser.COMMA);
			this.state = 7264;
			_localctx._init = this.match(TSqlParser.STRING);
			this.state = 7265;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 7266;
			this.match(TSqlParser.DOT);
			this.state = 7268;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
				{
				this.state = 7267;
				_localctx._database = this.id();
				}
			}

			this.state = 7270;
			this.match(TSqlParser.DOT);
			this.state = 7272;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
				{
				this.state = 7271;
				_localctx._scheme = this.id();
				}
			}

			this.state = 7274;
			this.match(TSqlParser.DOT);
			{
			this.state = 7275;
			_localctx._table = this.id();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_statement(): Declare_statementContext {
		let _localctx: Declare_statementContext = new Declare_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, TSqlParser.RULE_declare_statement);
		let _la: number;
		try {
			this.state = 7320;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 974, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7277;
				this.match(TSqlParser.DECLARE);
				this.state = 7278;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 7280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AS) {
					{
					this.state = 7279;
					this.match(TSqlParser.AS);
					}
				}

				this.state = 7282;
				this.table_type_definition();
				this.state = 7284;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 967, this._ctx) ) {
				case 1:
					{
					this.state = 7283;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7286;
				this.match(TSqlParser.DECLARE);
				this.state = 7287;
				this.declare_local();
				this.state = 7292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 7288;
					this.match(TSqlParser.COMMA);
					this.state = 7289;
					this.declare_local();
					}
					}
					this.state = 7294;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7296;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 969, this._ctx) ) {
				case 1:
					{
					this.state = 7295;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7298;
				this.match(TSqlParser.DECLARE);
				this.state = 7299;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 7301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AS) {
					{
					this.state = 7300;
					this.match(TSqlParser.AS);
					}
				}

				this.state = 7303;
				this.xml_type_definition();
				this.state = 7305;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 971, this._ctx) ) {
				case 1:
					{
					this.state = 7304;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7307;
				this.match(TSqlParser.WITH);
				this.state = 7308;
				this.match(TSqlParser.XMLNAMESPACES);
				this.state = 7309;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 7310;
				_localctx._xml_namespace_uri = this.match(TSqlParser.STRING);
				this.state = 7312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 7311;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 7314;
				this.match(TSqlParser.AS);
				this.state = 7315;
				this.id();
				this.state = 7316;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 7318;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 973, this._ctx) ) {
				case 1:
					{
					this.state = 7317;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_statement(): Cursor_statementContext {
		let _localctx: Cursor_statementContext = new Cursor_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, TSqlParser.RULE_cursor_statement);
		let _la: number;
		try {
			this.state = 7351;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CLOSE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7322;
				this.match(TSqlParser.CLOSE);
				this.state = 7324;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 975, this._ctx) ) {
				case 1:
					{
					this.state = 7323;
					this.match(TSqlParser.GLOBAL);
					}
					break;
				}
				this.state = 7326;
				this.cursor_name();
				this.state = 7328;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 976, this._ctx) ) {
				case 1:
					{
					this.state = 7327;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			case TSqlParser.DEALLOCATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7330;
				this.match(TSqlParser.DEALLOCATE);
				this.state = 7332;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 977, this._ctx) ) {
				case 1:
					{
					this.state = 7331;
					this.match(TSqlParser.GLOBAL);
					}
					break;
				}
				this.state = 7335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CURSOR) {
					{
					this.state = 7334;
					this.match(TSqlParser.CURSOR);
					}
				}

				this.state = 7337;
				this.cursor_name();
				this.state = 7339;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 979, this._ctx) ) {
				case 1:
					{
					this.state = 7338;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			case TSqlParser.DECLARE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7341;
				this.declare_cursor();
				}
				break;
			case TSqlParser.FETCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7342;
				this.fetch_cursor();
				}
				break;
			case TSqlParser.OPEN:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7343;
				this.match(TSqlParser.OPEN);
				this.state = 7345;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 980, this._ctx) ) {
				case 1:
					{
					this.state = 7344;
					this.match(TSqlParser.GLOBAL);
					}
					break;
				}
				this.state = 7347;
				this.cursor_name();
				this.state = 7349;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 981, this._ctx) ) {
				case 1:
					{
					this.state = 7348;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backup_database(): Backup_databaseContext {
		let _localctx: Backup_databaseContext = new Backup_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, TSqlParser.RULE_backup_database);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7353;
			this.match(TSqlParser.BACKUP);
			this.state = 7354;
			this.match(TSqlParser.DATABASE);
			{
			this.state = 7355;
			_localctx._database_name = this.id();
			}
			this.state = 7368;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.READ_WRITE_FILEGROUPS) {
				{
				this.state = 7356;
				this.match(TSqlParser.READ_WRITE_FILEGROUPS);
				this.state = 7365;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 984, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7358;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7357;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7360;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.FILE || _la === TSqlParser.FILEGROUP)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 7361;
						this.match(TSqlParser.EQUAL);
						this.state = 7362;
						_localctx._file_or_filegroup = this.match(TSqlParser.STRING);
						}
						}
					}
					this.state = 7367;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 984, this._ctx);
				}
				}
			}

			this.state = 7378;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.FILE || _la === TSqlParser.FILEGROUP || _la === TSqlParser.COMMA) {
				{
				{
				this.state = 7371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 7370;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 7373;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FILE || _la === TSqlParser.FILEGROUP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7374;
				this.match(TSqlParser.EQUAL);
				this.state = 7375;
				_localctx._file_or_filegroup = this.match(TSqlParser.STRING);
				}
				}
				this.state = 7380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7404;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 993, this._ctx) ) {
			case 1:
				{
				this.state = 7381;
				this.match(TSqlParser.TO);
				this.state = 7386;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 7383;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7382;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7385;
						_localctx._logical_device_name = this.id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 7388;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 989, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				{
				this.state = 7390;
				this.match(TSqlParser.TO);
				this.state = 7400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7392;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 7391;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 7394;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7395;
					this.match(TSqlParser.EQUAL);
					this.state = 7398;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.STRING:
						{
						this.state = 7396;
						this.match(TSqlParser.STRING);
						}
						break;
					case TSqlParser.CALLED:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.INIT:
					case TSqlParser.KEY:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.ID:
						{
						this.state = 7397;
						this.id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					this.state = 7402;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL || _la === TSqlParser.COMMA);
				}
				break;
			}
			this.state = 7439;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1001, this._ctx) ) {
			case 1:
				{
				this.state = 7416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7406;
					this.match(TSqlParser.MIRROR);
					this.state = 7407;
					this.match(TSqlParser.TO);
					this.state = 7412;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 7409;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7408;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7411;
							_localctx._logical_device_name = this.id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 7414;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 995, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					}
					this.state = 7418;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.MIRROR);
				}
				break;

			case 2:
				{
				this.state = 7435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7420;
					this.match(TSqlParser.MIRROR);
					this.state = 7421;
					this.match(TSqlParser.TO);
					this.state = 7431;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7423;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7422;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7425;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 7426;
						this.match(TSqlParser.EQUAL);
						this.state = 7429;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.STRING:
							{
							this.state = 7427;
							this.match(TSqlParser.STRING);
							}
							break;
						case TSqlParser.CALLED:
						case TSqlParser.DATA_COMPRESSION:
						case TSqlParser.EVENTDATA:
						case TSqlParser.FILENAME:
						case TSqlParser.FILLFACTOR:
						case TSqlParser.FORCESEEK:
						case TSqlParser.INIT:
						case TSqlParser.KEY:
						case TSqlParser.MASTER:
						case TSqlParser.MAX_MEMORY:
						case TSqlParser.OFFSETS:
						case TSqlParser.PAGE:
						case TSqlParser.PUBLIC:
						case TSqlParser.R:
						case TSqlParser.RAW:
						case TSqlParser.RETURN:
						case TSqlParser.RETURNS:
						case TSqlParser.ROWCOUNT:
						case TSqlParser.SAFETY:
						case TSqlParser.SERVER:
						case TSqlParser.SID:
						case TSqlParser.SOURCE:
						case TSqlParser.STATE:
						case TSqlParser.START:
						case TSqlParser.TARGET:
						case TSqlParser.ABSOLUTE:
						case TSqlParser.ACCENT_SENSITIVITY:
						case TSqlParser.ACTION:
						case TSqlParser.ACTIVATION:
						case TSqlParser.ACTIVE:
						case TSqlParser.ADDRESS:
						case TSqlParser.AES_128:
						case TSqlParser.AES_192:
						case TSqlParser.AES_256:
						case TSqlParser.AFFINITY:
						case TSqlParser.AFTER:
						case TSqlParser.AGGREGATE:
						case TSqlParser.ALGORITHM:
						case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
						case TSqlParser.ALLOWED:
						case TSqlParser.ANSI_NULL_DEFAULT:
						case TSqlParser.ANSI_NULLS:
						case TSqlParser.ANSI_PADDING:
						case TSqlParser.ANSI_WARNINGS:
						case TSqlParser.APPLICATION_LOG:
						case TSqlParser.APPLY:
						case TSqlParser.ARITHABORT:
						case TSqlParser.ASSEMBLY:
						case TSqlParser.AUDIT:
						case TSqlParser.AUDIT_GUID:
						case TSqlParser.AUTO:
						case TSqlParser.AUTO_CLEANUP:
						case TSqlParser.AUTO_CLOSE:
						case TSqlParser.AUTO_CREATE_STATISTICS:
						case TSqlParser.AUTO_SHRINK:
						case TSqlParser.AUTO_UPDATE_STATISTICS:
						case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
						case TSqlParser.AVAILABILITY:
						case TSqlParser.AVG:
						case TSqlParser.BACKUP_PRIORITY:
						case TSqlParser.BEGIN_DIALOG:
						case TSqlParser.BIGINT:
						case TSqlParser.BINARY_BASE64:
						case TSqlParser.BINARY_CHECKSUM:
						case TSqlParser.BINDING:
						case TSqlParser.BLOB_STORAGE:
						case TSqlParser.BROKER:
						case TSqlParser.BROKER_INSTANCE:
						case TSqlParser.BULK_LOGGED:
						case TSqlParser.CALLER:
						case TSqlParser.CAP_CPU_PERCENT:
						case TSqlParser.CAST:
						case TSqlParser.CATALOG:
						case TSqlParser.CATCH:
						case TSqlParser.CHANGE_RETENTION:
						case TSqlParser.CHANGE_TRACKING:
						case TSqlParser.CHECKSUM:
						case TSqlParser.CHECKSUM_AGG:
						case TSqlParser.CLEANUP:
						case TSqlParser.COLLECTION:
						case TSqlParser.COLUMN_MASTER_KEY:
						case TSqlParser.COMMITTED:
						case TSqlParser.COMPATIBILITY_LEVEL:
						case TSqlParser.CONCAT:
						case TSqlParser.CONCAT_NULL_YIELDS_NULL:
						case TSqlParser.CONTENT:
						case TSqlParser.CONTROL:
						case TSqlParser.COOKIE:
						case TSqlParser.COUNT:
						case TSqlParser.COUNT_BIG:
						case TSqlParser.COUNTER:
						case TSqlParser.CPU:
						case TSqlParser.CREATE_NEW:
						case TSqlParser.CREATION_DISPOSITION:
						case TSqlParser.CREDENTIAL:
						case TSqlParser.CRYPTOGRAPHIC:
						case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
						case TSqlParser.CURSOR_DEFAULT:
						case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
						case TSqlParser.DATEADD:
						case TSqlParser.DATEDIFF:
						case TSqlParser.DATENAME:
						case TSqlParser.DATEPART:
						case TSqlParser.DAYS:
						case TSqlParser.DB_CHAINING:
						case TSqlParser.DB_FAILOVER:
						case TSqlParser.DECRYPTION:
						case TSqlParser.DEFAULT_DOUBLE_QUOTE:
						case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
						case TSqlParser.DEFAULT_LANGUAGE:
						case TSqlParser.DELAY:
						case TSqlParser.DELAYED_DURABILITY:
						case TSqlParser.DELETED:
						case TSqlParser.DENSE_RANK:
						case TSqlParser.DEPENDENTS:
						case TSqlParser.DES:
						case TSqlParser.DESCRIPTION:
						case TSqlParser.DESX:
						case TSqlParser.DHCP:
						case TSqlParser.DIALOG:
						case TSqlParser.DIRECTORY_NAME:
						case TSqlParser.DISABLE:
						case TSqlParser.DISABLE_BROKER:
						case TSqlParser.DISABLED:
						case TSqlParser.DISK_DRIVE:
						case TSqlParser.DOCUMENT:
						case TSqlParser.DYNAMIC:
						case TSqlParser.EMERGENCY:
						case TSqlParser.EMPTY:
						case TSqlParser.ENABLE:
						case TSqlParser.ENABLE_BROKER:
						case TSqlParser.ENCRYPTED_VALUE:
						case TSqlParser.ENCRYPTION:
						case TSqlParser.ENDPOINT_URL:
						case TSqlParser.ERROR_BROKER_CONVERSATIONS:
						case TSqlParser.EXCLUSIVE:
						case TSqlParser.EXECUTABLE:
						case TSqlParser.EXIST:
						case TSqlParser.EXPAND:
						case TSqlParser.EXPIRY_DATE:
						case TSqlParser.EXPLICIT:
						case TSqlParser.FAIL_OPERATION:
						case TSqlParser.FAILOVER_MODE:
						case TSqlParser.FAILURE:
						case TSqlParser.FAILURE_CONDITION_LEVEL:
						case TSqlParser.FAST:
						case TSqlParser.FAST_FORWARD:
						case TSqlParser.FILEGROUP:
						case TSqlParser.FILEGROWTH:
						case TSqlParser.FILEPATH:
						case TSqlParser.FILESTREAM:
						case TSqlParser.FILTER:
						case TSqlParser.FIRST:
						case TSqlParser.FIRST_VALUE:
						case TSqlParser.FOLLOWING:
						case TSqlParser.FORCE:
						case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case TSqlParser.FORCED:
						case TSqlParser.FORMAT:
						case TSqlParser.FORWARD_ONLY:
						case TSqlParser.FULLSCAN:
						case TSqlParser.FULLTEXT:
						case TSqlParser.GB:
						case TSqlParser.GETDATE:
						case TSqlParser.GETUTCDATE:
						case TSqlParser.GLOBAL:
						case TSqlParser.GO:
						case TSqlParser.GROUP_MAX_REQUESTS:
						case TSqlParser.GROUPING:
						case TSqlParser.GROUPING_ID:
						case TSqlParser.HADR:
						case TSqlParser.HASH:
						case TSqlParser.HEALTH_CHECK_TIMEOUT:
						case TSqlParser.HIGH:
						case TSqlParser.HONOR_BROKER_PRIORITY:
						case TSqlParser.HOURS:
						case TSqlParser.IDENTITY_VALUE:
						case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case TSqlParser.IMMEDIATE:
						case TSqlParser.IMPERSONATE:
						case TSqlParser.IMPORTANCE:
						case TSqlParser.INCREMENTAL:
						case TSqlParser.INITIATOR:
						case TSqlParser.INPUT:
						case TSqlParser.INSENSITIVE:
						case TSqlParser.INSERTED:
						case TSqlParser.INT:
						case TSqlParser.IP:
						case TSqlParser.ISOLATION:
						case TSqlParser.KB:
						case TSqlParser.KEEP:
						case TSqlParser.KEEPFIXED:
						case TSqlParser.KEY_SOURCE:
						case TSqlParser.KEYS:
						case TSqlParser.KEYSET:
						case TSqlParser.LAG:
						case TSqlParser.LAST:
						case TSqlParser.LAST_VALUE:
						case TSqlParser.LEAD:
						case TSqlParser.LEVEL:
						case TSqlParser.LIST:
						case TSqlParser.LISTENER:
						case TSqlParser.LISTENER_URL:
						case TSqlParser.LOB_COMPACTION:
						case TSqlParser.LOCAL:
						case TSqlParser.LOCATION:
						case TSqlParser.LOCK:
						case TSqlParser.LOCK_ESCALATION:
						case TSqlParser.LOGIN:
						case TSqlParser.LOOP:
						case TSqlParser.LOW:
						case TSqlParser.MANUAL:
						case TSqlParser.MARK:
						case TSqlParser.MATERIALIZED:
						case TSqlParser.MAX:
						case TSqlParser.MAX_CPU_PERCENT:
						case TSqlParser.MAX_DOP:
						case TSqlParser.MAX_FILES:
						case TSqlParser.MAX_IOPS_PER_VOLUME:
						case TSqlParser.MAX_MEMORY_PERCENT:
						case TSqlParser.MAX_PROCESSES:
						case TSqlParser.MAX_QUEUE_READERS:
						case TSqlParser.MAX_ROLLOVER_FILES:
						case TSqlParser.MAXDOP:
						case TSqlParser.MAXRECURSION:
						case TSqlParser.MAXSIZE:
						case TSqlParser.MB:
						case TSqlParser.MEDIUM:
						case TSqlParser.MEMORY_OPTIMIZED_DATA:
						case TSqlParser.MESSAGE:
						case TSqlParser.MIN:
						case TSqlParser.MIN_ACTIVE_ROWVERSION:
						case TSqlParser.MIN_CPU_PERCENT:
						case TSqlParser.MIN_IOPS_PER_VOLUME:
						case TSqlParser.MIN_MEMORY_PERCENT:
						case TSqlParser.MINUTES:
						case TSqlParser.MIRROR_ADDRESS:
						case TSqlParser.MIXED_PAGE_ALLOCATION:
						case TSqlParser.MODE:
						case TSqlParser.MODIFY:
						case TSqlParser.MOVE:
						case TSqlParser.MULTI_USER:
						case TSqlParser.NAME:
						case TSqlParser.NESTED_TRIGGERS:
						case TSqlParser.NEW_ACCOUNT:
						case TSqlParser.NEW_BROKER:
						case TSqlParser.NEW_PASSWORD:
						case TSqlParser.NEXT:
						case TSqlParser.NO:
						case TSqlParser.NO_TRUNCATE:
						case TSqlParser.NO_WAIT:
						case TSqlParser.NOCOUNT:
						case TSqlParser.NODES:
						case TSqlParser.NOEXPAND:
						case TSqlParser.NON_TRANSACTED_ACCESS:
						case TSqlParser.NORECOMPUTE:
						case TSqlParser.NORECOVERY:
						case TSqlParser.NOWAIT:
						case TSqlParser.NTILE:
						case TSqlParser.NUMANODE:
						case TSqlParser.NUMBER:
						case TSqlParser.NUMERIC_ROUNDABORT:
						case TSqlParser.OBJECT:
						case TSqlParser.OFFLINE:
						case TSqlParser.OFFSET:
						case TSqlParser.OLD_ACCOUNT:
						case TSqlParser.ONLINE:
						case TSqlParser.ONLY:
						case TSqlParser.OPEN_EXISTING:
						case TSqlParser.OPTIMISTIC:
						case TSqlParser.OPTIMIZE:
						case TSqlParser.OUT:
						case TSqlParser.OUTPUT:
						case TSqlParser.OWNER:
						case TSqlParser.PAGE_VERIFY:
						case TSqlParser.PARAMETERIZATION:
						case TSqlParser.PARTITION:
						case TSqlParser.PARTITIONS:
						case TSqlParser.PARTNER:
						case TSqlParser.PATH:
						case TSqlParser.POISON_MESSAGE_HANDLING:
						case TSqlParser.POOL:
						case TSqlParser.PORT:
						case TSqlParser.PRECEDING:
						case TSqlParser.PRIMARY_ROLE:
						case TSqlParser.PRIOR:
						case TSqlParser.PRIORITY:
						case TSqlParser.PRIORITY_LEVEL:
						case TSqlParser.PRIVATE:
						case TSqlParser.PRIVATE_KEY:
						case TSqlParser.PRIVILEGES:
						case TSqlParser.PROCEDURE_NAME:
						case TSqlParser.PROPERTY:
						case TSqlParser.PROVIDER:
						case TSqlParser.PROVIDER_KEY_NAME:
						case TSqlParser.QUERY:
						case TSqlParser.QUEUE:
						case TSqlParser.QUEUE_DELAY:
						case TSqlParser.QUOTED_IDENTIFIER:
						case TSqlParser.RANGE:
						case TSqlParser.RANK:
						case TSqlParser.RC2:
						case TSqlParser.RC4:
						case TSqlParser.RC4_128:
						case TSqlParser.READ_COMMITTED_SNAPSHOT:
						case TSqlParser.READ_ONLY:
						case TSqlParser.READ_ONLY_ROUTING_LIST:
						case TSqlParser.READ_WRITE:
						case TSqlParser.READONLY:
						case TSqlParser.REBUILD:
						case TSqlParser.RECEIVE:
						case TSqlParser.RECOMPILE:
						case TSqlParser.RECOVERY:
						case TSqlParser.RECURSIVE_TRIGGERS:
						case TSqlParser.RELATIVE:
						case TSqlParser.REMOTE:
						case TSqlParser.REMOTE_SERVICE_NAME:
						case TSqlParser.REMOVE:
						case TSqlParser.REORGANIZE:
						case TSqlParser.REPEATABLE:
						case TSqlParser.REPLICA:
						case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
						case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case TSqlParser.RESERVE_DISK_SPACE:
						case TSqlParser.RESOURCE:
						case TSqlParser.RESOURCE_MANAGER_LOCATION:
						case TSqlParser.RESTRICTED_USER:
						case TSqlParser.RETENTION:
						case TSqlParser.ROBUST:
						case TSqlParser.ROOT:
						case TSqlParser.ROUTE:
						case TSqlParser.ROW:
						case TSqlParser.ROW_NUMBER:
						case TSqlParser.ROWGUID:
						case TSqlParser.ROWS:
						case TSqlParser.SAMPLE:
						case TSqlParser.SCHEMABINDING:
						case TSqlParser.SCOPED:
						case TSqlParser.SCROLL:
						case TSqlParser.SCROLL_LOCKS:
						case TSqlParser.SEARCH:
						case TSqlParser.SECONDARY:
						case TSqlParser.SECONDARY_ONLY:
						case TSqlParser.SECONDARY_ROLE:
						case TSqlParser.SECONDS:
						case TSqlParser.SECRET:
						case TSqlParser.SECURITY_LOG:
						case TSqlParser.SEEDING_MODE:
						case TSqlParser.SELF:
						case TSqlParser.SEMI_SENSITIVE:
						case TSqlParser.SEND:
						case TSqlParser.SENT:
						case TSqlParser.SERIALIZABLE:
						case TSqlParser.SESSION_TIMEOUT:
						case TSqlParser.SETERROR:
						case TSqlParser.SHARE:
						case TSqlParser.SHOWPLAN:
						case TSqlParser.SIGNATURE:
						case TSqlParser.SIMPLE:
						case TSqlParser.SINGLE_USER:
						case TSqlParser.SIZE:
						case TSqlParser.SMALLINT:
						case TSqlParser.SNAPSHOT:
						case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
						case TSqlParser.STANDBY:
						case TSqlParser.START_DATE:
						case TSqlParser.STATIC:
						case TSqlParser.STATS_STREAM:
						case TSqlParser.STATUS:
						case TSqlParser.STDEV:
						case TSqlParser.STDEVP:
						case TSqlParser.STOPLIST:
						case TSqlParser.STUFF:
						case TSqlParser.SUBJECT:
						case TSqlParser.SUM:
						case TSqlParser.SUSPEND:
						case TSqlParser.SYMMETRIC:
						case TSqlParser.SYNCHRONOUS_COMMIT:
						case TSqlParser.SYNONYM:
						case TSqlParser.TAKE:
						case TSqlParser.TARGET_RECOVERY_TIME:
						case TSqlParser.TB:
						case TSqlParser.TEXTIMAGE_ON:
						case TSqlParser.THROW:
						case TSqlParser.TIES:
						case TSqlParser.TIME:
						case TSqlParser.TIMEOUT:
						case TSqlParser.TIMER:
						case TSqlParser.TINYINT:
						case TSqlParser.TORN_PAGE_DETECTION:
						case TSqlParser.TRANSFORM_NOISE_WORDS:
						case TSqlParser.TRIPLE_DES:
						case TSqlParser.TRIPLE_DES_3KEY:
						case TSqlParser.TRUSTWORTHY:
						case TSqlParser.TRY:
						case TSqlParser.TSQL:
						case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
						case TSqlParser.TYPE:
						case TSqlParser.TYPE_WARNING:
						case TSqlParser.UNBOUNDED:
						case TSqlParser.UNCOMMITTED:
						case TSqlParser.UNKNOWN:
						case TSqlParser.UNLIMITED:
						case TSqlParser.USING:
						case TSqlParser.VALID_XML:
						case TSqlParser.VALIDATION:
						case TSqlParser.VALUE:
						case TSqlParser.VAR:
						case TSqlParser.VARP:
						case TSqlParser.VIEW_METADATA:
						case TSqlParser.VIEWS:
						case TSqlParser.WAIT:
						case TSqlParser.WELL_FORMED_XML:
						case TSqlParser.WORK:
						case TSqlParser.WORKLOAD:
						case TSqlParser.XML:
						case TSqlParser.XMLNAMESPACES:
						case TSqlParser.DOUBLE_QUOTE_ID:
						case TSqlParser.SQUARE_BRACKET_ID:
						case TSqlParser.ID:
							{
							this.state = 7428;
							this.id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						this.state = 7433;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL || _la === TSqlParser.COMMA);
					}
					}
					this.state = 7437;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.MIRROR);
				}
				break;
			}
			this.state = 7601;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1037, this._ctx) ) {
			case 1:
				{
				this.state = 7441;
				this.match(TSqlParser.WITH);
				this.state = 7598;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1036, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 7596;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 1035, this._ctx) ) {
						case 1:
							{
							this.state = 7443;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7442;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7445;
							this.match(TSqlParser.DIFFERENTIAL);
							}
							break;

						case 2:
							{
							this.state = 7447;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7446;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7449;
							this.match(TSqlParser.COPY_ONLY);
							}
							break;

						case 3:
							{
							this.state = 7451;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7450;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7453;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.COMPRESSION || _la === TSqlParser.NO_COMPRESSION)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 4:
							{
							this.state = 7455;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7454;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7457;
							this.match(TSqlParser.DESCRIPTION);
							this.state = 7458;
							this.match(TSqlParser.EQUAL);
							this.state = 7461;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.STRING:
								{
								this.state = 7459;
								this.match(TSqlParser.STRING);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7460;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 5:
							{
							this.state = 7464;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7463;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7466;
							this.match(TSqlParser.NAME);
							this.state = 7467;
							this.match(TSqlParser.EQUAL);
							this.state = 7468;
							_localctx._backup_set_name = this.id();
							}
							break;

						case 6:
							{
							this.state = 7470;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7469;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7472;
							this.match(TSqlParser.CREDENTIAL);
							}
							break;

						case 7:
							{
							this.state = 7474;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7473;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7476;
							this.match(TSqlParser.FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							this.state = 7478;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7477;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7492;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.EXPIREDATE:
								{
								this.state = 7480;
								this.match(TSqlParser.EXPIREDATE);
								this.state = 7481;
								this.match(TSqlParser.EQUAL);
								this.state = 7484;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.STRING:
									{
									this.state = 7482;
									this.match(TSqlParser.STRING);
									}
									break;
								case TSqlParser.CALLED:
								case TSqlParser.DATA_COMPRESSION:
								case TSqlParser.EVENTDATA:
								case TSqlParser.FILENAME:
								case TSqlParser.FILLFACTOR:
								case TSqlParser.FORCESEEK:
								case TSqlParser.INIT:
								case TSqlParser.KEY:
								case TSqlParser.MASTER:
								case TSqlParser.MAX_MEMORY:
								case TSqlParser.OFFSETS:
								case TSqlParser.PAGE:
								case TSqlParser.PUBLIC:
								case TSqlParser.R:
								case TSqlParser.RAW:
								case TSqlParser.RETURN:
								case TSqlParser.RETURNS:
								case TSqlParser.ROWCOUNT:
								case TSqlParser.SAFETY:
								case TSqlParser.SERVER:
								case TSqlParser.SID:
								case TSqlParser.SOURCE:
								case TSqlParser.STATE:
								case TSqlParser.START:
								case TSqlParser.TARGET:
								case TSqlParser.ABSOLUTE:
								case TSqlParser.ACCENT_SENSITIVITY:
								case TSqlParser.ACTION:
								case TSqlParser.ACTIVATION:
								case TSqlParser.ACTIVE:
								case TSqlParser.ADDRESS:
								case TSqlParser.AES_128:
								case TSqlParser.AES_192:
								case TSqlParser.AES_256:
								case TSqlParser.AFFINITY:
								case TSqlParser.AFTER:
								case TSqlParser.AGGREGATE:
								case TSqlParser.ALGORITHM:
								case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
								case TSqlParser.ALLOWED:
								case TSqlParser.ANSI_NULL_DEFAULT:
								case TSqlParser.ANSI_NULLS:
								case TSqlParser.ANSI_PADDING:
								case TSqlParser.ANSI_WARNINGS:
								case TSqlParser.APPLICATION_LOG:
								case TSqlParser.APPLY:
								case TSqlParser.ARITHABORT:
								case TSqlParser.ASSEMBLY:
								case TSqlParser.AUDIT:
								case TSqlParser.AUDIT_GUID:
								case TSqlParser.AUTO:
								case TSqlParser.AUTO_CLEANUP:
								case TSqlParser.AUTO_CLOSE:
								case TSqlParser.AUTO_CREATE_STATISTICS:
								case TSqlParser.AUTO_SHRINK:
								case TSqlParser.AUTO_UPDATE_STATISTICS:
								case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
								case TSqlParser.AVAILABILITY:
								case TSqlParser.AVG:
								case TSqlParser.BACKUP_PRIORITY:
								case TSqlParser.BEGIN_DIALOG:
								case TSqlParser.BIGINT:
								case TSqlParser.BINARY_BASE64:
								case TSqlParser.BINARY_CHECKSUM:
								case TSqlParser.BINDING:
								case TSqlParser.BLOB_STORAGE:
								case TSqlParser.BROKER:
								case TSqlParser.BROKER_INSTANCE:
								case TSqlParser.BULK_LOGGED:
								case TSqlParser.CALLER:
								case TSqlParser.CAP_CPU_PERCENT:
								case TSqlParser.CAST:
								case TSqlParser.CATALOG:
								case TSqlParser.CATCH:
								case TSqlParser.CHANGE_RETENTION:
								case TSqlParser.CHANGE_TRACKING:
								case TSqlParser.CHECKSUM:
								case TSqlParser.CHECKSUM_AGG:
								case TSqlParser.CLEANUP:
								case TSqlParser.COLLECTION:
								case TSqlParser.COLUMN_MASTER_KEY:
								case TSqlParser.COMMITTED:
								case TSqlParser.COMPATIBILITY_LEVEL:
								case TSqlParser.CONCAT:
								case TSqlParser.CONCAT_NULL_YIELDS_NULL:
								case TSqlParser.CONTENT:
								case TSqlParser.CONTROL:
								case TSqlParser.COOKIE:
								case TSqlParser.COUNT:
								case TSqlParser.COUNT_BIG:
								case TSqlParser.COUNTER:
								case TSqlParser.CPU:
								case TSqlParser.CREATE_NEW:
								case TSqlParser.CREATION_DISPOSITION:
								case TSqlParser.CREDENTIAL:
								case TSqlParser.CRYPTOGRAPHIC:
								case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
								case TSqlParser.CURSOR_DEFAULT:
								case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
								case TSqlParser.DATEADD:
								case TSqlParser.DATEDIFF:
								case TSqlParser.DATENAME:
								case TSqlParser.DATEPART:
								case TSqlParser.DAYS:
								case TSqlParser.DB_CHAINING:
								case TSqlParser.DB_FAILOVER:
								case TSqlParser.DECRYPTION:
								case TSqlParser.DEFAULT_DOUBLE_QUOTE:
								case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
								case TSqlParser.DEFAULT_LANGUAGE:
								case TSqlParser.DELAY:
								case TSqlParser.DELAYED_DURABILITY:
								case TSqlParser.DELETED:
								case TSqlParser.DENSE_RANK:
								case TSqlParser.DEPENDENTS:
								case TSqlParser.DES:
								case TSqlParser.DESCRIPTION:
								case TSqlParser.DESX:
								case TSqlParser.DHCP:
								case TSqlParser.DIALOG:
								case TSqlParser.DIRECTORY_NAME:
								case TSqlParser.DISABLE:
								case TSqlParser.DISABLE_BROKER:
								case TSqlParser.DISABLED:
								case TSqlParser.DISK_DRIVE:
								case TSqlParser.DOCUMENT:
								case TSqlParser.DYNAMIC:
								case TSqlParser.EMERGENCY:
								case TSqlParser.EMPTY:
								case TSqlParser.ENABLE:
								case TSqlParser.ENABLE_BROKER:
								case TSqlParser.ENCRYPTED_VALUE:
								case TSqlParser.ENCRYPTION:
								case TSqlParser.ENDPOINT_URL:
								case TSqlParser.ERROR_BROKER_CONVERSATIONS:
								case TSqlParser.EXCLUSIVE:
								case TSqlParser.EXECUTABLE:
								case TSqlParser.EXIST:
								case TSqlParser.EXPAND:
								case TSqlParser.EXPIRY_DATE:
								case TSqlParser.EXPLICIT:
								case TSqlParser.FAIL_OPERATION:
								case TSqlParser.FAILOVER_MODE:
								case TSqlParser.FAILURE:
								case TSqlParser.FAILURE_CONDITION_LEVEL:
								case TSqlParser.FAST:
								case TSqlParser.FAST_FORWARD:
								case TSqlParser.FILEGROUP:
								case TSqlParser.FILEGROWTH:
								case TSqlParser.FILEPATH:
								case TSqlParser.FILESTREAM:
								case TSqlParser.FILTER:
								case TSqlParser.FIRST:
								case TSqlParser.FIRST_VALUE:
								case TSqlParser.FOLLOWING:
								case TSqlParser.FORCE:
								case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case TSqlParser.FORCED:
								case TSqlParser.FORMAT:
								case TSqlParser.FORWARD_ONLY:
								case TSqlParser.FULLSCAN:
								case TSqlParser.FULLTEXT:
								case TSqlParser.GB:
								case TSqlParser.GETDATE:
								case TSqlParser.GETUTCDATE:
								case TSqlParser.GLOBAL:
								case TSqlParser.GO:
								case TSqlParser.GROUP_MAX_REQUESTS:
								case TSqlParser.GROUPING:
								case TSqlParser.GROUPING_ID:
								case TSqlParser.HADR:
								case TSqlParser.HASH:
								case TSqlParser.HEALTH_CHECK_TIMEOUT:
								case TSqlParser.HIGH:
								case TSqlParser.HONOR_BROKER_PRIORITY:
								case TSqlParser.HOURS:
								case TSqlParser.IDENTITY_VALUE:
								case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case TSqlParser.IMMEDIATE:
								case TSqlParser.IMPERSONATE:
								case TSqlParser.IMPORTANCE:
								case TSqlParser.INCREMENTAL:
								case TSqlParser.INITIATOR:
								case TSqlParser.INPUT:
								case TSqlParser.INSENSITIVE:
								case TSqlParser.INSERTED:
								case TSqlParser.INT:
								case TSqlParser.IP:
								case TSqlParser.ISOLATION:
								case TSqlParser.KB:
								case TSqlParser.KEEP:
								case TSqlParser.KEEPFIXED:
								case TSqlParser.KEY_SOURCE:
								case TSqlParser.KEYS:
								case TSqlParser.KEYSET:
								case TSqlParser.LAG:
								case TSqlParser.LAST:
								case TSqlParser.LAST_VALUE:
								case TSqlParser.LEAD:
								case TSqlParser.LEVEL:
								case TSqlParser.LIST:
								case TSqlParser.LISTENER:
								case TSqlParser.LISTENER_URL:
								case TSqlParser.LOB_COMPACTION:
								case TSqlParser.LOCAL:
								case TSqlParser.LOCATION:
								case TSqlParser.LOCK:
								case TSqlParser.LOCK_ESCALATION:
								case TSqlParser.LOGIN:
								case TSqlParser.LOOP:
								case TSqlParser.LOW:
								case TSqlParser.MANUAL:
								case TSqlParser.MARK:
								case TSqlParser.MATERIALIZED:
								case TSqlParser.MAX:
								case TSqlParser.MAX_CPU_PERCENT:
								case TSqlParser.MAX_DOP:
								case TSqlParser.MAX_FILES:
								case TSqlParser.MAX_IOPS_PER_VOLUME:
								case TSqlParser.MAX_MEMORY_PERCENT:
								case TSqlParser.MAX_PROCESSES:
								case TSqlParser.MAX_QUEUE_READERS:
								case TSqlParser.MAX_ROLLOVER_FILES:
								case TSqlParser.MAXDOP:
								case TSqlParser.MAXRECURSION:
								case TSqlParser.MAXSIZE:
								case TSqlParser.MB:
								case TSqlParser.MEDIUM:
								case TSqlParser.MEMORY_OPTIMIZED_DATA:
								case TSqlParser.MESSAGE:
								case TSqlParser.MIN:
								case TSqlParser.MIN_ACTIVE_ROWVERSION:
								case TSqlParser.MIN_CPU_PERCENT:
								case TSqlParser.MIN_IOPS_PER_VOLUME:
								case TSqlParser.MIN_MEMORY_PERCENT:
								case TSqlParser.MINUTES:
								case TSqlParser.MIRROR_ADDRESS:
								case TSqlParser.MIXED_PAGE_ALLOCATION:
								case TSqlParser.MODE:
								case TSqlParser.MODIFY:
								case TSqlParser.MOVE:
								case TSqlParser.MULTI_USER:
								case TSqlParser.NAME:
								case TSqlParser.NESTED_TRIGGERS:
								case TSqlParser.NEW_ACCOUNT:
								case TSqlParser.NEW_BROKER:
								case TSqlParser.NEW_PASSWORD:
								case TSqlParser.NEXT:
								case TSqlParser.NO:
								case TSqlParser.NO_TRUNCATE:
								case TSqlParser.NO_WAIT:
								case TSqlParser.NOCOUNT:
								case TSqlParser.NODES:
								case TSqlParser.NOEXPAND:
								case TSqlParser.NON_TRANSACTED_ACCESS:
								case TSqlParser.NORECOMPUTE:
								case TSqlParser.NORECOVERY:
								case TSqlParser.NOWAIT:
								case TSqlParser.NTILE:
								case TSqlParser.NUMANODE:
								case TSqlParser.NUMBER:
								case TSqlParser.NUMERIC_ROUNDABORT:
								case TSqlParser.OBJECT:
								case TSqlParser.OFFLINE:
								case TSqlParser.OFFSET:
								case TSqlParser.OLD_ACCOUNT:
								case TSqlParser.ONLINE:
								case TSqlParser.ONLY:
								case TSqlParser.OPEN_EXISTING:
								case TSqlParser.OPTIMISTIC:
								case TSqlParser.OPTIMIZE:
								case TSqlParser.OUT:
								case TSqlParser.OUTPUT:
								case TSqlParser.OWNER:
								case TSqlParser.PAGE_VERIFY:
								case TSqlParser.PARAMETERIZATION:
								case TSqlParser.PARTITION:
								case TSqlParser.PARTITIONS:
								case TSqlParser.PARTNER:
								case TSqlParser.PATH:
								case TSqlParser.POISON_MESSAGE_HANDLING:
								case TSqlParser.POOL:
								case TSqlParser.PORT:
								case TSqlParser.PRECEDING:
								case TSqlParser.PRIMARY_ROLE:
								case TSqlParser.PRIOR:
								case TSqlParser.PRIORITY:
								case TSqlParser.PRIORITY_LEVEL:
								case TSqlParser.PRIVATE:
								case TSqlParser.PRIVATE_KEY:
								case TSqlParser.PRIVILEGES:
								case TSqlParser.PROCEDURE_NAME:
								case TSqlParser.PROPERTY:
								case TSqlParser.PROVIDER:
								case TSqlParser.PROVIDER_KEY_NAME:
								case TSqlParser.QUERY:
								case TSqlParser.QUEUE:
								case TSqlParser.QUEUE_DELAY:
								case TSqlParser.QUOTED_IDENTIFIER:
								case TSqlParser.RANGE:
								case TSqlParser.RANK:
								case TSqlParser.RC2:
								case TSqlParser.RC4:
								case TSqlParser.RC4_128:
								case TSqlParser.READ_COMMITTED_SNAPSHOT:
								case TSqlParser.READ_ONLY:
								case TSqlParser.READ_ONLY_ROUTING_LIST:
								case TSqlParser.READ_WRITE:
								case TSqlParser.READONLY:
								case TSqlParser.REBUILD:
								case TSqlParser.RECEIVE:
								case TSqlParser.RECOMPILE:
								case TSqlParser.RECOVERY:
								case TSqlParser.RECURSIVE_TRIGGERS:
								case TSqlParser.RELATIVE:
								case TSqlParser.REMOTE:
								case TSqlParser.REMOTE_SERVICE_NAME:
								case TSqlParser.REMOVE:
								case TSqlParser.REORGANIZE:
								case TSqlParser.REPEATABLE:
								case TSqlParser.REPLICA:
								case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
								case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case TSqlParser.RESERVE_DISK_SPACE:
								case TSqlParser.RESOURCE:
								case TSqlParser.RESOURCE_MANAGER_LOCATION:
								case TSqlParser.RESTRICTED_USER:
								case TSqlParser.RETENTION:
								case TSqlParser.ROBUST:
								case TSqlParser.ROOT:
								case TSqlParser.ROUTE:
								case TSqlParser.ROW:
								case TSqlParser.ROW_NUMBER:
								case TSqlParser.ROWGUID:
								case TSqlParser.ROWS:
								case TSqlParser.SAMPLE:
								case TSqlParser.SCHEMABINDING:
								case TSqlParser.SCOPED:
								case TSqlParser.SCROLL:
								case TSqlParser.SCROLL_LOCKS:
								case TSqlParser.SEARCH:
								case TSqlParser.SECONDARY:
								case TSqlParser.SECONDARY_ONLY:
								case TSqlParser.SECONDARY_ROLE:
								case TSqlParser.SECONDS:
								case TSqlParser.SECRET:
								case TSqlParser.SECURITY_LOG:
								case TSqlParser.SEEDING_MODE:
								case TSqlParser.SELF:
								case TSqlParser.SEMI_SENSITIVE:
								case TSqlParser.SEND:
								case TSqlParser.SENT:
								case TSqlParser.SERIALIZABLE:
								case TSqlParser.SESSION_TIMEOUT:
								case TSqlParser.SETERROR:
								case TSqlParser.SHARE:
								case TSqlParser.SHOWPLAN:
								case TSqlParser.SIGNATURE:
								case TSqlParser.SIMPLE:
								case TSqlParser.SINGLE_USER:
								case TSqlParser.SIZE:
								case TSqlParser.SMALLINT:
								case TSqlParser.SNAPSHOT:
								case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
								case TSqlParser.STANDBY:
								case TSqlParser.START_DATE:
								case TSqlParser.STATIC:
								case TSqlParser.STATS_STREAM:
								case TSqlParser.STATUS:
								case TSqlParser.STDEV:
								case TSqlParser.STDEVP:
								case TSqlParser.STOPLIST:
								case TSqlParser.STUFF:
								case TSqlParser.SUBJECT:
								case TSqlParser.SUM:
								case TSqlParser.SUSPEND:
								case TSqlParser.SYMMETRIC:
								case TSqlParser.SYNCHRONOUS_COMMIT:
								case TSqlParser.SYNONYM:
								case TSqlParser.TAKE:
								case TSqlParser.TARGET_RECOVERY_TIME:
								case TSqlParser.TB:
								case TSqlParser.TEXTIMAGE_ON:
								case TSqlParser.THROW:
								case TSqlParser.TIES:
								case TSqlParser.TIME:
								case TSqlParser.TIMEOUT:
								case TSqlParser.TIMER:
								case TSqlParser.TINYINT:
								case TSqlParser.TORN_PAGE_DETECTION:
								case TSqlParser.TRANSFORM_NOISE_WORDS:
								case TSqlParser.TRIPLE_DES:
								case TSqlParser.TRIPLE_DES_3KEY:
								case TSqlParser.TRUSTWORTHY:
								case TSqlParser.TRY:
								case TSqlParser.TSQL:
								case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
								case TSqlParser.TYPE:
								case TSqlParser.TYPE_WARNING:
								case TSqlParser.UNBOUNDED:
								case TSqlParser.UNCOMMITTED:
								case TSqlParser.UNKNOWN:
								case TSqlParser.UNLIMITED:
								case TSqlParser.USING:
								case TSqlParser.VALID_XML:
								case TSqlParser.VALIDATION:
								case TSqlParser.VALUE:
								case TSqlParser.VAR:
								case TSqlParser.VARP:
								case TSqlParser.VIEW_METADATA:
								case TSqlParser.VIEWS:
								case TSqlParser.WAIT:
								case TSqlParser.WELL_FORMED_XML:
								case TSqlParser.WORK:
								case TSqlParser.WORKLOAD:
								case TSqlParser.XML:
								case TSqlParser.XMLNAMESPACES:
								case TSqlParser.DOUBLE_QUOTE_ID:
								case TSqlParser.SQUARE_BRACKET_ID:
								case TSqlParser.ID:
									{
									this.state = 7483;
									this.id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case TSqlParser.RETAINDAYS:
								{
								this.state = 7486;
								this.match(TSqlParser.RETAINDAYS);
								this.state = 7487;
								this.match(TSqlParser.EQUAL);
								this.state = 7490;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.DECIMAL:
									{
									this.state = 7488;
									this.match(TSqlParser.DECIMAL);
									}
									break;
								case TSqlParser.CALLED:
								case TSqlParser.DATA_COMPRESSION:
								case TSqlParser.EVENTDATA:
								case TSqlParser.FILENAME:
								case TSqlParser.FILLFACTOR:
								case TSqlParser.FORCESEEK:
								case TSqlParser.INIT:
								case TSqlParser.KEY:
								case TSqlParser.MASTER:
								case TSqlParser.MAX_MEMORY:
								case TSqlParser.OFFSETS:
								case TSqlParser.PAGE:
								case TSqlParser.PUBLIC:
								case TSqlParser.R:
								case TSqlParser.RAW:
								case TSqlParser.RETURN:
								case TSqlParser.RETURNS:
								case TSqlParser.ROWCOUNT:
								case TSqlParser.SAFETY:
								case TSqlParser.SERVER:
								case TSqlParser.SID:
								case TSqlParser.SOURCE:
								case TSqlParser.STATE:
								case TSqlParser.START:
								case TSqlParser.TARGET:
								case TSqlParser.ABSOLUTE:
								case TSqlParser.ACCENT_SENSITIVITY:
								case TSqlParser.ACTION:
								case TSqlParser.ACTIVATION:
								case TSqlParser.ACTIVE:
								case TSqlParser.ADDRESS:
								case TSqlParser.AES_128:
								case TSqlParser.AES_192:
								case TSqlParser.AES_256:
								case TSqlParser.AFFINITY:
								case TSqlParser.AFTER:
								case TSqlParser.AGGREGATE:
								case TSqlParser.ALGORITHM:
								case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
								case TSqlParser.ALLOWED:
								case TSqlParser.ANSI_NULL_DEFAULT:
								case TSqlParser.ANSI_NULLS:
								case TSqlParser.ANSI_PADDING:
								case TSqlParser.ANSI_WARNINGS:
								case TSqlParser.APPLICATION_LOG:
								case TSqlParser.APPLY:
								case TSqlParser.ARITHABORT:
								case TSqlParser.ASSEMBLY:
								case TSqlParser.AUDIT:
								case TSqlParser.AUDIT_GUID:
								case TSqlParser.AUTO:
								case TSqlParser.AUTO_CLEANUP:
								case TSqlParser.AUTO_CLOSE:
								case TSqlParser.AUTO_CREATE_STATISTICS:
								case TSqlParser.AUTO_SHRINK:
								case TSqlParser.AUTO_UPDATE_STATISTICS:
								case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
								case TSqlParser.AVAILABILITY:
								case TSqlParser.AVG:
								case TSqlParser.BACKUP_PRIORITY:
								case TSqlParser.BEGIN_DIALOG:
								case TSqlParser.BIGINT:
								case TSqlParser.BINARY_BASE64:
								case TSqlParser.BINARY_CHECKSUM:
								case TSqlParser.BINDING:
								case TSqlParser.BLOB_STORAGE:
								case TSqlParser.BROKER:
								case TSqlParser.BROKER_INSTANCE:
								case TSqlParser.BULK_LOGGED:
								case TSqlParser.CALLER:
								case TSqlParser.CAP_CPU_PERCENT:
								case TSqlParser.CAST:
								case TSqlParser.CATALOG:
								case TSqlParser.CATCH:
								case TSqlParser.CHANGE_RETENTION:
								case TSqlParser.CHANGE_TRACKING:
								case TSqlParser.CHECKSUM:
								case TSqlParser.CHECKSUM_AGG:
								case TSqlParser.CLEANUP:
								case TSqlParser.COLLECTION:
								case TSqlParser.COLUMN_MASTER_KEY:
								case TSqlParser.COMMITTED:
								case TSqlParser.COMPATIBILITY_LEVEL:
								case TSqlParser.CONCAT:
								case TSqlParser.CONCAT_NULL_YIELDS_NULL:
								case TSqlParser.CONTENT:
								case TSqlParser.CONTROL:
								case TSqlParser.COOKIE:
								case TSqlParser.COUNT:
								case TSqlParser.COUNT_BIG:
								case TSqlParser.COUNTER:
								case TSqlParser.CPU:
								case TSqlParser.CREATE_NEW:
								case TSqlParser.CREATION_DISPOSITION:
								case TSqlParser.CREDENTIAL:
								case TSqlParser.CRYPTOGRAPHIC:
								case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
								case TSqlParser.CURSOR_DEFAULT:
								case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
								case TSqlParser.DATEADD:
								case TSqlParser.DATEDIFF:
								case TSqlParser.DATENAME:
								case TSqlParser.DATEPART:
								case TSqlParser.DAYS:
								case TSqlParser.DB_CHAINING:
								case TSqlParser.DB_FAILOVER:
								case TSqlParser.DECRYPTION:
								case TSqlParser.DEFAULT_DOUBLE_QUOTE:
								case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
								case TSqlParser.DEFAULT_LANGUAGE:
								case TSqlParser.DELAY:
								case TSqlParser.DELAYED_DURABILITY:
								case TSqlParser.DELETED:
								case TSqlParser.DENSE_RANK:
								case TSqlParser.DEPENDENTS:
								case TSqlParser.DES:
								case TSqlParser.DESCRIPTION:
								case TSqlParser.DESX:
								case TSqlParser.DHCP:
								case TSqlParser.DIALOG:
								case TSqlParser.DIRECTORY_NAME:
								case TSqlParser.DISABLE:
								case TSqlParser.DISABLE_BROKER:
								case TSqlParser.DISABLED:
								case TSqlParser.DISK_DRIVE:
								case TSqlParser.DOCUMENT:
								case TSqlParser.DYNAMIC:
								case TSqlParser.EMERGENCY:
								case TSqlParser.EMPTY:
								case TSqlParser.ENABLE:
								case TSqlParser.ENABLE_BROKER:
								case TSqlParser.ENCRYPTED_VALUE:
								case TSqlParser.ENCRYPTION:
								case TSqlParser.ENDPOINT_URL:
								case TSqlParser.ERROR_BROKER_CONVERSATIONS:
								case TSqlParser.EXCLUSIVE:
								case TSqlParser.EXECUTABLE:
								case TSqlParser.EXIST:
								case TSqlParser.EXPAND:
								case TSqlParser.EXPIRY_DATE:
								case TSqlParser.EXPLICIT:
								case TSqlParser.FAIL_OPERATION:
								case TSqlParser.FAILOVER_MODE:
								case TSqlParser.FAILURE:
								case TSqlParser.FAILURE_CONDITION_LEVEL:
								case TSqlParser.FAST:
								case TSqlParser.FAST_FORWARD:
								case TSqlParser.FILEGROUP:
								case TSqlParser.FILEGROWTH:
								case TSqlParser.FILEPATH:
								case TSqlParser.FILESTREAM:
								case TSqlParser.FILTER:
								case TSqlParser.FIRST:
								case TSqlParser.FIRST_VALUE:
								case TSqlParser.FOLLOWING:
								case TSqlParser.FORCE:
								case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case TSqlParser.FORCED:
								case TSqlParser.FORMAT:
								case TSqlParser.FORWARD_ONLY:
								case TSqlParser.FULLSCAN:
								case TSqlParser.FULLTEXT:
								case TSqlParser.GB:
								case TSqlParser.GETDATE:
								case TSqlParser.GETUTCDATE:
								case TSqlParser.GLOBAL:
								case TSqlParser.GO:
								case TSqlParser.GROUP_MAX_REQUESTS:
								case TSqlParser.GROUPING:
								case TSqlParser.GROUPING_ID:
								case TSqlParser.HADR:
								case TSqlParser.HASH:
								case TSqlParser.HEALTH_CHECK_TIMEOUT:
								case TSqlParser.HIGH:
								case TSqlParser.HONOR_BROKER_PRIORITY:
								case TSqlParser.HOURS:
								case TSqlParser.IDENTITY_VALUE:
								case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case TSqlParser.IMMEDIATE:
								case TSqlParser.IMPERSONATE:
								case TSqlParser.IMPORTANCE:
								case TSqlParser.INCREMENTAL:
								case TSqlParser.INITIATOR:
								case TSqlParser.INPUT:
								case TSqlParser.INSENSITIVE:
								case TSqlParser.INSERTED:
								case TSqlParser.INT:
								case TSqlParser.IP:
								case TSqlParser.ISOLATION:
								case TSqlParser.KB:
								case TSqlParser.KEEP:
								case TSqlParser.KEEPFIXED:
								case TSqlParser.KEY_SOURCE:
								case TSqlParser.KEYS:
								case TSqlParser.KEYSET:
								case TSqlParser.LAG:
								case TSqlParser.LAST:
								case TSqlParser.LAST_VALUE:
								case TSqlParser.LEAD:
								case TSqlParser.LEVEL:
								case TSqlParser.LIST:
								case TSqlParser.LISTENER:
								case TSqlParser.LISTENER_URL:
								case TSqlParser.LOB_COMPACTION:
								case TSqlParser.LOCAL:
								case TSqlParser.LOCATION:
								case TSqlParser.LOCK:
								case TSqlParser.LOCK_ESCALATION:
								case TSqlParser.LOGIN:
								case TSqlParser.LOOP:
								case TSqlParser.LOW:
								case TSqlParser.MANUAL:
								case TSqlParser.MARK:
								case TSqlParser.MATERIALIZED:
								case TSqlParser.MAX:
								case TSqlParser.MAX_CPU_PERCENT:
								case TSqlParser.MAX_DOP:
								case TSqlParser.MAX_FILES:
								case TSqlParser.MAX_IOPS_PER_VOLUME:
								case TSqlParser.MAX_MEMORY_PERCENT:
								case TSqlParser.MAX_PROCESSES:
								case TSqlParser.MAX_QUEUE_READERS:
								case TSqlParser.MAX_ROLLOVER_FILES:
								case TSqlParser.MAXDOP:
								case TSqlParser.MAXRECURSION:
								case TSqlParser.MAXSIZE:
								case TSqlParser.MB:
								case TSqlParser.MEDIUM:
								case TSqlParser.MEMORY_OPTIMIZED_DATA:
								case TSqlParser.MESSAGE:
								case TSqlParser.MIN:
								case TSqlParser.MIN_ACTIVE_ROWVERSION:
								case TSqlParser.MIN_CPU_PERCENT:
								case TSqlParser.MIN_IOPS_PER_VOLUME:
								case TSqlParser.MIN_MEMORY_PERCENT:
								case TSqlParser.MINUTES:
								case TSqlParser.MIRROR_ADDRESS:
								case TSqlParser.MIXED_PAGE_ALLOCATION:
								case TSqlParser.MODE:
								case TSqlParser.MODIFY:
								case TSqlParser.MOVE:
								case TSqlParser.MULTI_USER:
								case TSqlParser.NAME:
								case TSqlParser.NESTED_TRIGGERS:
								case TSqlParser.NEW_ACCOUNT:
								case TSqlParser.NEW_BROKER:
								case TSqlParser.NEW_PASSWORD:
								case TSqlParser.NEXT:
								case TSqlParser.NO:
								case TSqlParser.NO_TRUNCATE:
								case TSqlParser.NO_WAIT:
								case TSqlParser.NOCOUNT:
								case TSqlParser.NODES:
								case TSqlParser.NOEXPAND:
								case TSqlParser.NON_TRANSACTED_ACCESS:
								case TSqlParser.NORECOMPUTE:
								case TSqlParser.NORECOVERY:
								case TSqlParser.NOWAIT:
								case TSqlParser.NTILE:
								case TSqlParser.NUMANODE:
								case TSqlParser.NUMBER:
								case TSqlParser.NUMERIC_ROUNDABORT:
								case TSqlParser.OBJECT:
								case TSqlParser.OFFLINE:
								case TSqlParser.OFFSET:
								case TSqlParser.OLD_ACCOUNT:
								case TSqlParser.ONLINE:
								case TSqlParser.ONLY:
								case TSqlParser.OPEN_EXISTING:
								case TSqlParser.OPTIMISTIC:
								case TSqlParser.OPTIMIZE:
								case TSqlParser.OUT:
								case TSqlParser.OUTPUT:
								case TSqlParser.OWNER:
								case TSqlParser.PAGE_VERIFY:
								case TSqlParser.PARAMETERIZATION:
								case TSqlParser.PARTITION:
								case TSqlParser.PARTITIONS:
								case TSqlParser.PARTNER:
								case TSqlParser.PATH:
								case TSqlParser.POISON_MESSAGE_HANDLING:
								case TSqlParser.POOL:
								case TSqlParser.PORT:
								case TSqlParser.PRECEDING:
								case TSqlParser.PRIMARY_ROLE:
								case TSqlParser.PRIOR:
								case TSqlParser.PRIORITY:
								case TSqlParser.PRIORITY_LEVEL:
								case TSqlParser.PRIVATE:
								case TSqlParser.PRIVATE_KEY:
								case TSqlParser.PRIVILEGES:
								case TSqlParser.PROCEDURE_NAME:
								case TSqlParser.PROPERTY:
								case TSqlParser.PROVIDER:
								case TSqlParser.PROVIDER_KEY_NAME:
								case TSqlParser.QUERY:
								case TSqlParser.QUEUE:
								case TSqlParser.QUEUE_DELAY:
								case TSqlParser.QUOTED_IDENTIFIER:
								case TSqlParser.RANGE:
								case TSqlParser.RANK:
								case TSqlParser.RC2:
								case TSqlParser.RC4:
								case TSqlParser.RC4_128:
								case TSqlParser.READ_COMMITTED_SNAPSHOT:
								case TSqlParser.READ_ONLY:
								case TSqlParser.READ_ONLY_ROUTING_LIST:
								case TSqlParser.READ_WRITE:
								case TSqlParser.READONLY:
								case TSqlParser.REBUILD:
								case TSqlParser.RECEIVE:
								case TSqlParser.RECOMPILE:
								case TSqlParser.RECOVERY:
								case TSqlParser.RECURSIVE_TRIGGERS:
								case TSqlParser.RELATIVE:
								case TSqlParser.REMOTE:
								case TSqlParser.REMOTE_SERVICE_NAME:
								case TSqlParser.REMOVE:
								case TSqlParser.REORGANIZE:
								case TSqlParser.REPEATABLE:
								case TSqlParser.REPLICA:
								case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
								case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case TSqlParser.RESERVE_DISK_SPACE:
								case TSqlParser.RESOURCE:
								case TSqlParser.RESOURCE_MANAGER_LOCATION:
								case TSqlParser.RESTRICTED_USER:
								case TSqlParser.RETENTION:
								case TSqlParser.ROBUST:
								case TSqlParser.ROOT:
								case TSqlParser.ROUTE:
								case TSqlParser.ROW:
								case TSqlParser.ROW_NUMBER:
								case TSqlParser.ROWGUID:
								case TSqlParser.ROWS:
								case TSqlParser.SAMPLE:
								case TSqlParser.SCHEMABINDING:
								case TSqlParser.SCOPED:
								case TSqlParser.SCROLL:
								case TSqlParser.SCROLL_LOCKS:
								case TSqlParser.SEARCH:
								case TSqlParser.SECONDARY:
								case TSqlParser.SECONDARY_ONLY:
								case TSqlParser.SECONDARY_ROLE:
								case TSqlParser.SECONDS:
								case TSqlParser.SECRET:
								case TSqlParser.SECURITY_LOG:
								case TSqlParser.SEEDING_MODE:
								case TSqlParser.SELF:
								case TSqlParser.SEMI_SENSITIVE:
								case TSqlParser.SEND:
								case TSqlParser.SENT:
								case TSqlParser.SERIALIZABLE:
								case TSqlParser.SESSION_TIMEOUT:
								case TSqlParser.SETERROR:
								case TSqlParser.SHARE:
								case TSqlParser.SHOWPLAN:
								case TSqlParser.SIGNATURE:
								case TSqlParser.SIMPLE:
								case TSqlParser.SINGLE_USER:
								case TSqlParser.SIZE:
								case TSqlParser.SMALLINT:
								case TSqlParser.SNAPSHOT:
								case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
								case TSqlParser.STANDBY:
								case TSqlParser.START_DATE:
								case TSqlParser.STATIC:
								case TSqlParser.STATS_STREAM:
								case TSqlParser.STATUS:
								case TSqlParser.STDEV:
								case TSqlParser.STDEVP:
								case TSqlParser.STOPLIST:
								case TSqlParser.STUFF:
								case TSqlParser.SUBJECT:
								case TSqlParser.SUM:
								case TSqlParser.SUSPEND:
								case TSqlParser.SYMMETRIC:
								case TSqlParser.SYNCHRONOUS_COMMIT:
								case TSqlParser.SYNONYM:
								case TSqlParser.TAKE:
								case TSqlParser.TARGET_RECOVERY_TIME:
								case TSqlParser.TB:
								case TSqlParser.TEXTIMAGE_ON:
								case TSqlParser.THROW:
								case TSqlParser.TIES:
								case TSqlParser.TIME:
								case TSqlParser.TIMEOUT:
								case TSqlParser.TIMER:
								case TSqlParser.TINYINT:
								case TSqlParser.TORN_PAGE_DETECTION:
								case TSqlParser.TRANSFORM_NOISE_WORDS:
								case TSqlParser.TRIPLE_DES:
								case TSqlParser.TRIPLE_DES_3KEY:
								case TSqlParser.TRUSTWORTHY:
								case TSqlParser.TRY:
								case TSqlParser.TSQL:
								case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
								case TSqlParser.TYPE:
								case TSqlParser.TYPE_WARNING:
								case TSqlParser.UNBOUNDED:
								case TSqlParser.UNCOMMITTED:
								case TSqlParser.UNKNOWN:
								case TSqlParser.UNLIMITED:
								case TSqlParser.USING:
								case TSqlParser.VALID_XML:
								case TSqlParser.VALIDATION:
								case TSqlParser.VALUE:
								case TSqlParser.VAR:
								case TSqlParser.VARP:
								case TSqlParser.VIEW_METADATA:
								case TSqlParser.VIEWS:
								case TSqlParser.WAIT:
								case TSqlParser.WELL_FORMED_XML:
								case TSqlParser.WORK:
								case TSqlParser.WORKLOAD:
								case TSqlParser.XML:
								case TSqlParser.XMLNAMESPACES:
								case TSqlParser.DOUBLE_QUOTE_ID:
								case TSqlParser.SQUARE_BRACKET_ID:
								case TSqlParser.ID:
									{
									this.state = 7489;
									this.id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 9:
							{
							this.state = 7495;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7494;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7497;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.INIT || _la === TSqlParser.NOINIT)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 10:
							{
							this.state = 7499;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7498;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7501;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NOSKIP || _la === TSqlParser.SKIP_KEYWORD)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 11:
							{
							this.state = 7503;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7502;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7505;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NOFORMAT || _la === TSqlParser.FORMAT)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 12:
							{
							this.state = 7507;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7506;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7509;
							this.match(TSqlParser.MEDIADESCRIPTION);
							this.state = 7510;
							this.match(TSqlParser.EQUAL);
							this.state = 7513;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.STRING:
								{
								this.state = 7511;
								this.match(TSqlParser.STRING);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7512;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 13:
							{
							this.state = 7516;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7515;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7518;
							this.match(TSqlParser.MEDIANAME);
							this.state = 7519;
							this.match(TSqlParser.EQUAL);
							{
							this.state = 7520;
							_localctx._medianame = this.match(TSqlParser.STRING);
							}
							}
							break;

						case 14:
							{
							this.state = 7522;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7521;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7524;
							this.match(TSqlParser.BLOCKSIZE);
							this.state = 7525;
							this.match(TSqlParser.EQUAL);
							this.state = 7528;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
								{
								this.state = 7526;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7527;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 15:
							{
							this.state = 7531;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7530;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7533;
							this.match(TSqlParser.BUFFERCOUNT);
							this.state = 7534;
							this.match(TSqlParser.EQUAL);
							this.state = 7537;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
								{
								this.state = 7535;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7536;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 16:
							{
							this.state = 7540;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7539;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7542;
							this.match(TSqlParser.MAXTRANSFER);
							this.state = 7543;
							this.match(TSqlParser.EQUAL);
							this.state = 7546;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
								{
								this.state = 7544;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7545;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 17:
							{
							this.state = 7549;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7548;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7551;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NO_CHECKSUM || _la === TSqlParser.CHECKSUM)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 18:
							{
							this.state = 7553;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7552;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7555;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.CONTINUE_AFTER_ERROR || _la === TSqlParser.STOP_ON_ERROR)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 19:
							{
							this.state = 7557;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7556;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7559;
							this.match(TSqlParser.RESTART);
							}
							break;

						case 20:
							{
							this.state = 7561;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7560;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7563;
							this.match(TSqlParser.STATS);
							this.state = 7566;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.EQUAL) {
								{
								this.state = 7564;
								this.match(TSqlParser.EQUAL);
								this.state = 7565;
								_localctx._stats_percent = this.match(TSqlParser.DECIMAL);
								}
							}

							}
							break;

						case 21:
							{
							this.state = 7569;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7568;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7571;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NOREWIND || _la === TSqlParser.REWIND)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 22:
							{
							this.state = 7573;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7572;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7575;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.LOAD || _la === TSqlParser.NOUNLOAD)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 23:
							{
							this.state = 7577;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7576;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7579;
							this.match(TSqlParser.ENCRYPTION);
							this.state = 7580;
							this.match(TSqlParser.LR_BRACKET);
							this.state = 7581;
							this.match(TSqlParser.ALGORITHM);
							this.state = 7582;
							this.match(TSqlParser.EQUAL);
							this.state = 7583;
							_la = this._input.LA(1);
							if (!(((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) !== 0) || _la === TSqlParser.TRIPLE_DES_3KEY)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 7584;
							this.match(TSqlParser.COMMA);
							this.state = 7585;
							this.match(TSqlParser.SERVER);
							this.state = 7586;
							this.match(TSqlParser.CERTIFICATE);
							this.state = 7587;
							this.match(TSqlParser.EQUAL);
							this.state = 7594;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 1034, this._ctx) ) {
							case 1:
								{
								this.state = 7588;
								_localctx._encryptor_name = this.id();
								}
								break;

							case 2:
								{
								this.state = 7589;
								this.match(TSqlParser.SERVER);
								this.state = 7590;
								this.match(TSqlParser.ASYMMETRIC);
								this.state = 7591;
								this.match(TSqlParser.KEY);
								this.state = 7592;
								this.match(TSqlParser.EQUAL);
								this.state = 7593;
								_localctx._encryptor_name = this.id();
								}
								break;
							}
							}
							break;
						}
						}
					}
					this.state = 7600;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1036, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backup_log(): Backup_logContext {
		let _localctx: Backup_logContext = new Backup_logContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, TSqlParser.RULE_backup_log);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7603;
			this.match(TSqlParser.BACKUP);
			this.state = 7604;
			this.match(TSqlParser.LOG);
			{
			this.state = 7605;
			_localctx._database_name = this.id();
			}
			this.state = 7629;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1043, this._ctx) ) {
			case 1:
				{
				this.state = 7606;
				this.match(TSqlParser.TO);
				this.state = 7611;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 7608;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7607;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7610;
						_localctx._logical_device_name = this.id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 7613;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1039, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				{
				this.state = 7615;
				this.match(TSqlParser.TO);
				this.state = 7625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7617;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 7616;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 7619;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7620;
					this.match(TSqlParser.EQUAL);
					this.state = 7623;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.STRING:
						{
						this.state = 7621;
						this.match(TSqlParser.STRING);
						}
						break;
					case TSqlParser.CALLED:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.INIT:
					case TSqlParser.KEY:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.ID:
						{
						this.state = 7622;
						this.id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					this.state = 7627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL || _la === TSqlParser.COMMA);
				}
				break;
			}
			this.state = 7664;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1051, this._ctx) ) {
			case 1:
				{
				this.state = 7641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7631;
					this.match(TSqlParser.MIRROR);
					this.state = 7632;
					this.match(TSqlParser.TO);
					this.state = 7637;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 7634;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7633;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7636;
							_localctx._logical_device_name = this.id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 7639;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1045, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					}
					this.state = 7643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.MIRROR);
				}
				break;

			case 2:
				{
				this.state = 7660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7645;
					this.match(TSqlParser.MIRROR);
					this.state = 7646;
					this.match(TSqlParser.TO);
					this.state = 7656;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7648;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7647;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7650;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 7651;
						this.match(TSqlParser.EQUAL);
						this.state = 7654;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.STRING:
							{
							this.state = 7652;
							this.match(TSqlParser.STRING);
							}
							break;
						case TSqlParser.CALLED:
						case TSqlParser.DATA_COMPRESSION:
						case TSqlParser.EVENTDATA:
						case TSqlParser.FILENAME:
						case TSqlParser.FILLFACTOR:
						case TSqlParser.FORCESEEK:
						case TSqlParser.INIT:
						case TSqlParser.KEY:
						case TSqlParser.MASTER:
						case TSqlParser.MAX_MEMORY:
						case TSqlParser.OFFSETS:
						case TSqlParser.PAGE:
						case TSqlParser.PUBLIC:
						case TSqlParser.R:
						case TSqlParser.RAW:
						case TSqlParser.RETURN:
						case TSqlParser.RETURNS:
						case TSqlParser.ROWCOUNT:
						case TSqlParser.SAFETY:
						case TSqlParser.SERVER:
						case TSqlParser.SID:
						case TSqlParser.SOURCE:
						case TSqlParser.STATE:
						case TSqlParser.START:
						case TSqlParser.TARGET:
						case TSqlParser.ABSOLUTE:
						case TSqlParser.ACCENT_SENSITIVITY:
						case TSqlParser.ACTION:
						case TSqlParser.ACTIVATION:
						case TSqlParser.ACTIVE:
						case TSqlParser.ADDRESS:
						case TSqlParser.AES_128:
						case TSqlParser.AES_192:
						case TSqlParser.AES_256:
						case TSqlParser.AFFINITY:
						case TSqlParser.AFTER:
						case TSqlParser.AGGREGATE:
						case TSqlParser.ALGORITHM:
						case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
						case TSqlParser.ALLOWED:
						case TSqlParser.ANSI_NULL_DEFAULT:
						case TSqlParser.ANSI_NULLS:
						case TSqlParser.ANSI_PADDING:
						case TSqlParser.ANSI_WARNINGS:
						case TSqlParser.APPLICATION_LOG:
						case TSqlParser.APPLY:
						case TSqlParser.ARITHABORT:
						case TSqlParser.ASSEMBLY:
						case TSqlParser.AUDIT:
						case TSqlParser.AUDIT_GUID:
						case TSqlParser.AUTO:
						case TSqlParser.AUTO_CLEANUP:
						case TSqlParser.AUTO_CLOSE:
						case TSqlParser.AUTO_CREATE_STATISTICS:
						case TSqlParser.AUTO_SHRINK:
						case TSqlParser.AUTO_UPDATE_STATISTICS:
						case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
						case TSqlParser.AVAILABILITY:
						case TSqlParser.AVG:
						case TSqlParser.BACKUP_PRIORITY:
						case TSqlParser.BEGIN_DIALOG:
						case TSqlParser.BIGINT:
						case TSqlParser.BINARY_BASE64:
						case TSqlParser.BINARY_CHECKSUM:
						case TSqlParser.BINDING:
						case TSqlParser.BLOB_STORAGE:
						case TSqlParser.BROKER:
						case TSqlParser.BROKER_INSTANCE:
						case TSqlParser.BULK_LOGGED:
						case TSqlParser.CALLER:
						case TSqlParser.CAP_CPU_PERCENT:
						case TSqlParser.CAST:
						case TSqlParser.CATALOG:
						case TSqlParser.CATCH:
						case TSqlParser.CHANGE_RETENTION:
						case TSqlParser.CHANGE_TRACKING:
						case TSqlParser.CHECKSUM:
						case TSqlParser.CHECKSUM_AGG:
						case TSqlParser.CLEANUP:
						case TSqlParser.COLLECTION:
						case TSqlParser.COLUMN_MASTER_KEY:
						case TSqlParser.COMMITTED:
						case TSqlParser.COMPATIBILITY_LEVEL:
						case TSqlParser.CONCAT:
						case TSqlParser.CONCAT_NULL_YIELDS_NULL:
						case TSqlParser.CONTENT:
						case TSqlParser.CONTROL:
						case TSqlParser.COOKIE:
						case TSqlParser.COUNT:
						case TSqlParser.COUNT_BIG:
						case TSqlParser.COUNTER:
						case TSqlParser.CPU:
						case TSqlParser.CREATE_NEW:
						case TSqlParser.CREATION_DISPOSITION:
						case TSqlParser.CREDENTIAL:
						case TSqlParser.CRYPTOGRAPHIC:
						case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
						case TSqlParser.CURSOR_DEFAULT:
						case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
						case TSqlParser.DATEADD:
						case TSqlParser.DATEDIFF:
						case TSqlParser.DATENAME:
						case TSqlParser.DATEPART:
						case TSqlParser.DAYS:
						case TSqlParser.DB_CHAINING:
						case TSqlParser.DB_FAILOVER:
						case TSqlParser.DECRYPTION:
						case TSqlParser.DEFAULT_DOUBLE_QUOTE:
						case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
						case TSqlParser.DEFAULT_LANGUAGE:
						case TSqlParser.DELAY:
						case TSqlParser.DELAYED_DURABILITY:
						case TSqlParser.DELETED:
						case TSqlParser.DENSE_RANK:
						case TSqlParser.DEPENDENTS:
						case TSqlParser.DES:
						case TSqlParser.DESCRIPTION:
						case TSqlParser.DESX:
						case TSqlParser.DHCP:
						case TSqlParser.DIALOG:
						case TSqlParser.DIRECTORY_NAME:
						case TSqlParser.DISABLE:
						case TSqlParser.DISABLE_BROKER:
						case TSqlParser.DISABLED:
						case TSqlParser.DISK_DRIVE:
						case TSqlParser.DOCUMENT:
						case TSqlParser.DYNAMIC:
						case TSqlParser.EMERGENCY:
						case TSqlParser.EMPTY:
						case TSqlParser.ENABLE:
						case TSqlParser.ENABLE_BROKER:
						case TSqlParser.ENCRYPTED_VALUE:
						case TSqlParser.ENCRYPTION:
						case TSqlParser.ENDPOINT_URL:
						case TSqlParser.ERROR_BROKER_CONVERSATIONS:
						case TSqlParser.EXCLUSIVE:
						case TSqlParser.EXECUTABLE:
						case TSqlParser.EXIST:
						case TSqlParser.EXPAND:
						case TSqlParser.EXPIRY_DATE:
						case TSqlParser.EXPLICIT:
						case TSqlParser.FAIL_OPERATION:
						case TSqlParser.FAILOVER_MODE:
						case TSqlParser.FAILURE:
						case TSqlParser.FAILURE_CONDITION_LEVEL:
						case TSqlParser.FAST:
						case TSqlParser.FAST_FORWARD:
						case TSqlParser.FILEGROUP:
						case TSqlParser.FILEGROWTH:
						case TSqlParser.FILEPATH:
						case TSqlParser.FILESTREAM:
						case TSqlParser.FILTER:
						case TSqlParser.FIRST:
						case TSqlParser.FIRST_VALUE:
						case TSqlParser.FOLLOWING:
						case TSqlParser.FORCE:
						case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case TSqlParser.FORCED:
						case TSqlParser.FORMAT:
						case TSqlParser.FORWARD_ONLY:
						case TSqlParser.FULLSCAN:
						case TSqlParser.FULLTEXT:
						case TSqlParser.GB:
						case TSqlParser.GETDATE:
						case TSqlParser.GETUTCDATE:
						case TSqlParser.GLOBAL:
						case TSqlParser.GO:
						case TSqlParser.GROUP_MAX_REQUESTS:
						case TSqlParser.GROUPING:
						case TSqlParser.GROUPING_ID:
						case TSqlParser.HADR:
						case TSqlParser.HASH:
						case TSqlParser.HEALTH_CHECK_TIMEOUT:
						case TSqlParser.HIGH:
						case TSqlParser.HONOR_BROKER_PRIORITY:
						case TSqlParser.HOURS:
						case TSqlParser.IDENTITY_VALUE:
						case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case TSqlParser.IMMEDIATE:
						case TSqlParser.IMPERSONATE:
						case TSqlParser.IMPORTANCE:
						case TSqlParser.INCREMENTAL:
						case TSqlParser.INITIATOR:
						case TSqlParser.INPUT:
						case TSqlParser.INSENSITIVE:
						case TSqlParser.INSERTED:
						case TSqlParser.INT:
						case TSqlParser.IP:
						case TSqlParser.ISOLATION:
						case TSqlParser.KB:
						case TSqlParser.KEEP:
						case TSqlParser.KEEPFIXED:
						case TSqlParser.KEY_SOURCE:
						case TSqlParser.KEYS:
						case TSqlParser.KEYSET:
						case TSqlParser.LAG:
						case TSqlParser.LAST:
						case TSqlParser.LAST_VALUE:
						case TSqlParser.LEAD:
						case TSqlParser.LEVEL:
						case TSqlParser.LIST:
						case TSqlParser.LISTENER:
						case TSqlParser.LISTENER_URL:
						case TSqlParser.LOB_COMPACTION:
						case TSqlParser.LOCAL:
						case TSqlParser.LOCATION:
						case TSqlParser.LOCK:
						case TSqlParser.LOCK_ESCALATION:
						case TSqlParser.LOGIN:
						case TSqlParser.LOOP:
						case TSqlParser.LOW:
						case TSqlParser.MANUAL:
						case TSqlParser.MARK:
						case TSqlParser.MATERIALIZED:
						case TSqlParser.MAX:
						case TSqlParser.MAX_CPU_PERCENT:
						case TSqlParser.MAX_DOP:
						case TSqlParser.MAX_FILES:
						case TSqlParser.MAX_IOPS_PER_VOLUME:
						case TSqlParser.MAX_MEMORY_PERCENT:
						case TSqlParser.MAX_PROCESSES:
						case TSqlParser.MAX_QUEUE_READERS:
						case TSqlParser.MAX_ROLLOVER_FILES:
						case TSqlParser.MAXDOP:
						case TSqlParser.MAXRECURSION:
						case TSqlParser.MAXSIZE:
						case TSqlParser.MB:
						case TSqlParser.MEDIUM:
						case TSqlParser.MEMORY_OPTIMIZED_DATA:
						case TSqlParser.MESSAGE:
						case TSqlParser.MIN:
						case TSqlParser.MIN_ACTIVE_ROWVERSION:
						case TSqlParser.MIN_CPU_PERCENT:
						case TSqlParser.MIN_IOPS_PER_VOLUME:
						case TSqlParser.MIN_MEMORY_PERCENT:
						case TSqlParser.MINUTES:
						case TSqlParser.MIRROR_ADDRESS:
						case TSqlParser.MIXED_PAGE_ALLOCATION:
						case TSqlParser.MODE:
						case TSqlParser.MODIFY:
						case TSqlParser.MOVE:
						case TSqlParser.MULTI_USER:
						case TSqlParser.NAME:
						case TSqlParser.NESTED_TRIGGERS:
						case TSqlParser.NEW_ACCOUNT:
						case TSqlParser.NEW_BROKER:
						case TSqlParser.NEW_PASSWORD:
						case TSqlParser.NEXT:
						case TSqlParser.NO:
						case TSqlParser.NO_TRUNCATE:
						case TSqlParser.NO_WAIT:
						case TSqlParser.NOCOUNT:
						case TSqlParser.NODES:
						case TSqlParser.NOEXPAND:
						case TSqlParser.NON_TRANSACTED_ACCESS:
						case TSqlParser.NORECOMPUTE:
						case TSqlParser.NORECOVERY:
						case TSqlParser.NOWAIT:
						case TSqlParser.NTILE:
						case TSqlParser.NUMANODE:
						case TSqlParser.NUMBER:
						case TSqlParser.NUMERIC_ROUNDABORT:
						case TSqlParser.OBJECT:
						case TSqlParser.OFFLINE:
						case TSqlParser.OFFSET:
						case TSqlParser.OLD_ACCOUNT:
						case TSqlParser.ONLINE:
						case TSqlParser.ONLY:
						case TSqlParser.OPEN_EXISTING:
						case TSqlParser.OPTIMISTIC:
						case TSqlParser.OPTIMIZE:
						case TSqlParser.OUT:
						case TSqlParser.OUTPUT:
						case TSqlParser.OWNER:
						case TSqlParser.PAGE_VERIFY:
						case TSqlParser.PARAMETERIZATION:
						case TSqlParser.PARTITION:
						case TSqlParser.PARTITIONS:
						case TSqlParser.PARTNER:
						case TSqlParser.PATH:
						case TSqlParser.POISON_MESSAGE_HANDLING:
						case TSqlParser.POOL:
						case TSqlParser.PORT:
						case TSqlParser.PRECEDING:
						case TSqlParser.PRIMARY_ROLE:
						case TSqlParser.PRIOR:
						case TSqlParser.PRIORITY:
						case TSqlParser.PRIORITY_LEVEL:
						case TSqlParser.PRIVATE:
						case TSqlParser.PRIVATE_KEY:
						case TSqlParser.PRIVILEGES:
						case TSqlParser.PROCEDURE_NAME:
						case TSqlParser.PROPERTY:
						case TSqlParser.PROVIDER:
						case TSqlParser.PROVIDER_KEY_NAME:
						case TSqlParser.QUERY:
						case TSqlParser.QUEUE:
						case TSqlParser.QUEUE_DELAY:
						case TSqlParser.QUOTED_IDENTIFIER:
						case TSqlParser.RANGE:
						case TSqlParser.RANK:
						case TSqlParser.RC2:
						case TSqlParser.RC4:
						case TSqlParser.RC4_128:
						case TSqlParser.READ_COMMITTED_SNAPSHOT:
						case TSqlParser.READ_ONLY:
						case TSqlParser.READ_ONLY_ROUTING_LIST:
						case TSqlParser.READ_WRITE:
						case TSqlParser.READONLY:
						case TSqlParser.REBUILD:
						case TSqlParser.RECEIVE:
						case TSqlParser.RECOMPILE:
						case TSqlParser.RECOVERY:
						case TSqlParser.RECURSIVE_TRIGGERS:
						case TSqlParser.RELATIVE:
						case TSqlParser.REMOTE:
						case TSqlParser.REMOTE_SERVICE_NAME:
						case TSqlParser.REMOVE:
						case TSqlParser.REORGANIZE:
						case TSqlParser.REPEATABLE:
						case TSqlParser.REPLICA:
						case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
						case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case TSqlParser.RESERVE_DISK_SPACE:
						case TSqlParser.RESOURCE:
						case TSqlParser.RESOURCE_MANAGER_LOCATION:
						case TSqlParser.RESTRICTED_USER:
						case TSqlParser.RETENTION:
						case TSqlParser.ROBUST:
						case TSqlParser.ROOT:
						case TSqlParser.ROUTE:
						case TSqlParser.ROW:
						case TSqlParser.ROW_NUMBER:
						case TSqlParser.ROWGUID:
						case TSqlParser.ROWS:
						case TSqlParser.SAMPLE:
						case TSqlParser.SCHEMABINDING:
						case TSqlParser.SCOPED:
						case TSqlParser.SCROLL:
						case TSqlParser.SCROLL_LOCKS:
						case TSqlParser.SEARCH:
						case TSqlParser.SECONDARY:
						case TSqlParser.SECONDARY_ONLY:
						case TSqlParser.SECONDARY_ROLE:
						case TSqlParser.SECONDS:
						case TSqlParser.SECRET:
						case TSqlParser.SECURITY_LOG:
						case TSqlParser.SEEDING_MODE:
						case TSqlParser.SELF:
						case TSqlParser.SEMI_SENSITIVE:
						case TSqlParser.SEND:
						case TSqlParser.SENT:
						case TSqlParser.SERIALIZABLE:
						case TSqlParser.SESSION_TIMEOUT:
						case TSqlParser.SETERROR:
						case TSqlParser.SHARE:
						case TSqlParser.SHOWPLAN:
						case TSqlParser.SIGNATURE:
						case TSqlParser.SIMPLE:
						case TSqlParser.SINGLE_USER:
						case TSqlParser.SIZE:
						case TSqlParser.SMALLINT:
						case TSqlParser.SNAPSHOT:
						case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
						case TSqlParser.STANDBY:
						case TSqlParser.START_DATE:
						case TSqlParser.STATIC:
						case TSqlParser.STATS_STREAM:
						case TSqlParser.STATUS:
						case TSqlParser.STDEV:
						case TSqlParser.STDEVP:
						case TSqlParser.STOPLIST:
						case TSqlParser.STUFF:
						case TSqlParser.SUBJECT:
						case TSqlParser.SUM:
						case TSqlParser.SUSPEND:
						case TSqlParser.SYMMETRIC:
						case TSqlParser.SYNCHRONOUS_COMMIT:
						case TSqlParser.SYNONYM:
						case TSqlParser.TAKE:
						case TSqlParser.TARGET_RECOVERY_TIME:
						case TSqlParser.TB:
						case TSqlParser.TEXTIMAGE_ON:
						case TSqlParser.THROW:
						case TSqlParser.TIES:
						case TSqlParser.TIME:
						case TSqlParser.TIMEOUT:
						case TSqlParser.TIMER:
						case TSqlParser.TINYINT:
						case TSqlParser.TORN_PAGE_DETECTION:
						case TSqlParser.TRANSFORM_NOISE_WORDS:
						case TSqlParser.TRIPLE_DES:
						case TSqlParser.TRIPLE_DES_3KEY:
						case TSqlParser.TRUSTWORTHY:
						case TSqlParser.TRY:
						case TSqlParser.TSQL:
						case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
						case TSqlParser.TYPE:
						case TSqlParser.TYPE_WARNING:
						case TSqlParser.UNBOUNDED:
						case TSqlParser.UNCOMMITTED:
						case TSqlParser.UNKNOWN:
						case TSqlParser.UNLIMITED:
						case TSqlParser.USING:
						case TSqlParser.VALID_XML:
						case TSqlParser.VALIDATION:
						case TSqlParser.VALUE:
						case TSqlParser.VAR:
						case TSqlParser.VARP:
						case TSqlParser.VIEW_METADATA:
						case TSqlParser.VIEWS:
						case TSqlParser.WAIT:
						case TSqlParser.WELL_FORMED_XML:
						case TSqlParser.WORK:
						case TSqlParser.WORKLOAD:
						case TSqlParser.XML:
						case TSqlParser.XMLNAMESPACES:
						case TSqlParser.DOUBLE_QUOTE_ID:
						case TSqlParser.SQUARE_BRACKET_ID:
						case TSqlParser.ID:
							{
							this.state = 7653;
							this.id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						this.state = 7658;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === TSqlParser.DISK || _la === TSqlParser.TAPE || _la === TSqlParser.URL || _la === TSqlParser.COMMA);
					}
					}
					this.state = 7662;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.MIRROR);
				}
				break;
			}
			this.state = 7839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1090, this._ctx) ) {
			case 1:
				{
				this.state = 7666;
				this.match(TSqlParser.WITH);
				this.state = 7836;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1089, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 7834;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 1088, this._ctx) ) {
						case 1:
							{
							this.state = 7668;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7667;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7670;
							this.match(TSqlParser.DIFFERENTIAL);
							}
							break;

						case 2:
							{
							this.state = 7672;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7671;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7674;
							this.match(TSqlParser.COPY_ONLY);
							}
							break;

						case 3:
							{
							this.state = 7676;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7675;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7678;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.COMPRESSION || _la === TSqlParser.NO_COMPRESSION)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 4:
							{
							this.state = 7680;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7679;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7682;
							this.match(TSqlParser.DESCRIPTION);
							this.state = 7683;
							this.match(TSqlParser.EQUAL);
							this.state = 7686;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.STRING:
								{
								this.state = 7684;
								this.match(TSqlParser.STRING);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7685;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 5:
							{
							this.state = 7689;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7688;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7691;
							this.match(TSqlParser.NAME);
							this.state = 7692;
							this.match(TSqlParser.EQUAL);
							this.state = 7693;
							_localctx._backup_set_name = this.id();
							}
							break;

						case 6:
							{
							this.state = 7695;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7694;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7697;
							this.match(TSqlParser.CREDENTIAL);
							}
							break;

						case 7:
							{
							this.state = 7699;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7698;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7701;
							this.match(TSqlParser.FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							this.state = 7703;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7702;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7717;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.EXPIREDATE:
								{
								this.state = 7705;
								this.match(TSqlParser.EXPIREDATE);
								this.state = 7706;
								this.match(TSqlParser.EQUAL);
								this.state = 7709;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.STRING:
									{
									this.state = 7707;
									this.match(TSqlParser.STRING);
									}
									break;
								case TSqlParser.CALLED:
								case TSqlParser.DATA_COMPRESSION:
								case TSqlParser.EVENTDATA:
								case TSqlParser.FILENAME:
								case TSqlParser.FILLFACTOR:
								case TSqlParser.FORCESEEK:
								case TSqlParser.INIT:
								case TSqlParser.KEY:
								case TSqlParser.MASTER:
								case TSqlParser.MAX_MEMORY:
								case TSqlParser.OFFSETS:
								case TSqlParser.PAGE:
								case TSqlParser.PUBLIC:
								case TSqlParser.R:
								case TSqlParser.RAW:
								case TSqlParser.RETURN:
								case TSqlParser.RETURNS:
								case TSqlParser.ROWCOUNT:
								case TSqlParser.SAFETY:
								case TSqlParser.SERVER:
								case TSqlParser.SID:
								case TSqlParser.SOURCE:
								case TSqlParser.STATE:
								case TSqlParser.START:
								case TSqlParser.TARGET:
								case TSqlParser.ABSOLUTE:
								case TSqlParser.ACCENT_SENSITIVITY:
								case TSqlParser.ACTION:
								case TSqlParser.ACTIVATION:
								case TSqlParser.ACTIVE:
								case TSqlParser.ADDRESS:
								case TSqlParser.AES_128:
								case TSqlParser.AES_192:
								case TSqlParser.AES_256:
								case TSqlParser.AFFINITY:
								case TSqlParser.AFTER:
								case TSqlParser.AGGREGATE:
								case TSqlParser.ALGORITHM:
								case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
								case TSqlParser.ALLOWED:
								case TSqlParser.ANSI_NULL_DEFAULT:
								case TSqlParser.ANSI_NULLS:
								case TSqlParser.ANSI_PADDING:
								case TSqlParser.ANSI_WARNINGS:
								case TSqlParser.APPLICATION_LOG:
								case TSqlParser.APPLY:
								case TSqlParser.ARITHABORT:
								case TSqlParser.ASSEMBLY:
								case TSqlParser.AUDIT:
								case TSqlParser.AUDIT_GUID:
								case TSqlParser.AUTO:
								case TSqlParser.AUTO_CLEANUP:
								case TSqlParser.AUTO_CLOSE:
								case TSqlParser.AUTO_CREATE_STATISTICS:
								case TSqlParser.AUTO_SHRINK:
								case TSqlParser.AUTO_UPDATE_STATISTICS:
								case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
								case TSqlParser.AVAILABILITY:
								case TSqlParser.AVG:
								case TSqlParser.BACKUP_PRIORITY:
								case TSqlParser.BEGIN_DIALOG:
								case TSqlParser.BIGINT:
								case TSqlParser.BINARY_BASE64:
								case TSqlParser.BINARY_CHECKSUM:
								case TSqlParser.BINDING:
								case TSqlParser.BLOB_STORAGE:
								case TSqlParser.BROKER:
								case TSqlParser.BROKER_INSTANCE:
								case TSqlParser.BULK_LOGGED:
								case TSqlParser.CALLER:
								case TSqlParser.CAP_CPU_PERCENT:
								case TSqlParser.CAST:
								case TSqlParser.CATALOG:
								case TSqlParser.CATCH:
								case TSqlParser.CHANGE_RETENTION:
								case TSqlParser.CHANGE_TRACKING:
								case TSqlParser.CHECKSUM:
								case TSqlParser.CHECKSUM_AGG:
								case TSqlParser.CLEANUP:
								case TSqlParser.COLLECTION:
								case TSqlParser.COLUMN_MASTER_KEY:
								case TSqlParser.COMMITTED:
								case TSqlParser.COMPATIBILITY_LEVEL:
								case TSqlParser.CONCAT:
								case TSqlParser.CONCAT_NULL_YIELDS_NULL:
								case TSqlParser.CONTENT:
								case TSqlParser.CONTROL:
								case TSqlParser.COOKIE:
								case TSqlParser.COUNT:
								case TSqlParser.COUNT_BIG:
								case TSqlParser.COUNTER:
								case TSqlParser.CPU:
								case TSqlParser.CREATE_NEW:
								case TSqlParser.CREATION_DISPOSITION:
								case TSqlParser.CREDENTIAL:
								case TSqlParser.CRYPTOGRAPHIC:
								case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
								case TSqlParser.CURSOR_DEFAULT:
								case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
								case TSqlParser.DATEADD:
								case TSqlParser.DATEDIFF:
								case TSqlParser.DATENAME:
								case TSqlParser.DATEPART:
								case TSqlParser.DAYS:
								case TSqlParser.DB_CHAINING:
								case TSqlParser.DB_FAILOVER:
								case TSqlParser.DECRYPTION:
								case TSqlParser.DEFAULT_DOUBLE_QUOTE:
								case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
								case TSqlParser.DEFAULT_LANGUAGE:
								case TSqlParser.DELAY:
								case TSqlParser.DELAYED_DURABILITY:
								case TSqlParser.DELETED:
								case TSqlParser.DENSE_RANK:
								case TSqlParser.DEPENDENTS:
								case TSqlParser.DES:
								case TSqlParser.DESCRIPTION:
								case TSqlParser.DESX:
								case TSqlParser.DHCP:
								case TSqlParser.DIALOG:
								case TSqlParser.DIRECTORY_NAME:
								case TSqlParser.DISABLE:
								case TSqlParser.DISABLE_BROKER:
								case TSqlParser.DISABLED:
								case TSqlParser.DISK_DRIVE:
								case TSqlParser.DOCUMENT:
								case TSqlParser.DYNAMIC:
								case TSqlParser.EMERGENCY:
								case TSqlParser.EMPTY:
								case TSqlParser.ENABLE:
								case TSqlParser.ENABLE_BROKER:
								case TSqlParser.ENCRYPTED_VALUE:
								case TSqlParser.ENCRYPTION:
								case TSqlParser.ENDPOINT_URL:
								case TSqlParser.ERROR_BROKER_CONVERSATIONS:
								case TSqlParser.EXCLUSIVE:
								case TSqlParser.EXECUTABLE:
								case TSqlParser.EXIST:
								case TSqlParser.EXPAND:
								case TSqlParser.EXPIRY_DATE:
								case TSqlParser.EXPLICIT:
								case TSqlParser.FAIL_OPERATION:
								case TSqlParser.FAILOVER_MODE:
								case TSqlParser.FAILURE:
								case TSqlParser.FAILURE_CONDITION_LEVEL:
								case TSqlParser.FAST:
								case TSqlParser.FAST_FORWARD:
								case TSqlParser.FILEGROUP:
								case TSqlParser.FILEGROWTH:
								case TSqlParser.FILEPATH:
								case TSqlParser.FILESTREAM:
								case TSqlParser.FILTER:
								case TSqlParser.FIRST:
								case TSqlParser.FIRST_VALUE:
								case TSqlParser.FOLLOWING:
								case TSqlParser.FORCE:
								case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case TSqlParser.FORCED:
								case TSqlParser.FORMAT:
								case TSqlParser.FORWARD_ONLY:
								case TSqlParser.FULLSCAN:
								case TSqlParser.FULLTEXT:
								case TSqlParser.GB:
								case TSqlParser.GETDATE:
								case TSqlParser.GETUTCDATE:
								case TSqlParser.GLOBAL:
								case TSqlParser.GO:
								case TSqlParser.GROUP_MAX_REQUESTS:
								case TSqlParser.GROUPING:
								case TSqlParser.GROUPING_ID:
								case TSqlParser.HADR:
								case TSqlParser.HASH:
								case TSqlParser.HEALTH_CHECK_TIMEOUT:
								case TSqlParser.HIGH:
								case TSqlParser.HONOR_BROKER_PRIORITY:
								case TSqlParser.HOURS:
								case TSqlParser.IDENTITY_VALUE:
								case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case TSqlParser.IMMEDIATE:
								case TSqlParser.IMPERSONATE:
								case TSqlParser.IMPORTANCE:
								case TSqlParser.INCREMENTAL:
								case TSqlParser.INITIATOR:
								case TSqlParser.INPUT:
								case TSqlParser.INSENSITIVE:
								case TSqlParser.INSERTED:
								case TSqlParser.INT:
								case TSqlParser.IP:
								case TSqlParser.ISOLATION:
								case TSqlParser.KB:
								case TSqlParser.KEEP:
								case TSqlParser.KEEPFIXED:
								case TSqlParser.KEY_SOURCE:
								case TSqlParser.KEYS:
								case TSqlParser.KEYSET:
								case TSqlParser.LAG:
								case TSqlParser.LAST:
								case TSqlParser.LAST_VALUE:
								case TSqlParser.LEAD:
								case TSqlParser.LEVEL:
								case TSqlParser.LIST:
								case TSqlParser.LISTENER:
								case TSqlParser.LISTENER_URL:
								case TSqlParser.LOB_COMPACTION:
								case TSqlParser.LOCAL:
								case TSqlParser.LOCATION:
								case TSqlParser.LOCK:
								case TSqlParser.LOCK_ESCALATION:
								case TSqlParser.LOGIN:
								case TSqlParser.LOOP:
								case TSqlParser.LOW:
								case TSqlParser.MANUAL:
								case TSqlParser.MARK:
								case TSqlParser.MATERIALIZED:
								case TSqlParser.MAX:
								case TSqlParser.MAX_CPU_PERCENT:
								case TSqlParser.MAX_DOP:
								case TSqlParser.MAX_FILES:
								case TSqlParser.MAX_IOPS_PER_VOLUME:
								case TSqlParser.MAX_MEMORY_PERCENT:
								case TSqlParser.MAX_PROCESSES:
								case TSqlParser.MAX_QUEUE_READERS:
								case TSqlParser.MAX_ROLLOVER_FILES:
								case TSqlParser.MAXDOP:
								case TSqlParser.MAXRECURSION:
								case TSqlParser.MAXSIZE:
								case TSqlParser.MB:
								case TSqlParser.MEDIUM:
								case TSqlParser.MEMORY_OPTIMIZED_DATA:
								case TSqlParser.MESSAGE:
								case TSqlParser.MIN:
								case TSqlParser.MIN_ACTIVE_ROWVERSION:
								case TSqlParser.MIN_CPU_PERCENT:
								case TSqlParser.MIN_IOPS_PER_VOLUME:
								case TSqlParser.MIN_MEMORY_PERCENT:
								case TSqlParser.MINUTES:
								case TSqlParser.MIRROR_ADDRESS:
								case TSqlParser.MIXED_PAGE_ALLOCATION:
								case TSqlParser.MODE:
								case TSqlParser.MODIFY:
								case TSqlParser.MOVE:
								case TSqlParser.MULTI_USER:
								case TSqlParser.NAME:
								case TSqlParser.NESTED_TRIGGERS:
								case TSqlParser.NEW_ACCOUNT:
								case TSqlParser.NEW_BROKER:
								case TSqlParser.NEW_PASSWORD:
								case TSqlParser.NEXT:
								case TSqlParser.NO:
								case TSqlParser.NO_TRUNCATE:
								case TSqlParser.NO_WAIT:
								case TSqlParser.NOCOUNT:
								case TSqlParser.NODES:
								case TSqlParser.NOEXPAND:
								case TSqlParser.NON_TRANSACTED_ACCESS:
								case TSqlParser.NORECOMPUTE:
								case TSqlParser.NORECOVERY:
								case TSqlParser.NOWAIT:
								case TSqlParser.NTILE:
								case TSqlParser.NUMANODE:
								case TSqlParser.NUMBER:
								case TSqlParser.NUMERIC_ROUNDABORT:
								case TSqlParser.OBJECT:
								case TSqlParser.OFFLINE:
								case TSqlParser.OFFSET:
								case TSqlParser.OLD_ACCOUNT:
								case TSqlParser.ONLINE:
								case TSqlParser.ONLY:
								case TSqlParser.OPEN_EXISTING:
								case TSqlParser.OPTIMISTIC:
								case TSqlParser.OPTIMIZE:
								case TSqlParser.OUT:
								case TSqlParser.OUTPUT:
								case TSqlParser.OWNER:
								case TSqlParser.PAGE_VERIFY:
								case TSqlParser.PARAMETERIZATION:
								case TSqlParser.PARTITION:
								case TSqlParser.PARTITIONS:
								case TSqlParser.PARTNER:
								case TSqlParser.PATH:
								case TSqlParser.POISON_MESSAGE_HANDLING:
								case TSqlParser.POOL:
								case TSqlParser.PORT:
								case TSqlParser.PRECEDING:
								case TSqlParser.PRIMARY_ROLE:
								case TSqlParser.PRIOR:
								case TSqlParser.PRIORITY:
								case TSqlParser.PRIORITY_LEVEL:
								case TSqlParser.PRIVATE:
								case TSqlParser.PRIVATE_KEY:
								case TSqlParser.PRIVILEGES:
								case TSqlParser.PROCEDURE_NAME:
								case TSqlParser.PROPERTY:
								case TSqlParser.PROVIDER:
								case TSqlParser.PROVIDER_KEY_NAME:
								case TSqlParser.QUERY:
								case TSqlParser.QUEUE:
								case TSqlParser.QUEUE_DELAY:
								case TSqlParser.QUOTED_IDENTIFIER:
								case TSqlParser.RANGE:
								case TSqlParser.RANK:
								case TSqlParser.RC2:
								case TSqlParser.RC4:
								case TSqlParser.RC4_128:
								case TSqlParser.READ_COMMITTED_SNAPSHOT:
								case TSqlParser.READ_ONLY:
								case TSqlParser.READ_ONLY_ROUTING_LIST:
								case TSqlParser.READ_WRITE:
								case TSqlParser.READONLY:
								case TSqlParser.REBUILD:
								case TSqlParser.RECEIVE:
								case TSqlParser.RECOMPILE:
								case TSqlParser.RECOVERY:
								case TSqlParser.RECURSIVE_TRIGGERS:
								case TSqlParser.RELATIVE:
								case TSqlParser.REMOTE:
								case TSqlParser.REMOTE_SERVICE_NAME:
								case TSqlParser.REMOVE:
								case TSqlParser.REORGANIZE:
								case TSqlParser.REPEATABLE:
								case TSqlParser.REPLICA:
								case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
								case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case TSqlParser.RESERVE_DISK_SPACE:
								case TSqlParser.RESOURCE:
								case TSqlParser.RESOURCE_MANAGER_LOCATION:
								case TSqlParser.RESTRICTED_USER:
								case TSqlParser.RETENTION:
								case TSqlParser.ROBUST:
								case TSqlParser.ROOT:
								case TSqlParser.ROUTE:
								case TSqlParser.ROW:
								case TSqlParser.ROW_NUMBER:
								case TSqlParser.ROWGUID:
								case TSqlParser.ROWS:
								case TSqlParser.SAMPLE:
								case TSqlParser.SCHEMABINDING:
								case TSqlParser.SCOPED:
								case TSqlParser.SCROLL:
								case TSqlParser.SCROLL_LOCKS:
								case TSqlParser.SEARCH:
								case TSqlParser.SECONDARY:
								case TSqlParser.SECONDARY_ONLY:
								case TSqlParser.SECONDARY_ROLE:
								case TSqlParser.SECONDS:
								case TSqlParser.SECRET:
								case TSqlParser.SECURITY_LOG:
								case TSqlParser.SEEDING_MODE:
								case TSqlParser.SELF:
								case TSqlParser.SEMI_SENSITIVE:
								case TSqlParser.SEND:
								case TSqlParser.SENT:
								case TSqlParser.SERIALIZABLE:
								case TSqlParser.SESSION_TIMEOUT:
								case TSqlParser.SETERROR:
								case TSqlParser.SHARE:
								case TSqlParser.SHOWPLAN:
								case TSqlParser.SIGNATURE:
								case TSqlParser.SIMPLE:
								case TSqlParser.SINGLE_USER:
								case TSqlParser.SIZE:
								case TSqlParser.SMALLINT:
								case TSqlParser.SNAPSHOT:
								case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
								case TSqlParser.STANDBY:
								case TSqlParser.START_DATE:
								case TSqlParser.STATIC:
								case TSqlParser.STATS_STREAM:
								case TSqlParser.STATUS:
								case TSqlParser.STDEV:
								case TSqlParser.STDEVP:
								case TSqlParser.STOPLIST:
								case TSqlParser.STUFF:
								case TSqlParser.SUBJECT:
								case TSqlParser.SUM:
								case TSqlParser.SUSPEND:
								case TSqlParser.SYMMETRIC:
								case TSqlParser.SYNCHRONOUS_COMMIT:
								case TSqlParser.SYNONYM:
								case TSqlParser.TAKE:
								case TSqlParser.TARGET_RECOVERY_TIME:
								case TSqlParser.TB:
								case TSqlParser.TEXTIMAGE_ON:
								case TSqlParser.THROW:
								case TSqlParser.TIES:
								case TSqlParser.TIME:
								case TSqlParser.TIMEOUT:
								case TSqlParser.TIMER:
								case TSqlParser.TINYINT:
								case TSqlParser.TORN_PAGE_DETECTION:
								case TSqlParser.TRANSFORM_NOISE_WORDS:
								case TSqlParser.TRIPLE_DES:
								case TSqlParser.TRIPLE_DES_3KEY:
								case TSqlParser.TRUSTWORTHY:
								case TSqlParser.TRY:
								case TSqlParser.TSQL:
								case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
								case TSqlParser.TYPE:
								case TSqlParser.TYPE_WARNING:
								case TSqlParser.UNBOUNDED:
								case TSqlParser.UNCOMMITTED:
								case TSqlParser.UNKNOWN:
								case TSqlParser.UNLIMITED:
								case TSqlParser.USING:
								case TSqlParser.VALID_XML:
								case TSqlParser.VALIDATION:
								case TSqlParser.VALUE:
								case TSqlParser.VAR:
								case TSqlParser.VARP:
								case TSqlParser.VIEW_METADATA:
								case TSqlParser.VIEWS:
								case TSqlParser.WAIT:
								case TSqlParser.WELL_FORMED_XML:
								case TSqlParser.WORK:
								case TSqlParser.WORKLOAD:
								case TSqlParser.XML:
								case TSqlParser.XMLNAMESPACES:
								case TSqlParser.DOUBLE_QUOTE_ID:
								case TSqlParser.SQUARE_BRACKET_ID:
								case TSqlParser.ID:
									{
									this.state = 7708;
									this.id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case TSqlParser.RETAINDAYS:
								{
								this.state = 7711;
								this.match(TSqlParser.RETAINDAYS);
								this.state = 7712;
								this.match(TSqlParser.EQUAL);
								this.state = 7715;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case TSqlParser.DECIMAL:
									{
									this.state = 7713;
									this.match(TSqlParser.DECIMAL);
									}
									break;
								case TSqlParser.CALLED:
								case TSqlParser.DATA_COMPRESSION:
								case TSqlParser.EVENTDATA:
								case TSqlParser.FILENAME:
								case TSqlParser.FILLFACTOR:
								case TSqlParser.FORCESEEK:
								case TSqlParser.INIT:
								case TSqlParser.KEY:
								case TSqlParser.MASTER:
								case TSqlParser.MAX_MEMORY:
								case TSqlParser.OFFSETS:
								case TSqlParser.PAGE:
								case TSqlParser.PUBLIC:
								case TSqlParser.R:
								case TSqlParser.RAW:
								case TSqlParser.RETURN:
								case TSqlParser.RETURNS:
								case TSqlParser.ROWCOUNT:
								case TSqlParser.SAFETY:
								case TSqlParser.SERVER:
								case TSqlParser.SID:
								case TSqlParser.SOURCE:
								case TSqlParser.STATE:
								case TSqlParser.START:
								case TSqlParser.TARGET:
								case TSqlParser.ABSOLUTE:
								case TSqlParser.ACCENT_SENSITIVITY:
								case TSqlParser.ACTION:
								case TSqlParser.ACTIVATION:
								case TSqlParser.ACTIVE:
								case TSqlParser.ADDRESS:
								case TSqlParser.AES_128:
								case TSqlParser.AES_192:
								case TSqlParser.AES_256:
								case TSqlParser.AFFINITY:
								case TSqlParser.AFTER:
								case TSqlParser.AGGREGATE:
								case TSqlParser.ALGORITHM:
								case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
								case TSqlParser.ALLOWED:
								case TSqlParser.ANSI_NULL_DEFAULT:
								case TSqlParser.ANSI_NULLS:
								case TSqlParser.ANSI_PADDING:
								case TSqlParser.ANSI_WARNINGS:
								case TSqlParser.APPLICATION_LOG:
								case TSqlParser.APPLY:
								case TSqlParser.ARITHABORT:
								case TSqlParser.ASSEMBLY:
								case TSqlParser.AUDIT:
								case TSqlParser.AUDIT_GUID:
								case TSqlParser.AUTO:
								case TSqlParser.AUTO_CLEANUP:
								case TSqlParser.AUTO_CLOSE:
								case TSqlParser.AUTO_CREATE_STATISTICS:
								case TSqlParser.AUTO_SHRINK:
								case TSqlParser.AUTO_UPDATE_STATISTICS:
								case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
								case TSqlParser.AVAILABILITY:
								case TSqlParser.AVG:
								case TSqlParser.BACKUP_PRIORITY:
								case TSqlParser.BEGIN_DIALOG:
								case TSqlParser.BIGINT:
								case TSqlParser.BINARY_BASE64:
								case TSqlParser.BINARY_CHECKSUM:
								case TSqlParser.BINDING:
								case TSqlParser.BLOB_STORAGE:
								case TSqlParser.BROKER:
								case TSqlParser.BROKER_INSTANCE:
								case TSqlParser.BULK_LOGGED:
								case TSqlParser.CALLER:
								case TSqlParser.CAP_CPU_PERCENT:
								case TSqlParser.CAST:
								case TSqlParser.CATALOG:
								case TSqlParser.CATCH:
								case TSqlParser.CHANGE_RETENTION:
								case TSqlParser.CHANGE_TRACKING:
								case TSqlParser.CHECKSUM:
								case TSqlParser.CHECKSUM_AGG:
								case TSqlParser.CLEANUP:
								case TSqlParser.COLLECTION:
								case TSqlParser.COLUMN_MASTER_KEY:
								case TSqlParser.COMMITTED:
								case TSqlParser.COMPATIBILITY_LEVEL:
								case TSqlParser.CONCAT:
								case TSqlParser.CONCAT_NULL_YIELDS_NULL:
								case TSqlParser.CONTENT:
								case TSqlParser.CONTROL:
								case TSqlParser.COOKIE:
								case TSqlParser.COUNT:
								case TSqlParser.COUNT_BIG:
								case TSqlParser.COUNTER:
								case TSqlParser.CPU:
								case TSqlParser.CREATE_NEW:
								case TSqlParser.CREATION_DISPOSITION:
								case TSqlParser.CREDENTIAL:
								case TSqlParser.CRYPTOGRAPHIC:
								case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
								case TSqlParser.CURSOR_DEFAULT:
								case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
								case TSqlParser.DATEADD:
								case TSqlParser.DATEDIFF:
								case TSqlParser.DATENAME:
								case TSqlParser.DATEPART:
								case TSqlParser.DAYS:
								case TSqlParser.DB_CHAINING:
								case TSqlParser.DB_FAILOVER:
								case TSqlParser.DECRYPTION:
								case TSqlParser.DEFAULT_DOUBLE_QUOTE:
								case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
								case TSqlParser.DEFAULT_LANGUAGE:
								case TSqlParser.DELAY:
								case TSqlParser.DELAYED_DURABILITY:
								case TSqlParser.DELETED:
								case TSqlParser.DENSE_RANK:
								case TSqlParser.DEPENDENTS:
								case TSqlParser.DES:
								case TSqlParser.DESCRIPTION:
								case TSqlParser.DESX:
								case TSqlParser.DHCP:
								case TSqlParser.DIALOG:
								case TSqlParser.DIRECTORY_NAME:
								case TSqlParser.DISABLE:
								case TSqlParser.DISABLE_BROKER:
								case TSqlParser.DISABLED:
								case TSqlParser.DISK_DRIVE:
								case TSqlParser.DOCUMENT:
								case TSqlParser.DYNAMIC:
								case TSqlParser.EMERGENCY:
								case TSqlParser.EMPTY:
								case TSqlParser.ENABLE:
								case TSqlParser.ENABLE_BROKER:
								case TSqlParser.ENCRYPTED_VALUE:
								case TSqlParser.ENCRYPTION:
								case TSqlParser.ENDPOINT_URL:
								case TSqlParser.ERROR_BROKER_CONVERSATIONS:
								case TSqlParser.EXCLUSIVE:
								case TSqlParser.EXECUTABLE:
								case TSqlParser.EXIST:
								case TSqlParser.EXPAND:
								case TSqlParser.EXPIRY_DATE:
								case TSqlParser.EXPLICIT:
								case TSqlParser.FAIL_OPERATION:
								case TSqlParser.FAILOVER_MODE:
								case TSqlParser.FAILURE:
								case TSqlParser.FAILURE_CONDITION_LEVEL:
								case TSqlParser.FAST:
								case TSqlParser.FAST_FORWARD:
								case TSqlParser.FILEGROUP:
								case TSqlParser.FILEGROWTH:
								case TSqlParser.FILEPATH:
								case TSqlParser.FILESTREAM:
								case TSqlParser.FILTER:
								case TSqlParser.FIRST:
								case TSqlParser.FIRST_VALUE:
								case TSqlParser.FOLLOWING:
								case TSqlParser.FORCE:
								case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case TSqlParser.FORCED:
								case TSqlParser.FORMAT:
								case TSqlParser.FORWARD_ONLY:
								case TSqlParser.FULLSCAN:
								case TSqlParser.FULLTEXT:
								case TSqlParser.GB:
								case TSqlParser.GETDATE:
								case TSqlParser.GETUTCDATE:
								case TSqlParser.GLOBAL:
								case TSqlParser.GO:
								case TSqlParser.GROUP_MAX_REQUESTS:
								case TSqlParser.GROUPING:
								case TSqlParser.GROUPING_ID:
								case TSqlParser.HADR:
								case TSqlParser.HASH:
								case TSqlParser.HEALTH_CHECK_TIMEOUT:
								case TSqlParser.HIGH:
								case TSqlParser.HONOR_BROKER_PRIORITY:
								case TSqlParser.HOURS:
								case TSqlParser.IDENTITY_VALUE:
								case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case TSqlParser.IMMEDIATE:
								case TSqlParser.IMPERSONATE:
								case TSqlParser.IMPORTANCE:
								case TSqlParser.INCREMENTAL:
								case TSqlParser.INITIATOR:
								case TSqlParser.INPUT:
								case TSqlParser.INSENSITIVE:
								case TSqlParser.INSERTED:
								case TSqlParser.INT:
								case TSqlParser.IP:
								case TSqlParser.ISOLATION:
								case TSqlParser.KB:
								case TSqlParser.KEEP:
								case TSqlParser.KEEPFIXED:
								case TSqlParser.KEY_SOURCE:
								case TSqlParser.KEYS:
								case TSqlParser.KEYSET:
								case TSqlParser.LAG:
								case TSqlParser.LAST:
								case TSqlParser.LAST_VALUE:
								case TSqlParser.LEAD:
								case TSqlParser.LEVEL:
								case TSqlParser.LIST:
								case TSqlParser.LISTENER:
								case TSqlParser.LISTENER_URL:
								case TSqlParser.LOB_COMPACTION:
								case TSqlParser.LOCAL:
								case TSqlParser.LOCATION:
								case TSqlParser.LOCK:
								case TSqlParser.LOCK_ESCALATION:
								case TSqlParser.LOGIN:
								case TSqlParser.LOOP:
								case TSqlParser.LOW:
								case TSqlParser.MANUAL:
								case TSqlParser.MARK:
								case TSqlParser.MATERIALIZED:
								case TSqlParser.MAX:
								case TSqlParser.MAX_CPU_PERCENT:
								case TSqlParser.MAX_DOP:
								case TSqlParser.MAX_FILES:
								case TSqlParser.MAX_IOPS_PER_VOLUME:
								case TSqlParser.MAX_MEMORY_PERCENT:
								case TSqlParser.MAX_PROCESSES:
								case TSqlParser.MAX_QUEUE_READERS:
								case TSqlParser.MAX_ROLLOVER_FILES:
								case TSqlParser.MAXDOP:
								case TSqlParser.MAXRECURSION:
								case TSqlParser.MAXSIZE:
								case TSqlParser.MB:
								case TSqlParser.MEDIUM:
								case TSqlParser.MEMORY_OPTIMIZED_DATA:
								case TSqlParser.MESSAGE:
								case TSqlParser.MIN:
								case TSqlParser.MIN_ACTIVE_ROWVERSION:
								case TSqlParser.MIN_CPU_PERCENT:
								case TSqlParser.MIN_IOPS_PER_VOLUME:
								case TSqlParser.MIN_MEMORY_PERCENT:
								case TSqlParser.MINUTES:
								case TSqlParser.MIRROR_ADDRESS:
								case TSqlParser.MIXED_PAGE_ALLOCATION:
								case TSqlParser.MODE:
								case TSqlParser.MODIFY:
								case TSqlParser.MOVE:
								case TSqlParser.MULTI_USER:
								case TSqlParser.NAME:
								case TSqlParser.NESTED_TRIGGERS:
								case TSqlParser.NEW_ACCOUNT:
								case TSqlParser.NEW_BROKER:
								case TSqlParser.NEW_PASSWORD:
								case TSqlParser.NEXT:
								case TSqlParser.NO:
								case TSqlParser.NO_TRUNCATE:
								case TSqlParser.NO_WAIT:
								case TSqlParser.NOCOUNT:
								case TSqlParser.NODES:
								case TSqlParser.NOEXPAND:
								case TSqlParser.NON_TRANSACTED_ACCESS:
								case TSqlParser.NORECOMPUTE:
								case TSqlParser.NORECOVERY:
								case TSqlParser.NOWAIT:
								case TSqlParser.NTILE:
								case TSqlParser.NUMANODE:
								case TSqlParser.NUMBER:
								case TSqlParser.NUMERIC_ROUNDABORT:
								case TSqlParser.OBJECT:
								case TSqlParser.OFFLINE:
								case TSqlParser.OFFSET:
								case TSqlParser.OLD_ACCOUNT:
								case TSqlParser.ONLINE:
								case TSqlParser.ONLY:
								case TSqlParser.OPEN_EXISTING:
								case TSqlParser.OPTIMISTIC:
								case TSqlParser.OPTIMIZE:
								case TSqlParser.OUT:
								case TSqlParser.OUTPUT:
								case TSqlParser.OWNER:
								case TSqlParser.PAGE_VERIFY:
								case TSqlParser.PARAMETERIZATION:
								case TSqlParser.PARTITION:
								case TSqlParser.PARTITIONS:
								case TSqlParser.PARTNER:
								case TSqlParser.PATH:
								case TSqlParser.POISON_MESSAGE_HANDLING:
								case TSqlParser.POOL:
								case TSqlParser.PORT:
								case TSqlParser.PRECEDING:
								case TSqlParser.PRIMARY_ROLE:
								case TSqlParser.PRIOR:
								case TSqlParser.PRIORITY:
								case TSqlParser.PRIORITY_LEVEL:
								case TSqlParser.PRIVATE:
								case TSqlParser.PRIVATE_KEY:
								case TSqlParser.PRIVILEGES:
								case TSqlParser.PROCEDURE_NAME:
								case TSqlParser.PROPERTY:
								case TSqlParser.PROVIDER:
								case TSqlParser.PROVIDER_KEY_NAME:
								case TSqlParser.QUERY:
								case TSqlParser.QUEUE:
								case TSqlParser.QUEUE_DELAY:
								case TSqlParser.QUOTED_IDENTIFIER:
								case TSqlParser.RANGE:
								case TSqlParser.RANK:
								case TSqlParser.RC2:
								case TSqlParser.RC4:
								case TSqlParser.RC4_128:
								case TSqlParser.READ_COMMITTED_SNAPSHOT:
								case TSqlParser.READ_ONLY:
								case TSqlParser.READ_ONLY_ROUTING_LIST:
								case TSqlParser.READ_WRITE:
								case TSqlParser.READONLY:
								case TSqlParser.REBUILD:
								case TSqlParser.RECEIVE:
								case TSqlParser.RECOMPILE:
								case TSqlParser.RECOVERY:
								case TSqlParser.RECURSIVE_TRIGGERS:
								case TSqlParser.RELATIVE:
								case TSqlParser.REMOTE:
								case TSqlParser.REMOTE_SERVICE_NAME:
								case TSqlParser.REMOVE:
								case TSqlParser.REORGANIZE:
								case TSqlParser.REPEATABLE:
								case TSqlParser.REPLICA:
								case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
								case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case TSqlParser.RESERVE_DISK_SPACE:
								case TSqlParser.RESOURCE:
								case TSqlParser.RESOURCE_MANAGER_LOCATION:
								case TSqlParser.RESTRICTED_USER:
								case TSqlParser.RETENTION:
								case TSqlParser.ROBUST:
								case TSqlParser.ROOT:
								case TSqlParser.ROUTE:
								case TSqlParser.ROW:
								case TSqlParser.ROW_NUMBER:
								case TSqlParser.ROWGUID:
								case TSqlParser.ROWS:
								case TSqlParser.SAMPLE:
								case TSqlParser.SCHEMABINDING:
								case TSqlParser.SCOPED:
								case TSqlParser.SCROLL:
								case TSqlParser.SCROLL_LOCKS:
								case TSqlParser.SEARCH:
								case TSqlParser.SECONDARY:
								case TSqlParser.SECONDARY_ONLY:
								case TSqlParser.SECONDARY_ROLE:
								case TSqlParser.SECONDS:
								case TSqlParser.SECRET:
								case TSqlParser.SECURITY_LOG:
								case TSqlParser.SEEDING_MODE:
								case TSqlParser.SELF:
								case TSqlParser.SEMI_SENSITIVE:
								case TSqlParser.SEND:
								case TSqlParser.SENT:
								case TSqlParser.SERIALIZABLE:
								case TSqlParser.SESSION_TIMEOUT:
								case TSqlParser.SETERROR:
								case TSqlParser.SHARE:
								case TSqlParser.SHOWPLAN:
								case TSqlParser.SIGNATURE:
								case TSqlParser.SIMPLE:
								case TSqlParser.SINGLE_USER:
								case TSqlParser.SIZE:
								case TSqlParser.SMALLINT:
								case TSqlParser.SNAPSHOT:
								case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
								case TSqlParser.STANDBY:
								case TSqlParser.START_DATE:
								case TSqlParser.STATIC:
								case TSqlParser.STATS_STREAM:
								case TSqlParser.STATUS:
								case TSqlParser.STDEV:
								case TSqlParser.STDEVP:
								case TSqlParser.STOPLIST:
								case TSqlParser.STUFF:
								case TSqlParser.SUBJECT:
								case TSqlParser.SUM:
								case TSqlParser.SUSPEND:
								case TSqlParser.SYMMETRIC:
								case TSqlParser.SYNCHRONOUS_COMMIT:
								case TSqlParser.SYNONYM:
								case TSqlParser.TAKE:
								case TSqlParser.TARGET_RECOVERY_TIME:
								case TSqlParser.TB:
								case TSqlParser.TEXTIMAGE_ON:
								case TSqlParser.THROW:
								case TSqlParser.TIES:
								case TSqlParser.TIME:
								case TSqlParser.TIMEOUT:
								case TSqlParser.TIMER:
								case TSqlParser.TINYINT:
								case TSqlParser.TORN_PAGE_DETECTION:
								case TSqlParser.TRANSFORM_NOISE_WORDS:
								case TSqlParser.TRIPLE_DES:
								case TSqlParser.TRIPLE_DES_3KEY:
								case TSqlParser.TRUSTWORTHY:
								case TSqlParser.TRY:
								case TSqlParser.TSQL:
								case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
								case TSqlParser.TYPE:
								case TSqlParser.TYPE_WARNING:
								case TSqlParser.UNBOUNDED:
								case TSqlParser.UNCOMMITTED:
								case TSqlParser.UNKNOWN:
								case TSqlParser.UNLIMITED:
								case TSqlParser.USING:
								case TSqlParser.VALID_XML:
								case TSqlParser.VALIDATION:
								case TSqlParser.VALUE:
								case TSqlParser.VAR:
								case TSqlParser.VARP:
								case TSqlParser.VIEW_METADATA:
								case TSqlParser.VIEWS:
								case TSqlParser.WAIT:
								case TSqlParser.WELL_FORMED_XML:
								case TSqlParser.WORK:
								case TSqlParser.WORKLOAD:
								case TSqlParser.XML:
								case TSqlParser.XMLNAMESPACES:
								case TSqlParser.DOUBLE_QUOTE_ID:
								case TSqlParser.SQUARE_BRACKET_ID:
								case TSqlParser.ID:
									{
									this.state = 7714;
									this.id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 9:
							{
							this.state = 7720;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7719;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7722;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.INIT || _la === TSqlParser.NOINIT)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 10:
							{
							this.state = 7724;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7723;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7726;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NOSKIP || _la === TSqlParser.SKIP_KEYWORD)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 11:
							{
							this.state = 7728;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7727;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7730;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NOFORMAT || _la === TSqlParser.FORMAT)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 12:
							{
							this.state = 7732;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7731;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7734;
							this.match(TSqlParser.MEDIADESCRIPTION);
							this.state = 7735;
							this.match(TSqlParser.EQUAL);
							this.state = 7738;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.STRING:
								{
								this.state = 7736;
								this.match(TSqlParser.STRING);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7737;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 13:
							{
							this.state = 7741;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7740;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7743;
							this.match(TSqlParser.MEDIANAME);
							this.state = 7744;
							this.match(TSqlParser.EQUAL);
							{
							this.state = 7745;
							_localctx._medianame = this.match(TSqlParser.STRING);
							}
							}
							break;

						case 14:
							{
							this.state = 7747;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7746;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7749;
							this.match(TSqlParser.BLOCKSIZE);
							this.state = 7750;
							this.match(TSqlParser.EQUAL);
							this.state = 7753;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
								{
								this.state = 7751;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7752;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 15:
							{
							this.state = 7756;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7755;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7758;
							this.match(TSqlParser.BUFFERCOUNT);
							this.state = 7759;
							this.match(TSqlParser.EQUAL);
							this.state = 7762;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
								{
								this.state = 7760;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7761;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 16:
							{
							this.state = 7765;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7764;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7767;
							this.match(TSqlParser.MAXTRANSFER);
							this.state = 7768;
							this.match(TSqlParser.EQUAL);
							this.state = 7771;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.DECIMAL:
								{
								this.state = 7769;
								this.match(TSqlParser.DECIMAL);
								}
								break;
							case TSqlParser.CALLED:
							case TSqlParser.DATA_COMPRESSION:
							case TSqlParser.EVENTDATA:
							case TSqlParser.FILENAME:
							case TSqlParser.FILLFACTOR:
							case TSqlParser.FORCESEEK:
							case TSqlParser.INIT:
							case TSqlParser.KEY:
							case TSqlParser.MASTER:
							case TSqlParser.MAX_MEMORY:
							case TSqlParser.OFFSETS:
							case TSqlParser.PAGE:
							case TSqlParser.PUBLIC:
							case TSqlParser.R:
							case TSqlParser.RAW:
							case TSqlParser.RETURN:
							case TSqlParser.RETURNS:
							case TSqlParser.ROWCOUNT:
							case TSqlParser.SAFETY:
							case TSqlParser.SERVER:
							case TSqlParser.SID:
							case TSqlParser.SOURCE:
							case TSqlParser.STATE:
							case TSqlParser.START:
							case TSqlParser.TARGET:
							case TSqlParser.ABSOLUTE:
							case TSqlParser.ACCENT_SENSITIVITY:
							case TSqlParser.ACTION:
							case TSqlParser.ACTIVATION:
							case TSqlParser.ACTIVE:
							case TSqlParser.ADDRESS:
							case TSqlParser.AES_128:
							case TSqlParser.AES_192:
							case TSqlParser.AES_256:
							case TSqlParser.AFFINITY:
							case TSqlParser.AFTER:
							case TSqlParser.AGGREGATE:
							case TSqlParser.ALGORITHM:
							case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
							case TSqlParser.ALLOWED:
							case TSqlParser.ANSI_NULL_DEFAULT:
							case TSqlParser.ANSI_NULLS:
							case TSqlParser.ANSI_PADDING:
							case TSqlParser.ANSI_WARNINGS:
							case TSqlParser.APPLICATION_LOG:
							case TSqlParser.APPLY:
							case TSqlParser.ARITHABORT:
							case TSqlParser.ASSEMBLY:
							case TSqlParser.AUDIT:
							case TSqlParser.AUDIT_GUID:
							case TSqlParser.AUTO:
							case TSqlParser.AUTO_CLEANUP:
							case TSqlParser.AUTO_CLOSE:
							case TSqlParser.AUTO_CREATE_STATISTICS:
							case TSqlParser.AUTO_SHRINK:
							case TSqlParser.AUTO_UPDATE_STATISTICS:
							case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
							case TSqlParser.AVAILABILITY:
							case TSqlParser.AVG:
							case TSqlParser.BACKUP_PRIORITY:
							case TSqlParser.BEGIN_DIALOG:
							case TSqlParser.BIGINT:
							case TSqlParser.BINARY_BASE64:
							case TSqlParser.BINARY_CHECKSUM:
							case TSqlParser.BINDING:
							case TSqlParser.BLOB_STORAGE:
							case TSqlParser.BROKER:
							case TSqlParser.BROKER_INSTANCE:
							case TSqlParser.BULK_LOGGED:
							case TSqlParser.CALLER:
							case TSqlParser.CAP_CPU_PERCENT:
							case TSqlParser.CAST:
							case TSqlParser.CATALOG:
							case TSqlParser.CATCH:
							case TSqlParser.CHANGE_RETENTION:
							case TSqlParser.CHANGE_TRACKING:
							case TSqlParser.CHECKSUM:
							case TSqlParser.CHECKSUM_AGG:
							case TSqlParser.CLEANUP:
							case TSqlParser.COLLECTION:
							case TSqlParser.COLUMN_MASTER_KEY:
							case TSqlParser.COMMITTED:
							case TSqlParser.COMPATIBILITY_LEVEL:
							case TSqlParser.CONCAT:
							case TSqlParser.CONCAT_NULL_YIELDS_NULL:
							case TSqlParser.CONTENT:
							case TSqlParser.CONTROL:
							case TSqlParser.COOKIE:
							case TSqlParser.COUNT:
							case TSqlParser.COUNT_BIG:
							case TSqlParser.COUNTER:
							case TSqlParser.CPU:
							case TSqlParser.CREATE_NEW:
							case TSqlParser.CREATION_DISPOSITION:
							case TSqlParser.CREDENTIAL:
							case TSqlParser.CRYPTOGRAPHIC:
							case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
							case TSqlParser.CURSOR_DEFAULT:
							case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
							case TSqlParser.DATEADD:
							case TSqlParser.DATEDIFF:
							case TSqlParser.DATENAME:
							case TSqlParser.DATEPART:
							case TSqlParser.DAYS:
							case TSqlParser.DB_CHAINING:
							case TSqlParser.DB_FAILOVER:
							case TSqlParser.DECRYPTION:
							case TSqlParser.DEFAULT_DOUBLE_QUOTE:
							case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
							case TSqlParser.DEFAULT_LANGUAGE:
							case TSqlParser.DELAY:
							case TSqlParser.DELAYED_DURABILITY:
							case TSqlParser.DELETED:
							case TSqlParser.DENSE_RANK:
							case TSqlParser.DEPENDENTS:
							case TSqlParser.DES:
							case TSqlParser.DESCRIPTION:
							case TSqlParser.DESX:
							case TSqlParser.DHCP:
							case TSqlParser.DIALOG:
							case TSqlParser.DIRECTORY_NAME:
							case TSqlParser.DISABLE:
							case TSqlParser.DISABLE_BROKER:
							case TSqlParser.DISABLED:
							case TSqlParser.DISK_DRIVE:
							case TSqlParser.DOCUMENT:
							case TSqlParser.DYNAMIC:
							case TSqlParser.EMERGENCY:
							case TSqlParser.EMPTY:
							case TSqlParser.ENABLE:
							case TSqlParser.ENABLE_BROKER:
							case TSqlParser.ENCRYPTED_VALUE:
							case TSqlParser.ENCRYPTION:
							case TSqlParser.ENDPOINT_URL:
							case TSqlParser.ERROR_BROKER_CONVERSATIONS:
							case TSqlParser.EXCLUSIVE:
							case TSqlParser.EXECUTABLE:
							case TSqlParser.EXIST:
							case TSqlParser.EXPAND:
							case TSqlParser.EXPIRY_DATE:
							case TSqlParser.EXPLICIT:
							case TSqlParser.FAIL_OPERATION:
							case TSqlParser.FAILOVER_MODE:
							case TSqlParser.FAILURE:
							case TSqlParser.FAILURE_CONDITION_LEVEL:
							case TSqlParser.FAST:
							case TSqlParser.FAST_FORWARD:
							case TSqlParser.FILEGROUP:
							case TSqlParser.FILEGROWTH:
							case TSqlParser.FILEPATH:
							case TSqlParser.FILESTREAM:
							case TSqlParser.FILTER:
							case TSqlParser.FIRST:
							case TSqlParser.FIRST_VALUE:
							case TSqlParser.FOLLOWING:
							case TSqlParser.FORCE:
							case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case TSqlParser.FORCED:
							case TSqlParser.FORMAT:
							case TSqlParser.FORWARD_ONLY:
							case TSqlParser.FULLSCAN:
							case TSqlParser.FULLTEXT:
							case TSqlParser.GB:
							case TSqlParser.GETDATE:
							case TSqlParser.GETUTCDATE:
							case TSqlParser.GLOBAL:
							case TSqlParser.GO:
							case TSqlParser.GROUP_MAX_REQUESTS:
							case TSqlParser.GROUPING:
							case TSqlParser.GROUPING_ID:
							case TSqlParser.HADR:
							case TSqlParser.HASH:
							case TSqlParser.HEALTH_CHECK_TIMEOUT:
							case TSqlParser.HIGH:
							case TSqlParser.HONOR_BROKER_PRIORITY:
							case TSqlParser.HOURS:
							case TSqlParser.IDENTITY_VALUE:
							case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case TSqlParser.IMMEDIATE:
							case TSqlParser.IMPERSONATE:
							case TSqlParser.IMPORTANCE:
							case TSqlParser.INCREMENTAL:
							case TSqlParser.INITIATOR:
							case TSqlParser.INPUT:
							case TSqlParser.INSENSITIVE:
							case TSqlParser.INSERTED:
							case TSqlParser.INT:
							case TSqlParser.IP:
							case TSqlParser.ISOLATION:
							case TSqlParser.KB:
							case TSqlParser.KEEP:
							case TSqlParser.KEEPFIXED:
							case TSqlParser.KEY_SOURCE:
							case TSqlParser.KEYS:
							case TSqlParser.KEYSET:
							case TSqlParser.LAG:
							case TSqlParser.LAST:
							case TSqlParser.LAST_VALUE:
							case TSqlParser.LEAD:
							case TSqlParser.LEVEL:
							case TSqlParser.LIST:
							case TSqlParser.LISTENER:
							case TSqlParser.LISTENER_URL:
							case TSqlParser.LOB_COMPACTION:
							case TSqlParser.LOCAL:
							case TSqlParser.LOCATION:
							case TSqlParser.LOCK:
							case TSqlParser.LOCK_ESCALATION:
							case TSqlParser.LOGIN:
							case TSqlParser.LOOP:
							case TSqlParser.LOW:
							case TSqlParser.MANUAL:
							case TSqlParser.MARK:
							case TSqlParser.MATERIALIZED:
							case TSqlParser.MAX:
							case TSqlParser.MAX_CPU_PERCENT:
							case TSqlParser.MAX_DOP:
							case TSqlParser.MAX_FILES:
							case TSqlParser.MAX_IOPS_PER_VOLUME:
							case TSqlParser.MAX_MEMORY_PERCENT:
							case TSqlParser.MAX_PROCESSES:
							case TSqlParser.MAX_QUEUE_READERS:
							case TSqlParser.MAX_ROLLOVER_FILES:
							case TSqlParser.MAXDOP:
							case TSqlParser.MAXRECURSION:
							case TSqlParser.MAXSIZE:
							case TSqlParser.MB:
							case TSqlParser.MEDIUM:
							case TSqlParser.MEMORY_OPTIMIZED_DATA:
							case TSqlParser.MESSAGE:
							case TSqlParser.MIN:
							case TSqlParser.MIN_ACTIVE_ROWVERSION:
							case TSqlParser.MIN_CPU_PERCENT:
							case TSqlParser.MIN_IOPS_PER_VOLUME:
							case TSqlParser.MIN_MEMORY_PERCENT:
							case TSqlParser.MINUTES:
							case TSqlParser.MIRROR_ADDRESS:
							case TSqlParser.MIXED_PAGE_ALLOCATION:
							case TSqlParser.MODE:
							case TSqlParser.MODIFY:
							case TSqlParser.MOVE:
							case TSqlParser.MULTI_USER:
							case TSqlParser.NAME:
							case TSqlParser.NESTED_TRIGGERS:
							case TSqlParser.NEW_ACCOUNT:
							case TSqlParser.NEW_BROKER:
							case TSqlParser.NEW_PASSWORD:
							case TSqlParser.NEXT:
							case TSqlParser.NO:
							case TSqlParser.NO_TRUNCATE:
							case TSqlParser.NO_WAIT:
							case TSqlParser.NOCOUNT:
							case TSqlParser.NODES:
							case TSqlParser.NOEXPAND:
							case TSqlParser.NON_TRANSACTED_ACCESS:
							case TSqlParser.NORECOMPUTE:
							case TSqlParser.NORECOVERY:
							case TSqlParser.NOWAIT:
							case TSqlParser.NTILE:
							case TSqlParser.NUMANODE:
							case TSqlParser.NUMBER:
							case TSqlParser.NUMERIC_ROUNDABORT:
							case TSqlParser.OBJECT:
							case TSqlParser.OFFLINE:
							case TSqlParser.OFFSET:
							case TSqlParser.OLD_ACCOUNT:
							case TSqlParser.ONLINE:
							case TSqlParser.ONLY:
							case TSqlParser.OPEN_EXISTING:
							case TSqlParser.OPTIMISTIC:
							case TSqlParser.OPTIMIZE:
							case TSqlParser.OUT:
							case TSqlParser.OUTPUT:
							case TSqlParser.OWNER:
							case TSqlParser.PAGE_VERIFY:
							case TSqlParser.PARAMETERIZATION:
							case TSqlParser.PARTITION:
							case TSqlParser.PARTITIONS:
							case TSqlParser.PARTNER:
							case TSqlParser.PATH:
							case TSqlParser.POISON_MESSAGE_HANDLING:
							case TSqlParser.POOL:
							case TSqlParser.PORT:
							case TSqlParser.PRECEDING:
							case TSqlParser.PRIMARY_ROLE:
							case TSqlParser.PRIOR:
							case TSqlParser.PRIORITY:
							case TSqlParser.PRIORITY_LEVEL:
							case TSqlParser.PRIVATE:
							case TSqlParser.PRIVATE_KEY:
							case TSqlParser.PRIVILEGES:
							case TSqlParser.PROCEDURE_NAME:
							case TSqlParser.PROPERTY:
							case TSqlParser.PROVIDER:
							case TSqlParser.PROVIDER_KEY_NAME:
							case TSqlParser.QUERY:
							case TSqlParser.QUEUE:
							case TSqlParser.QUEUE_DELAY:
							case TSqlParser.QUOTED_IDENTIFIER:
							case TSqlParser.RANGE:
							case TSqlParser.RANK:
							case TSqlParser.RC2:
							case TSqlParser.RC4:
							case TSqlParser.RC4_128:
							case TSqlParser.READ_COMMITTED_SNAPSHOT:
							case TSqlParser.READ_ONLY:
							case TSqlParser.READ_ONLY_ROUTING_LIST:
							case TSqlParser.READ_WRITE:
							case TSqlParser.READONLY:
							case TSqlParser.REBUILD:
							case TSqlParser.RECEIVE:
							case TSqlParser.RECOMPILE:
							case TSqlParser.RECOVERY:
							case TSqlParser.RECURSIVE_TRIGGERS:
							case TSqlParser.RELATIVE:
							case TSqlParser.REMOTE:
							case TSqlParser.REMOTE_SERVICE_NAME:
							case TSqlParser.REMOVE:
							case TSqlParser.REORGANIZE:
							case TSqlParser.REPEATABLE:
							case TSqlParser.REPLICA:
							case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
							case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case TSqlParser.RESERVE_DISK_SPACE:
							case TSqlParser.RESOURCE:
							case TSqlParser.RESOURCE_MANAGER_LOCATION:
							case TSqlParser.RESTRICTED_USER:
							case TSqlParser.RETENTION:
							case TSqlParser.ROBUST:
							case TSqlParser.ROOT:
							case TSqlParser.ROUTE:
							case TSqlParser.ROW:
							case TSqlParser.ROW_NUMBER:
							case TSqlParser.ROWGUID:
							case TSqlParser.ROWS:
							case TSqlParser.SAMPLE:
							case TSqlParser.SCHEMABINDING:
							case TSqlParser.SCOPED:
							case TSqlParser.SCROLL:
							case TSqlParser.SCROLL_LOCKS:
							case TSqlParser.SEARCH:
							case TSqlParser.SECONDARY:
							case TSqlParser.SECONDARY_ONLY:
							case TSqlParser.SECONDARY_ROLE:
							case TSqlParser.SECONDS:
							case TSqlParser.SECRET:
							case TSqlParser.SECURITY_LOG:
							case TSqlParser.SEEDING_MODE:
							case TSqlParser.SELF:
							case TSqlParser.SEMI_SENSITIVE:
							case TSqlParser.SEND:
							case TSqlParser.SENT:
							case TSqlParser.SERIALIZABLE:
							case TSqlParser.SESSION_TIMEOUT:
							case TSqlParser.SETERROR:
							case TSqlParser.SHARE:
							case TSqlParser.SHOWPLAN:
							case TSqlParser.SIGNATURE:
							case TSqlParser.SIMPLE:
							case TSqlParser.SINGLE_USER:
							case TSqlParser.SIZE:
							case TSqlParser.SMALLINT:
							case TSqlParser.SNAPSHOT:
							case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
							case TSqlParser.STANDBY:
							case TSqlParser.START_DATE:
							case TSqlParser.STATIC:
							case TSqlParser.STATS_STREAM:
							case TSqlParser.STATUS:
							case TSqlParser.STDEV:
							case TSqlParser.STDEVP:
							case TSqlParser.STOPLIST:
							case TSqlParser.STUFF:
							case TSqlParser.SUBJECT:
							case TSqlParser.SUM:
							case TSqlParser.SUSPEND:
							case TSqlParser.SYMMETRIC:
							case TSqlParser.SYNCHRONOUS_COMMIT:
							case TSqlParser.SYNONYM:
							case TSqlParser.TAKE:
							case TSqlParser.TARGET_RECOVERY_TIME:
							case TSqlParser.TB:
							case TSqlParser.TEXTIMAGE_ON:
							case TSqlParser.THROW:
							case TSqlParser.TIES:
							case TSqlParser.TIME:
							case TSqlParser.TIMEOUT:
							case TSqlParser.TIMER:
							case TSqlParser.TINYINT:
							case TSqlParser.TORN_PAGE_DETECTION:
							case TSqlParser.TRANSFORM_NOISE_WORDS:
							case TSqlParser.TRIPLE_DES:
							case TSqlParser.TRIPLE_DES_3KEY:
							case TSqlParser.TRUSTWORTHY:
							case TSqlParser.TRY:
							case TSqlParser.TSQL:
							case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
							case TSqlParser.TYPE:
							case TSqlParser.TYPE_WARNING:
							case TSqlParser.UNBOUNDED:
							case TSqlParser.UNCOMMITTED:
							case TSqlParser.UNKNOWN:
							case TSqlParser.UNLIMITED:
							case TSqlParser.USING:
							case TSqlParser.VALID_XML:
							case TSqlParser.VALIDATION:
							case TSqlParser.VALUE:
							case TSqlParser.VAR:
							case TSqlParser.VARP:
							case TSqlParser.VIEW_METADATA:
							case TSqlParser.VIEWS:
							case TSqlParser.WAIT:
							case TSqlParser.WELL_FORMED_XML:
							case TSqlParser.WORK:
							case TSqlParser.WORKLOAD:
							case TSqlParser.XML:
							case TSqlParser.XMLNAMESPACES:
							case TSqlParser.DOUBLE_QUOTE_ID:
							case TSqlParser.SQUARE_BRACKET_ID:
							case TSqlParser.ID:
								{
								this.state = 7770;
								this.id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 17:
							{
							this.state = 7774;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7773;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7776;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NO_CHECKSUM || _la === TSqlParser.CHECKSUM)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 18:
							{
							this.state = 7778;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7777;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7780;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.CONTINUE_AFTER_ERROR || _la === TSqlParser.STOP_ON_ERROR)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 19:
							{
							this.state = 7782;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7781;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7784;
							this.match(TSqlParser.RESTART);
							}
							break;

						case 20:
							{
							this.state = 7786;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7785;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7788;
							this.match(TSqlParser.STATS);
							this.state = 7791;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.EQUAL) {
								{
								this.state = 7789;
								this.match(TSqlParser.EQUAL);
								this.state = 7790;
								_localctx._stats_percent = this.match(TSqlParser.DECIMAL);
								}
							}

							}
							break;

						case 21:
							{
							this.state = 7794;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7793;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7796;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.NOREWIND || _la === TSqlParser.REWIND)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 22:
							{
							this.state = 7798;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7797;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7800;
							_la = this._input.LA(1);
							if (!(_la === TSqlParser.LOAD || _la === TSqlParser.NOUNLOAD)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;

						case 23:
							{
							this.state = 7802;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7801;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7808;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case TSqlParser.NORECOVERY:
								{
								this.state = 7804;
								this.match(TSqlParser.NORECOVERY);
								}
								break;
							case TSqlParser.STANDBY:
								{
								this.state = 7805;
								this.match(TSqlParser.STANDBY);
								this.state = 7806;
								this.match(TSqlParser.EQUAL);
								this.state = 7807;
								_localctx._undo_file_name = this.match(TSqlParser.STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 24:
							{
							this.state = 7811;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7810;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7813;
							this.match(TSqlParser.NO_TRUNCATE);
							}
							break;

						case 25:
							{
							this.state = 7815;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === TSqlParser.COMMA) {
								{
								this.state = 7814;
								this.match(TSqlParser.COMMA);
								}
							}

							this.state = 7817;
							this.match(TSqlParser.ENCRYPTION);
							this.state = 7818;
							this.match(TSqlParser.LR_BRACKET);
							this.state = 7819;
							this.match(TSqlParser.ALGORITHM);
							this.state = 7820;
							this.match(TSqlParser.EQUAL);
							this.state = 7821;
							_la = this._input.LA(1);
							if (!(((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) !== 0) || _la === TSqlParser.TRIPLE_DES_3KEY)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 7822;
							this.match(TSqlParser.COMMA);
							this.state = 7823;
							this.match(TSqlParser.SERVER);
							this.state = 7824;
							this.match(TSqlParser.CERTIFICATE);
							this.state = 7825;
							this.match(TSqlParser.EQUAL);
							this.state = 7832;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 1087, this._ctx) ) {
							case 1:
								{
								this.state = 7826;
								_localctx._encryptor_name = this.id();
								}
								break;

							case 2:
								{
								this.state = 7827;
								this.match(TSqlParser.SERVER);
								this.state = 7828;
								this.match(TSqlParser.ASYMMETRIC);
								this.state = 7829;
								this.match(TSqlParser.KEY);
								this.state = 7830;
								this.match(TSqlParser.EQUAL);
								this.state = 7831;
								_localctx._encryptor_name = this.id();
								}
								break;
							}
							}
							break;
						}
						}
					}
					this.state = 7838;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1089, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backup_certificate(): Backup_certificateContext {
		let _localctx: Backup_certificateContext = new Backup_certificateContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, TSqlParser.RULE_backup_certificate);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7841;
			this.match(TSqlParser.BACKUP);
			this.state = 7842;
			this.match(TSqlParser.CERTIFICATE);
			this.state = 7843;
			_localctx._certname = this.id();
			this.state = 7844;
			this.match(TSqlParser.TO);
			this.state = 7845;
			this.match(TSqlParser.FILE);
			this.state = 7846;
			this.match(TSqlParser.EQUAL);
			this.state = 7847;
			_localctx._cert_file = this.match(TSqlParser.STRING);
			this.state = 7879;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1096, this._ctx) ) {
			case 1:
				{
				this.state = 7848;
				this.match(TSqlParser.WITH);
				this.state = 7849;
				this.match(TSqlParser.PRIVATE);
				this.state = 7850;
				this.match(TSqlParser.KEY);
				this.state = 7851;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 7874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 7874;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1094, this._ctx) ) {
					case 1:
						{
						this.state = 7853;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7852;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7855;
						this.match(TSqlParser.FILE);
						this.state = 7856;
						this.match(TSqlParser.EQUAL);
						this.state = 7857;
						_localctx._private_key_file = this.match(TSqlParser.STRING);
						}
						break;

					case 2:
						{
						this.state = 7859;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7858;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7861;
						this.match(TSqlParser.ENCRYPTION);
						this.state = 7862;
						this.match(TSqlParser.BY);
						this.state = 7863;
						this.match(TSqlParser.PASSWORD);
						this.state = 7864;
						this.match(TSqlParser.EQUAL);
						this.state = 7865;
						_localctx._encryption_password = this.match(TSqlParser.STRING);
						}
						break;

					case 3:
						{
						this.state = 7867;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 7866;
							this.match(TSqlParser.COMMA);
							}
						}

						this.state = 7869;
						this.match(TSqlParser.DECRYPTION);
						this.state = 7870;
						this.match(TSqlParser.BY);
						this.state = 7871;
						this.match(TSqlParser.PASSWORD);
						this.state = 7872;
						this.match(TSqlParser.EQUAL);
						this.state = 7873;
						_localctx._decryption_pasword = this.match(TSqlParser.STRING);
						}
						break;
					}
					}
					this.state = 7876;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.FILE || _la === TSqlParser.DECRYPTION || _la === TSqlParser.ENCRYPTION || _la === TSqlParser.COMMA);
				this.state = 7878;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backup_master_key(): Backup_master_keyContext {
		let _localctx: Backup_master_keyContext = new Backup_master_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, TSqlParser.RULE_backup_master_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7881;
			this.match(TSqlParser.BACKUP);
			this.state = 7882;
			this.match(TSqlParser.MASTER);
			this.state = 7883;
			this.match(TSqlParser.KEY);
			this.state = 7884;
			this.match(TSqlParser.TO);
			this.state = 7885;
			this.match(TSqlParser.FILE);
			this.state = 7886;
			this.match(TSqlParser.EQUAL);
			this.state = 7887;
			_localctx._master_key_backup_file = this.match(TSqlParser.STRING);
			this.state = 7888;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 7889;
			this.match(TSqlParser.BY);
			this.state = 7890;
			this.match(TSqlParser.PASSWORD);
			this.state = 7891;
			this.match(TSqlParser.EQUAL);
			this.state = 7892;
			_localctx._encryption_password = this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backup_service_master_key(): Backup_service_master_keyContext {
		let _localctx: Backup_service_master_keyContext = new Backup_service_master_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, TSqlParser.RULE_backup_service_master_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7894;
			this.match(TSqlParser.BACKUP);
			this.state = 7895;
			this.match(TSqlParser.SERVICE);
			this.state = 7896;
			this.match(TSqlParser.MASTER);
			this.state = 7897;
			this.match(TSqlParser.KEY);
			this.state = 7898;
			this.match(TSqlParser.TO);
			this.state = 7899;
			this.match(TSqlParser.FILE);
			this.state = 7900;
			this.match(TSqlParser.EQUAL);
			this.state = 7901;
			_localctx._service_master_key_backup_file = this.match(TSqlParser.STRING);
			this.state = 7902;
			this.match(TSqlParser.ENCRYPTION);
			this.state = 7903;
			this.match(TSqlParser.BY);
			this.state = 7904;
			this.match(TSqlParser.PASSWORD);
			this.state = 7905;
			this.match(TSqlParser.EQUAL);
			this.state = 7906;
			_localctx._encryption_password = this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_statement(): Execute_statementContext {
		let _localctx: Execute_statementContext = new Execute_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, TSqlParser.RULE_execute_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7908;
			this.match(TSqlParser.EXECUTE);
			this.state = 7909;
			this.execute_body();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_body(): Execute_bodyContext {
		let _localctx: Execute_bodyContext = new Execute_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, TSqlParser.RULE_execute_body);
		let _la: number;
		try {
			this.state = 7953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1106, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7913;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1097, this._ctx) ) {
				case 1:
					{
					this.state = 7911;
					_localctx._return_status = this.match(TSqlParser.LOCAL_ID);
					this.state = 7912;
					this.match(TSqlParser.EQUAL);
					}
					break;
				}
				this.state = 7917;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1098, this._ctx) ) {
				case 1:
					{
					this.state = 7915;
					this.func_proc_name();
					}
					break;

				case 2:
					{
					this.state = 7916;
					this.expression(0);
					}
					break;
				}
				this.state = 7927;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1100, this._ctx) ) {
				case 1:
					{
					this.state = 7919;
					this.execute_statement_arg();
					this.state = 7924;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.COMMA) {
						{
						{
						this.state = 7920;
						this.match(TSqlParser.COMMA);
						this.state = 7921;
						this.execute_statement_arg();
						}
						}
						this.state = 7926;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				}
				this.state = 7930;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1101, this._ctx) ) {
				case 1:
					{
					this.state = 7929;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7932;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 7933;
				this.execute_var_string();
				this.state = 7938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.PLUS) {
					{
					{
					this.state = 7934;
					this.match(TSqlParser.PLUS);
					this.state = 7935;
					this.execute_var_string();
					}
					}
					this.state = 7940;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7941;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 7948;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1104, this._ctx) ) {
				case 1:
					{
					this.state = 7943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.AS) {
						{
						this.state = 7942;
						this.match(TSqlParser.AS);
						}
					}

					this.state = 7945;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.USER || _la === TSqlParser.LOGIN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7946;
					this.match(TSqlParser.EQUAL);
					this.state = 7947;
					this.match(TSqlParser.STRING);
					}
					break;
				}
				this.state = 7951;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1105, this._ctx) ) {
				case 1:
					{
					this.state = 7950;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_statement_arg(): Execute_statement_argContext {
		let _localctx: Execute_statement_argContext = new Execute_statement_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, TSqlParser.RULE_execute_statement_arg);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7957;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1107, this._ctx) ) {
			case 1:
				{
				this.state = 7955;
				_localctx._parameter = this.match(TSqlParser.LOCAL_ID);
				this.state = 7956;
				this.match(TSqlParser.EQUAL);
				}
				break;
			}
			this.state = 7968;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.LOCAL_ID:
			case TSqlParser.DECIMAL:
			case TSqlParser.ID:
			case TSqlParser.STRING:
			case TSqlParser.BINARY:
			case TSqlParser.FLOAT:
			case TSqlParser.REAL:
			case TSqlParser.DOLLAR:
			case TSqlParser.PLUS:
			case TSqlParser.MINUS:
				{
				this.state = 7961;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.LOCAL_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
					{
					this.state = 7959;
					this.constant_LOCAL_ID();
					}
					break;
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 7960;
					this.id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7964;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1109, this._ctx) ) {
				case 1:
					{
					this.state = 7963;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OUT || _la === TSqlParser.OUTPUT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case TSqlParser.DEFAULT:
				{
				this.state = 7966;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			case TSqlParser.NULL:
				{
				this.state = 7967;
				this.match(TSqlParser.NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_var_string(): Execute_var_stringContext {
		let _localctx: Execute_var_stringContext = new Execute_var_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, TSqlParser.RULE_execute_var_string);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7970;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security_statement(): Security_statementContext {
		let _localctx: Security_statementContext = new Security_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, TSqlParser.RULE_security_statement);
		let _la: number;
		try {
			this.state = 8031;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1122, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7972;
				this.execute_clause();
				this.state = 7974;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1111, this._ctx) ) {
				case 1:
					{
					this.state = 7973;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7976;
				this.match(TSqlParser.GRANT);
				this.state = 7988;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.ALL:
					{
					this.state = 7977;
					this.match(TSqlParser.ALL);
					this.state = 7979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.PRIVILEGES) {
						{
						this.state = 7978;
						this.match(TSqlParser.PRIVILEGES);
						}
					}

					}
					break;
				case TSqlParser.ALTER:
				case TSqlParser.CREATE:
				case TSqlParser.EXECUTE:
				case TSqlParser.INSERT:
				case TSqlParser.REFERENCES:
				case TSqlParser.SELECT:
				case TSqlParser.VIEW:
				case TSqlParser.CONTROL:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.TAKE:
					{
					this.state = 7981;
					this.grant_permission();
					this.state = 7986;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.LR_BRACKET) {
						{
						this.state = 7982;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 7983;
						this.column_name_list();
						this.state = 7984;
						this.match(TSqlParser.RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7992;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ON) {
					{
					this.state = 7990;
					this.match(TSqlParser.ON);
					this.state = 7991;
					_localctx._on_id = this.table_name();
					}
				}

				this.state = 7994;
				this.match(TSqlParser.TO);
				{
				this.state = 7995;
				_localctx._id = this.id();
				_localctx._to_principal.push(_localctx._id);
				}
				this.state = 8000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 7996;
					this.match(TSqlParser.COMMA);
					this.state = 7997;
					_localctx._id = this.id();
					_localctx._to_principal.push(_localctx._id);
					}
					}
					this.state = 8002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8006;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1117, this._ctx) ) {
				case 1:
					{
					this.state = 8003;
					this.match(TSqlParser.WITH);
					this.state = 8004;
					this.match(TSqlParser.GRANT);
					this.state = 8005;
					this.match(TSqlParser.OPTION);
					}
					break;
				}
				this.state = 8010;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AS) {
					{
					this.state = 8008;
					this.match(TSqlParser.AS);
					this.state = 8009;
					_localctx._as_principal = this.id();
					}
				}

				this.state = 8013;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1119, this._ctx) ) {
				case 1:
					{
					this.state = 8012;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8015;
				this.match(TSqlParser.REVERT);
				this.state = 8022;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1120, this._ctx) ) {
				case 1:
					{
					this.state = 8016;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 8017;
					this.match(TSqlParser.WITH);
					this.state = 8018;
					this.match(TSqlParser.COOKIE);
					this.state = 8019;
					this.match(TSqlParser.EQUAL);
					this.state = 8020;
					this.match(TSqlParser.LOCAL_ID);
					this.state = 8021;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 8025;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1121, this._ctx) ) {
				case 1:
					{
					this.state = 8024;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8027;
				this.open_key();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8028;
				this.close_key();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 8029;
				this.create_key();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 8030;
				this.create_certificate();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_certificate(): Create_certificateContext {
		let _localctx: Create_certificateContext = new Create_certificateContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, TSqlParser.RULE_create_certificate);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8033;
			this.match(TSqlParser.CREATE);
			this.state = 8034;
			this.match(TSqlParser.CERTIFICATE);
			this.state = 8035;
			_localctx._certificate_name = this.id();
			this.state = 8038;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AUTHORIZATION) {
				{
				this.state = 8036;
				this.match(TSqlParser.AUTHORIZATION);
				this.state = 8037;
				_localctx._user_name = this.id();
				}
			}

			this.state = 8043;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.FROM:
				{
				this.state = 8040;
				this.match(TSqlParser.FROM);
				this.state = 8041;
				this.existing_keys();
				}
				break;
			case TSqlParser.WITH:
			case TSqlParser.ENCRYPTION:
				{
				this.state = 8042;
				this.generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 8051;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1125, this._ctx) ) {
			case 1:
				{
				this.state = 8045;
				this.match(TSqlParser.ACTIVE);
				this.state = 8046;
				this.match(TSqlParser.FOR);
				this.state = 8047;
				this.match(TSqlParser.BEGIN);
				this.state = 8048;
				this.match(TSqlParser.DIALOG);
				this.state = 8049;
				this.match(TSqlParser.EQUAL);
				this.state = 8050;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public existing_keys(): Existing_keysContext {
		let _localctx: Existing_keysContext = new Existing_keysContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, TSqlParser.RULE_existing_keys);
		let _la: number;
		try {
			this.state = 8070;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.ASSEMBLY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8053;
				this.match(TSqlParser.ASSEMBLY);
				this.state = 8054;
				_localctx._assembly_name = this.id();
				}
				break;
			case TSqlParser.FILE:
			case TSqlParser.EXECUTABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.EXECUTABLE) {
					{
					this.state = 8055;
					this.match(TSqlParser.EXECUTABLE);
					}
				}

				this.state = 8058;
				this.match(TSqlParser.FILE);
				this.state = 8059;
				this.match(TSqlParser.EQUAL);
				this.state = 8060;
				_localctx._path_to_file = this.match(TSqlParser.STRING);
				this.state = 8068;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1127, this._ctx) ) {
				case 1:
					{
					this.state = 8061;
					this.match(TSqlParser.WITH);
					this.state = 8062;
					this.match(TSqlParser.PRIVATE);
					this.state = 8063;
					this.match(TSqlParser.KEY);
					this.state = 8064;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 8065;
					this.private_key_options();
					this.state = 8066;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public private_key_options(): Private_key_optionsContext {
		let _localctx: Private_key_optionsContext = new Private_key_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, TSqlParser.RULE_private_key_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8072;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.FILE || _la === TSqlParser.BINARY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 8073;
			this.match(TSqlParser.EQUAL);
			this.state = 8074;
			_localctx._path = this.match(TSqlParser.STRING);
			this.state = 8081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 8075;
				this.match(TSqlParser.COMMA);
				this.state = 8076;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DECRYPTION || _la === TSqlParser.ENCRYPTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8077;
				this.match(TSqlParser.BY);
				this.state = 8078;
				this.match(TSqlParser.PASSWORD);
				this.state = 8079;
				this.match(TSqlParser.EQUAL);
				this.state = 8080;
				_localctx._password = this.match(TSqlParser.STRING);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generate_new_keys(): Generate_new_keysContext {
		let _localctx: Generate_new_keysContext = new Generate_new_keysContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, TSqlParser.RULE_generate_new_keys);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ENCRYPTION) {
				{
				this.state = 8083;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 8084;
				this.match(TSqlParser.BY);
				this.state = 8085;
				this.match(TSqlParser.PASSWORD);
				this.state = 8086;
				this.match(TSqlParser.EQUAL);
				this.state = 8087;
				_localctx._password = this.match(TSqlParser.STRING);
				}
			}

			this.state = 8090;
			this.match(TSqlParser.WITH);
			this.state = 8091;
			this.match(TSqlParser.SUBJECT);
			this.state = 8092;
			this.match(TSqlParser.EQUAL);
			this.state = 8093;
			_localctx._certificate_subject_name = this.match(TSqlParser.STRING);
			this.state = 8098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 8094;
				this.match(TSqlParser.COMMA);
				this.state = 8095;
				this.date_options();
				}
				}
				this.state = 8100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_options(): Date_optionsContext {
		let _localctx: Date_optionsContext = new Date_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, TSqlParser.RULE_date_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8101;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.EXPIRY_DATE || _la === TSqlParser.START_DATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 8102;
			this.match(TSqlParser.EQUAL);
			this.state = 8103;
			this.match(TSqlParser.STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_key(): Open_keyContext {
		let _localctx: Open_keyContext = new Open_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, TSqlParser.RULE_open_key);
		try {
			this.state = 8121;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1132, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8105;
				this.match(TSqlParser.OPEN);
				this.state = 8106;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 8107;
				this.match(TSqlParser.KEY);
				this.state = 8108;
				_localctx._key_name = this.id();
				this.state = 8109;
				this.match(TSqlParser.DECRYPTION);
				this.state = 8110;
				this.match(TSqlParser.BY);
				this.state = 8111;
				this.decryption_mechanism();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8113;
				this.match(TSqlParser.OPEN);
				this.state = 8114;
				this.match(TSqlParser.MASTER);
				this.state = 8115;
				this.match(TSqlParser.KEY);
				this.state = 8116;
				this.match(TSqlParser.DECRYPTION);
				this.state = 8117;
				this.match(TSqlParser.BY);
				this.state = 8118;
				this.match(TSqlParser.PASSWORD);
				this.state = 8119;
				this.match(TSqlParser.EQUAL);
				this.state = 8120;
				_localctx._password = this.match(TSqlParser.STRING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_key(): Close_keyContext {
		let _localctx: Close_keyContext = new Close_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, TSqlParser.RULE_close_key);
		try {
			this.state = 8134;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1133, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8123;
				this.match(TSqlParser.CLOSE);
				this.state = 8124;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 8125;
				this.match(TSqlParser.KEY);
				this.state = 8126;
				_localctx._key_name = this.id();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8127;
				this.match(TSqlParser.CLOSE);
				this.state = 8128;
				this.match(TSqlParser.ALL);
				this.state = 8129;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 8130;
				this.match(TSqlParser.KEYS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8131;
				this.match(TSqlParser.CLOSE);
				this.state = 8132;
				this.match(TSqlParser.MASTER);
				this.state = 8133;
				this.match(TSqlParser.KEY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_key(): Create_keyContext {
		let _localctx: Create_keyContext = new Create_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, TSqlParser.RULE_create_key);
		let _la: number;
		try {
			let _alt: number;
			this.state = 8171;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1139, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8136;
				this.match(TSqlParser.CREATE);
				this.state = 8137;
				this.match(TSqlParser.MASTER);
				this.state = 8138;
				this.match(TSqlParser.KEY);
				this.state = 8139;
				this.match(TSqlParser.ENCRYPTION);
				this.state = 8140;
				this.match(TSqlParser.BY);
				this.state = 8141;
				this.match(TSqlParser.PASSWORD);
				this.state = 8142;
				this.match(TSqlParser.EQUAL);
				this.state = 8143;
				_localctx._password = this.match(TSqlParser.STRING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8144;
				this.match(TSqlParser.CREATE);
				this.state = 8145;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 8146;
				this.match(TSqlParser.KEY);
				this.state = 8147;
				_localctx._key_name = this.id();
				this.state = 8150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.AUTHORIZATION) {
					{
					this.state = 8148;
					this.match(TSqlParser.AUTHORIZATION);
					this.state = 8149;
					_localctx._user_name = this.id();
					}
				}

				this.state = 8155;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FROM) {
					{
					this.state = 8152;
					this.match(TSqlParser.FROM);
					this.state = 8153;
					this.match(TSqlParser.PROVIDER);
					this.state = 8154;
					_localctx._provider_name = this.id();
					}
				}

				this.state = 8157;
				this.match(TSqlParser.WITH);
				this.state = 8167;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 8162;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case TSqlParser.ALGORITHM:
						case TSqlParser.CREATION_DISPOSITION:
						case TSqlParser.IDENTITY_VALUE:
						case TSqlParser.KEY_SOURCE:
						case TSqlParser.PROVIDER_KEY_NAME:
							{
							this.state = 8158;
							this.key_options();
							}
							break;
						case TSqlParser.ENCRYPTION:
							{
							this.state = 8159;
							this.match(TSqlParser.ENCRYPTION);
							this.state = 8160;
							this.match(TSqlParser.BY);
							this.state = 8161;
							this.encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 8165;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.COMMA) {
							{
							this.state = 8164;
							this.match(TSqlParser.COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 8169;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1138, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_options(): Key_optionsContext {
		let _localctx: Key_optionsContext = new Key_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, TSqlParser.RULE_key_options);
		let _la: number;
		try {
			this.state = 8188;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.KEY_SOURCE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8173;
				this.match(TSqlParser.KEY_SOURCE);
				this.state = 8174;
				this.match(TSqlParser.EQUAL);
				this.state = 8175;
				_localctx._pass_phrase = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.ALGORITHM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8176;
				this.match(TSqlParser.ALGORITHM);
				this.state = 8177;
				this.match(TSqlParser.EQUAL);
				this.state = 8178;
				this.algorithm();
				}
				break;
			case TSqlParser.IDENTITY_VALUE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8179;
				this.match(TSqlParser.IDENTITY_VALUE);
				this.state = 8180;
				this.match(TSqlParser.EQUAL);
				this.state = 8181;
				_localctx._identity_phrase = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.PROVIDER_KEY_NAME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8182;
				this.match(TSqlParser.PROVIDER_KEY_NAME);
				this.state = 8183;
				this.match(TSqlParser.EQUAL);
				this.state = 8184;
				_localctx._key_name_in_provider = this.match(TSqlParser.STRING);
				}
				break;
			case TSqlParser.CREATION_DISPOSITION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8185;
				this.match(TSqlParser.CREATION_DISPOSITION);
				this.state = 8186;
				this.match(TSqlParser.EQUAL);
				this.state = 8187;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.CREATE_NEW || _la === TSqlParser.OPEN_EXISTING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public algorithm(): AlgorithmContext {
		let _localctx: AlgorithmContext = new AlgorithmContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, TSqlParser.RULE_algorithm);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8190;
			_la = this._input.LA(1);
			if (!(((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) !== 0) || _la === TSqlParser.DES || _la === TSqlParser.DESX || ((((_la - 663)) & ~0x1F) === 0 && ((1 << (_la - 663)) & ((1 << (TSqlParser.RC2 - 663)) | (1 << (TSqlParser.RC4 - 663)) | (1 << (TSqlParser.RC4_128 - 663)))) !== 0) || _la === TSqlParser.TRIPLE_DES || _la === TSqlParser.TRIPLE_DES_3KEY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public encryption_mechanism(): Encryption_mechanismContext {
		let _localctx: Encryption_mechanismContext = new Encryption_mechanismContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, TSqlParser.RULE_encryption_mechanism);
		try {
			this.state = 8203;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CERTIFICATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8192;
				this.match(TSqlParser.CERTIFICATE);
				this.state = 8193;
				_localctx._certificate_name = this.id();
				}
				break;
			case TSqlParser.ASYMMETRIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8194;
				this.match(TSqlParser.ASYMMETRIC);
				this.state = 8195;
				this.match(TSqlParser.KEY);
				this.state = 8196;
				_localctx._asym_key_name = this.id();
				}
				break;
			case TSqlParser.SYMMETRIC:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8197;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 8198;
				this.match(TSqlParser.KEY);
				this.state = 8199;
				_localctx._decrypting_Key_name = this.id();
				}
				break;
			case TSqlParser.PASSWORD:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8200;
				this.match(TSqlParser.PASSWORD);
				this.state = 8201;
				this.match(TSqlParser.EQUAL);
				this.state = 8202;
				this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decryption_mechanism(): Decryption_mechanismContext {
		let _localctx: Decryption_mechanismContext = new Decryption_mechanismContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, TSqlParser.RULE_decryption_mechanism);
		try {
			this.state = 8228;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CERTIFICATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8205;
				this.match(TSqlParser.CERTIFICATE);
				this.state = 8206;
				_localctx._certificate_name = this.id();
				this.state = 8211;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1142, this._ctx) ) {
				case 1:
					{
					this.state = 8207;
					this.match(TSqlParser.WITH);
					this.state = 8208;
					this.match(TSqlParser.PASSWORD);
					this.state = 8209;
					this.match(TSqlParser.EQUAL);
					this.state = 8210;
					this.match(TSqlParser.STRING);
					}
					break;
				}
				}
				break;
			case TSqlParser.ASYMMETRIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8213;
				this.match(TSqlParser.ASYMMETRIC);
				this.state = 8214;
				this.match(TSqlParser.KEY);
				this.state = 8215;
				_localctx._asym_key_name = this.id();
				this.state = 8220;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1143, this._ctx) ) {
				case 1:
					{
					this.state = 8216;
					this.match(TSqlParser.WITH);
					this.state = 8217;
					this.match(TSqlParser.PASSWORD);
					this.state = 8218;
					this.match(TSqlParser.EQUAL);
					this.state = 8219;
					this.match(TSqlParser.STRING);
					}
					break;
				}
				}
				break;
			case TSqlParser.SYMMETRIC:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8222;
				this.match(TSqlParser.SYMMETRIC);
				this.state = 8223;
				this.match(TSqlParser.KEY);
				this.state = 8224;
				_localctx._decrypting_Key_name = this.id();
				}
				break;
			case TSqlParser.PASSWORD:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8225;
				this.match(TSqlParser.PASSWORD);
				this.state = 8226;
				this.match(TSqlParser.EQUAL);
				this.state = 8227;
				this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant_permission(): Grant_permissionContext {
		let _localctx: Grant_permissionContext = new Grant_permissionContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, TSqlParser.RULE_grant_permission);
		let _la: number;
		try {
			this.state = 8256;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8230;
				this.match(TSqlParser.EXECUTE);
				}
				break;
			case TSqlParser.VIEW:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8231;
				this.match(TSqlParser.VIEW);
				this.state = 8232;
				this.id();
				}
				break;
			case TSqlParser.TAKE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8233;
				this.match(TSqlParser.TAKE);
				this.state = 8234;
				this.id();
				}
				break;
			case TSqlParser.CONTROL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8235;
				this.match(TSqlParser.CONTROL);
				this.state = 8237;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
					{
					this.state = 8236;
					this.id();
					}
				}

				}
				break;
			case TSqlParser.CREATE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8239;
				this.match(TSqlParser.CREATE);
				this.state = 8240;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TABLE || _la === TSqlParser.VIEW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.SHOWPLAN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 8241;
				this.match(TSqlParser.SHOWPLAN);
				}
				break;
			case TSqlParser.IMPERSONATE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 8242;
				this.match(TSqlParser.IMPERSONATE);
				}
				break;
			case TSqlParser.SELECT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 8243;
				this.match(TSqlParser.SELECT);
				}
				break;
			case TSqlParser.REFERENCES:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 8244;
				this.match(TSqlParser.REFERENCES);
				}
				break;
			case TSqlParser.INSERT:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 8245;
				this.match(TSqlParser.INSERT);
				}
				break;
			case TSqlParser.ALTER:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 8246;
				this.match(TSqlParser.ALTER);
				this.state = 8254;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ANY || _la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || _la === TSqlParser.DATABASE || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
					{
					this.state = 8248;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.ANY) {
						{
						this.state = 8247;
						this.match(TSqlParser.ANY);
						}
					}

					this.state = 8252;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.CALLED:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.INIT:
					case TSqlParser.KEY:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.ID:
						{
						this.state = 8250;
						this.id();
						}
						break;
					case TSqlParser.DATABASE:
						{
						this.state = 8251;
						this.match(TSqlParser.DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_statement(): Set_statementContext {
		let _localctx: Set_statementContext = new Set_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, TSqlParser.RULE_set_statement);
		let _la: number;
		try {
			this.state = 8297;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1157, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8258;
				this.match(TSqlParser.SET);
				this.state = 8259;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 8262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.DOT) {
					{
					this.state = 8260;
					this.match(TSqlParser.DOT);
					this.state = 8261;
					_localctx._member_name = this.id();
					}
				}

				this.state = 8264;
				this.match(TSqlParser.EQUAL);
				this.state = 8265;
				this.expression(0);
				this.state = 8267;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1151, this._ctx) ) {
				case 1:
					{
					this.state = 8266;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8269;
				this.match(TSqlParser.SET);
				this.state = 8270;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 8271;
				this.assignment_operator();
				this.state = 8272;
				this.expression(0);
				this.state = 8274;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1152, this._ctx) ) {
				case 1:
					{
					this.state = 8273;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8276;
				this.match(TSqlParser.SET);
				this.state = 8277;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 8278;
				this.match(TSqlParser.EQUAL);
				this.state = 8279;
				this.match(TSqlParser.CURSOR);
				this.state = 8280;
				this.declare_set_cursor_common();
				this.state = 8291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FOR) {
					{
					this.state = 8281;
					this.match(TSqlParser.FOR);
					this.state = 8289;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.READ:
						{
						this.state = 8282;
						this.match(TSqlParser.READ);
						this.state = 8283;
						this.match(TSqlParser.ONLY);
						}
						break;
					case TSqlParser.UPDATE:
						{
						this.state = 8284;
						this.match(TSqlParser.UPDATE);
						this.state = 8287;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.OF) {
							{
							this.state = 8285;
							this.match(TSqlParser.OF);
							this.state = 8286;
							this.column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 8294;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1156, this._ctx) ) {
				case 1:
					{
					this.state = 8293;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8296;
				this.set_special();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_statement(): Transaction_statementContext {
		let _localctx: Transaction_statementContext = new Transaction_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, TSqlParser.RULE_transaction_statement);
		let _la: number;
		try {
			this.state = 8380;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1176, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8299;
				this.match(TSqlParser.BEGIN);
				this.state = 8300;
				this.match(TSqlParser.DISTRIBUTED);
				this.state = 8301;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TRAN || _la === TSqlParser.TRANSACTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8304;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1158, this._ctx) ) {
				case 1:
					{
					this.state = 8302;
					this.id();
					}
					break;

				case 2:
					{
					this.state = 8303;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;
				}
				this.state = 8307;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1159, this._ctx) ) {
				case 1:
					{
					this.state = 8306;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8309;
				this.match(TSqlParser.BEGIN);
				this.state = 8310;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TRAN || _la === TSqlParser.TRANSACTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8320;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1162, this._ctx) ) {
				case 1:
					{
					this.state = 8313;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.CALLED:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.INIT:
					case TSqlParser.KEY:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.ID:
						{
						this.state = 8311;
						this.id();
						}
						break;
					case TSqlParser.LOCAL_ID:
						{
						this.state = 8312;
						this.match(TSqlParser.LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 8318;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1161, this._ctx) ) {
					case 1:
						{
						this.state = 8315;
						this.match(TSqlParser.WITH);
						this.state = 8316;
						this.match(TSqlParser.MARK);
						this.state = 8317;
						this.match(TSqlParser.STRING);
						}
						break;
					}
					}
					break;
				}
				this.state = 8323;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1163, this._ctx) ) {
				case 1:
					{
					this.state = 8322;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8325;
				this.match(TSqlParser.COMMIT);
				this.state = 8326;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TRAN || _la === TSqlParser.TRANSACTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8339;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1166, this._ctx) ) {
				case 1:
					{
					this.state = 8329;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.CALLED:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.INIT:
					case TSqlParser.KEY:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.ID:
						{
						this.state = 8327;
						this.id();
						}
						break;
					case TSqlParser.LOCAL_ID:
						{
						this.state = 8328;
						this.match(TSqlParser.LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 8337;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1165, this._ctx) ) {
					case 1:
						{
						this.state = 8331;
						this.match(TSqlParser.WITH);
						this.state = 8332;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 8333;
						this.match(TSqlParser.DELAYED_DURABILITY);
						this.state = 8334;
						this.match(TSqlParser.EQUAL);
						this.state = 8335;
						_la = this._input.LA(1);
						if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 8336;
						this.match(TSqlParser.RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				this.state = 8342;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1167, this._ctx) ) {
				case 1:
					{
					this.state = 8341;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8344;
				this.match(TSqlParser.COMMIT);
				this.state = 8346;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1168, this._ctx) ) {
				case 1:
					{
					this.state = 8345;
					this.match(TSqlParser.WORK);
					}
					break;
				}
				this.state = 8349;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1169, this._ctx) ) {
				case 1:
					{
					this.state = 8348;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8351;
				this.match(TSqlParser.COMMIT);
				this.state = 8352;
				this.id();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 8353;
				this.match(TSqlParser.ROLLBACK);
				this.state = 8354;
				this.id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 8355;
				this.match(TSqlParser.ROLLBACK);
				this.state = 8356;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TRAN || _la === TSqlParser.TRANSACTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8359;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1170, this._ctx) ) {
				case 1:
					{
					this.state = 8357;
					this.id();
					}
					break;

				case 2:
					{
					this.state = 8358;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;
				}
				this.state = 8362;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1171, this._ctx) ) {
				case 1:
					{
					this.state = 8361;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 8364;
				this.match(TSqlParser.ROLLBACK);
				this.state = 8366;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1172, this._ctx) ) {
				case 1:
					{
					this.state = 8365;
					this.match(TSqlParser.WORK);
					}
					break;
				}
				this.state = 8369;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1173, this._ctx) ) {
				case 1:
					{
					this.state = 8368;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 8371;
				this.match(TSqlParser.SAVE);
				this.state = 8372;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.TRAN || _la === TSqlParser.TRANSACTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8375;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1174, this._ctx) ) {
				case 1:
					{
					this.state = 8373;
					this.id();
					}
					break;

				case 2:
					{
					this.state = 8374;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;
				}
				this.state = 8378;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1175, this._ctx) ) {
				case 1:
					{
					this.state = 8377;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public go_statement(): Go_statementContext {
		let _localctx: Go_statementContext = new Go_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, TSqlParser.RULE_go_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8382;
			this.match(TSqlParser.GO);
			this.state = 8384;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1177, this._ctx) ) {
			case 1:
				{
				this.state = 8383;
				_localctx._count = this.match(TSqlParser.DECIMAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_statement(): Use_statementContext {
		let _localctx: Use_statementContext = new Use_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, TSqlParser.RULE_use_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8386;
			this.match(TSqlParser.USE);
			this.state = 8387;
			_localctx._database = this.id();
			this.state = 8389;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1178, this._ctx) ) {
			case 1:
				{
				this.state = 8388;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setuser_statement(): Setuser_statementContext {
		let _localctx: Setuser_statementContext = new Setuser_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, TSqlParser.RULE_setuser_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8391;
			this.match(TSqlParser.SETUSER);
			this.state = 8393;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1179, this._ctx) ) {
			case 1:
				{
				this.state = 8392;
				_localctx._user = this.match(TSqlParser.STRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dbcc_clause(): Dbcc_clauseContext {
		let _localctx: Dbcc_clauseContext = new Dbcc_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, TSqlParser.RULE_dbcc_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8395;
			this.match(TSqlParser.DBCC);
			this.state = 8396;
			_localctx._name = this.simple_id();
			this.state = 8401;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1180, this._ctx) ) {
			case 1:
				{
				this.state = 8397;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8398;
				this.expression_list();
				this.state = 8399;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 8405;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1181, this._ctx) ) {
			case 1:
				{
				this.state = 8403;
				this.match(TSqlParser.WITH);
				this.state = 8404;
				this.dbcc_options();
				}
				break;
			}
			this.state = 8408;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1182, this._ctx) ) {
			case 1:
				{
				this.state = 8407;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dbcc_options(): Dbcc_optionsContext {
		let _localctx: Dbcc_optionsContext = new Dbcc_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, TSqlParser.RULE_dbcc_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8410;
			this.simple_id();
			this.state = 8413;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 8411;
				this.match(TSqlParser.COMMA);
				this.state = 8412;
				this.simple_id();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_clause(): Execute_clauseContext {
		let _localctx: Execute_clauseContext = new Execute_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, TSqlParser.RULE_execute_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8415;
			this.match(TSqlParser.EXECUTE);
			this.state = 8416;
			this.match(TSqlParser.AS);
			this.state = 8417;
			_localctx._clause = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.CALLER || _la === TSqlParser.OWNER || _la === TSqlParser.SELF || _la === TSqlParser.STRING)) {
				_localctx._clause = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_local(): Declare_localContext {
		let _localctx: Declare_localContext = new Declare_localContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, TSqlParser.RULE_declare_local);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8419;
			this.match(TSqlParser.LOCAL_ID);
			this.state = 8421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 8420;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 8423;
			this.data_type();
			this.state = 8426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.EQUAL) {
				{
				this.state = 8424;
				this.match(TSqlParser.EQUAL);
				this.state = 8425;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_type_definition(): Table_type_definitionContext {
		let _localctx: Table_type_definitionContext = new Table_type_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, TSqlParser.RULE_table_type_definition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8428;
			this.match(TSqlParser.TABLE);
			this.state = 8429;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 8430;
			this.column_def_table_constraints();
			this.state = 8431;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_type_definition(): Xml_type_definitionContext {
		let _localctx: Xml_type_definitionContext = new Xml_type_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, TSqlParser.RULE_xml_type_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8433;
			this.match(TSqlParser.XML);
			this.state = 8434;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 8436;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONTENT || _la === TSqlParser.DOCUMENT) {
				{
				this.state = 8435;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.CONTENT || _la === TSqlParser.DOCUMENT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 8438;
			this.xml_schema_collection();
			this.state = 8439;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_schema_collection(): Xml_schema_collectionContext {
		let _localctx: Xml_schema_collectionContext = new Xml_schema_collectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, TSqlParser.RULE_xml_schema_collection);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8441;
			this.match(TSqlParser.ID);
			this.state = 8442;
			this.match(TSqlParser.DOT);
			this.state = 8443;
			this.match(TSqlParser.ID);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_def_table_constraints(): Column_def_table_constraintsContext {
		let _localctx: Column_def_table_constraintsContext = new Column_def_table_constraintsContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, TSqlParser.RULE_column_def_table_constraints);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8445;
			this.column_def_table_constraint();
			this.state = 8452;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1188, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8447;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 8446;
						this.match(TSqlParser.COMMA);
						}
					}

					this.state = 8449;
					this.column_def_table_constraint();
					}
					}
				}
				this.state = 8454;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1188, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_def_table_constraint(): Column_def_table_constraintContext {
		let _localctx: Column_def_table_constraintContext = new Column_def_table_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, TSqlParser.RULE_column_def_table_constraint);
		try {
			this.state = 8458;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1189, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8455;
				this.column_definition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8456;
				this.materialized_column_definition();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8457;
				this.table_constraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_definition(): Column_definitionContext {
		let _localctx: Column_definitionContext = new Column_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, TSqlParser.RULE_column_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8460;
			this.id();
			this.state = 8464;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.DOUBLE:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				{
				this.state = 8461;
				this.data_type();
				}
				break;
			case TSqlParser.AS:
				{
				this.state = 8462;
				this.match(TSqlParser.AS);
				this.state = 8463;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 8468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COLLATE) {
				{
				this.state = 8466;
				this.match(TSqlParser.COLLATE);
				this.state = 8467;
				this.id();
				}
			}

			this.state = 8471;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1192, this._ctx) ) {
			case 1:
				{
				this.state = 8470;
				this.null_notnull();
				}
				break;
			}
			this.state = 8494;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1197, this._ctx) ) {
			case 1:
				{
				this.state = 8475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CONSTRAINT) {
					{
					this.state = 8473;
					this.match(TSqlParser.CONSTRAINT);
					this.state = 8474;
					_localctx._constraint = this.id();
					}
				}

				this.state = 8477;
				this.null_or_default();
				this.state = 8479;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1194, this._ctx) ) {
				case 1:
					{
					this.state = 8478;
					this.null_or_default();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 8481;
				this.match(TSqlParser.IDENTITY);
				this.state = 8487;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1195, this._ctx) ) {
				case 1:
					{
					this.state = 8482;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 8483;
					_localctx._seed = this.match(TSqlParser.DECIMAL);
					this.state = 8484;
					this.match(TSqlParser.COMMA);
					this.state = 8485;
					_localctx._increment = this.match(TSqlParser.DECIMAL);
					this.state = 8486;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 8492;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1196, this._ctx) ) {
				case 1:
					{
					this.state = 8489;
					this.match(TSqlParser.NOT);
					this.state = 8490;
					this.match(TSqlParser.FOR);
					this.state = 8491;
					this.match(TSqlParser.REPLICATION);
					}
					break;
				}
				}
				break;
			}
			this.state = 8497;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ROWGUIDCOL) {
				{
				this.state = 8496;
				this.match(TSqlParser.ROWGUIDCOL);
				}
			}

			this.state = 8502;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1199, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8499;
					this.column_constraint();
					}
					}
				}
				this.state = 8504;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1199, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public materialized_column_definition(): Materialized_column_definitionContext {
		let _localctx: Materialized_column_definitionContext = new Materialized_column_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, TSqlParser.RULE_materialized_column_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8505;
			this.id();
			this.state = 8506;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.AS || _la === TSqlParser.COMPUTE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 8507;
			this.expression(0);
			this.state = 8511;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1200, this._ctx) ) {
			case 1:
				{
				this.state = 8508;
				this.match(TSqlParser.MATERIALIZED);
				}
				break;

			case 2:
				{
				this.state = 8509;
				this.match(TSqlParser.NOT);
				this.state = 8510;
				this.match(TSqlParser.MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_constraint(): Column_constraintContext {
		let _localctx: Column_constraintContext = new Column_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, TSqlParser.RULE_column_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8515;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONSTRAINT) {
				{
				this.state = 8513;
				this.match(TSqlParser.CONSTRAINT);
				this.state = 8514;
				_localctx._constraint = this.id();
				}
			}

			this.state = 8554;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.PRIMARY:
			case TSqlParser.UNIQUE:
				{
				this.state = 8520;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.PRIMARY:
					{
					this.state = 8517;
					this.match(TSqlParser.PRIMARY);
					this.state = 8518;
					this.match(TSqlParser.KEY);
					}
					break;
				case TSqlParser.UNIQUE:
					{
					this.state = 8519;
					this.match(TSqlParser.UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 8523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CLUSTERED || _la === TSqlParser.NONCLUSTERED) {
					{
					this.state = 8522;
					this.clustered();
					}
				}

				this.state = 8526;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1204, this._ctx) ) {
				case 1:
					{
					this.state = 8525;
					this.index_options();
					}
					break;
				}
				}
				break;
			case TSqlParser.CHECK:
				{
				this.state = 8528;
				this.match(TSqlParser.CHECK);
				this.state = 8532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.NOT) {
					{
					this.state = 8529;
					this.match(TSqlParser.NOT);
					this.state = 8530;
					this.match(TSqlParser.FOR);
					this.state = 8531;
					this.match(TSqlParser.REPLICATION);
					}
				}

				this.state = 8534;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8535;
				this.search_condition();
				this.state = 8536;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			case TSqlParser.FOREIGN:
			case TSqlParser.REFERENCES:
				{
				this.state = 8540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FOREIGN) {
					{
					this.state = 8538;
					this.match(TSqlParser.FOREIGN);
					this.state = 8539;
					this.match(TSqlParser.KEY);
					}
				}

				this.state = 8542;
				this.match(TSqlParser.REFERENCES);
				this.state = 8543;
				this.table_name();
				this.state = 8544;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8545;
				_localctx._pk = this.column_name_list();
				this.state = 8546;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 8548;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1207, this._ctx) ) {
				case 1:
					{
					this.state = 8547;
					this.on_delete();
					}
					break;
				}
				this.state = 8551;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ON) {
					{
					this.state = 8550;
					this.on_update();
					}
				}

				}
				break;
			case TSqlParser.NOT:
			case TSqlParser.NULL:
				{
				this.state = 8553;
				this.null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_constraint(): Table_constraintContext {
		let _localctx: Table_constraintContext = new Table_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, TSqlParser.RULE_table_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONSTRAINT) {
				{
				this.state = 8556;
				this.match(TSqlParser.CONSTRAINT);
				this.state = 8557;
				_localctx._constraint = this.id();
				}
			}

			this.state = 8624;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.PRIMARY:
			case TSqlParser.UNIQUE:
				{
				this.state = 8563;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.PRIMARY:
					{
					this.state = 8560;
					this.match(TSqlParser.PRIMARY);
					this.state = 8561;
					this.match(TSqlParser.KEY);
					}
					break;
				case TSqlParser.UNIQUE:
					{
					this.state = 8562;
					this.match(TSqlParser.UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 8566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CLUSTERED || _la === TSqlParser.NONCLUSTERED) {
					{
					this.state = 8565;
					this.clustered();
					}
				}

				this.state = 8568;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8569;
				this.column_name_list_with_order();
				this.state = 8570;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 8572;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1213, this._ctx) ) {
				case 1:
					{
					this.state = 8571;
					this.index_options();
					}
					break;
				}
				this.state = 8576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ON) {
					{
					this.state = 8574;
					this.match(TSqlParser.ON);
					this.state = 8575;
					this.id();
					}
				}

				}
				break;
			case TSqlParser.CHECK:
				{
				this.state = 8578;
				this.match(TSqlParser.CHECK);
				this.state = 8582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.NOT) {
					{
					this.state = 8579;
					this.match(TSqlParser.NOT);
					this.state = 8580;
					this.match(TSqlParser.FOR);
					this.state = 8581;
					this.match(TSqlParser.REPLICATION);
					}
				}

				this.state = 8584;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8585;
				this.search_condition();
				this.state = 8586;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			case TSqlParser.DEFAULT:
				{
				this.state = 8588;
				this.match(TSqlParser.DEFAULT);
				this.state = 8590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.LR_BRACKET) {
					{
					this.state = 8589;
					this.match(TSqlParser.LR_BRACKET);
					}
				}

				this.state = 8596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 8596;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.STRING:
						{
						this.state = 8592;
						this.match(TSqlParser.STRING);
						}
						break;
					case TSqlParser.PLUS:
						{
						this.state = 8593;
						this.match(TSqlParser.PLUS);
						}
						break;
					case TSqlParser.CALLED:
					case TSqlParser.COALESCE:
					case TSqlParser.CONVERT:
					case TSqlParser.CURRENT_TIMESTAMP:
					case TSqlParser.CURRENT_USER:
					case TSqlParser.DATA_COMPRESSION:
					case TSqlParser.EVENTDATA:
					case TSqlParser.FILENAME:
					case TSqlParser.FILLFACTOR:
					case TSqlParser.FORCESEEK:
					case TSqlParser.IDENTITY:
					case TSqlParser.INIT:
					case TSqlParser.ISNULL:
					case TSqlParser.KEY:
					case TSqlParser.LEFT:
					case TSqlParser.MASTER:
					case TSqlParser.MAX_MEMORY:
					case TSqlParser.NULLIF:
					case TSqlParser.OFFSETS:
					case TSqlParser.PAGE:
					case TSqlParser.PUBLIC:
					case TSqlParser.R:
					case TSqlParser.RAW:
					case TSqlParser.RETURN:
					case TSqlParser.RETURNS:
					case TSqlParser.RIGHT:
					case TSqlParser.ROWCOUNT:
					case TSqlParser.SAFETY:
					case TSqlParser.SERVER:
					case TSqlParser.SESSION_USER:
					case TSqlParser.SID:
					case TSqlParser.SOURCE:
					case TSqlParser.STATE:
					case TSqlParser.START:
					case TSqlParser.SYSTEM_USER:
					case TSqlParser.TARGET:
					case TSqlParser.ABSOLUTE:
					case TSqlParser.ACCENT_SENSITIVITY:
					case TSqlParser.ACTION:
					case TSqlParser.ACTIVATION:
					case TSqlParser.ACTIVE:
					case TSqlParser.ADDRESS:
					case TSqlParser.AES_128:
					case TSqlParser.AES_192:
					case TSqlParser.AES_256:
					case TSqlParser.AFFINITY:
					case TSqlParser.AFTER:
					case TSqlParser.AGGREGATE:
					case TSqlParser.ALGORITHM:
					case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
					case TSqlParser.ALLOWED:
					case TSqlParser.ANSI_NULL_DEFAULT:
					case TSqlParser.ANSI_NULLS:
					case TSqlParser.ANSI_PADDING:
					case TSqlParser.ANSI_WARNINGS:
					case TSqlParser.APPLICATION_LOG:
					case TSqlParser.APPLY:
					case TSqlParser.ARITHABORT:
					case TSqlParser.ASSEMBLY:
					case TSqlParser.AUDIT:
					case TSqlParser.AUDIT_GUID:
					case TSqlParser.AUTO:
					case TSqlParser.AUTO_CLEANUP:
					case TSqlParser.AUTO_CLOSE:
					case TSqlParser.AUTO_CREATE_STATISTICS:
					case TSqlParser.AUTO_SHRINK:
					case TSqlParser.AUTO_UPDATE_STATISTICS:
					case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
					case TSqlParser.AVAILABILITY:
					case TSqlParser.AVG:
					case TSqlParser.BACKUP_PRIORITY:
					case TSqlParser.BEGIN_DIALOG:
					case TSqlParser.BIGINT:
					case TSqlParser.BINARY_BASE64:
					case TSqlParser.BINARY_CHECKSUM:
					case TSqlParser.BINDING:
					case TSqlParser.BLOB_STORAGE:
					case TSqlParser.BROKER:
					case TSqlParser.BROKER_INSTANCE:
					case TSqlParser.BULK_LOGGED:
					case TSqlParser.CALLER:
					case TSqlParser.CAP_CPU_PERCENT:
					case TSqlParser.CAST:
					case TSqlParser.CATALOG:
					case TSqlParser.CATCH:
					case TSqlParser.CHANGE_RETENTION:
					case TSqlParser.CHANGE_TRACKING:
					case TSqlParser.CHECKSUM:
					case TSqlParser.CHECKSUM_AGG:
					case TSqlParser.CLEANUP:
					case TSqlParser.COLLECTION:
					case TSqlParser.COLUMN_MASTER_KEY:
					case TSqlParser.COMMITTED:
					case TSqlParser.COMPATIBILITY_LEVEL:
					case TSqlParser.CONCAT:
					case TSqlParser.CONCAT_NULL_YIELDS_NULL:
					case TSqlParser.CONTENT:
					case TSqlParser.CONTROL:
					case TSqlParser.COOKIE:
					case TSqlParser.COUNT:
					case TSqlParser.COUNT_BIG:
					case TSqlParser.COUNTER:
					case TSqlParser.CPU:
					case TSqlParser.CREATE_NEW:
					case TSqlParser.CREATION_DISPOSITION:
					case TSqlParser.CREDENTIAL:
					case TSqlParser.CRYPTOGRAPHIC:
					case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
					case TSqlParser.CURSOR_DEFAULT:
					case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
					case TSqlParser.DATEADD:
					case TSqlParser.DATEDIFF:
					case TSqlParser.DATENAME:
					case TSqlParser.DATEPART:
					case TSqlParser.DAYS:
					case TSqlParser.DB_CHAINING:
					case TSqlParser.DB_FAILOVER:
					case TSqlParser.DECRYPTION:
					case TSqlParser.DEFAULT_DOUBLE_QUOTE:
					case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
					case TSqlParser.DEFAULT_LANGUAGE:
					case TSqlParser.DELAY:
					case TSqlParser.DELAYED_DURABILITY:
					case TSqlParser.DELETED:
					case TSqlParser.DENSE_RANK:
					case TSqlParser.DEPENDENTS:
					case TSqlParser.DES:
					case TSqlParser.DESCRIPTION:
					case TSqlParser.DESX:
					case TSqlParser.DHCP:
					case TSqlParser.DIALOG:
					case TSqlParser.DIRECTORY_NAME:
					case TSqlParser.DISABLE:
					case TSqlParser.DISABLE_BROKER:
					case TSqlParser.DISABLED:
					case TSqlParser.DISK_DRIVE:
					case TSqlParser.DOCUMENT:
					case TSqlParser.DYNAMIC:
					case TSqlParser.EMERGENCY:
					case TSqlParser.EMPTY:
					case TSqlParser.ENABLE:
					case TSqlParser.ENABLE_BROKER:
					case TSqlParser.ENCRYPTED_VALUE:
					case TSqlParser.ENCRYPTION:
					case TSqlParser.ENDPOINT_URL:
					case TSqlParser.ERROR_BROKER_CONVERSATIONS:
					case TSqlParser.EXCLUSIVE:
					case TSqlParser.EXECUTABLE:
					case TSqlParser.EXIST:
					case TSqlParser.EXPAND:
					case TSqlParser.EXPIRY_DATE:
					case TSqlParser.EXPLICIT:
					case TSqlParser.FAIL_OPERATION:
					case TSqlParser.FAILOVER_MODE:
					case TSqlParser.FAILURE:
					case TSqlParser.FAILURE_CONDITION_LEVEL:
					case TSqlParser.FAST:
					case TSqlParser.FAST_FORWARD:
					case TSqlParser.FILEGROUP:
					case TSqlParser.FILEGROWTH:
					case TSqlParser.FILEPATH:
					case TSqlParser.FILESTREAM:
					case TSqlParser.FILTER:
					case TSqlParser.FIRST:
					case TSqlParser.FIRST_VALUE:
					case TSqlParser.FOLLOWING:
					case TSqlParser.FORCE:
					case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case TSqlParser.FORCED:
					case TSqlParser.FORMAT:
					case TSqlParser.FORWARD_ONLY:
					case TSqlParser.FULLSCAN:
					case TSqlParser.FULLTEXT:
					case TSqlParser.GB:
					case TSqlParser.GETDATE:
					case TSqlParser.GETUTCDATE:
					case TSqlParser.GLOBAL:
					case TSqlParser.GO:
					case TSqlParser.GROUP_MAX_REQUESTS:
					case TSqlParser.GROUPING:
					case TSqlParser.GROUPING_ID:
					case TSqlParser.HADR:
					case TSqlParser.HASH:
					case TSqlParser.HEALTH_CHECK_TIMEOUT:
					case TSqlParser.HIGH:
					case TSqlParser.HONOR_BROKER_PRIORITY:
					case TSqlParser.HOURS:
					case TSqlParser.IDENTITY_VALUE:
					case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case TSqlParser.IMMEDIATE:
					case TSqlParser.IMPERSONATE:
					case TSqlParser.IMPORTANCE:
					case TSqlParser.INCREMENTAL:
					case TSqlParser.INITIATOR:
					case TSqlParser.INPUT:
					case TSqlParser.INSENSITIVE:
					case TSqlParser.INSERTED:
					case TSqlParser.INT:
					case TSqlParser.IP:
					case TSqlParser.ISOLATION:
					case TSqlParser.KB:
					case TSqlParser.KEEP:
					case TSqlParser.KEEPFIXED:
					case TSqlParser.KEY_SOURCE:
					case TSqlParser.KEYS:
					case TSqlParser.KEYSET:
					case TSqlParser.LAG:
					case TSqlParser.LAST:
					case TSqlParser.LAST_VALUE:
					case TSqlParser.LEAD:
					case TSqlParser.LEVEL:
					case TSqlParser.LIST:
					case TSqlParser.LISTENER:
					case TSqlParser.LISTENER_URL:
					case TSqlParser.LOB_COMPACTION:
					case TSqlParser.LOCAL:
					case TSqlParser.LOCATION:
					case TSqlParser.LOCK:
					case TSqlParser.LOCK_ESCALATION:
					case TSqlParser.LOGIN:
					case TSqlParser.LOOP:
					case TSqlParser.LOW:
					case TSqlParser.MANUAL:
					case TSqlParser.MARK:
					case TSqlParser.MATERIALIZED:
					case TSqlParser.MAX:
					case TSqlParser.MAX_CPU_PERCENT:
					case TSqlParser.MAX_DOP:
					case TSqlParser.MAX_FILES:
					case TSqlParser.MAX_IOPS_PER_VOLUME:
					case TSqlParser.MAX_MEMORY_PERCENT:
					case TSqlParser.MAX_PROCESSES:
					case TSqlParser.MAX_QUEUE_READERS:
					case TSqlParser.MAX_ROLLOVER_FILES:
					case TSqlParser.MAXDOP:
					case TSqlParser.MAXRECURSION:
					case TSqlParser.MAXSIZE:
					case TSqlParser.MB:
					case TSqlParser.MEDIUM:
					case TSqlParser.MEMORY_OPTIMIZED_DATA:
					case TSqlParser.MESSAGE:
					case TSqlParser.MIN:
					case TSqlParser.MIN_ACTIVE_ROWVERSION:
					case TSqlParser.MIN_CPU_PERCENT:
					case TSqlParser.MIN_IOPS_PER_VOLUME:
					case TSqlParser.MIN_MEMORY_PERCENT:
					case TSqlParser.MINUTES:
					case TSqlParser.MIRROR_ADDRESS:
					case TSqlParser.MIXED_PAGE_ALLOCATION:
					case TSqlParser.MODE:
					case TSqlParser.MODIFY:
					case TSqlParser.MOVE:
					case TSqlParser.MULTI_USER:
					case TSqlParser.NAME:
					case TSqlParser.NESTED_TRIGGERS:
					case TSqlParser.NEW_ACCOUNT:
					case TSqlParser.NEW_BROKER:
					case TSqlParser.NEW_PASSWORD:
					case TSqlParser.NEXT:
					case TSqlParser.NO:
					case TSqlParser.NO_TRUNCATE:
					case TSqlParser.NO_WAIT:
					case TSqlParser.NOCOUNT:
					case TSqlParser.NODES:
					case TSqlParser.NOEXPAND:
					case TSqlParser.NON_TRANSACTED_ACCESS:
					case TSqlParser.NORECOMPUTE:
					case TSqlParser.NORECOVERY:
					case TSqlParser.NOWAIT:
					case TSqlParser.NTILE:
					case TSqlParser.NUMANODE:
					case TSqlParser.NUMBER:
					case TSqlParser.NUMERIC_ROUNDABORT:
					case TSqlParser.OBJECT:
					case TSqlParser.OFFLINE:
					case TSqlParser.OFFSET:
					case TSqlParser.OLD_ACCOUNT:
					case TSqlParser.ONLINE:
					case TSqlParser.ONLY:
					case TSqlParser.OPEN_EXISTING:
					case TSqlParser.OPTIMISTIC:
					case TSqlParser.OPTIMIZE:
					case TSqlParser.OUT:
					case TSqlParser.OUTPUT:
					case TSqlParser.OWNER:
					case TSqlParser.PAGE_VERIFY:
					case TSqlParser.PARAMETERIZATION:
					case TSqlParser.PARTITION:
					case TSqlParser.PARTITIONS:
					case TSqlParser.PARTNER:
					case TSqlParser.PATH:
					case TSqlParser.POISON_MESSAGE_HANDLING:
					case TSqlParser.POOL:
					case TSqlParser.PORT:
					case TSqlParser.PRECEDING:
					case TSqlParser.PRIMARY_ROLE:
					case TSqlParser.PRIOR:
					case TSqlParser.PRIORITY:
					case TSqlParser.PRIORITY_LEVEL:
					case TSqlParser.PRIVATE:
					case TSqlParser.PRIVATE_KEY:
					case TSqlParser.PRIVILEGES:
					case TSqlParser.PROCEDURE_NAME:
					case TSqlParser.PROPERTY:
					case TSqlParser.PROVIDER:
					case TSqlParser.PROVIDER_KEY_NAME:
					case TSqlParser.QUERY:
					case TSqlParser.QUEUE:
					case TSqlParser.QUEUE_DELAY:
					case TSqlParser.QUOTED_IDENTIFIER:
					case TSqlParser.RANGE:
					case TSqlParser.RANK:
					case TSqlParser.RC2:
					case TSqlParser.RC4:
					case TSqlParser.RC4_128:
					case TSqlParser.READ_COMMITTED_SNAPSHOT:
					case TSqlParser.READ_ONLY:
					case TSqlParser.READ_ONLY_ROUTING_LIST:
					case TSqlParser.READ_WRITE:
					case TSqlParser.READONLY:
					case TSqlParser.REBUILD:
					case TSqlParser.RECEIVE:
					case TSqlParser.RECOMPILE:
					case TSqlParser.RECOVERY:
					case TSqlParser.RECURSIVE_TRIGGERS:
					case TSqlParser.RELATIVE:
					case TSqlParser.REMOTE:
					case TSqlParser.REMOTE_SERVICE_NAME:
					case TSqlParser.REMOVE:
					case TSqlParser.REORGANIZE:
					case TSqlParser.REPEATABLE:
					case TSqlParser.REPLICA:
					case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
					case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case TSqlParser.RESERVE_DISK_SPACE:
					case TSqlParser.RESOURCE:
					case TSqlParser.RESOURCE_MANAGER_LOCATION:
					case TSqlParser.RESTRICTED_USER:
					case TSqlParser.RETENTION:
					case TSqlParser.ROBUST:
					case TSqlParser.ROOT:
					case TSqlParser.ROUTE:
					case TSqlParser.ROW:
					case TSqlParser.ROW_NUMBER:
					case TSqlParser.ROWGUID:
					case TSqlParser.ROWS:
					case TSqlParser.SAMPLE:
					case TSqlParser.SCHEMABINDING:
					case TSqlParser.SCOPED:
					case TSqlParser.SCROLL:
					case TSqlParser.SCROLL_LOCKS:
					case TSqlParser.SEARCH:
					case TSqlParser.SECONDARY:
					case TSqlParser.SECONDARY_ONLY:
					case TSqlParser.SECONDARY_ROLE:
					case TSqlParser.SECONDS:
					case TSqlParser.SECRET:
					case TSqlParser.SECURITY_LOG:
					case TSqlParser.SEEDING_MODE:
					case TSqlParser.SELF:
					case TSqlParser.SEMI_SENSITIVE:
					case TSqlParser.SEND:
					case TSqlParser.SENT:
					case TSqlParser.SERIALIZABLE:
					case TSqlParser.SESSION_TIMEOUT:
					case TSqlParser.SETERROR:
					case TSqlParser.SHARE:
					case TSqlParser.SHOWPLAN:
					case TSqlParser.SIGNATURE:
					case TSqlParser.SIMPLE:
					case TSqlParser.SINGLE_USER:
					case TSqlParser.SIZE:
					case TSqlParser.SMALLINT:
					case TSqlParser.SNAPSHOT:
					case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
					case TSqlParser.STANDBY:
					case TSqlParser.START_DATE:
					case TSqlParser.STATIC:
					case TSqlParser.STATS_STREAM:
					case TSqlParser.STATUS:
					case TSqlParser.STDEV:
					case TSqlParser.STDEVP:
					case TSqlParser.STOPLIST:
					case TSqlParser.STUFF:
					case TSqlParser.SUBJECT:
					case TSqlParser.SUM:
					case TSqlParser.SUSPEND:
					case TSqlParser.SYMMETRIC:
					case TSqlParser.SYNCHRONOUS_COMMIT:
					case TSqlParser.SYNONYM:
					case TSqlParser.TAKE:
					case TSqlParser.TARGET_RECOVERY_TIME:
					case TSqlParser.TB:
					case TSqlParser.TEXTIMAGE_ON:
					case TSqlParser.THROW:
					case TSqlParser.TIES:
					case TSqlParser.TIME:
					case TSqlParser.TIMEOUT:
					case TSqlParser.TIMER:
					case TSqlParser.TINYINT:
					case TSqlParser.TORN_PAGE_DETECTION:
					case TSqlParser.TRANSFORM_NOISE_WORDS:
					case TSqlParser.TRIPLE_DES:
					case TSqlParser.TRIPLE_DES_3KEY:
					case TSqlParser.TRUSTWORTHY:
					case TSqlParser.TRY:
					case TSqlParser.TSQL:
					case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
					case TSqlParser.TYPE:
					case TSqlParser.TYPE_WARNING:
					case TSqlParser.UNBOUNDED:
					case TSqlParser.UNCOMMITTED:
					case TSqlParser.UNKNOWN:
					case TSqlParser.UNLIMITED:
					case TSqlParser.USING:
					case TSqlParser.VALID_XML:
					case TSqlParser.VALIDATION:
					case TSqlParser.VALUE:
					case TSqlParser.VAR:
					case TSqlParser.VARP:
					case TSqlParser.VIEW_METADATA:
					case TSqlParser.VIEWS:
					case TSqlParser.WAIT:
					case TSqlParser.WELL_FORMED_XML:
					case TSqlParser.WORK:
					case TSqlParser.WORKLOAD:
					case TSqlParser.XML:
					case TSqlParser.XMLNAMESPACES:
					case TSqlParser.DOUBLE_QUOTE_ID:
					case TSqlParser.SQUARE_BRACKET_ID:
					case TSqlParser.LOCAL_ID:
					case TSqlParser.ID:
						{
						this.state = 8594;
						this.function_call();
						}
						break;
					case TSqlParser.DECIMAL:
						{
						this.state = 8595;
						this.match(TSqlParser.DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 8598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 38)) & ~0x1F) === 0 && ((1 << (_la - 38)) & ((1 << (TSqlParser.CALLED - 38)) | (1 << (TSqlParser.COALESCE - 38)) | (1 << (TSqlParser.CONVERT - 38)))) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & ((1 << (TSqlParser.CURRENT_TIMESTAMP - 76)) | (1 << (TSqlParser.CURRENT_USER - 76)) | (1 << (TSqlParser.DATA_COMPRESSION - 76)))) !== 0) || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 149)) & ~0x1F) === 0 && ((1 << (_la - 149)) & ((1 << (TSqlParser.IDENTITY - 149)) | (1 << (TSqlParser.INIT - 149)) | (1 << (TSqlParser.ISNULL - 149)) | (1 << (TSqlParser.KEY - 149)) | (1 << (TSqlParser.LEFT - 149)))) !== 0) || _la === TSqlParser.MASTER || _la === TSqlParser.MAX_MEMORY || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (TSqlParser.NULLIF - 222)) | (1 << (TSqlParser.OFFSETS - 222)) | (1 << (TSqlParser.PAGE - 222)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.RIGHT - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SESSION_USER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.SYSTEM_USER - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.LOCAL_ID - 767)) | (1 << (TSqlParser.DECIMAL - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.STRING - 767)))) !== 0) || _la === TSqlParser.PLUS);
				this.state = 8601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.RR_BRACKET) {
					{
					this.state = 8600;
					this.match(TSqlParser.RR_BRACKET);
					}
				}

				this.state = 8603;
				this.match(TSqlParser.FOR);
				this.state = 8604;
				this.id();
				}
				break;
			case TSqlParser.FOREIGN:
				{
				this.state = 8605;
				this.match(TSqlParser.FOREIGN);
				this.state = 8606;
				this.match(TSqlParser.KEY);
				this.state = 8607;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8608;
				_localctx._fk = this.column_name_list();
				this.state = 8609;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 8610;
				this.match(TSqlParser.REFERENCES);
				this.state = 8611;
				this.table_name();
				this.state = 8616;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1220, this._ctx) ) {
				case 1:
					{
					this.state = 8612;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 8613;
					_localctx._pk = this.column_name_list();
					this.state = 8614;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 8619;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1221, this._ctx) ) {
				case 1:
					{
					this.state = 8618;
					this.on_delete();
					}
					break;
				}
				this.state = 8622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ON) {
					{
					this.state = 8621;
					this.on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_delete(): On_deleteContext {
		let _localctx: On_deleteContext = new On_deleteContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, TSqlParser.RULE_on_delete);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8626;
			this.match(TSqlParser.ON);
			this.state = 8627;
			this.match(TSqlParser.DELETE);
			this.state = 8635;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1224, this._ctx) ) {
			case 1:
				{
				this.state = 8628;
				this.match(TSqlParser.NO);
				this.state = 8629;
				this.match(TSqlParser.ACTION);
				}
				break;

			case 2:
				{
				this.state = 8630;
				this.match(TSqlParser.CASCADE);
				}
				break;

			case 3:
				{
				this.state = 8631;
				this.match(TSqlParser.SET);
				this.state = 8632;
				this.match(TSqlParser.NULL);
				}
				break;

			case 4:
				{
				this.state = 8633;
				this.match(TSqlParser.SET);
				this.state = 8634;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_update(): On_updateContext {
		let _localctx: On_updateContext = new On_updateContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, TSqlParser.RULE_on_update);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8637;
			this.match(TSqlParser.ON);
			this.state = 8638;
			this.match(TSqlParser.UPDATE);
			this.state = 8646;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1225, this._ctx) ) {
			case 1:
				{
				this.state = 8639;
				this.match(TSqlParser.NO);
				this.state = 8640;
				this.match(TSqlParser.ACTION);
				}
				break;

			case 2:
				{
				this.state = 8641;
				this.match(TSqlParser.CASCADE);
				}
				break;

			case 3:
				{
				this.state = 8642;
				this.match(TSqlParser.SET);
				this.state = 8643;
				this.match(TSqlParser.NULL);
				}
				break;

			case 4:
				{
				this.state = 8644;
				this.match(TSqlParser.SET);
				this.state = 8645;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_options(): Index_optionsContext {
		let _localctx: Index_optionsContext = new Index_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, TSqlParser.RULE_index_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8648;
			this.match(TSqlParser.WITH);
			this.state = 8649;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 8650;
			this.index_option();
			this.state = 8655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 8651;
				this.match(TSqlParser.COMMA);
				this.state = 8652;
				this.index_option();
				}
				}
				this.state = 8657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8658;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_option(): Index_optionContext {
		let _localctx: Index_optionContext = new Index_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, TSqlParser.RULE_index_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8660;
			this.simple_id();
			this.state = 8661;
			this.match(TSqlParser.EQUAL);
			this.state = 8665;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.ID:
				{
				this.state = 8662;
				this.simple_id();
				}
				break;
			case TSqlParser.OFF:
			case TSqlParser.ON:
				{
				this.state = 8663;
				this.on_off();
				}
				break;
			case TSqlParser.DECIMAL:
				{
				this.state = 8664;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_cursor(): Declare_cursorContext {
		let _localctx: Declare_cursorContext = new Declare_cursorContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, TSqlParser.RULE_declare_cursor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8667;
			this.match(TSqlParser.DECLARE);
			this.state = 8668;
			this.cursor_name();
			this.state = 8700;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1235, this._ctx) ) {
			case 1:
				{
				this.state = 8669;
				this.match(TSqlParser.CURSOR);
				this.state = 8679;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1230, this._ctx) ) {
				case 1:
					{
					this.state = 8670;
					this.declare_set_cursor_common();
					this.state = 8677;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.FOR) {
						{
						this.state = 8671;
						this.match(TSqlParser.FOR);
						this.state = 8672;
						this.match(TSqlParser.UPDATE);
						this.state = 8675;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TSqlParser.OF) {
							{
							this.state = 8673;
							this.match(TSqlParser.OF);
							this.state = 8674;
							this.column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 8682;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.INSENSITIVE || _la === TSqlParser.SEMI_SENSITIVE) {
					{
					this.state = 8681;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.INSENSITIVE || _la === TSqlParser.SEMI_SENSITIVE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 8685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.SCROLL) {
					{
					this.state = 8684;
					this.match(TSqlParser.SCROLL);
					}
				}

				this.state = 8687;
				this.match(TSqlParser.CURSOR);
				this.state = 8688;
				this.match(TSqlParser.FOR);
				this.state = 8689;
				this.select_statement();
				this.state = 8698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.FOR) {
					{
					this.state = 8690;
					this.match(TSqlParser.FOR);
					this.state = 8696;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.READ:
						{
						this.state = 8691;
						this.match(TSqlParser.READ);
						this.state = 8692;
						this.match(TSqlParser.ONLY);
						}
						break;
					case TSqlParser.UPDATE:
						{
						this.state = 8693;
						this.match(TSqlParser.UPDATE);
						}
						break;
					case TSqlParser.OF:
						{
						{
						this.state = 8694;
						this.match(TSqlParser.OF);
						this.state = 8695;
						this.column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			this.state = 8703;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1236, this._ctx) ) {
			case 1:
				{
				this.state = 8702;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_set_cursor_common(): Declare_set_cursor_commonContext {
		let _localctx: Declare_set_cursor_commonContext = new Declare_set_cursor_commonContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, TSqlParser.RULE_declare_set_cursor_common);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.DYNAMIC || _la === TSqlParser.FAST_FORWARD || _la === TSqlParser.FORWARD_ONLY || _la === TSqlParser.GLOBAL || _la === TSqlParser.KEYSET || _la === TSqlParser.LOCAL || _la === TSqlParser.OPTIMISTIC || _la === TSqlParser.READ_ONLY || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (TSqlParser.SCROLL - 702)) | (1 << (TSqlParser.SCROLL_LOCKS - 702)) | (1 << (TSqlParser.STATIC - 702)))) !== 0) || _la === TSqlParser.TYPE_WARNING) {
				{
				{
				this.state = 8705;
				this.declare_set_cursor_common_partial();
				}
				}
				this.state = 8710;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8711;
			this.match(TSqlParser.FOR);
			this.state = 8712;
			this.select_statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_set_cursor_common_partial(): Declare_set_cursor_common_partialContext {
		let _localctx: Declare_set_cursor_common_partialContext = new Declare_set_cursor_common_partialContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, TSqlParser.RULE_declare_set_cursor_common_partial);
		let _la: number;
		try {
			this.state = 8719;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.GLOBAL:
			case TSqlParser.LOCAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8714;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.GLOBAL || _la === TSqlParser.LOCAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.SCROLL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8715;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FORWARD_ONLY || _la === TSqlParser.SCROLL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.DYNAMIC:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.KEYSET:
			case TSqlParser.STATIC:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8716;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DYNAMIC || _la === TSqlParser.FAST_FORWARD || _la === TSqlParser.KEYSET || _la === TSqlParser.STATIC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.READ_ONLY:
			case TSqlParser.SCROLL_LOCKS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8717;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OPTIMISTIC || _la === TSqlParser.READ_ONLY || _la === TSqlParser.SCROLL_LOCKS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TYPE_WARNING:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8718;
				this.match(TSqlParser.TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetch_cursor(): Fetch_cursorContext {
		let _localctx: Fetch_cursorContext = new Fetch_cursorContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, TSqlParser.RULE_fetch_cursor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8721;
			this.match(TSqlParser.FETCH);
			this.state = 8731;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1240, this._ctx) ) {
			case 1:
				{
				this.state = 8728;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.NEXT:
					{
					this.state = 8722;
					this.match(TSqlParser.NEXT);
					}
					break;
				case TSqlParser.PRIOR:
					{
					this.state = 8723;
					this.match(TSqlParser.PRIOR);
					}
					break;
				case TSqlParser.FIRST:
					{
					this.state = 8724;
					this.match(TSqlParser.FIRST);
					}
					break;
				case TSqlParser.LAST:
					{
					this.state = 8725;
					this.match(TSqlParser.LAST);
					}
					break;
				case TSqlParser.ABSOLUTE:
				case TSqlParser.RELATIVE:
					{
					this.state = 8726;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ABSOLUTE || _la === TSqlParser.RELATIVE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 8727;
					this.expression(0);
					}
					break;
				case TSqlParser.FROM:
					break;
				default:
					break;
				}
				this.state = 8730;
				this.match(TSqlParser.FROM);
				}
				break;
			}
			this.state = 8734;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1241, this._ctx) ) {
			case 1:
				{
				this.state = 8733;
				this.match(TSqlParser.GLOBAL);
				}
				break;
			}
			this.state = 8736;
			this.cursor_name();
			this.state = 8746;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INTO) {
				{
				this.state = 8737;
				this.match(TSqlParser.INTO);
				this.state = 8738;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 8743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 8739;
					this.match(TSqlParser.COMMA);
					this.state = 8740;
					this.match(TSqlParser.LOCAL_ID);
					}
					}
					this.state = 8745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8749;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1244, this._ctx) ) {
			case 1:
				{
				this.state = 8748;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_special(): Set_specialContext {
		let _localctx: Set_specialContext = new Set_specialContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, TSqlParser.RULE_set_special);
		try {
			this.state = 8800;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1250, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8751;
				this.match(TSqlParser.SET);
				this.state = 8752;
				this.id();
				this.state = 8756;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 8753;
					this.id();
					}
					break;
				case TSqlParser.LOCAL_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
					{
					this.state = 8754;
					this.constant_LOCAL_ID();
					}
					break;
				case TSqlParser.OFF:
				case TSqlParser.ON:
					{
					this.state = 8755;
					this.on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 8759;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1246, this._ctx) ) {
				case 1:
					{
					this.state = 8758;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8761;
				this.match(TSqlParser.SET);
				this.state = 8762;
				this.match(TSqlParser.TRANSACTION);
				this.state = 8763;
				this.match(TSqlParser.ISOLATION);
				this.state = 8764;
				this.match(TSqlParser.LEVEL);
				this.state = 8774;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1247, this._ctx) ) {
				case 1:
					{
					this.state = 8765;
					this.match(TSqlParser.READ);
					this.state = 8766;
					this.match(TSqlParser.UNCOMMITTED);
					}
					break;

				case 2:
					{
					this.state = 8767;
					this.match(TSqlParser.READ);
					this.state = 8768;
					this.match(TSqlParser.COMMITTED);
					}
					break;

				case 3:
					{
					this.state = 8769;
					this.match(TSqlParser.REPEATABLE);
					this.state = 8770;
					this.match(TSqlParser.READ);
					}
					break;

				case 4:
					{
					this.state = 8771;
					this.match(TSqlParser.SNAPSHOT);
					}
					break;

				case 5:
					{
					this.state = 8772;
					this.match(TSqlParser.SERIALIZABLE);
					}
					break;

				case 6:
					{
					this.state = 8773;
					this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 8777;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1248, this._ctx) ) {
				case 1:
					{
					this.state = 8776;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8779;
				this.match(TSqlParser.SET);
				this.state = 8780;
				this.match(TSqlParser.IDENTITY_INSERT);
				this.state = 8781;
				this.table_name();
				this.state = 8782;
				this.on_off();
				this.state = 8784;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1249, this._ctx) ) {
				case 1:
					{
					this.state = 8783;
					this.match(TSqlParser.SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8786;
				this.match(TSqlParser.SET);
				this.state = 8787;
				this.match(TSqlParser.ANSI_NULLS);
				this.state = 8788;
				this.on_off();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8789;
				this.match(TSqlParser.SET);
				this.state = 8790;
				this.match(TSqlParser.QUOTED_IDENTIFIER);
				this.state = 8791;
				this.on_off();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 8792;
				this.match(TSqlParser.SET);
				this.state = 8793;
				this.match(TSqlParser.ANSI_PADDING);
				this.state = 8794;
				this.on_off();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 8795;
				this.match(TSqlParser.SET);
				this.state = 8796;
				this.match(TSqlParser.ANSI_WARNINGS);
				this.state = 8797;
				this.on_off();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 8798;
				this.match(TSqlParser.SET);
				this.state = 8799;
				this.modify_method();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_LOCAL_ID(): Constant_LOCAL_IDContext {
		let _localctx: Constant_LOCAL_IDContext = new Constant_LOCAL_IDContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, TSqlParser.RULE_constant_LOCAL_ID);
		try {
			this.state = 8804;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DECIMAL:
			case TSqlParser.STRING:
			case TSqlParser.BINARY:
			case TSqlParser.FLOAT:
			case TSqlParser.REAL:
			case TSqlParser.DOLLAR:
			case TSqlParser.PLUS:
			case TSqlParser.MINUS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8802;
				this.constant();
				}
				break;
			case TSqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8803;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 714;
		this.enterRecursionRule(_localctx, 714, TSqlParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8814;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1252, this._ctx) ) {
			case 1:
				{
				this.state = 8807;
				this.primitive_expression();
				}
				break;

			case 2:
				{
				this.state = 8808;
				this.function_call();
				}
				break;

			case 3:
				{
				this.state = 8809;
				this.case_expression();
				}
				break;

			case 4:
				{
				this.state = 8810;
				this.full_column_name();
				}
				break;

			case 5:
				{
				this.state = 8811;
				this.bracket_expression();
				}
				break;

			case 6:
				{
				this.state = 8812;
				this.unary_operator_expression();
				}
				break;

			case 7:
				{
				this.state = 8813;
				this.over_clause();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 8835;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1254, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 8833;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1253, this._ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, TSqlParser.RULE_expression);
						this.state = 8816;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 8817;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(((((_la - 824)) & ~0x1F) === 0 && ((1 << (_la - 824)) & ((1 << (TSqlParser.STAR - 824)) | (1 << (TSqlParser.DIVIDE - 824)) | (1 << (TSqlParser.MODULE - 824)))) !== 0))) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 8818;
						this.expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, TSqlParser.RULE_expression);
						this.state = 8819;
						if (!(this.precpred(this._ctx, 4))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						}
						this.state = 8820;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(((((_la - 813)) & ~0x1F) === 0 && ((1 << (_la - 813)) & ((1 << (TSqlParser.DOUBLE_BAR - 813)) | (1 << (TSqlParser.PLUS - 813)) | (1 << (TSqlParser.MINUS - 813)) | (1 << (TSqlParser.BIT_OR - 813)) | (1 << (TSqlParser.BIT_AND - 813)) | (1 << (TSqlParser.BIT_XOR - 813)))) !== 0))) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 8821;
						this.expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, TSqlParser.RULE_expression);
						this.state = 8822;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 8823;
						this.comparison_operator();
						this.state = 8824;
						this.expression(4);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, TSqlParser.RULE_expression);
						this.state = 8826;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 8827;
						this.assignment_operator();
						this.state = 8828;
						this.expression(3);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, TSqlParser.RULE_expression);
						this.state = 8830;
						if (!(this.precpred(this._ctx, 10))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 10)");
						}
						this.state = 8831;
						this.match(TSqlParser.COLLATE);
						this.state = 8832;
						this.id();
						}
						break;
					}
					}
				}
				this.state = 8837;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1254, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public primitive_expression(): Primitive_expressionContext {
		let _localctx: Primitive_expressionContext = new Primitive_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, TSqlParser.RULE_primitive_expression);
		try {
			this.state = 8842;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DEFAULT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8838;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			case TSqlParser.NULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8839;
				this.match(TSqlParser.NULL);
				}
				break;
			case TSqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8840;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;
			case TSqlParser.DECIMAL:
			case TSqlParser.STRING:
			case TSqlParser.BINARY:
			case TSqlParser.FLOAT:
			case TSqlParser.REAL:
			case TSqlParser.DOLLAR:
			case TSqlParser.PLUS:
			case TSqlParser.MINUS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8841;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_expression(): Case_expressionContext {
		let _localctx: Case_expressionContext = new Case_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, TSqlParser.RULE_case_expression);
		let _la: number;
		try {
			this.state = 8869;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1260, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8844;
				this.match(TSqlParser.CASE);
				this.state = 8845;
				_localctx._caseExpr = this.expression(0);
				this.state = 8847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8846;
					this.switch_section();
					}
					}
					this.state = 8849;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.WHEN);
				this.state = 8853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ELSE) {
					{
					this.state = 8851;
					this.match(TSqlParser.ELSE);
					this.state = 8852;
					_localctx._elseExpr = this.expression(0);
					}
				}

				this.state = 8855;
				this.match(TSqlParser.END);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8857;
				this.match(TSqlParser.CASE);
				this.state = 8859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8858;
					this.switch_search_condition_section();
					}
					}
					this.state = 8861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TSqlParser.WHEN);
				this.state = 8865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ELSE) {
					{
					this.state = 8863;
					this.match(TSqlParser.ELSE);
					this.state = 8864;
					_localctx._elseExpr = this.expression(0);
					}
				}

				this.state = 8867;
				this.match(TSqlParser.END);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_operator_expression(): Unary_operator_expressionContext {
		let _localctx: Unary_operator_expressionContext = new Unary_operator_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, TSqlParser.RULE_unary_operator_expression);
		let _la: number;
		try {
			this.state = 8875;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.BIT_NOT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8871;
				this.match(TSqlParser.BIT_NOT);
				this.state = 8872;
				this.expression(0);
				}
				break;
			case TSqlParser.PLUS:
			case TSqlParser.MINUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8873;
				_localctx._op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.PLUS || _la === TSqlParser.MINUS)) {
					_localctx._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8874;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bracket_expression(): Bracket_expressionContext {
		let _localctx: Bracket_expressionContext = new Bracket_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, TSqlParser.RULE_bracket_expression);
		try {
			this.state = 8885;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1262, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8877;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8878;
				this.expression(0);
				this.state = 8879;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8881;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8882;
				this.subquery();
				this.state = 8883;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_expression(): Constant_expressionContext {
		let _localctx: Constant_expressionContext = new Constant_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, TSqlParser.RULE_constant_expression);
		try {
			this.state = 8895;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1263, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8887;
				this.match(TSqlParser.NULL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8888;
				this.constant();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8889;
				this.function_call();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8890;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8891;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8892;
				this.constant_expression();
				this.state = 8893;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subquery(): SubqueryContext {
		let _localctx: SubqueryContext = new SubqueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, TSqlParser.RULE_subquery);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8897;
			this.select_statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_expression(): With_expressionContext {
		let _localctx: With_expressionContext = new With_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, TSqlParser.RULE_with_expression);
		let _la: number;
		try {
			this.state = 8925;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1267, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8899;
				this.match(TSqlParser.WITH);
				this.state = 8902;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1264, this._ctx) ) {
				case 1:
					{
					this.state = 8900;
					this.match(TSqlParser.XMLNAMESPACES);
					this.state = 8901;
					this.match(TSqlParser.COMMA);
					}
					break;
				}
				this.state = 8904;
				this.common_table_expression();
				this.state = 8909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 8905;
					this.match(TSqlParser.COMMA);
					this.state = 8906;
					this.common_table_expression();
					}
					}
					this.state = 8911;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8912;
				this.match(TSqlParser.WITH);
				this.state = 8913;
				this.match(TSqlParser.BLOCKING_HIERARCHY);
				this.state = 8918;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.LR_BRACKET) {
					{
					this.state = 8914;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 8915;
					this.full_column_name_list();
					this.state = 8916;
					this.match(TSqlParser.RR_BRACKET);
					}
				}

				this.state = 8920;
				this.match(TSqlParser.AS);
				this.state = 8921;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8922;
				this.select_statement();
				this.state = 8923;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public common_table_expression(): Common_table_expressionContext {
		let _localctx: Common_table_expressionContext = new Common_table_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, TSqlParser.RULE_common_table_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8927;
			_localctx._expression_name = this.id();
			this.state = 8932;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.LR_BRACKET) {
				{
				this.state = 8928;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8929;
				this.column_name_list();
				this.state = 8930;
				this.match(TSqlParser.RR_BRACKET);
				}
			}

			this.state = 8934;
			this.match(TSqlParser.AS);
			this.state = 8935;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 8936;
			this.select_statement();
			this.state = 8937;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_elem(): Update_elemContext {
		let _localctx: Update_elemContext = new Update_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, TSqlParser.RULE_update_elem);
		try {
			this.state = 8955;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1271, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8941;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.BLOCKING_HIERARCHY:
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 8939;
					this.full_column_name();
					}
					break;
				case TSqlParser.LOCAL_ID:
					{
					this.state = 8940;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 8945;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.EQUAL:
					{
					this.state = 8943;
					this.match(TSqlParser.EQUAL);
					}
					break;
				case TSqlParser.PLUS_ASSIGN:
				case TSqlParser.MINUS_ASSIGN:
				case TSqlParser.MULT_ASSIGN:
				case TSqlParser.DIV_ASSIGN:
				case TSqlParser.MOD_ASSIGN:
				case TSqlParser.AND_ASSIGN:
				case TSqlParser.XOR_ASSIGN:
				case TSqlParser.OR_ASSIGN:
					{
					this.state = 8944;
					this.assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 8947;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8948;
				_localctx._udt_column_name = this.id();
				this.state = 8949;
				this.match(TSqlParser.DOT);
				this.state = 8950;
				_localctx._method_name = this.id();
				this.state = 8951;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8952;
				this.expression_list();
				this.state = 8953;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public search_condition_list(): Search_condition_listContext {
		let _localctx: Search_condition_listContext = new Search_condition_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, TSqlParser.RULE_search_condition_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8957;
			this.search_condition();
			this.state = 8962;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 8958;
				this.match(TSqlParser.COMMA);
				this.state = 8959;
				this.search_condition();
				}
				}
				this.state = 8964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public search_condition(): Search_conditionContext {
		let _localctx: Search_conditionContext = new Search_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, TSqlParser.RULE_search_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8965;
			this.search_condition_and();
			this.state = 8970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.OR) {
				{
				{
				this.state = 8966;
				this.match(TSqlParser.OR);
				this.state = 8967;
				this.search_condition_and();
				}
				}
				this.state = 8972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public search_condition_and(): Search_condition_andContext {
		let _localctx: Search_condition_andContext = new Search_condition_andContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, TSqlParser.RULE_search_condition_and);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8973;
			this.search_condition_not();
			this.state = 8978;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.AND) {
				{
				{
				this.state = 8974;
				this.match(TSqlParser.AND);
				this.state = 8975;
				this.search_condition_not();
				}
				}
				this.state = 8980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public search_condition_not(): Search_condition_notContext {
		let _localctx: Search_condition_notContext = new Search_condition_notContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, TSqlParser.RULE_search_condition_not);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.NOT) {
				{
				this.state = 8981;
				this.match(TSqlParser.NOT);
				}
			}

			this.state = 8984;
			this.predicate();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predicate(): PredicateContext {
		let _localctx: PredicateContext = new PredicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, TSqlParser.RULE_predicate);
		let _la: number;
		try {
			this.state = 9041;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1281, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8986;
				this.match(TSqlParser.EXISTS);
				this.state = 8987;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8988;
				this.subquery();
				this.state = 8989;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8991;
				this.expression(0);
				this.state = 8992;
				this.comparison_operator();
				this.state = 8993;
				this.expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8995;
				this.expression(0);
				this.state = 8996;
				this.comparison_operator();
				this.state = 8997;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ALL || _la === TSqlParser.ANY || _la === TSqlParser.SOME)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8998;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 8999;
				this.subquery();
				this.state = 9000;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9002;
				this.expression(0);
				this.state = 9004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.NOT) {
					{
					this.state = 9003;
					this.match(TSqlParser.NOT);
					}
				}

				this.state = 9006;
				this.match(TSqlParser.BETWEEN);
				this.state = 9007;
				this.expression(0);
				this.state = 9008;
				this.match(TSqlParser.AND);
				this.state = 9009;
				this.expression(0);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9011;
				this.expression(0);
				this.state = 9013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.NOT) {
					{
					this.state = 9012;
					this.match(TSqlParser.NOT);
					}
				}

				this.state = 9015;
				this.match(TSqlParser.IN);
				this.state = 9016;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9019;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1278, this._ctx) ) {
				case 1:
					{
					this.state = 9017;
					this.subquery();
					}
					break;

				case 2:
					{
					this.state = 9018;
					this.expression_list();
					}
					break;
				}
				this.state = 9021;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9023;
				this.expression(0);
				this.state = 9025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.NOT) {
					{
					this.state = 9024;
					this.match(TSqlParser.NOT);
					}
				}

				this.state = 9027;
				this.match(TSqlParser.LIKE);
				this.state = 9028;
				this.expression(0);
				this.state = 9031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ESCAPE) {
					{
					this.state = 9029;
					this.match(TSqlParser.ESCAPE);
					this.state = 9030;
					this.expression(0);
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9033;
				this.expression(0);
				this.state = 9034;
				this.match(TSqlParser.IS);
				this.state = 9035;
				this.null_notnull();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9037;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9038;
				this.search_condition();
				this.state = 9039;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public query_expression(): Query_expressionContext {
		let _localctx: Query_expressionContext = new Query_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, TSqlParser.RULE_query_expression);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9048;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.SELECT:
				{
				this.state = 9043;
				this.query_specification();
				}
				break;
			case TSqlParser.LR_BRACKET:
				{
				this.state = 9044;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9045;
				this.query_expression();
				this.state = 9046;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 9053;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1283, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9050;
					this.sql_union();
					}
					}
				}
				this.state = 9055;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1283, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sql_union(): Sql_unionContext {
		let _localctx: Sql_unionContext = new Sql_unionContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, TSqlParser.RULE_sql_union);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9062;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.UNION:
				{
				this.state = 9056;
				this.match(TSqlParser.UNION);
				this.state = 9058;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ALL) {
					{
					this.state = 9057;
					this.match(TSqlParser.ALL);
					}
				}

				}
				break;
			case TSqlParser.EXCEPT:
				{
				this.state = 9060;
				this.match(TSqlParser.EXCEPT);
				}
				break;
			case TSqlParser.INTERSECT:
				{
				this.state = 9061;
				this.match(TSqlParser.INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 9069;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.SELECT:
				{
				this.state = 9064;
				this.query_specification();
				}
				break;
			case TSqlParser.LR_BRACKET:
				{
				{
				this.state = 9065;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9066;
				this.query_expression();
				this.state = 9067;
				this.match(TSqlParser.RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public query_specification(): Query_specificationContext {
		let _localctx: Query_specificationContext = new Query_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, TSqlParser.RULE_query_specification);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9071;
			this.match(TSqlParser.SELECT);
			this.state = 9073;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ALL || _la === TSqlParser.DISTINCT) {
				{
				this.state = 9072;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ALL || _la === TSqlParser.DISTINCT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 9076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.TOP) {
				{
				this.state = 9075;
				this.top_clause();
				}
			}

			this.state = 9078;
			this.select_list();
			this.state = 9081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.INTO) {
				{
				this.state = 9079;
				this.match(TSqlParser.INTO);
				this.state = 9080;
				this.table_name();
				}
			}

			this.state = 9085;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FROM) {
				{
				this.state = 9083;
				this.match(TSqlParser.FROM);
				this.state = 9084;
				this.table_sources();
				}
			}

			this.state = 9089;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1291, this._ctx) ) {
			case 1:
				{
				this.state = 9087;
				this.match(TSqlParser.WHERE);
				this.state = 9088;
				_localctx._where = this.search_condition();
				}
				break;
			}
			this.state = 9104;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1294, this._ctx) ) {
			case 1:
				{
				this.state = 9091;
				this.match(TSqlParser.GROUP);
				this.state = 9092;
				this.match(TSqlParser.BY);
				this.state = 9094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ALL) {
					{
					this.state = 9093;
					this.match(TSqlParser.ALL);
					}
				}

				this.state = 9096;
				this.group_by_item();
				this.state = 9101;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1293, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 9097;
						this.match(TSqlParser.COMMA);
						this.state = 9098;
						this.group_by_item();
						}
						}
					}
					this.state = 9103;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1293, this._ctx);
				}
				}
				break;
			}
			this.state = 9108;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1295, this._ctx) ) {
			case 1:
				{
				this.state = 9106;
				this.match(TSqlParser.HAVING);
				this.state = 9107;
				_localctx._having = this.search_condition();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_clause(): Top_clauseContext {
		let _localctx: Top_clauseContext = new Top_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, TSqlParser.RULE_top_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9110;
			this.match(TSqlParser.TOP);
			this.state = 9113;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1296, this._ctx) ) {
			case 1:
				{
				this.state = 9111;
				this.top_percent();
				}
				break;

			case 2:
				{
				this.state = 9112;
				this.top_count();
				}
				break;
			}
			this.state = 9117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 9115;
				this.match(TSqlParser.WITH);
				this.state = 9116;
				this.match(TSqlParser.TIES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_percent(): Top_percentContext {
		let _localctx: Top_percentContext = new Top_percentContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, TSqlParser.RULE_top_percent);
		let _la: number;
		try {
			this.state = 9126;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.FLOAT:
			case TSqlParser.REAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9119;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FLOAT || _la === TSqlParser.REAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9120;
				this.match(TSqlParser.PERCENT);
				}
				break;
			case TSqlParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9121;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9122;
				this.expression(0);
				this.state = 9123;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 9124;
				this.match(TSqlParser.PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_count(): Top_countContext {
		let _localctx: Top_countContext = new Top_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, TSqlParser.RULE_top_count);
		try {
			this.state = 9133;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9128;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			case TSqlParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9129;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9130;
				this.expression(0);
				this.state = 9131;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public order_by_clause(): Order_by_clauseContext {
		let _localctx: Order_by_clauseContext = new Order_by_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, TSqlParser.RULE_order_by_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9135;
			this.match(TSqlParser.ORDER);
			this.state = 9136;
			this.match(TSqlParser.BY);
			this.state = 9137;
			this.order_by_expression();
			this.state = 9142;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1300, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9138;
					this.match(TSqlParser.COMMA);
					this.state = 9139;
					this.order_by_expression();
					}
					}
				}
				this.state = 9144;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1300, this._ctx);
			}
			this.state = 9156;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1302, this._ctx) ) {
			case 1:
				{
				this.state = 9145;
				this.match(TSqlParser.OFFSET);
				this.state = 9146;
				this.expression(0);
				this.state = 9147;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ROW || _la === TSqlParser.ROWS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9154;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1301, this._ctx) ) {
				case 1:
					{
					this.state = 9148;
					this.match(TSqlParser.FETCH);
					this.state = 9149;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.FIRST || _la === TSqlParser.NEXT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9150;
					this.expression(0);
					this.state = 9151;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ROW || _la === TSqlParser.ROWS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9152;
					this.match(TSqlParser.ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_clause(): For_clauseContext {
		let _localctx: For_clauseContext = new For_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, TSqlParser.RULE_for_clause);
		let _la: number;
		try {
			let _alt: number;
			this.state = 9246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1319, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9158;
				this.match(TSqlParser.FOR);
				this.state = 9159;
				this.match(TSqlParser.BROWSE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9160;
				this.match(TSqlParser.FOR);
				this.state = 9161;
				this.match(TSqlParser.XML);
				this.state = 9169;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.RAW:
					{
					this.state = 9162;
					this.match(TSqlParser.RAW);
					this.state = 9166;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1303, this._ctx) ) {
					case 1:
						{
						this.state = 9163;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 9164;
						this.match(TSqlParser.STRING);
						this.state = 9165;
						this.match(TSqlParser.RR_BRACKET);
						}
						break;
					}
					}
					break;
				case TSqlParser.AUTO:
					{
					this.state = 9168;
					this.match(TSqlParser.AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 9174;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1305, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 9171;
						this.xml_common_directives();
						}
						}
					}
					this.state = 9176;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1305, this._ctx);
				}
				this.state = 9187;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1308, this._ctx) ) {
				case 1:
					{
					this.state = 9177;
					this.match(TSqlParser.COMMA);
					this.state = 9185;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TSqlParser.XMLDATA:
						{
						this.state = 9178;
						this.match(TSqlParser.XMLDATA);
						}
						break;
					case TSqlParser.XMLSCHEMA:
						{
						this.state = 9179;
						this.match(TSqlParser.XMLSCHEMA);
						this.state = 9183;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 1306, this._ctx) ) {
						case 1:
							{
							this.state = 9180;
							this.match(TSqlParser.LR_BRACKET);
							this.state = 9181;
							this.match(TSqlParser.STRING);
							this.state = 9182;
							this.match(TSqlParser.RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				this.state = 9192;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1309, this._ctx) ) {
				case 1:
					{
					this.state = 9189;
					this.match(TSqlParser.COMMA);
					this.state = 9190;
					this.match(TSqlParser.ELEMENTS);
					this.state = 9191;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ABSENT || _la === TSqlParser.XSINIL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9194;
				this.match(TSqlParser.FOR);
				this.state = 9195;
				this.match(TSqlParser.XML);
				this.state = 9196;
				this.match(TSqlParser.EXPLICIT);
				this.state = 9200;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1310, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 9197;
						this.xml_common_directives();
						}
						}
					}
					this.state = 9202;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1310, this._ctx);
				}
				this.state = 9205;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1311, this._ctx) ) {
				case 1:
					{
					this.state = 9203;
					this.match(TSqlParser.COMMA);
					this.state = 9204;
					this.match(TSqlParser.XMLDATA);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9207;
				this.match(TSqlParser.FOR);
				this.state = 9208;
				this.match(TSqlParser.XML);
				this.state = 9209;
				this.match(TSqlParser.PATH);
				this.state = 9213;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1312, this._ctx) ) {
				case 1:
					{
					this.state = 9210;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 9211;
					this.match(TSqlParser.STRING);
					this.state = 9212;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 9218;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1313, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 9215;
						this.xml_common_directives();
						}
						}
					}
					this.state = 9220;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1313, this._ctx);
				}
				this.state = 9224;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1314, this._ctx) ) {
				case 1:
					{
					this.state = 9221;
					this.match(TSqlParser.COMMA);
					this.state = 9222;
					this.match(TSqlParser.ELEMENTS);
					this.state = 9223;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ABSENT || _la === TSqlParser.XSINIL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9226;
				this.match(TSqlParser.FOR);
				this.state = 9227;
				this.match(TSqlParser.JSON);
				this.state = 9228;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.AUTO || _la === TSqlParser.PATH)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9236;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1316, this._ctx) ) {
				case 1:
					{
					this.state = 9229;
					this.match(TSqlParser.COMMA);
					this.state = 9230;
					this.match(TSqlParser.ROOT);
					this.state = 9234;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1315, this._ctx) ) {
					case 1:
						{
						this.state = 9231;
						this.match(TSqlParser.LR_BRACKET);
						this.state = 9232;
						this.match(TSqlParser.STRING);
						this.state = 9233;
						this.match(TSqlParser.RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				this.state = 9240;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1317, this._ctx) ) {
				case 1:
					{
					this.state = 9238;
					this.match(TSqlParser.COMMA);
					this.state = 9239;
					this.match(TSqlParser.INCLUDE_NULL_VALUES);
					}
					break;
				}
				this.state = 9244;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1318, this._ctx) ) {
				case 1:
					{
					this.state = 9242;
					this.match(TSqlParser.COMMA);
					this.state = 9243;
					this.match(TSqlParser.WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_common_directives(): Xml_common_directivesContext {
		let _localctx: Xml_common_directivesContext = new Xml_common_directivesContext(this._ctx, this.state);
		this.enterRule(_localctx, 760, TSqlParser.RULE_xml_common_directives);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9248;
			this.match(TSqlParser.COMMA);
			this.state = 9249;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.BINARY_BASE64 || _la === TSqlParser.ROOT || _la === TSqlParser.TYPE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public order_by_expression(): Order_by_expressionContext {
		let _localctx: Order_by_expressionContext = new Order_by_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 762, TSqlParser.RULE_order_by_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9251;
			this.expression(0);
			this.state = 9253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ASC || _la === TSqlParser.DESC) {
				{
				this.state = 9252;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ASC || _la === TSqlParser.DESC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_by_item(): Group_by_itemContext {
		let _localctx: Group_by_itemContext = new Group_by_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 764, TSqlParser.RULE_group_by_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9255;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option_clause(): Option_clauseContext {
		let _localctx: Option_clauseContext = new Option_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 766, TSqlParser.RULE_option_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9257;
			this.match(TSqlParser.OPTION);
			this.state = 9258;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9259;
			this.option();
			this.state = 9264;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 9260;
				this.match(TSqlParser.COMMA);
				this.state = 9261;
				this.option();
				}
				}
				this.state = 9266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9267;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option(): OptionContext {
		let _localctx: OptionContext = new OptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 768, TSqlParser.RULE_option);
		let _la: number;
		try {
			this.state = 9314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1323, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9269;
				this.match(TSqlParser.FAST);
				this.state = 9270;
				_localctx._number_rows = this.match(TSqlParser.DECIMAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9271;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ORDER || _la === TSqlParser.HASH)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9272;
				this.match(TSqlParser.GROUP);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9273;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.MERGE || _la === TSqlParser.CONCAT || _la === TSqlParser.HASH)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9274;
				this.match(TSqlParser.UNION);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9275;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.MERGE || _la === TSqlParser.HASH || _la === TSqlParser.LOOP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9276;
				this.match(TSqlParser.JOIN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9277;
				this.match(TSqlParser.EXPAND);
				this.state = 9278;
				this.match(TSqlParser.VIEWS);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9279;
				this.match(TSqlParser.FORCE);
				this.state = 9280;
				this.match(TSqlParser.ORDER);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9281;
				this.match(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9282;
				this.match(TSqlParser.KEEP);
				this.state = 9283;
				this.match(TSqlParser.PLAN);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9284;
				this.match(TSqlParser.KEEPFIXED);
				this.state = 9285;
				this.match(TSqlParser.PLAN);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9286;
				this.match(TSqlParser.MAXDOP);
				this.state = 9287;
				_localctx._number_of_processors = this.match(TSqlParser.DECIMAL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 9288;
				this.match(TSqlParser.MAXRECURSION);
				this.state = 9289;
				_localctx._number_recursion = this.match(TSqlParser.DECIMAL);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 9290;
				this.match(TSqlParser.OPTIMIZE);
				this.state = 9291;
				this.match(TSqlParser.FOR);
				this.state = 9292;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9293;
				this.optimize_for_arg();
				this.state = 9298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TSqlParser.COMMA) {
					{
					{
					this.state = 9294;
					this.match(TSqlParser.COMMA);
					this.state = 9295;
					this.optimize_for_arg();
					}
					}
					this.state = 9300;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9301;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 9303;
				this.match(TSqlParser.OPTIMIZE);
				this.state = 9304;
				this.match(TSqlParser.FOR);
				this.state = 9305;
				this.match(TSqlParser.UNKNOWN);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 9306;
				this.match(TSqlParser.PARAMETERIZATION);
				this.state = 9307;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FORCED || _la === TSqlParser.SIMPLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 9308;
				this.match(TSqlParser.RECOMPILE);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 9309;
				this.match(TSqlParser.ROBUST);
				this.state = 9310;
				this.match(TSqlParser.PLAN);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 9311;
				this.match(TSqlParser.USE);
				this.state = 9312;
				this.match(TSqlParser.PLAN);
				this.state = 9313;
				this.match(TSqlParser.STRING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optimize_for_arg(): Optimize_for_argContext {
		let _localctx: Optimize_for_argContext = new Optimize_for_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 770, TSqlParser.RULE_optimize_for_arg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9316;
			this.match(TSqlParser.LOCAL_ID);
			this.state = 9323;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.UNKNOWN:
				{
				this.state = 9317;
				this.match(TSqlParser.UNKNOWN);
				}
				break;
			case TSqlParser.EQUAL:
				{
				this.state = 9318;
				this.match(TSqlParser.EQUAL);
				this.state = 9321;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.DECIMAL:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
					{
					this.state = 9319;
					this.constant();
					}
					break;
				case TSqlParser.NULL:
					{
					this.state = 9320;
					this.match(TSqlParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list(): Select_listContext {
		let _localctx: Select_listContext = new Select_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 772, TSqlParser.RULE_select_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9325;
			this.select_list_elem();
			this.state = 9330;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1326, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9326;
					this.match(TSqlParser.COMMA);
					this.state = 9327;
					this.select_list_elem();
					}
					}
				}
				this.state = 9332;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1326, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public udt_method_arguments(): Udt_method_argumentsContext {
		let _localctx: Udt_method_argumentsContext = new Udt_method_argumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 774, TSqlParser.RULE_udt_method_arguments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9333;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9334;
			this.execute_var_string();
			this.state = 9339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 9335;
				this.match(TSqlParser.COMMA);
				this.state = 9336;
				this.execute_var_string();
				}
				}
				this.state = 9341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9342;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public asterisk(): AsteriskContext {
		let _localctx: AsteriskContext = new AsteriskContext(this._ctx, this.state);
		this.enterRule(_localctx, 776, TSqlParser.RULE_asterisk);
		try {
			this.state = 9349;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.STAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9344;
				this.match(TSqlParser.STAR);
				}
				break;
			case TSqlParser.BLOCKING_HIERARCHY:
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9345;
				this.table_name();
				this.state = 9346;
				this.match(TSqlParser.DOT);
				this.state = 9347;
				this.asterisk();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_elem(): Column_elemContext {
		let _localctx: Column_elemContext = new Column_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 778, TSqlParser.RULE_column_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9354;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1329, this._ctx) ) {
			case 1:
				{
				this.state = 9351;
				this.table_name();
				this.state = 9352;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 9361;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1330, this._ctx) ) {
			case 1:
				{
				this.state = 9356;
				_localctx._column_name = this.id();
				}
				break;

			case 2:
				{
				this.state = 9357;
				this.match(TSqlParser.DOLLAR);
				this.state = 9358;
				this.match(TSqlParser.IDENTITY);
				}
				break;

			case 3:
				{
				this.state = 9359;
				this.match(TSqlParser.DOLLAR);
				this.state = 9360;
				this.match(TSqlParser.ROWGUID);
				}
				break;
			}
			this.state = 9364;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1331, this._ctx) ) {
			case 1:
				{
				this.state = 9363;
				this.as_column_alias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public udt_elem(): Udt_elemContext {
		let _localctx: Udt_elemContext = new Udt_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 780, TSqlParser.RULE_udt_elem);
		try {
			this.state = 9383;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1335, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9366;
				_localctx._udt_column_name = this.id();
				this.state = 9367;
				this.match(TSqlParser.DOT);
				this.state = 9368;
				_localctx._non_static_attr = this.id();
				this.state = 9369;
				this.udt_method_arguments();
				this.state = 9371;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1332, this._ctx) ) {
				case 1:
					{
					this.state = 9370;
					this.as_column_alias();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9373;
				_localctx._udt_column_name = this.id();
				this.state = 9374;
				this.match(TSqlParser.COLON);
				this.state = 9375;
				this.match(TSqlParser.COLON);
				this.state = 9376;
				_localctx._static_attr = this.id();
				this.state = 9378;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1333, this._ctx) ) {
				case 1:
					{
					this.state = 9377;
					this.udt_method_arguments();
					}
					break;
				}
				this.state = 9381;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1334, this._ctx) ) {
				case 1:
					{
					this.state = 9380;
					this.as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression_elem(): Expression_elemContext {
		let _localctx: Expression_elemContext = new Expression_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 782, TSqlParser.RULE_expression_elem);
		try {
			this.state = 9393;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1337, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9385;
				this.column_alias();
				this.state = 9386;
				_localctx._eq = this.match(TSqlParser.EQUAL);
				this.state = 9387;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9389;
				this.expression(0);
				this.state = 9391;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1336, this._ctx) ) {
				case 1:
					{
					this.state = 9390;
					this.as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list_elem(): Select_list_elemContext {
		let _localctx: Select_list_elemContext = new Select_list_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 784, TSqlParser.RULE_select_list_elem);
		try {
			this.state = 9399;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1338, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9395;
				this.asterisk();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9396;
				this.column_elem();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9397;
				this.udt_elem();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9398;
				this.expression_elem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_sources(): Table_sourcesContext {
		let _localctx: Table_sourcesContext = new Table_sourcesContext(this._ctx, this.state);
		this.enterRule(_localctx, 786, TSqlParser.RULE_table_sources);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9401;
			this.table_source();
			this.state = 9406;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1339, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9402;
					this.match(TSqlParser.COMMA);
					this.state = 9403;
					this.table_source();
					}
					}
				}
				this.state = 9408;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1339, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_source(): Table_sourceContext {
		let _localctx: Table_sourceContext = new Table_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 788, TSqlParser.RULE_table_source);
		try {
			this.state = 9414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1340, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9409;
				this.table_source_item_joined();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9410;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9411;
				this.table_source_item_joined();
				this.state = 9412;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_source_item_joined(): Table_source_item_joinedContext {
		let _localctx: Table_source_item_joinedContext = new Table_source_item_joinedContext(this._ctx, this.state);
		this.enterRule(_localctx, 790, TSqlParser.RULE_table_source_item_joined);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9416;
			this.table_source_item();
			this.state = 9420;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1341, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9417;
					this.join_part();
					}
					}
				}
				this.state = 9422;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1341, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_source_item(): Table_source_itemContext {
		let _localctx: Table_source_itemContext = new Table_source_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 792, TSqlParser.RULE_table_source_item);
		try {
			this.state = 9469;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1352, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9423;
				this.table_name_with_hint();
				this.state = 9425;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1342, this._ctx) ) {
				case 1:
					{
					this.state = 9424;
					this.as_table_alias();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9427;
				this.full_table_name();
				this.state = 9429;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1343, this._ctx) ) {
				case 1:
					{
					this.state = 9428;
					this.as_table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9431;
				this.rowset_function();
				this.state = 9433;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1344, this._ctx) ) {
				case 1:
					{
					this.state = 9432;
					this.as_table_alias();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9435;
				this.derived_table();
				this.state = 9440;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1346, this._ctx) ) {
				case 1:
					{
					this.state = 9436;
					this.as_table_alias();
					this.state = 9438;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1345, this._ctx) ) {
					case 1:
						{
						this.state = 9437;
						this.column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9442;
				this.change_table();
				this.state = 9443;
				this.as_table_alias();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9445;
				this.function_call();
				this.state = 9447;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1347, this._ctx) ) {
				case 1:
					{
					this.state = 9446;
					this.as_table_alias();
					}
					break;
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9449;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 9451;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1348, this._ctx) ) {
				case 1:
					{
					this.state = 9450;
					this.as_table_alias();
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9453;
				this.match(TSqlParser.LOCAL_ID);
				this.state = 9454;
				this.match(TSqlParser.DOT);
				this.state = 9455;
				this.function_call();
				this.state = 9460;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1350, this._ctx) ) {
				case 1:
					{
					this.state = 9456;
					this.as_table_alias();
					this.state = 9458;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1349, this._ctx) ) {
					case 1:
						{
						this.state = 9457;
						this.column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9462;
				this.open_xml();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9463;
				this.match(TSqlParser.COLON);
				this.state = 9464;
				this.match(TSqlParser.COLON);
				this.state = 9465;
				this.function_call();
				this.state = 9467;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1351, this._ctx) ) {
				case 1:
					{
					this.state = 9466;
					this.as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_xml(): Open_xmlContext {
		let _localctx: Open_xmlContext = new Open_xmlContext(this._ctx, this.state);
		this.enterRule(_localctx, 794, TSqlParser.RULE_open_xml);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9471;
			this.match(TSqlParser.OPENXML);
			this.state = 9472;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9473;
			this.expression(0);
			this.state = 9474;
			this.match(TSqlParser.COMMA);
			this.state = 9475;
			this.expression(0);
			this.state = 9478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 9476;
				this.match(TSqlParser.COMMA);
				this.state = 9477;
				this.expression(0);
				}
			}

			this.state = 9480;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 9486;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1354, this._ctx) ) {
			case 1:
				{
				this.state = 9481;
				this.match(TSqlParser.WITH);
				this.state = 9482;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9483;
				this.schema_declaration();
				this.state = 9484;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_declaration(): Schema_declarationContext {
		let _localctx: Schema_declarationContext = new Schema_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 796, TSqlParser.RULE_schema_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9488;
			this.column_declaration();
			this.state = 9493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 9489;
				this.match(TSqlParser.COMMA);
				this.state = 9490;
				this.column_declaration();
				}
				}
				this.state = 9495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_declaration(): Column_declarationContext {
		let _localctx: Column_declarationContext = new Column_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 798, TSqlParser.RULE_column_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9496;
			this.match(TSqlParser.ID);
			this.state = 9497;
			this.data_type();
			this.state = 9499;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.STRING) {
				{
				this.state = 9498;
				this.match(TSqlParser.STRING);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public change_table(): Change_tableContext {
		let _localctx: Change_tableContext = new Change_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 800, TSqlParser.RULE_change_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9501;
			this.match(TSqlParser.CHANGETABLE);
			this.state = 9502;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9503;
			this.match(TSqlParser.CHANGES);
			this.state = 9504;
			this.table_name();
			this.state = 9505;
			this.match(TSqlParser.COMMA);
			this.state = 9506;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.NULL || _la === TSqlParser.LOCAL_ID || _la === TSqlParser.DECIMAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 9507;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public join_part(): Join_partContext {
		let _localctx: Join_partContext = new Join_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 802, TSqlParser.RULE_join_part);
		let _la: number;
		try {
			this.state = 9543;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1361, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9516;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.INNER:
				case TSqlParser.JOIN:
				case TSqlParser.MERGE:
				case TSqlParser.HASH:
				case TSqlParser.LOOP:
				case TSqlParser.REMOTE:
					{
					this.state = 9510;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.INNER) {
						{
						this.state = 9509;
						this.match(TSqlParser.INNER);
						}
					}

					}
					break;
				case TSqlParser.FULL:
				case TSqlParser.LEFT:
				case TSqlParser.RIGHT:
					{
					this.state = 9512;
					_localctx._join_type = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.FULL || _la === TSqlParser.LEFT || _la === TSqlParser.RIGHT)) {
						_localctx._join_type = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9514;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.OUTER) {
						{
						this.state = 9513;
						this.match(TSqlParser.OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 9519;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.MERGE || _la === TSqlParser.HASH || _la === TSqlParser.LOOP || _la === TSqlParser.REMOTE) {
					{
					this.state = 9518;
					_localctx._join_hint = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.MERGE || _la === TSqlParser.HASH || _la === TSqlParser.LOOP || _la === TSqlParser.REMOTE)) {
						_localctx._join_hint = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 9521;
				this.match(TSqlParser.JOIN);
				this.state = 9522;
				this.table_source();
				this.state = 9523;
				this.match(TSqlParser.ON);
				this.state = 9524;
				this.search_condition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9526;
				this.match(TSqlParser.CROSS);
				this.state = 9527;
				this.match(TSqlParser.JOIN);
				this.state = 9528;
				this.table_source();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9529;
				this.match(TSqlParser.CROSS);
				this.state = 9530;
				this.match(TSqlParser.APPLY);
				this.state = 9531;
				this.table_source();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9532;
				this.match(TSqlParser.OUTER);
				this.state = 9533;
				this.match(TSqlParser.APPLY);
				this.state = 9534;
				this.table_source();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9535;
				this.match(TSqlParser.PIVOT);
				this.state = 9536;
				this.pivot_clause();
				this.state = 9537;
				this.as_table_alias();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9539;
				this.match(TSqlParser.UNPIVOT);
				this.state = 9540;
				this.unpivot_clause();
				this.state = 9541;
				this.as_table_alias();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pivot_clause(): Pivot_clauseContext {
		let _localctx: Pivot_clauseContext = new Pivot_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 804, TSqlParser.RULE_pivot_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9545;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9546;
			this.aggregate_windowed_function();
			this.state = 9547;
			this.match(TSqlParser.FOR);
			this.state = 9548;
			this.full_column_name();
			this.state = 9549;
			this.match(TSqlParser.IN);
			this.state = 9550;
			this.column_alias_list();
			this.state = 9551;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unpivot_clause(): Unpivot_clauseContext {
		let _localctx: Unpivot_clauseContext = new Unpivot_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 806, TSqlParser.RULE_unpivot_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9553;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9554;
			this.expression(0);
			this.state = 9555;
			this.match(TSqlParser.FOR);
			this.state = 9556;
			this.full_column_name();
			this.state = 9557;
			this.match(TSqlParser.IN);
			this.state = 9558;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9559;
			this.full_column_name_list();
			this.state = 9560;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 9561;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public full_column_name_list(): Full_column_name_listContext {
		let _localctx: Full_column_name_listContext = new Full_column_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 808, TSqlParser.RULE_full_column_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9563;
			this.full_column_name();
			this.state = 9568;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 9564;
				this.match(TSqlParser.COMMA);
				this.state = 9565;
				this.full_column_name();
				}
				}
				this.state = 9570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_name_with_hint(): Table_name_with_hintContext {
		let _localctx: Table_name_with_hintContext = new Table_name_with_hintContext(this._ctx, this.state);
		this.enterRule(_localctx, 810, TSqlParser.RULE_table_name_with_hint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9571;
			this.table_name();
			this.state = 9573;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1363, this._ctx) ) {
			case 1:
				{
				this.state = 9572;
				this.with_table_hints();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowset_function(): Rowset_functionContext {
		let _localctx: Rowset_functionContext = new Rowset_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 812, TSqlParser.RULE_rowset_function);
		let _la: number;
		try {
			this.state = 9601;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1366, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 9575;
				this.match(TSqlParser.OPENROWSET);
				this.state = 9576;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9577;
				_localctx._provider_name = this.match(TSqlParser.STRING);
				this.state = 9578;
				this.match(TSqlParser.COMMA);
				this.state = 9579;
				_localctx._connectionString = this.match(TSqlParser.STRING);
				this.state = 9580;
				this.match(TSqlParser.COMMA);
				this.state = 9581;
				_localctx._sql = this.match(TSqlParser.STRING);
				this.state = 9582;
				this.match(TSqlParser.RR_BRACKET);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 9583;
				this.match(TSqlParser.OPENROWSET);
				this.state = 9584;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9585;
				this.match(TSqlParser.BULK);
				this.state = 9586;
				_localctx._data_file = this.match(TSqlParser.STRING);
				this.state = 9587;
				this.match(TSqlParser.COMMA);
				this.state = 9597;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1365, this._ctx) ) {
				case 1:
					{
					this.state = 9588;
					this.bulk_option();
					this.state = 9593;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.COMMA) {
						{
						{
						this.state = 9589;
						this.match(TSqlParser.COMMA);
						this.state = 9590;
						this.bulk_option();
						}
						}
						this.state = 9595;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;

				case 2:
					{
					this.state = 9596;
					this.id();
					}
					break;
				}
				this.state = 9599;
				this.match(TSqlParser.RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bulk_option(): Bulk_optionContext {
		let _localctx: Bulk_optionContext = new Bulk_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 814, TSqlParser.RULE_bulk_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9603;
			this.id();
			this.state = 9604;
			this.match(TSqlParser.EQUAL);
			this.state = 9605;
			_localctx._bulk_option_value = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.STRING)) {
				_localctx._bulk_option_value = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public derived_table(): Derived_tableContext {
		let _localctx: Derived_tableContext = new Derived_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 816, TSqlParser.RULE_derived_table);
		try {
			this.state = 9617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1367, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9607;
				this.subquery();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9608;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9609;
				this.subquery();
				this.state = 9610;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9612;
				this.table_value_constructor();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9613;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9614;
				this.table_value_constructor();
				this.state = 9615;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_call(): Function_callContext {
		let _localctx: Function_callContext = new Function_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 818, TSqlParser.RULE_function_call);
		let _la: number;
		try {
			this.state = 9742;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1372, this._ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9619;
				this.ranking_windowed_function();
				}
				break;

			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9620;
				this.aggregate_windowed_function();
				}
				break;

			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9621;
				this.analytic_windowed_function();
				}
				break;

			case 4:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9622;
				this.scalar_function_name();
				this.state = 9623;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & ((1 << (TSqlParser.BLOCKING_HIERARCHY - 30)) | (1 << (TSqlParser.CALLED - 30)) | (1 << (TSqlParser.CASE - 30)) | (1 << (TSqlParser.COALESCE - 30)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (TSqlParser.CONVERT - 69)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 69)) | (1 << (TSqlParser.CURRENT_USER - 69)) | (1 << (TSqlParser.DATA_COMPRESSION - 69)) | (1 << (TSqlParser.DEFAULT - 69)))) !== 0) || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 149)) & ~0x1F) === 0 && ((1 << (_la - 149)) & ((1 << (TSqlParser.IDENTITY - 149)) | (1 << (TSqlParser.INIT - 149)) | (1 << (TSqlParser.ISNULL - 149)) | (1 << (TSqlParser.KEY - 149)) | (1 << (TSqlParser.LEFT - 149)))) !== 0) || _la === TSqlParser.MASTER || _la === TSqlParser.MAX_MEMORY || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (TSqlParser.NULL - 221)) | (1 << (TSqlParser.NULLIF - 221)) | (1 << (TSqlParser.OFFSETS - 221)) | (1 << (TSqlParser.OVER - 221)) | (1 << (TSqlParser.PAGE - 221)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.RIGHT - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SESSION_USER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.SYSTEM_USER - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.LOCAL_ID - 767)) | (1 << (TSqlParser.DECIMAL - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.STRING - 767)) | (1 << (TSqlParser.BINARY - 767)))) !== 0) || ((((_la - 799)) & ~0x1F) === 0 && ((1 << (_la - 799)) & ((1 << (TSqlParser.FLOAT - 799)) | (1 << (TSqlParser.REAL - 799)) | (1 << (TSqlParser.DOLLAR - 799)) | (1 << (TSqlParser.LR_BRACKET - 799)) | (1 << (TSqlParser.PLUS - 799)) | (1 << (TSqlParser.MINUS - 799)) | (1 << (TSqlParser.BIT_NOT - 799)))) !== 0)) {
					{
					this.state = 9624;
					this.expression_list();
					}
				}

				this.state = 9627;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9629;
				this.match(TSqlParser.BINARY_CHECKSUM);
				this.state = 9630;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9631;
				this.match(TSqlParser.STAR);
				this.state = 9632;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new CASTContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9633;
				this.match(TSqlParser.CAST);
				this.state = 9634;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9635;
				this.expression(0);
				this.state = 9636;
				this.match(TSqlParser.AS);
				this.state = 9637;
				this.data_type();
				this.state = 9638;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 7:
				_localctx = new CONVERTContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9640;
				this.match(TSqlParser.CONVERT);
				this.state = 9641;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9642;
				(_localctx as CONVERTContext)._convert_data_type = this.data_type();
				this.state = 9643;
				this.match(TSqlParser.COMMA);
				this.state = 9644;
				(_localctx as CONVERTContext)._convert_expression = this.expression(0);
				this.state = 9647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 9645;
					this.match(TSqlParser.COMMA);
					this.state = 9646;
					(_localctx as CONVERTContext)._style = this.expression(0);
					}
				}

				this.state = 9649;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 8:
				_localctx = new CHECKSUMContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9651;
				this.match(TSqlParser.CHECKSUM);
				this.state = 9652;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9653;
				this.match(TSqlParser.STAR);
				this.state = 9654;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new COALESCEContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9655;
				this.match(TSqlParser.COALESCE);
				this.state = 9656;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9657;
				this.expression_list();
				this.state = 9658;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9660;
				this.match(TSqlParser.CURRENT_TIMESTAMP);
				}
				break;

			case 11:
				_localctx = new CURRENT_USERContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 9661;
				this.match(TSqlParser.CURRENT_USER);
				}
				break;

			case 12:
				_localctx = new DATEADDContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 9662;
				this.match(TSqlParser.DATEADD);
				this.state = 9663;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9664;
				this.match(TSqlParser.ID);
				this.state = 9665;
				this.match(TSqlParser.COMMA);
				this.state = 9666;
				this.expression(0);
				this.state = 9667;
				this.match(TSqlParser.COMMA);
				this.state = 9668;
				this.expression(0);
				this.state = 9669;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new DATEDIFFContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 9671;
				this.match(TSqlParser.DATEDIFF);
				this.state = 9672;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9673;
				this.match(TSqlParser.ID);
				this.state = 9674;
				this.match(TSqlParser.COMMA);
				this.state = 9675;
				this.expression(0);
				this.state = 9676;
				this.match(TSqlParser.COMMA);
				this.state = 9677;
				this.expression(0);
				this.state = 9678;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new DATENAMEContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 9680;
				this.match(TSqlParser.DATENAME);
				this.state = 9681;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9682;
				this.match(TSqlParser.ID);
				this.state = 9683;
				this.match(TSqlParser.COMMA);
				this.state = 9684;
				this.expression(0);
				this.state = 9685;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new DATEPARTContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 9687;
				this.match(TSqlParser.DATEPART);
				this.state = 9688;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9689;
				this.match(TSqlParser.ID);
				this.state = 9690;
				this.match(TSqlParser.COMMA);
				this.state = 9691;
				this.expression(0);
				this.state = 9692;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 16:
				_localctx = new GETDATEContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 9694;
				this.match(TSqlParser.GETDATE);
				this.state = 9695;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9696;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 17:
				_localctx = new GETUTCDATEContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 9697;
				this.match(TSqlParser.GETUTCDATE);
				this.state = 9698;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9699;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 18:
				_localctx = new IDENTITYContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 9700;
				this.match(TSqlParser.IDENTITY);
				this.state = 9701;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9702;
				this.data_type();
				this.state = 9705;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1370, this._ctx) ) {
				case 1:
					{
					this.state = 9703;
					this.match(TSqlParser.COMMA);
					this.state = 9704;
					(_localctx as IDENTITYContext)._seed = this.match(TSqlParser.DECIMAL);
					}
					break;
				}
				this.state = 9709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 9707;
					this.match(TSqlParser.COMMA);
					this.state = 9708;
					(_localctx as IDENTITYContext)._increment = this.match(TSqlParser.DECIMAL);
					}
				}

				this.state = 9711;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 19:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 9713;
				this.match(TSqlParser.MIN_ACTIVE_ROWVERSION);
				}
				break;

			case 20:
				_localctx = new NULLIFContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 9714;
				this.match(TSqlParser.NULLIF);
				this.state = 9715;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9716;
				this.expression(0);
				this.state = 9717;
				this.match(TSqlParser.COMMA);
				this.state = 9718;
				this.expression(0);
				this.state = 9719;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 21:
				_localctx = new STUFFContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 9721;
				this.match(TSqlParser.STUFF);
				this.state = 9722;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9723;
				this.expression(0);
				this.state = 9724;
				this.match(TSqlParser.COMMA);
				this.state = 9725;
				this.match(TSqlParser.DECIMAL);
				this.state = 9726;
				this.match(TSqlParser.COMMA);
				this.state = 9727;
				this.match(TSqlParser.DECIMAL);
				this.state = 9728;
				this.match(TSqlParser.COMMA);
				this.state = 9729;
				this.expression(0);
				this.state = 9730;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 22:
				_localctx = new SESSION_USERContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 9732;
				this.match(TSqlParser.SESSION_USER);
				}
				break;

			case 23:
				_localctx = new SYSTEM_USERContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 9733;
				this.match(TSqlParser.SYSTEM_USER);
				}
				break;

			case 24:
				_localctx = new ISNULLContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 9734;
				this.match(TSqlParser.ISNULL);
				this.state = 9735;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9736;
				this.expression(0);
				this.state = 9737;
				this.match(TSqlParser.COMMA);
				this.state = 9738;
				this.expression(0);
				this.state = 9739;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 25:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 9741;
				this.xml_data_type_methods();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_data_type_methods(): Xml_data_type_methodsContext {
		let _localctx: Xml_data_type_methodsContext = new Xml_data_type_methodsContext(this._ctx, this.state);
		this.enterRule(_localctx, 820, TSqlParser.RULE_xml_data_type_methods);
		try {
			this.state = 9749;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1373, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9744;
				this.value_method();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9745;
				this.query_method();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9746;
				this.exist_method();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9747;
				this.modify_method();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9748;
				this.nodes_method();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_method(): Value_methodContext {
		let _localctx: Value_methodContext = new Value_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 822, TSqlParser.RULE_value_method);
		try {
			this.state = 9794;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1377, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9755;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1374, this._ctx) ) {
				case 1:
					{
					this.state = 9751;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;

				case 2:
					{
					this.state = 9752;
					this.match(TSqlParser.ID);
					}
					break;

				case 3:
					{
					this.state = 9753;
					this.match(TSqlParser.EVENTDATA);
					}
					break;

				case 4:
					{
					this.state = 9754;
					this.query_method();
					}
					break;
				}
				this.state = 9757;
				this.match(TSqlParser.DOT);
				this.state = 9758;
				this.match(TSqlParser.VALUE);
				this.state = 9759;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9760;
				_localctx._xquery = this.match(TSqlParser.STRING);
				this.state = 9761;
				this.match(TSqlParser.COMMA);
				this.state = 9762;
				_localctx._sqltype = this.match(TSqlParser.STRING);
				this.state = 9763;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9768;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1375, this._ctx) ) {
				case 1:
					{
					this.state = 9764;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;

				case 2:
					{
					this.state = 9765;
					this.match(TSqlParser.ID);
					}
					break;

				case 3:
					{
					this.state = 9766;
					this.match(TSqlParser.EVENTDATA);
					}
					break;

				case 4:
					{
					this.state = 9767;
					this.query_method();
					}
					break;
				}
				this.state = 9770;
				this.match(TSqlParser.DOT);
				this.state = 9771;
				this.match(TSqlParser.ROW);
				this.state = 9772;
				this.match(TSqlParser.DOT);
				this.state = 9773;
				this.match(TSqlParser.VALUE);
				this.state = 9774;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9775;
				_localctx._xquery = this.match(TSqlParser.STRING);
				this.state = 9776;
				this.match(TSqlParser.COMMA);
				this.state = 9777;
				_localctx._sqltype = this.match(TSqlParser.STRING);
				this.state = 9778;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9783;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1376, this._ctx) ) {
				case 1:
					{
					this.state = 9779;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;

				case 2:
					{
					this.state = 9780;
					this.match(TSqlParser.ID);
					}
					break;

				case 3:
					{
					this.state = 9781;
					this.match(TSqlParser.EVENTDATA);
					}
					break;

				case 4:
					{
					this.state = 9782;
					this.query_method();
					}
					break;
				}
				this.state = 9785;
				this.match(TSqlParser.DOT);
				this.state = 9786;
				this.match(TSqlParser.PARAM_NODE);
				this.state = 9787;
				this.match(TSqlParser.DOT);
				this.state = 9788;
				this.match(TSqlParser.VALUE);
				this.state = 9789;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9790;
				_localctx._xquery = this.match(TSqlParser.STRING);
				this.state = 9791;
				this.match(TSqlParser.COMMA);
				this.state = 9792;
				_localctx._sqltype = this.match(TSqlParser.STRING);
				this.state = 9793;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public query_method(): Query_methodContext {
		let _localctx: Query_methodContext = new Query_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 824, TSqlParser.RULE_query_method);
		try {
			this.state = 9818;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1380, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9799;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1378, this._ctx) ) {
				case 1:
					{
					this.state = 9796;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;

				case 2:
					{
					this.state = 9797;
					this.match(TSqlParser.ID);
					}
					break;

				case 3:
					{
					this.state = 9798;
					this.full_table_name();
					}
					break;
				}
				this.state = 9801;
				this.match(TSqlParser.DOT);
				this.state = 9802;
				this.match(TSqlParser.QUERY);
				this.state = 9803;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9804;
				_localctx._xquery = this.match(TSqlParser.STRING);
				this.state = 9805;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9809;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1379, this._ctx) ) {
				case 1:
					{
					this.state = 9806;
					this.match(TSqlParser.LOCAL_ID);
					}
					break;

				case 2:
					{
					this.state = 9807;
					this.match(TSqlParser.ID);
					}
					break;

				case 3:
					{
					this.state = 9808;
					this.full_table_name();
					}
					break;
				}
				this.state = 9811;
				this.match(TSqlParser.DOT);
				this.state = 9812;
				this.match(TSqlParser.ROW);
				this.state = 9813;
				this.match(TSqlParser.DOT);
				this.state = 9814;
				this.match(TSqlParser.QUERY);
				this.state = 9815;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9816;
				_localctx._xquery = this.match(TSqlParser.STRING);
				this.state = 9817;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exist_method(): Exist_methodContext {
		let _localctx: Exist_methodContext = new Exist_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 826, TSqlParser.RULE_exist_method);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9820;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 9821;
			this.match(TSqlParser.DOT);
			this.state = 9822;
			this.match(TSqlParser.EXIST);
			this.state = 9823;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9824;
			_localctx._xquery = this.match(TSqlParser.STRING);
			this.state = 9825;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modify_method(): Modify_methodContext {
		let _localctx: Modify_methodContext = new Modify_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 828, TSqlParser.RULE_modify_method);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9827;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 9828;
			this.match(TSqlParser.DOT);
			this.state = 9829;
			this.match(TSqlParser.MODIFY);
			this.state = 9830;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9831;
			_localctx._xml_dml = this.match(TSqlParser.STRING);
			this.state = 9832;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nodes_method(): Nodes_methodContext {
		let _localctx: Nodes_methodContext = new Nodes_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 830, TSqlParser.RULE_nodes_method);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9834;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 9835;
			this.match(TSqlParser.DOT);
			this.state = 9836;
			this.match(TSqlParser.NODES);
			this.state = 9837;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9838;
			_localctx._xquery = this.match(TSqlParser.STRING);
			this.state = 9839;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_section(): Switch_sectionContext {
		let _localctx: Switch_sectionContext = new Switch_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 832, TSqlParser.RULE_switch_section);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9841;
			this.match(TSqlParser.WHEN);
			this.state = 9842;
			this.expression(0);
			this.state = 9843;
			this.match(TSqlParser.THEN);
			this.state = 9844;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_search_condition_section(): Switch_search_condition_sectionContext {
		let _localctx: Switch_search_condition_sectionContext = new Switch_search_condition_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 834, TSqlParser.RULE_switch_search_condition_section);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9846;
			this.match(TSqlParser.WHEN);
			this.state = 9847;
			this.search_condition();
			this.state = 9848;
			this.match(TSqlParser.THEN);
			this.state = 9849;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public as_column_alias(): As_column_aliasContext {
		let _localctx: As_column_aliasContext = new As_column_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 836, TSqlParser.RULE_as_column_alias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9852;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 9851;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 9854;
			this.column_alias();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public as_table_alias(): As_table_aliasContext {
		let _localctx: As_table_aliasContext = new As_table_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 838, TSqlParser.RULE_as_table_alias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.AS) {
				{
				this.state = 9856;
				this.match(TSqlParser.AS);
				}
			}

			this.state = 9859;
			this.table_alias();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_alias(): Table_aliasContext {
		let _localctx: Table_aliasContext = new Table_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 840, TSqlParser.RULE_table_alias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9861;
			this.id();
			this.state = 9863;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1383, this._ctx) ) {
			case 1:
				{
				this.state = 9862;
				this.with_table_hints();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_table_hints(): With_table_hintsContext {
		let _localctx: With_table_hintsContext = new With_table_hintsContext(this._ctx, this.state);
		this.enterRule(_localctx, 842, TSqlParser.RULE_with_table_hints);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9866;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WITH) {
				{
				this.state = 9865;
				this.match(TSqlParser.WITH);
				}
			}

			this.state = 9868;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9869;
			this.table_hint();
			this.state = 9876;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.FORCESEEK || _la === TSqlParser.INDEX || _la === TSqlParser.NOEXPAND || ((((_la - 716)) & ~0x1F) === 0 && ((1 << (_la - 716)) & ((1 << (TSqlParser.SERIALIZABLE - 716)) | (1 << (TSqlParser.SNAPSHOT - 716)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 716)))) !== 0) || _la === TSqlParser.ID || _la === TSqlParser.COMMA) {
				{
				{
				this.state = 9871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 9870;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 9873;
				this.table_hint();
				}
				}
				this.state = 9878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9879;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_with_table_hints(): Insert_with_table_hintsContext {
		let _localctx: Insert_with_table_hintsContext = new Insert_with_table_hintsContext(this._ctx, this.state);
		this.enterRule(_localctx, 844, TSqlParser.RULE_insert_with_table_hints);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9881;
			this.match(TSqlParser.WITH);
			this.state = 9882;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9883;
			this.table_hint();
			this.state = 9890;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.FORCESEEK || _la === TSqlParser.INDEX || _la === TSqlParser.NOEXPAND || ((((_la - 716)) & ~0x1F) === 0 && ((1 << (_la - 716)) & ((1 << (TSqlParser.SERIALIZABLE - 716)) | (1 << (TSqlParser.SNAPSHOT - 716)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 716)))) !== 0) || _la === TSqlParser.ID || _la === TSqlParser.COMMA) {
				{
				{
				this.state = 9885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 9884;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 9887;
				this.table_hint();
				}
				}
				this.state = 9892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9893;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_hint(): Table_hintContext {
		let _localctx: Table_hintContext = new Table_hintContext(this._ctx, this.state);
		this.enterRule(_localctx, 846, TSqlParser.RULE_table_hint);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9896;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.NOEXPAND) {
				{
				this.state = 9895;
				this.match(TSqlParser.NOEXPAND);
				}
			}

			this.state = 9946;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1395, this._ctx) ) {
			case 1:
				{
				this.state = 9898;
				this.match(TSqlParser.INDEX);
				this.state = 9918;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.LR_BRACKET:
					{
					this.state = 9899;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 9900;
					this.index_value();
					this.state = 9905;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.COMMA) {
						{
						{
						this.state = 9901;
						this.match(TSqlParser.COMMA);
						this.state = 9902;
						this.index_value();
						}
						}
						this.state = 9907;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9908;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.ID:
					{
					this.state = 9910;
					this.index_value();
					this.state = 9915;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1391, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 9911;
							this.match(TSqlParser.COMMA);
							this.state = 9912;
							this.index_value();
							}
							}
						}
						this.state = 9917;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1391, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 9920;
				this.match(TSqlParser.INDEX);
				this.state = 9921;
				this.match(TSqlParser.EQUAL);
				this.state = 9922;
				this.index_value();
				}
				break;

			case 3:
				{
				this.state = 9923;
				this.match(TSqlParser.FORCESEEK);
				this.state = 9938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.LR_BRACKET) {
					{
					this.state = 9924;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 9925;
					this.index_value();
					this.state = 9926;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 9927;
					this.match(TSqlParser.ID);
					this.state = 9932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TSqlParser.COMMA) {
						{
						{
						this.state = 9928;
						this.match(TSqlParser.COMMA);
						this.state = 9929;
						this.match(TSqlParser.ID);
						}
						}
						this.state = 9934;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9935;
					this.match(TSqlParser.RR_BRACKET);
					this.state = 9936;
					this.match(TSqlParser.RR_BRACKET);
					}
				}

				}
				break;

			case 4:
				{
				this.state = 9940;
				this.match(TSqlParser.SERIALIZABLE);
				}
				break;

			case 5:
				{
				this.state = 9941;
				this.match(TSqlParser.SNAPSHOT);
				}
				break;

			case 6:
				{
				this.state = 9942;
				this.match(TSqlParser.SPATIAL_WINDOW_MAX_CELLS);
				this.state = 9943;
				this.match(TSqlParser.EQUAL);
				this.state = 9944;
				this.match(TSqlParser.DECIMAL);
				}
				break;

			case 7:
				{
				this.state = 9945;
				this.match(TSqlParser.ID);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_value(): Index_valueContext {
		let _localctx: Index_valueContext = new Index_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 848, TSqlParser.RULE_index_value);
		try {
			this.state = 9950;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9948;
				this.id();
				}
				break;
			case TSqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9949;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_alias_list(): Column_alias_listContext {
		let _localctx: Column_alias_listContext = new Column_alias_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 850, TSqlParser.RULE_column_alias_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9952;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9953;
			this.column_alias();
			this.state = 9958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 9954;
				this.match(TSqlParser.COMMA);
				this.state = 9955;
				this.column_alias();
				}
				}
				this.state = 9960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9961;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_alias(): Column_aliasContext {
		let _localctx: Column_aliasContext = new Column_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 852, TSqlParser.RULE_column_alias);
		try {
			this.state = 9965;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9963;
				this.id();
				}
				break;
			case TSqlParser.STRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9964;
				this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_value_constructor(): Table_value_constructorContext {
		let _localctx: Table_value_constructorContext = new Table_value_constructorContext(this._ctx, this.state);
		this.enterRule(_localctx, 854, TSqlParser.RULE_table_value_constructor);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9967;
			this.match(TSqlParser.VALUES);
			this.state = 9968;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 9969;
			this.expression_list();
			this.state = 9970;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 9978;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1399, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9971;
					this.match(TSqlParser.COMMA);
					this.state = 9972;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 9973;
					this.expression_list();
					this.state = 9974;
					this.match(TSqlParser.RR_BRACKET);
					}
					}
				}
				this.state = 9980;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1399, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression_list(): Expression_listContext {
		let _localctx: Expression_listContext = new Expression_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 856, TSqlParser.RULE_expression_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9981;
			this.expression(0);
			this.state = 9986;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 9982;
				this.match(TSqlParser.COMMA);
				this.state = 9983;
				this.expression(0);
				}
				}
				this.state = 9988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ranking_windowed_function(): Ranking_windowed_functionContext {
		let _localctx: Ranking_windowed_functionContext = new Ranking_windowed_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 858, TSqlParser.RULE_ranking_windowed_function);
		let _la: number;
		try {
			this.state = 9999;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.DENSE_RANK:
			case TSqlParser.RANK:
			case TSqlParser.ROW_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9989;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DENSE_RANK || _la === TSqlParser.RANK || _la === TSqlParser.ROW_NUMBER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9990;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9991;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 9992;
				this.over_clause();
				}
				break;
			case TSqlParser.NTILE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9993;
				this.match(TSqlParser.NTILE);
				this.state = 9994;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 9995;
				this.expression(0);
				this.state = 9996;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 9997;
				this.over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregate_windowed_function(): Aggregate_windowed_functionContext {
		let _localctx: Aggregate_windowed_functionContext = new Aggregate_windowed_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 860, TSqlParser.RULE_aggregate_windowed_function);
		let _la: number;
		try {
			this.state = 10033;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.AVG:
			case TSqlParser.MAX:
			case TSqlParser.MIN:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.SUM:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10001;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.AVG || _la === TSqlParser.MAX || _la === TSqlParser.MIN || ((((_la - 733)) & ~0x1F) === 0 && ((1 << (_la - 733)) & ((1 << (TSqlParser.STDEV - 733)) | (1 << (TSqlParser.STDEVP - 733)) | (1 << (TSqlParser.SUM - 733)))) !== 0) || _la === TSqlParser.VAR || _la === TSqlParser.VARP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 10002;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10003;
				this.all_distinct_expression();
				this.state = 10004;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 10006;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1402, this._ctx) ) {
				case 1:
					{
					this.state = 10005;
					this.over_clause();
					}
					break;
				}
				}
				break;
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10008;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.COUNT || _la === TSqlParser.COUNT_BIG)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 10009;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10012;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.STAR:
					{
					this.state = 10010;
					this.match(TSqlParser.STAR);
					}
					break;
				case TSqlParser.ALL:
				case TSqlParser.BLOCKING_HIERARCHY:
				case TSqlParser.CALLED:
				case TSqlParser.CASE:
				case TSqlParser.COALESCE:
				case TSqlParser.CONVERT:
				case TSqlParser.CURRENT_TIMESTAMP:
				case TSqlParser.CURRENT_USER:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.DEFAULT:
				case TSqlParser.DISTINCT:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.IDENTITY:
				case TSqlParser.INIT:
				case TSqlParser.ISNULL:
				case TSqlParser.KEY:
				case TSqlParser.LEFT:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.NULL:
				case TSqlParser.NULLIF:
				case TSqlParser.OFFSETS:
				case TSqlParser.OVER:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.RIGHT:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SESSION_USER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.SYSTEM_USER:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.LOCAL_ID:
				case TSqlParser.DECIMAL:
				case TSqlParser.ID:
				case TSqlParser.STRING:
				case TSqlParser.BINARY:
				case TSqlParser.FLOAT:
				case TSqlParser.REAL:
				case TSqlParser.DOLLAR:
				case TSqlParser.LR_BRACKET:
				case TSqlParser.PLUS:
				case TSqlParser.MINUS:
				case TSqlParser.BIT_NOT:
					{
					this.state = 10011;
					this.all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 10014;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 10016;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1404, this._ctx) ) {
				case 1:
					{
					this.state = 10015;
					this.over_clause();
					}
					break;
				}
				}
				break;
			case TSqlParser.CHECKSUM_AGG:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10018;
				this.match(TSqlParser.CHECKSUM_AGG);
				this.state = 10019;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10020;
				this.all_distinct_expression();
				this.state = 10021;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			case TSqlParser.GROUPING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10023;
				this.match(TSqlParser.GROUPING);
				this.state = 10024;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10025;
				this.expression(0);
				this.state = 10026;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			case TSqlParser.GROUPING_ID:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10028;
				this.match(TSqlParser.GROUPING_ID);
				this.state = 10029;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10030;
				this.expression_list();
				this.state = 10031;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analytic_windowed_function(): Analytic_windowed_functionContext {
		let _localctx: Analytic_windowed_functionContext = new Analytic_windowed_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 862, TSqlParser.RULE_analytic_windowed_function);
		let _la: number;
		try {
			this.state = 10055;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.LAST_VALUE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10035;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FIRST_VALUE || _la === TSqlParser.LAST_VALUE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 10036;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10037;
				this.expression(0);
				this.state = 10038;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 10039;
				this.over_clause();
				}
				break;
			case TSqlParser.LAG:
			case TSqlParser.LEAD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10041;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.LAG || _la === TSqlParser.LEAD)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 10042;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10043;
				this.expression(0);
				this.state = 10050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 10044;
					this.match(TSqlParser.COMMA);
					this.state = 10045;
					this.expression(0);
					this.state = 10048;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 10046;
						this.match(TSqlParser.COMMA);
						this.state = 10047;
						this.expression(0);
						}
					}

					}
				}

				this.state = 10052;
				this.match(TSqlParser.RR_BRACKET);
				this.state = 10053;
				this.over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public all_distinct_expression(): All_distinct_expressionContext {
		let _localctx: All_distinct_expressionContext = new All_distinct_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 864, TSqlParser.RULE_all_distinct_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ALL || _la === TSqlParser.DISTINCT) {
				{
				this.state = 10057;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ALL || _la === TSqlParser.DISTINCT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 10060;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public over_clause(): Over_clauseContext {
		let _localctx: Over_clauseContext = new Over_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 866, TSqlParser.RULE_over_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10062;
			this.match(TSqlParser.OVER);
			this.state = 10063;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 10067;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.PARTITION) {
				{
				this.state = 10064;
				this.match(TSqlParser.PARTITION);
				this.state = 10065;
				this.match(TSqlParser.BY);
				this.state = 10066;
				this.expression_list();
				}
			}

			this.state = 10070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ORDER) {
				{
				this.state = 10069;
				this.order_by_clause();
				}
			}

			this.state = 10073;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.RANGE || _la === TSqlParser.ROWS) {
				{
				this.state = 10072;
				this.row_or_range_clause();
				}
			}

			this.state = 10075;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public row_or_range_clause(): Row_or_range_clauseContext {
		let _localctx: Row_or_range_clauseContext = new Row_or_range_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 868, TSqlParser.RULE_row_or_range_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10077;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.RANGE || _la === TSqlParser.ROWS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 10078;
			this.window_frame_extent();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame_extent(): Window_frame_extentContext {
		let _localctx: Window_frame_extentContext = new Window_frame_extentContext(this._ctx, this.state);
		this.enterRule(_localctx, 870, TSqlParser.RULE_window_frame_extent);
		try {
			this.state = 10086;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CURRENT:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10080;
				this.window_frame_preceding();
				}
				break;
			case TSqlParser.BETWEEN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10081;
				this.match(TSqlParser.BETWEEN);
				this.state = 10082;
				this.window_frame_bound();
				this.state = 10083;
				this.match(TSqlParser.AND);
				this.state = 10084;
				this.window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame_bound(): Window_frame_boundContext {
		let _localctx: Window_frame_boundContext = new Window_frame_boundContext(this._ctx, this.state);
		this.enterRule(_localctx, 872, TSqlParser.RULE_window_frame_bound);
		try {
			this.state = 10090;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1414, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10088;
				this.window_frame_preceding();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10089;
				this.window_frame_following();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame_preceding(): Window_frame_precedingContext {
		let _localctx: Window_frame_precedingContext = new Window_frame_precedingContext(this._ctx, this.state);
		this.enterRule(_localctx, 874, TSqlParser.RULE_window_frame_preceding);
		try {
			this.state = 10098;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.UNBOUNDED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10092;
				this.match(TSqlParser.UNBOUNDED);
				this.state = 10093;
				this.match(TSqlParser.PRECEDING);
				}
				break;
			case TSqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10094;
				this.match(TSqlParser.DECIMAL);
				this.state = 10095;
				this.match(TSqlParser.PRECEDING);
				}
				break;
			case TSqlParser.CURRENT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10096;
				this.match(TSqlParser.CURRENT);
				this.state = 10097;
				this.match(TSqlParser.ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame_following(): Window_frame_followingContext {
		let _localctx: Window_frame_followingContext = new Window_frame_followingContext(this._ctx, this.state);
		this.enterRule(_localctx, 876, TSqlParser.RULE_window_frame_following);
		try {
			this.state = 10104;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.UNBOUNDED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10100;
				this.match(TSqlParser.UNBOUNDED);
				this.state = 10101;
				this.match(TSqlParser.FOLLOWING);
				}
				break;
			case TSqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10102;
				this.match(TSqlParser.DECIMAL);
				this.state = 10103;
				this.match(TSqlParser.FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_database_option(): Create_database_optionContext {
		let _localctx: Create_database_optionContext = new Create_database_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 878, TSqlParser.RULE_create_database_option);
		let _la: number;
		try {
			let _alt: number;
			this.state = 10140;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.FILESTREAM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10106;
				this.match(TSqlParser.FILESTREAM);
				{
				this.state = 10107;
				this.database_filestream_option();
				this.state = 10112;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1417, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 10108;
						this.match(TSqlParser.COMMA);
						this.state = 10109;
						this.database_filestream_option();
						}
						}
					}
					this.state = 10114;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1417, this._ctx);
				}
				}
				}
				break;
			case TSqlParser.DEFAULT_LANGUAGE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10115;
				this.match(TSqlParser.DEFAULT_LANGUAGE);
				this.state = 10116;
				this.match(TSqlParser.EQUAL);
				this.state = 10119;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 10117;
					this.id();
					}
					break;
				case TSqlParser.STRING:
					{
					this.state = 10118;
					this.match(TSqlParser.STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10121;
				this.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE);
				this.state = 10122;
				this.match(TSqlParser.EQUAL);
				this.state = 10125;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.CALLED:
				case TSqlParser.DATA_COMPRESSION:
				case TSqlParser.EVENTDATA:
				case TSqlParser.FILENAME:
				case TSqlParser.FILLFACTOR:
				case TSqlParser.FORCESEEK:
				case TSqlParser.INIT:
				case TSqlParser.KEY:
				case TSqlParser.MASTER:
				case TSqlParser.MAX_MEMORY:
				case TSqlParser.OFFSETS:
				case TSqlParser.PAGE:
				case TSqlParser.PUBLIC:
				case TSqlParser.R:
				case TSqlParser.RAW:
				case TSqlParser.RETURN:
				case TSqlParser.RETURNS:
				case TSqlParser.ROWCOUNT:
				case TSqlParser.SAFETY:
				case TSqlParser.SERVER:
				case TSqlParser.SID:
				case TSqlParser.SOURCE:
				case TSqlParser.STATE:
				case TSqlParser.START:
				case TSqlParser.TARGET:
				case TSqlParser.ABSOLUTE:
				case TSqlParser.ACCENT_SENSITIVITY:
				case TSqlParser.ACTION:
				case TSqlParser.ACTIVATION:
				case TSqlParser.ACTIVE:
				case TSqlParser.ADDRESS:
				case TSqlParser.AES_128:
				case TSqlParser.AES_192:
				case TSqlParser.AES_256:
				case TSqlParser.AFFINITY:
				case TSqlParser.AFTER:
				case TSqlParser.AGGREGATE:
				case TSqlParser.ALGORITHM:
				case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
				case TSqlParser.ALLOWED:
				case TSqlParser.ANSI_NULL_DEFAULT:
				case TSqlParser.ANSI_NULLS:
				case TSqlParser.ANSI_PADDING:
				case TSqlParser.ANSI_WARNINGS:
				case TSqlParser.APPLICATION_LOG:
				case TSqlParser.APPLY:
				case TSqlParser.ARITHABORT:
				case TSqlParser.ASSEMBLY:
				case TSqlParser.AUDIT:
				case TSqlParser.AUDIT_GUID:
				case TSqlParser.AUTO:
				case TSqlParser.AUTO_CLEANUP:
				case TSqlParser.AUTO_CLOSE:
				case TSqlParser.AUTO_CREATE_STATISTICS:
				case TSqlParser.AUTO_SHRINK:
				case TSqlParser.AUTO_UPDATE_STATISTICS:
				case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
				case TSqlParser.AVAILABILITY:
				case TSqlParser.AVG:
				case TSqlParser.BACKUP_PRIORITY:
				case TSqlParser.BEGIN_DIALOG:
				case TSqlParser.BIGINT:
				case TSqlParser.BINARY_BASE64:
				case TSqlParser.BINARY_CHECKSUM:
				case TSqlParser.BINDING:
				case TSqlParser.BLOB_STORAGE:
				case TSqlParser.BROKER:
				case TSqlParser.BROKER_INSTANCE:
				case TSqlParser.BULK_LOGGED:
				case TSqlParser.CALLER:
				case TSqlParser.CAP_CPU_PERCENT:
				case TSqlParser.CAST:
				case TSqlParser.CATALOG:
				case TSqlParser.CATCH:
				case TSqlParser.CHANGE_RETENTION:
				case TSqlParser.CHANGE_TRACKING:
				case TSqlParser.CHECKSUM:
				case TSqlParser.CHECKSUM_AGG:
				case TSqlParser.CLEANUP:
				case TSqlParser.COLLECTION:
				case TSqlParser.COLUMN_MASTER_KEY:
				case TSqlParser.COMMITTED:
				case TSqlParser.COMPATIBILITY_LEVEL:
				case TSqlParser.CONCAT:
				case TSqlParser.CONCAT_NULL_YIELDS_NULL:
				case TSqlParser.CONTENT:
				case TSqlParser.CONTROL:
				case TSqlParser.COOKIE:
				case TSqlParser.COUNT:
				case TSqlParser.COUNT_BIG:
				case TSqlParser.COUNTER:
				case TSqlParser.CPU:
				case TSqlParser.CREATE_NEW:
				case TSqlParser.CREATION_DISPOSITION:
				case TSqlParser.CREDENTIAL:
				case TSqlParser.CRYPTOGRAPHIC:
				case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
				case TSqlParser.CURSOR_DEFAULT:
				case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
				case TSqlParser.DATEADD:
				case TSqlParser.DATEDIFF:
				case TSqlParser.DATENAME:
				case TSqlParser.DATEPART:
				case TSqlParser.DAYS:
				case TSqlParser.DB_CHAINING:
				case TSqlParser.DB_FAILOVER:
				case TSqlParser.DECRYPTION:
				case TSqlParser.DEFAULT_DOUBLE_QUOTE:
				case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
				case TSqlParser.DEFAULT_LANGUAGE:
				case TSqlParser.DELAY:
				case TSqlParser.DELAYED_DURABILITY:
				case TSqlParser.DELETED:
				case TSqlParser.DENSE_RANK:
				case TSqlParser.DEPENDENTS:
				case TSqlParser.DES:
				case TSqlParser.DESCRIPTION:
				case TSqlParser.DESX:
				case TSqlParser.DHCP:
				case TSqlParser.DIALOG:
				case TSqlParser.DIRECTORY_NAME:
				case TSqlParser.DISABLE:
				case TSqlParser.DISABLE_BROKER:
				case TSqlParser.DISABLED:
				case TSqlParser.DISK_DRIVE:
				case TSqlParser.DOCUMENT:
				case TSqlParser.DYNAMIC:
				case TSqlParser.EMERGENCY:
				case TSqlParser.EMPTY:
				case TSqlParser.ENABLE:
				case TSqlParser.ENABLE_BROKER:
				case TSqlParser.ENCRYPTED_VALUE:
				case TSqlParser.ENCRYPTION:
				case TSqlParser.ENDPOINT_URL:
				case TSqlParser.ERROR_BROKER_CONVERSATIONS:
				case TSqlParser.EXCLUSIVE:
				case TSqlParser.EXECUTABLE:
				case TSqlParser.EXIST:
				case TSqlParser.EXPAND:
				case TSqlParser.EXPIRY_DATE:
				case TSqlParser.EXPLICIT:
				case TSqlParser.FAIL_OPERATION:
				case TSqlParser.FAILOVER_MODE:
				case TSqlParser.FAILURE:
				case TSqlParser.FAILURE_CONDITION_LEVEL:
				case TSqlParser.FAST:
				case TSqlParser.FAST_FORWARD:
				case TSqlParser.FILEGROUP:
				case TSqlParser.FILEGROWTH:
				case TSqlParser.FILEPATH:
				case TSqlParser.FILESTREAM:
				case TSqlParser.FILTER:
				case TSqlParser.FIRST:
				case TSqlParser.FIRST_VALUE:
				case TSqlParser.FOLLOWING:
				case TSqlParser.FORCE:
				case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case TSqlParser.FORCED:
				case TSqlParser.FORMAT:
				case TSqlParser.FORWARD_ONLY:
				case TSqlParser.FULLSCAN:
				case TSqlParser.FULLTEXT:
				case TSqlParser.GB:
				case TSqlParser.GETDATE:
				case TSqlParser.GETUTCDATE:
				case TSqlParser.GLOBAL:
				case TSqlParser.GO:
				case TSqlParser.GROUP_MAX_REQUESTS:
				case TSqlParser.GROUPING:
				case TSqlParser.GROUPING_ID:
				case TSqlParser.HADR:
				case TSqlParser.HASH:
				case TSqlParser.HEALTH_CHECK_TIMEOUT:
				case TSqlParser.HIGH:
				case TSqlParser.HONOR_BROKER_PRIORITY:
				case TSqlParser.HOURS:
				case TSqlParser.IDENTITY_VALUE:
				case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case TSqlParser.IMMEDIATE:
				case TSqlParser.IMPERSONATE:
				case TSqlParser.IMPORTANCE:
				case TSqlParser.INCREMENTAL:
				case TSqlParser.INITIATOR:
				case TSqlParser.INPUT:
				case TSqlParser.INSENSITIVE:
				case TSqlParser.INSERTED:
				case TSqlParser.INT:
				case TSqlParser.IP:
				case TSqlParser.ISOLATION:
				case TSqlParser.KB:
				case TSqlParser.KEEP:
				case TSqlParser.KEEPFIXED:
				case TSqlParser.KEY_SOURCE:
				case TSqlParser.KEYS:
				case TSqlParser.KEYSET:
				case TSqlParser.LAG:
				case TSqlParser.LAST:
				case TSqlParser.LAST_VALUE:
				case TSqlParser.LEAD:
				case TSqlParser.LEVEL:
				case TSqlParser.LIST:
				case TSqlParser.LISTENER:
				case TSqlParser.LISTENER_URL:
				case TSqlParser.LOB_COMPACTION:
				case TSqlParser.LOCAL:
				case TSqlParser.LOCATION:
				case TSqlParser.LOCK:
				case TSqlParser.LOCK_ESCALATION:
				case TSqlParser.LOGIN:
				case TSqlParser.LOOP:
				case TSqlParser.LOW:
				case TSqlParser.MANUAL:
				case TSqlParser.MARK:
				case TSqlParser.MATERIALIZED:
				case TSqlParser.MAX:
				case TSqlParser.MAX_CPU_PERCENT:
				case TSqlParser.MAX_DOP:
				case TSqlParser.MAX_FILES:
				case TSqlParser.MAX_IOPS_PER_VOLUME:
				case TSqlParser.MAX_MEMORY_PERCENT:
				case TSqlParser.MAX_PROCESSES:
				case TSqlParser.MAX_QUEUE_READERS:
				case TSqlParser.MAX_ROLLOVER_FILES:
				case TSqlParser.MAXDOP:
				case TSqlParser.MAXRECURSION:
				case TSqlParser.MAXSIZE:
				case TSqlParser.MB:
				case TSqlParser.MEDIUM:
				case TSqlParser.MEMORY_OPTIMIZED_DATA:
				case TSqlParser.MESSAGE:
				case TSqlParser.MIN:
				case TSqlParser.MIN_ACTIVE_ROWVERSION:
				case TSqlParser.MIN_CPU_PERCENT:
				case TSqlParser.MIN_IOPS_PER_VOLUME:
				case TSqlParser.MIN_MEMORY_PERCENT:
				case TSqlParser.MINUTES:
				case TSqlParser.MIRROR_ADDRESS:
				case TSqlParser.MIXED_PAGE_ALLOCATION:
				case TSqlParser.MODE:
				case TSqlParser.MODIFY:
				case TSqlParser.MOVE:
				case TSqlParser.MULTI_USER:
				case TSqlParser.NAME:
				case TSqlParser.NESTED_TRIGGERS:
				case TSqlParser.NEW_ACCOUNT:
				case TSqlParser.NEW_BROKER:
				case TSqlParser.NEW_PASSWORD:
				case TSqlParser.NEXT:
				case TSqlParser.NO:
				case TSqlParser.NO_TRUNCATE:
				case TSqlParser.NO_WAIT:
				case TSqlParser.NOCOUNT:
				case TSqlParser.NODES:
				case TSqlParser.NOEXPAND:
				case TSqlParser.NON_TRANSACTED_ACCESS:
				case TSqlParser.NORECOMPUTE:
				case TSqlParser.NORECOVERY:
				case TSqlParser.NOWAIT:
				case TSqlParser.NTILE:
				case TSqlParser.NUMANODE:
				case TSqlParser.NUMBER:
				case TSqlParser.NUMERIC_ROUNDABORT:
				case TSqlParser.OBJECT:
				case TSqlParser.OFFLINE:
				case TSqlParser.OFFSET:
				case TSqlParser.OLD_ACCOUNT:
				case TSqlParser.ONLINE:
				case TSqlParser.ONLY:
				case TSqlParser.OPEN_EXISTING:
				case TSqlParser.OPTIMISTIC:
				case TSqlParser.OPTIMIZE:
				case TSqlParser.OUT:
				case TSqlParser.OUTPUT:
				case TSqlParser.OWNER:
				case TSqlParser.PAGE_VERIFY:
				case TSqlParser.PARAMETERIZATION:
				case TSqlParser.PARTITION:
				case TSqlParser.PARTITIONS:
				case TSqlParser.PARTNER:
				case TSqlParser.PATH:
				case TSqlParser.POISON_MESSAGE_HANDLING:
				case TSqlParser.POOL:
				case TSqlParser.PORT:
				case TSqlParser.PRECEDING:
				case TSqlParser.PRIMARY_ROLE:
				case TSqlParser.PRIOR:
				case TSqlParser.PRIORITY:
				case TSqlParser.PRIORITY_LEVEL:
				case TSqlParser.PRIVATE:
				case TSqlParser.PRIVATE_KEY:
				case TSqlParser.PRIVILEGES:
				case TSqlParser.PROCEDURE_NAME:
				case TSqlParser.PROPERTY:
				case TSqlParser.PROVIDER:
				case TSqlParser.PROVIDER_KEY_NAME:
				case TSqlParser.QUERY:
				case TSqlParser.QUEUE:
				case TSqlParser.QUEUE_DELAY:
				case TSqlParser.QUOTED_IDENTIFIER:
				case TSqlParser.RANGE:
				case TSqlParser.RANK:
				case TSqlParser.RC2:
				case TSqlParser.RC4:
				case TSqlParser.RC4_128:
				case TSqlParser.READ_COMMITTED_SNAPSHOT:
				case TSqlParser.READ_ONLY:
				case TSqlParser.READ_ONLY_ROUTING_LIST:
				case TSqlParser.READ_WRITE:
				case TSqlParser.READONLY:
				case TSqlParser.REBUILD:
				case TSqlParser.RECEIVE:
				case TSqlParser.RECOMPILE:
				case TSqlParser.RECOVERY:
				case TSqlParser.RECURSIVE_TRIGGERS:
				case TSqlParser.RELATIVE:
				case TSqlParser.REMOTE:
				case TSqlParser.REMOTE_SERVICE_NAME:
				case TSqlParser.REMOVE:
				case TSqlParser.REORGANIZE:
				case TSqlParser.REPEATABLE:
				case TSqlParser.REPLICA:
				case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
				case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case TSqlParser.RESERVE_DISK_SPACE:
				case TSqlParser.RESOURCE:
				case TSqlParser.RESOURCE_MANAGER_LOCATION:
				case TSqlParser.RESTRICTED_USER:
				case TSqlParser.RETENTION:
				case TSqlParser.ROBUST:
				case TSqlParser.ROOT:
				case TSqlParser.ROUTE:
				case TSqlParser.ROW:
				case TSqlParser.ROW_NUMBER:
				case TSqlParser.ROWGUID:
				case TSqlParser.ROWS:
				case TSqlParser.SAMPLE:
				case TSqlParser.SCHEMABINDING:
				case TSqlParser.SCOPED:
				case TSqlParser.SCROLL:
				case TSqlParser.SCROLL_LOCKS:
				case TSqlParser.SEARCH:
				case TSqlParser.SECONDARY:
				case TSqlParser.SECONDARY_ONLY:
				case TSqlParser.SECONDARY_ROLE:
				case TSqlParser.SECONDS:
				case TSqlParser.SECRET:
				case TSqlParser.SECURITY_LOG:
				case TSqlParser.SEEDING_MODE:
				case TSqlParser.SELF:
				case TSqlParser.SEMI_SENSITIVE:
				case TSqlParser.SEND:
				case TSqlParser.SENT:
				case TSqlParser.SERIALIZABLE:
				case TSqlParser.SESSION_TIMEOUT:
				case TSqlParser.SETERROR:
				case TSqlParser.SHARE:
				case TSqlParser.SHOWPLAN:
				case TSqlParser.SIGNATURE:
				case TSqlParser.SIMPLE:
				case TSqlParser.SINGLE_USER:
				case TSqlParser.SIZE:
				case TSqlParser.SMALLINT:
				case TSqlParser.SNAPSHOT:
				case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
				case TSqlParser.STANDBY:
				case TSqlParser.START_DATE:
				case TSqlParser.STATIC:
				case TSqlParser.STATS_STREAM:
				case TSqlParser.STATUS:
				case TSqlParser.STDEV:
				case TSqlParser.STDEVP:
				case TSqlParser.STOPLIST:
				case TSqlParser.STUFF:
				case TSqlParser.SUBJECT:
				case TSqlParser.SUM:
				case TSqlParser.SUSPEND:
				case TSqlParser.SYMMETRIC:
				case TSqlParser.SYNCHRONOUS_COMMIT:
				case TSqlParser.SYNONYM:
				case TSqlParser.TAKE:
				case TSqlParser.TARGET_RECOVERY_TIME:
				case TSqlParser.TB:
				case TSqlParser.TEXTIMAGE_ON:
				case TSqlParser.THROW:
				case TSqlParser.TIES:
				case TSqlParser.TIME:
				case TSqlParser.TIMEOUT:
				case TSqlParser.TIMER:
				case TSqlParser.TINYINT:
				case TSqlParser.TORN_PAGE_DETECTION:
				case TSqlParser.TRANSFORM_NOISE_WORDS:
				case TSqlParser.TRIPLE_DES:
				case TSqlParser.TRIPLE_DES_3KEY:
				case TSqlParser.TRUSTWORTHY:
				case TSqlParser.TRY:
				case TSqlParser.TSQL:
				case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				case TSqlParser.TYPE:
				case TSqlParser.TYPE_WARNING:
				case TSqlParser.UNBOUNDED:
				case TSqlParser.UNCOMMITTED:
				case TSqlParser.UNKNOWN:
				case TSqlParser.UNLIMITED:
				case TSqlParser.USING:
				case TSqlParser.VALID_XML:
				case TSqlParser.VALIDATION:
				case TSqlParser.VALUE:
				case TSqlParser.VAR:
				case TSqlParser.VARP:
				case TSqlParser.VIEW_METADATA:
				case TSqlParser.VIEWS:
				case TSqlParser.WAIT:
				case TSqlParser.WELL_FORMED_XML:
				case TSqlParser.WORK:
				case TSqlParser.WORKLOAD:
				case TSqlParser.XML:
				case TSqlParser.XMLNAMESPACES:
				case TSqlParser.DOUBLE_QUOTE_ID:
				case TSqlParser.SQUARE_BRACKET_ID:
				case TSqlParser.ID:
					{
					this.state = 10123;
					this.id();
					}
					break;
				case TSqlParser.STRING:
					{
					this.state = 10124;
					this.match(TSqlParser.STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TSqlParser.NESTED_TRIGGERS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10127;
				this.match(TSqlParser.NESTED_TRIGGERS);
				this.state = 10128;
				this.match(TSqlParser.EQUAL);
				this.state = 10129;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TRANSFORM_NOISE_WORDS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10130;
				this.match(TSqlParser.TRANSFORM_NOISE_WORDS);
				this.state = 10131;
				this.match(TSqlParser.EQUAL);
				this.state = 10132;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10133;
				this.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF);
				this.state = 10134;
				this.match(TSqlParser.EQUAL);
				this.state = 10135;
				this.match(TSqlParser.DECIMAL);
				}
				break;
			case TSqlParser.DB_CHAINING:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10136;
				this.match(TSqlParser.DB_CHAINING);
				this.state = 10137;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TSqlParser.TRUSTWORTHY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10138;
				this.match(TSqlParser.TRUSTWORTHY);
				this.state = 10139;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public database_filestream_option(): Database_filestream_optionContext {
		let _localctx: Database_filestream_optionContext = new Database_filestream_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 880, TSqlParser.RULE_database_filestream_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10142;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 10149;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.NON_TRANSACTED_ACCESS:
				{
				{
				this.state = 10143;
				this.match(TSqlParser.NON_TRANSACTED_ACCESS);
				this.state = 10144;
				this.match(TSqlParser.EQUAL);
				this.state = 10145;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FULL || _la === TSqlParser.OFF || _la === TSqlParser.READ_ONLY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				break;
			case TSqlParser.DIRECTORY_NAME:
				{
				{
				this.state = 10146;
				this.match(TSqlParser.DIRECTORY_NAME);
				this.state = 10147;
				this.match(TSqlParser.EQUAL);
				this.state = 10148;
				this.match(TSqlParser.STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 10151;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public database_file_spec(): Database_file_specContext {
		let _localctx: Database_file_specContext = new Database_file_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 882, TSqlParser.RULE_database_file_spec);
		try {
			this.state = 10155;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.FILEGROUP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10153;
				this.file_group();
				}
				break;
			case TSqlParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10154;
				this.file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_group(): File_groupContext {
		let _localctx: File_groupContext = new File_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 884, TSqlParser.RULE_file_group);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10157;
			this.match(TSqlParser.FILEGROUP);
			this.state = 10158;
			this.id();
			this.state = 10161;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1423, this._ctx) ) {
			case 1:
				{
				this.state = 10159;
				this.match(TSqlParser.CONTAINS);
				this.state = 10160;
				this.match(TSqlParser.FILESTREAM);
				}
				break;
			}
			this.state = 10164;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.DEFAULT) {
				{
				this.state = 10163;
				this.match(TSqlParser.DEFAULT);
				}
			}

			this.state = 10168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONTAINS) {
				{
				this.state = 10166;
				this.match(TSqlParser.CONTAINS);
				this.state = 10167;
				this.match(TSqlParser.MEMORY_OPTIMIZED_DATA);
				}
			}

			this.state = 10170;
			this.file_spec();
			this.state = 10175;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1426, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 10171;
					this.match(TSqlParser.COMMA);
					this.state = 10172;
					this.file_spec();
					}
					}
				}
				this.state = 10177;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1426, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 886, TSqlParser.RULE_file_spec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10178;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 10179;
			this.match(TSqlParser.NAME);
			this.state = 10180;
			this.match(TSqlParser.EQUAL);
			this.state = 10183;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				{
				this.state = 10181;
				this.id();
				}
				break;
			case TSqlParser.STRING:
				{
				this.state = 10182;
				this.match(TSqlParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 10186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 10185;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 10188;
			this.match(TSqlParser.FILENAME);
			this.state = 10189;
			this.match(TSqlParser.EQUAL);
			this.state = 10190;
			_localctx._file = this.match(TSqlParser.STRING);
			this.state = 10192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 10191;
				this.match(TSqlParser.COMMA);
				}
			}

			this.state = 10200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.SIZE) {
				{
				this.state = 10194;
				this.match(TSqlParser.SIZE);
				this.state = 10195;
				this.match(TSqlParser.EQUAL);
				this.state = 10196;
				this.file_size();
				this.state = 10198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 10197;
					this.match(TSqlParser.COMMA);
					}
				}

				}
			}

			this.state = 10211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.MAXSIZE) {
				{
				this.state = 10202;
				this.match(TSqlParser.MAXSIZE);
				this.state = 10203;
				this.match(TSqlParser.EQUAL);
				this.state = 10206;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TSqlParser.DECIMAL:
					{
					this.state = 10204;
					this.file_size();
					}
					break;
				case TSqlParser.UNLIMITED:
					{
					this.state = 10205;
					this.match(TSqlParser.UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 10209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 10208;
					this.match(TSqlParser.COMMA);
					}
				}

				}
			}

			this.state = 10219;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.FILEGROWTH) {
				{
				this.state = 10213;
				this.match(TSqlParser.FILEGROWTH);
				this.state = 10214;
				this.match(TSqlParser.EQUAL);
				this.state = 10215;
				this.file_size();
				this.state = 10217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 10216;
					this.match(TSqlParser.COMMA);
					}
				}

				}
			}

			this.state = 10221;
			this.match(TSqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entity_name(): Entity_nameContext {
		let _localctx: Entity_nameContext = new Entity_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 888, TSqlParser.RULE_entity_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10240;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1438, this._ctx) ) {
			case 1:
				{
				this.state = 10223;
				_localctx._server = this.id();
				this.state = 10224;
				this.match(TSqlParser.DOT);
				this.state = 10225;
				_localctx._database = this.id();
				this.state = 10226;
				this.match(TSqlParser.DOT);
				this.state = 10227;
				_localctx._schema = this.id();
				this.state = 10228;
				this.match(TSqlParser.DOT);
				}
				break;

			case 2:
				{
				this.state = 10230;
				_localctx._database = this.id();
				this.state = 10231;
				this.match(TSqlParser.DOT);
				this.state = 10233;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
					{
					this.state = 10232;
					_localctx._schema = this.id();
					}
				}

				this.state = 10235;
				this.match(TSqlParser.DOT);
				}
				break;

			case 3:
				{
				this.state = 10237;
				_localctx._schema = this.id();
				this.state = 10238;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 10242;
			_localctx._table = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entity_name_for_azure_dw(): Entity_name_for_azure_dwContext {
		let _localctx: Entity_name_for_azure_dwContext = new Entity_name_for_azure_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 890, TSqlParser.RULE_entity_name_for_azure_dw);
		try {
			this.state = 10249;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1439, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10244;
				_localctx._schema = this.id();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10245;
				_localctx._schema = this.id();
				this.state = 10246;
				this.match(TSqlParser.DOT);
				this.state = 10247;
				_localctx._object_name = this.id();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entity_name_for_parallel_dw(): Entity_name_for_parallel_dwContext {
		let _localctx: Entity_name_for_parallel_dwContext = new Entity_name_for_parallel_dwContext(this._ctx, this.state);
		this.enterRule(_localctx, 892, TSqlParser.RULE_entity_name_for_parallel_dw);
		try {
			this.state = 10256;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1440, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10251;
				_localctx._schema_database = this.id();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10252;
				_localctx._schema = this.id();
				this.state = 10253;
				this.match(TSqlParser.DOT);
				this.state = 10254;
				_localctx._object_name = this.id();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public full_table_name(): Full_table_nameContext {
		let _localctx: Full_table_nameContext = new Full_table_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 894, TSqlParser.RULE_full_table_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10275;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1442, this._ctx) ) {
			case 1:
				{
				this.state = 10258;
				_localctx._server = this.id();
				this.state = 10259;
				this.match(TSqlParser.DOT);
				this.state = 10260;
				_localctx._database = this.id();
				this.state = 10261;
				this.match(TSqlParser.DOT);
				this.state = 10262;
				_localctx._schema = this.id();
				this.state = 10263;
				this.match(TSqlParser.DOT);
				}
				break;

			case 2:
				{
				this.state = 10265;
				_localctx._database = this.id();
				this.state = 10266;
				this.match(TSqlParser.DOT);
				this.state = 10268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
					{
					this.state = 10267;
					_localctx._schema = this.id();
					}
				}

				this.state = 10270;
				this.match(TSqlParser.DOT);
				}
				break;

			case 3:
				{
				this.state = 10272;
				_localctx._schema = this.id();
				this.state = 10273;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 10277;
			_localctx._table = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_name(): Table_nameContext {
		let _localctx: Table_nameContext = new Table_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 896, TSqlParser.RULE_table_name);
		let _la: number;
		try {
			this.state = 10305;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1447, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10289;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1444, this._ctx) ) {
				case 1:
					{
					this.state = 10279;
					_localctx._database = this.id();
					this.state = 10280;
					this.match(TSqlParser.DOT);
					this.state = 10282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
						{
						this.state = 10281;
						_localctx._schema = this.id();
						}
					}

					this.state = 10284;
					this.match(TSqlParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 10286;
					_localctx._schema = this.id();
					this.state = 10287;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10291;
				_localctx._table = this.id();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10302;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1446, this._ctx) ) {
				case 1:
					{
					this.state = 10292;
					_localctx._database = this.id();
					this.state = 10293;
					this.match(TSqlParser.DOT);
					this.state = 10295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
						{
						this.state = 10294;
						_localctx._schema = this.id();
						}
					}

					this.state = 10297;
					this.match(TSqlParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 10299;
					_localctx._schema = this.id();
					this.state = 10300;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10304;
				this.match(TSqlParser.BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_name(): Simple_nameContext {
		let _localctx: Simple_nameContext = new Simple_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 898, TSqlParser.RULE_simple_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10310;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1448, this._ctx) ) {
			case 1:
				{
				this.state = 10307;
				_localctx._schema = this.id();
				this.state = 10308;
				this.match(TSqlParser.DOT);
				}
				break;
			}
			this.state = 10312;
			_localctx._name = this.id();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_proc_name(): Func_proc_nameContext {
		let _localctx: Func_proc_nameContext = new Func_proc_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 900, TSqlParser.RULE_func_proc_name);
		let _la: number;
		try {
			this.state = 10337;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1452, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10324;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1450, this._ctx) ) {
				case 1:
					{
					this.state = 10314;
					_localctx._database = this.id();
					this.state = 10315;
					this.match(TSqlParser.DOT);
					this.state = 10317;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
						{
						this.state = 10316;
						_localctx._schema = this.id();
						}
					}

					this.state = 10319;
					this.match(TSqlParser.DOT);
					}
					break;

				case 2:
					{
					{
					this.state = 10321;
					_localctx._schema = this.id();
					}
					this.state = 10322;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10326;
				_localctx._procedure = this.id();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10327;
				_localctx._server = this.id();
				this.state = 10328;
				this.match(TSqlParser.DOT);
				this.state = 10329;
				_localctx._database = this.id();
				this.state = 10330;
				this.match(TSqlParser.DOT);
				this.state = 10332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0)) {
					{
					this.state = 10331;
					_localctx._schema = this.id();
					}
				}

				this.state = 10334;
				this.match(TSqlParser.DOT);
				this.state = 10335;
				_localctx._procedure = this.id();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddl_object(): Ddl_objectContext {
		let _localctx: Ddl_objectContext = new Ddl_objectContext(this._ctx, this.state);
		this.enterRule(_localctx, 902, TSqlParser.RULE_ddl_object);
		try {
			this.state = 10341;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10339;
				this.full_table_name();
				}
				break;
			case TSqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10340;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public full_column_name(): Full_column_nameContext {
		let _localctx: Full_column_nameContext = new Full_column_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 904, TSqlParser.RULE_full_column_name);
		try {
			this.state = 10391;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1462, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10346;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1454, this._ctx) ) {
				case 1:
					{
					this.state = 10343;
					this.table_name();
					this.state = 10344;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10348;
				_localctx._column_name = this.id();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10352;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1455, this._ctx) ) {
				case 1:
					{
					this.state = 10349;
					this.table_name();
					this.state = 10350;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10354;
				this.match(TSqlParser.COMPATIBILITY_LEVEL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10358;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1456, this._ctx) ) {
				case 1:
					{
					this.state = 10355;
					this.table_name();
					this.state = 10356;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10360;
				this.match(TSqlParser.STATUS);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10364;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1457, this._ctx) ) {
				case 1:
					{
					this.state = 10361;
					this.table_name();
					this.state = 10362;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10366;
				this.match(TSqlParser.QUOTED_IDENTIFIER);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10370;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1458, this._ctx) ) {
				case 1:
					{
					this.state = 10367;
					this.table_name();
					this.state = 10368;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10372;
				this.match(TSqlParser.ARITHABORT);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10376;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1459, this._ctx) ) {
				case 1:
					{
					this.state = 10373;
					this.table_name();
					this.state = 10374;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10378;
				this.match(TSqlParser.ANSI_WARNINGS);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10382;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1460, this._ctx) ) {
				case 1:
					{
					this.state = 10379;
					this.table_name();
					this.state = 10380;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10384;
				this.match(TSqlParser.ANSI_PADDING);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10388;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1461, this._ctx) ) {
				case 1:
					{
					this.state = 10385;
					this.table_name();
					this.state = 10386;
					this.match(TSqlParser.DOT);
					}
					break;
				}
				this.state = 10390;
				this.match(TSqlParser.ANSI_NULLS);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_name_list_with_order(): Column_name_list_with_orderContext {
		let _localctx: Column_name_list_with_orderContext = new Column_name_list_with_orderContext(this._ctx, this.state);
		this.enterRule(_localctx, 906, TSqlParser.RULE_column_name_list_with_order);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10393;
			this.id();
			this.state = 10395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.ASC || _la === TSqlParser.DESC) {
				{
				this.state = 10394;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.ASC || _la === TSqlParser.DESC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 10404;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 10397;
				this.match(TSqlParser.COMMA);
				this.state = 10398;
				this.id();
				this.state = 10400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ASC || _la === TSqlParser.DESC) {
					{
					this.state = 10399;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.ASC || _la === TSqlParser.DESC)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				}
				this.state = 10406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_name_list(): Column_name_listContext {
		let _localctx: Column_name_listContext = new Column_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 908, TSqlParser.RULE_column_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10407;
			this.id();
			this.state = 10412;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TSqlParser.COMMA) {
				{
				{
				this.state = 10408;
				this.match(TSqlParser.COMMA);
				this.state = 10409;
				this.id();
				}
				}
				this.state = 10414;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_name(): Cursor_nameContext {
		let _localctx: Cursor_nameContext = new Cursor_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 910, TSqlParser.RULE_cursor_name);
		try {
			this.state = 10417;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.DOUBLE_QUOTE_ID:
			case TSqlParser.SQUARE_BRACKET_ID:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10415;
				this.id();
				}
				break;
			case TSqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10416;
				this.match(TSqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_off(): On_offContext {
		let _localctx: On_offContext = new On_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 912, TSqlParser.RULE_on_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10419;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clustered(): ClusteredContext {
		let _localctx: ClusteredContext = new ClusteredContext(this._ctx, this.state);
		this.enterRule(_localctx, 914, TSqlParser.RULE_clustered);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10421;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.CLUSTERED || _la === TSqlParser.NONCLUSTERED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public null_notnull(): Null_notnullContext {
		let _localctx: Null_notnullContext = new Null_notnullContext(this._ctx, this.state);
		this.enterRule(_localctx, 916, TSqlParser.RULE_null_notnull);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.NOT) {
				{
				this.state = 10423;
				this.match(TSqlParser.NOT);
				}
			}

			this.state = 10426;
			this.match(TSqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public null_or_default(): Null_or_defaultContext {
		let _localctx: Null_or_defaultContext = new Null_or_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 918, TSqlParser.RULE_null_or_default);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10435;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.NOT:
			case TSqlParser.NULL:
				{
				this.state = 10428;
				this.null_notnull();
				}
				break;
			case TSqlParser.DEFAULT:
				{
				this.state = 10429;
				this.match(TSqlParser.DEFAULT);
				this.state = 10430;
				this.constant_expression();
				this.state = 10433;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1469, this._ctx) ) {
				case 1:
					{
					this.state = 10431;
					this.match(TSqlParser.WITH);
					this.state = 10432;
					this.match(TSqlParser.VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scalar_function_name(): Scalar_function_nameContext {
		let _localctx: Scalar_function_nameContext = new Scalar_function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 920, TSqlParser.RULE_scalar_function_name);
		try {
			this.state = 10442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1471, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10437;
				this.func_proc_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10438;
				this.match(TSqlParser.RIGHT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10439;
				this.match(TSqlParser.LEFT);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10440;
				this.match(TSqlParser.BINARY_CHECKSUM);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10441;
				this.match(TSqlParser.CHECKSUM);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public begin_conversation_timer(): Begin_conversation_timerContext {
		let _localctx: Begin_conversation_timerContext = new Begin_conversation_timerContext(this._ctx, this.state);
		this.enterRule(_localctx, 922, TSqlParser.RULE_begin_conversation_timer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10444;
			this.match(TSqlParser.BEGIN);
			this.state = 10445;
			this.match(TSqlParser.CONVERSATION);
			this.state = 10446;
			this.match(TSqlParser.TIMER);
			this.state = 10447;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 10448;
			this.match(TSqlParser.LOCAL_ID);
			this.state = 10449;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 10450;
			this.match(TSqlParser.TIMEOUT);
			this.state = 10451;
			this.match(TSqlParser.EQUAL);
			this.state = 10452;
			this.time();
			this.state = 10454;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1472, this._ctx) ) {
			case 1:
				{
				this.state = 10453;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public begin_conversation_dialog(): Begin_conversation_dialogContext {
		let _localctx: Begin_conversation_dialogContext = new Begin_conversation_dialogContext(this._ctx, this.state);
		this.enterRule(_localctx, 924, TSqlParser.RULE_begin_conversation_dialog);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10456;
			this.match(TSqlParser.BEGIN);
			this.state = 10457;
			this.match(TSqlParser.DIALOG);
			this.state = 10459;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.CONVERSATION) {
				{
				this.state = 10458;
				this.match(TSqlParser.CONVERSATION);
				}
			}

			this.state = 10461;
			_localctx._dialog_handle = this.match(TSqlParser.LOCAL_ID);
			this.state = 10462;
			this.match(TSqlParser.FROM);
			this.state = 10463;
			this.match(TSqlParser.SERVICE);
			this.state = 10464;
			_localctx._initiator_service_name = this.service_name();
			this.state = 10465;
			this.match(TSqlParser.TO);
			this.state = 10466;
			this.match(TSqlParser.SERVICE);
			this.state = 10467;
			_localctx._target_service_name = this.service_name();
			this.state = 10470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.COMMA) {
				{
				this.state = 10468;
				this.match(TSqlParser.COMMA);
				this.state = 10469;
				_localctx._service_broker_guid = this.match(TSqlParser.STRING);
				}
			}

			this.state = 10472;
			this.match(TSqlParser.ON);
			this.state = 10473;
			this.match(TSqlParser.CONTRACT);
			this.state = 10474;
			this.contract_name();
			this.state = 10497;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1480, this._ctx) ) {
			case 1:
				{
				this.state = 10475;
				this.match(TSqlParser.WITH);
				this.state = 10482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.RELATED_CONVERSATION || _la === TSqlParser.RELATED_CONVERSATION_GROUP) {
					{
					this.state = 10476;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.RELATED_CONVERSATION || _la === TSqlParser.RELATED_CONVERSATION_GROUP)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 10477;
					this.match(TSqlParser.EQUAL);
					this.state = 10478;
					this.match(TSqlParser.LOCAL_ID);
					this.state = 10480;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 10479;
						this.match(TSqlParser.COMMA);
						}
					}

					}
				}

				this.state = 10490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.LIFETIME) {
					{
					this.state = 10484;
					this.match(TSqlParser.LIFETIME);
					this.state = 10485;
					this.match(TSqlParser.EQUAL);
					this.state = 10486;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.DECIMAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 10488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 10487;
						this.match(TSqlParser.COMMA);
						}
					}

					}
				}

				this.state = 10495;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1479, this._ctx) ) {
				case 1:
					{
					this.state = 10492;
					this.match(TSqlParser.ENCRYPTION);
					this.state = 10493;
					this.match(TSqlParser.EQUAL);
					this.state = 10494;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.OFF || _la === TSqlParser.ON)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			}
			this.state = 10500;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1481, this._ctx) ) {
			case 1:
				{
				this.state = 10499;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public contract_name(): Contract_nameContext {
		let _localctx: Contract_nameContext = new Contract_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 926, TSqlParser.RULE_contract_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10504;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1482, this._ctx) ) {
			case 1:
				{
				this.state = 10502;
				this.id();
				}
				break;

			case 2:
				{
				this.state = 10503;
				this.expression(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public service_name(): Service_nameContext {
		let _localctx: Service_nameContext = new Service_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 928, TSqlParser.RULE_service_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10508;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1483, this._ctx) ) {
			case 1:
				{
				this.state = 10506;
				this.id();
				}
				break;

			case 2:
				{
				this.state = 10507;
				this.expression(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end_conversation(): End_conversationContext {
		let _localctx: End_conversationContext = new End_conversationContext(this._ctx, this.state);
		this.enterRule(_localctx, 930, TSqlParser.RULE_end_conversation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10510;
			this.match(TSqlParser.END);
			this.state = 10511;
			this.match(TSqlParser.CONVERSATION);
			this.state = 10512;
			_localctx._conversation_handle = this.match(TSqlParser.LOCAL_ID);
			this.state = 10514;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1484, this._ctx) ) {
			case 1:
				{
				this.state = 10513;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			this.state = 10528;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1487, this._ctx) ) {
			case 1:
				{
				this.state = 10516;
				this.match(TSqlParser.WITH);
				this.state = 10523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.ERROR) {
					{
					this.state = 10517;
					this.match(TSqlParser.ERROR);
					this.state = 10518;
					this.match(TSqlParser.EQUAL);
					this.state = 10519;
					_localctx._faliure_code = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
						_localctx._faliure_code = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 10520;
					this.match(TSqlParser.DESCRIPTION);
					this.state = 10521;
					this.match(TSqlParser.EQUAL);
					this.state = 10522;
					_localctx._failure_text = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
						_localctx._failure_text = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 10526;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1486, this._ctx) ) {
				case 1:
					{
					this.state = 10525;
					this.match(TSqlParser.CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public waitfor_conversation(): Waitfor_conversationContext {
		let _localctx: Waitfor_conversationContext = new Waitfor_conversationContext(this._ctx, this.state);
		this.enterRule(_localctx, 932, TSqlParser.RULE_waitfor_conversation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.WAITFOR) {
				{
				this.state = 10530;
				this.match(TSqlParser.WAITFOR);
				}
			}

			this.state = 10533;
			this.match(TSqlParser.LR_BRACKET);
			this.state = 10534;
			this.get_conversation();
			this.state = 10535;
			this.match(TSqlParser.RR_BRACKET);
			this.state = 10541;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1490, this._ctx) ) {
			case 1:
				{
				this.state = 10537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.COMMA) {
					{
					this.state = 10536;
					this.match(TSqlParser.COMMA);
					}
				}

				this.state = 10539;
				this.match(TSqlParser.TIMEOUT);
				this.state = 10540;
				_localctx._timeout = this.time();
				}
				break;
			}
			this.state = 10544;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1491, this._ctx) ) {
			case 1:
				{
				this.state = 10543;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public get_conversation(): Get_conversationContext {
		let _localctx: Get_conversationContext = new Get_conversationContext(this._ctx, this.state);
		this.enterRule(_localctx, 934, TSqlParser.RULE_get_conversation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10546;
			this.match(TSqlParser.GET);
			this.state = 10547;
			this.match(TSqlParser.CONVERSATION);
			this.state = 10548;
			this.match(TSqlParser.GROUP);
			this.state = 10549;
			_localctx._conversation_group_id = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
				_localctx._conversation_group_id = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 10550;
			this.match(TSqlParser.FROM);
			this.state = 10551;
			_localctx._queue = this.queue_id();
			this.state = 10553;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1492, this._ctx) ) {
			case 1:
				{
				this.state = 10552;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queue_id(): Queue_idContext {
		let _localctx: Queue_idContext = new Queue_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 936, TSqlParser.RULE_queue_id);
		try {
			this.state = 10562;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1493, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 10555;
				_localctx._database_name = this.id();
				this.state = 10556;
				this.match(TSqlParser.DOT);
				this.state = 10557;
				_localctx._schema_name = this.id();
				this.state = 10558;
				this.match(TSqlParser.DOT);
				this.state = 10559;
				_localctx._name = this.id();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10561;
				this.id();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public send_conversation(): Send_conversationContext {
		let _localctx: Send_conversationContext = new Send_conversationContext(this._ctx, this.state);
		this.enterRule(_localctx, 938, TSqlParser.RULE_send_conversation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10564;
			this.match(TSqlParser.SEND);
			this.state = 10565;
			this.match(TSqlParser.ON);
			this.state = 10566;
			this.match(TSqlParser.CONVERSATION);
			this.state = 10567;
			_localctx._conversation_handle = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
				_localctx._conversation_handle = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 10568;
			this.match(TSqlParser.MESSAGE);
			this.state = 10569;
			this.match(TSqlParser.TYPE);
			this.state = 10570;
			_localctx._message_type_name = this.expression(0);
			this.state = 10574;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1494, this._ctx) ) {
			case 1:
				{
				this.state = 10571;
				this.match(TSqlParser.LR_BRACKET);
				this.state = 10572;
				_localctx._message_body_expression = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.LOCAL_ID || _la === TSqlParser.STRING)) {
					_localctx._message_body_expression = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 10573;
				this.match(TSqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 10577;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1495, this._ctx) ) {
			case 1:
				{
				this.state = 10576;
				this.match(TSqlParser.SEMI);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type(): Data_typeContext {
		let _localctx: Data_typeContext = new Data_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 940, TSqlParser.RULE_data_type);
		let _la: number;
		try {
			this.state = 10600;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1500, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10579;
				this.id();
				this.state = 10581;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1496, this._ctx) ) {
				case 1:
					{
					this.state = 10580;
					this.match(TSqlParser.IDENTITY);
					}
					break;
				}
				this.state = 10590;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1498, this._ctx) ) {
				case 1:
					{
					this.state = 10583;
					this.match(TSqlParser.LR_BRACKET);
					this.state = 10584;
					_la = this._input.LA(1);
					if (!(_la === TSqlParser.MAX || _la === TSqlParser.DECIMAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 10587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TSqlParser.COMMA) {
						{
						this.state = 10585;
						this.match(TSqlParser.COMMA);
						this.state = 10586;
						this.match(TSqlParser.DECIMAL);
						}
					}

					this.state = 10589;
					this.match(TSqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10592;
				this.match(TSqlParser.DOUBLE);
				this.state = 10594;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PRECISION) {
					{
					this.state = 10593;
					this.match(TSqlParser.PRECISION);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10596;
				this.match(TSqlParser.INT);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10597;
				this.match(TSqlParser.TINYINT);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10598;
				this.match(TSqlParser.SMALLINT);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10599;
				this.match(TSqlParser.BIGINT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public default_value(): Default_valueContext {
		let _localctx: Default_valueContext = new Default_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 942, TSqlParser.RULE_default_value);
		try {
			this.state = 10605;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.NULL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10602;
				this.match(TSqlParser.NULL);
				}
				break;
			case TSqlParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10603;
				this.match(TSqlParser.DEFAULT);
				}
				break;
			case TSqlParser.DECIMAL:
			case TSqlParser.STRING:
			case TSqlParser.BINARY:
			case TSqlParser.FLOAT:
			case TSqlParser.REAL:
			case TSqlParser.DOLLAR:
			case TSqlParser.PLUS:
			case TSqlParser.MINUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10604;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 944, TSqlParser.RULE_constant);
		let _la: number;
		try {
			this.state = 10622;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1505, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10607;
				this.match(TSqlParser.STRING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10608;
				this.match(TSqlParser.BINARY);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PLUS || _la === TSqlParser.MINUS) {
					{
					this.state = 10609;
					this.sign();
					}
				}

				this.state = 10612;
				this.match(TSqlParser.DECIMAL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PLUS || _la === TSqlParser.MINUS) {
					{
					this.state = 10613;
					this.sign();
					}
				}

				this.state = 10616;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.FLOAT || _la === TSqlParser.REAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TSqlParser.PLUS || _la === TSqlParser.MINUS) {
					{
					this.state = 10617;
					this.sign();
					}
				}

				this.state = 10620;
				_localctx._dollar = this.match(TSqlParser.DOLLAR);
				this.state = 10621;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.DECIMAL || _la === TSqlParser.FLOAT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign(): SignContext {
		let _localctx: SignContext = new SignContext(this._ctx, this.state);
		this.enterRule(_localctx, 946, TSqlParser.RULE_sign);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10624;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.PLUS || _la === TSqlParser.MINUS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public id(): IdContext {
		let _localctx: IdContext = new IdContext(this._ctx, this.state);
		this.enterRule(_localctx, 948, TSqlParser.RULE_id);
		try {
			this.state = 10629;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TSqlParser.CALLED:
			case TSqlParser.DATA_COMPRESSION:
			case TSqlParser.EVENTDATA:
			case TSqlParser.FILENAME:
			case TSqlParser.FILLFACTOR:
			case TSqlParser.FORCESEEK:
			case TSqlParser.INIT:
			case TSqlParser.KEY:
			case TSqlParser.MASTER:
			case TSqlParser.MAX_MEMORY:
			case TSqlParser.OFFSETS:
			case TSqlParser.PAGE:
			case TSqlParser.PUBLIC:
			case TSqlParser.R:
			case TSqlParser.RAW:
			case TSqlParser.RETURN:
			case TSqlParser.RETURNS:
			case TSqlParser.ROWCOUNT:
			case TSqlParser.SAFETY:
			case TSqlParser.SERVER:
			case TSqlParser.SID:
			case TSqlParser.SOURCE:
			case TSqlParser.STATE:
			case TSqlParser.START:
			case TSqlParser.TARGET:
			case TSqlParser.ABSOLUTE:
			case TSqlParser.ACCENT_SENSITIVITY:
			case TSqlParser.ACTION:
			case TSqlParser.ACTIVATION:
			case TSqlParser.ACTIVE:
			case TSqlParser.ADDRESS:
			case TSqlParser.AES_128:
			case TSqlParser.AES_192:
			case TSqlParser.AES_256:
			case TSqlParser.AFFINITY:
			case TSqlParser.AFTER:
			case TSqlParser.AGGREGATE:
			case TSqlParser.ALGORITHM:
			case TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
			case TSqlParser.ALLOWED:
			case TSqlParser.ANSI_NULL_DEFAULT:
			case TSqlParser.ANSI_NULLS:
			case TSqlParser.ANSI_PADDING:
			case TSqlParser.ANSI_WARNINGS:
			case TSqlParser.APPLICATION_LOG:
			case TSqlParser.APPLY:
			case TSqlParser.ARITHABORT:
			case TSqlParser.ASSEMBLY:
			case TSqlParser.AUDIT:
			case TSqlParser.AUDIT_GUID:
			case TSqlParser.AUTO:
			case TSqlParser.AUTO_CLEANUP:
			case TSqlParser.AUTO_CLOSE:
			case TSqlParser.AUTO_CREATE_STATISTICS:
			case TSqlParser.AUTO_SHRINK:
			case TSqlParser.AUTO_UPDATE_STATISTICS:
			case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
			case TSqlParser.AVAILABILITY:
			case TSqlParser.AVG:
			case TSqlParser.BACKUP_PRIORITY:
			case TSqlParser.BEGIN_DIALOG:
			case TSqlParser.BIGINT:
			case TSqlParser.BINARY_BASE64:
			case TSqlParser.BINARY_CHECKSUM:
			case TSqlParser.BINDING:
			case TSqlParser.BLOB_STORAGE:
			case TSqlParser.BROKER:
			case TSqlParser.BROKER_INSTANCE:
			case TSqlParser.BULK_LOGGED:
			case TSqlParser.CALLER:
			case TSqlParser.CAP_CPU_PERCENT:
			case TSqlParser.CAST:
			case TSqlParser.CATALOG:
			case TSqlParser.CATCH:
			case TSqlParser.CHANGE_RETENTION:
			case TSqlParser.CHANGE_TRACKING:
			case TSqlParser.CHECKSUM:
			case TSqlParser.CHECKSUM_AGG:
			case TSqlParser.CLEANUP:
			case TSqlParser.COLLECTION:
			case TSqlParser.COLUMN_MASTER_KEY:
			case TSqlParser.COMMITTED:
			case TSqlParser.COMPATIBILITY_LEVEL:
			case TSqlParser.CONCAT:
			case TSqlParser.CONCAT_NULL_YIELDS_NULL:
			case TSqlParser.CONTENT:
			case TSqlParser.CONTROL:
			case TSqlParser.COOKIE:
			case TSqlParser.COUNT:
			case TSqlParser.COUNT_BIG:
			case TSqlParser.COUNTER:
			case TSqlParser.CPU:
			case TSqlParser.CREATE_NEW:
			case TSqlParser.CREATION_DISPOSITION:
			case TSqlParser.CREDENTIAL:
			case TSqlParser.CRYPTOGRAPHIC:
			case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
			case TSqlParser.CURSOR_DEFAULT:
			case TSqlParser.DATE_CORRELATION_OPTIMIZATION:
			case TSqlParser.DATEADD:
			case TSqlParser.DATEDIFF:
			case TSqlParser.DATENAME:
			case TSqlParser.DATEPART:
			case TSqlParser.DAYS:
			case TSqlParser.DB_CHAINING:
			case TSqlParser.DB_FAILOVER:
			case TSqlParser.DECRYPTION:
			case TSqlParser.DEFAULT_DOUBLE_QUOTE:
			case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
			case TSqlParser.DEFAULT_LANGUAGE:
			case TSqlParser.DELAY:
			case TSqlParser.DELAYED_DURABILITY:
			case TSqlParser.DELETED:
			case TSqlParser.DENSE_RANK:
			case TSqlParser.DEPENDENTS:
			case TSqlParser.DES:
			case TSqlParser.DESCRIPTION:
			case TSqlParser.DESX:
			case TSqlParser.DHCP:
			case TSqlParser.DIALOG:
			case TSqlParser.DIRECTORY_NAME:
			case TSqlParser.DISABLE:
			case TSqlParser.DISABLE_BROKER:
			case TSqlParser.DISABLED:
			case TSqlParser.DISK_DRIVE:
			case TSqlParser.DOCUMENT:
			case TSqlParser.DYNAMIC:
			case TSqlParser.EMERGENCY:
			case TSqlParser.EMPTY:
			case TSqlParser.ENABLE:
			case TSqlParser.ENABLE_BROKER:
			case TSqlParser.ENCRYPTED_VALUE:
			case TSqlParser.ENCRYPTION:
			case TSqlParser.ENDPOINT_URL:
			case TSqlParser.ERROR_BROKER_CONVERSATIONS:
			case TSqlParser.EXCLUSIVE:
			case TSqlParser.EXECUTABLE:
			case TSqlParser.EXIST:
			case TSqlParser.EXPAND:
			case TSqlParser.EXPIRY_DATE:
			case TSqlParser.EXPLICIT:
			case TSqlParser.FAIL_OPERATION:
			case TSqlParser.FAILOVER_MODE:
			case TSqlParser.FAILURE:
			case TSqlParser.FAILURE_CONDITION_LEVEL:
			case TSqlParser.FAST:
			case TSqlParser.FAST_FORWARD:
			case TSqlParser.FILEGROUP:
			case TSqlParser.FILEGROWTH:
			case TSqlParser.FILEPATH:
			case TSqlParser.FILESTREAM:
			case TSqlParser.FILTER:
			case TSqlParser.FIRST:
			case TSqlParser.FIRST_VALUE:
			case TSqlParser.FOLLOWING:
			case TSqlParser.FORCE:
			case TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case TSqlParser.FORCED:
			case TSqlParser.FORMAT:
			case TSqlParser.FORWARD_ONLY:
			case TSqlParser.FULLSCAN:
			case TSqlParser.FULLTEXT:
			case TSqlParser.GB:
			case TSqlParser.GETDATE:
			case TSqlParser.GETUTCDATE:
			case TSqlParser.GLOBAL:
			case TSqlParser.GO:
			case TSqlParser.GROUP_MAX_REQUESTS:
			case TSqlParser.GROUPING:
			case TSqlParser.GROUPING_ID:
			case TSqlParser.HADR:
			case TSqlParser.HASH:
			case TSqlParser.HEALTH_CHECK_TIMEOUT:
			case TSqlParser.HIGH:
			case TSqlParser.HONOR_BROKER_PRIORITY:
			case TSqlParser.HOURS:
			case TSqlParser.IDENTITY_VALUE:
			case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case TSqlParser.IMMEDIATE:
			case TSqlParser.IMPERSONATE:
			case TSqlParser.IMPORTANCE:
			case TSqlParser.INCREMENTAL:
			case TSqlParser.INITIATOR:
			case TSqlParser.INPUT:
			case TSqlParser.INSENSITIVE:
			case TSqlParser.INSERTED:
			case TSqlParser.INT:
			case TSqlParser.IP:
			case TSqlParser.ISOLATION:
			case TSqlParser.KB:
			case TSqlParser.KEEP:
			case TSqlParser.KEEPFIXED:
			case TSqlParser.KEY_SOURCE:
			case TSqlParser.KEYS:
			case TSqlParser.KEYSET:
			case TSqlParser.LAG:
			case TSqlParser.LAST:
			case TSqlParser.LAST_VALUE:
			case TSqlParser.LEAD:
			case TSqlParser.LEVEL:
			case TSqlParser.LIST:
			case TSqlParser.LISTENER:
			case TSqlParser.LISTENER_URL:
			case TSqlParser.LOB_COMPACTION:
			case TSqlParser.LOCAL:
			case TSqlParser.LOCATION:
			case TSqlParser.LOCK:
			case TSqlParser.LOCK_ESCALATION:
			case TSqlParser.LOGIN:
			case TSqlParser.LOOP:
			case TSqlParser.LOW:
			case TSqlParser.MANUAL:
			case TSqlParser.MARK:
			case TSqlParser.MATERIALIZED:
			case TSqlParser.MAX:
			case TSqlParser.MAX_CPU_PERCENT:
			case TSqlParser.MAX_DOP:
			case TSqlParser.MAX_FILES:
			case TSqlParser.MAX_IOPS_PER_VOLUME:
			case TSqlParser.MAX_MEMORY_PERCENT:
			case TSqlParser.MAX_PROCESSES:
			case TSqlParser.MAX_QUEUE_READERS:
			case TSqlParser.MAX_ROLLOVER_FILES:
			case TSqlParser.MAXDOP:
			case TSqlParser.MAXRECURSION:
			case TSqlParser.MAXSIZE:
			case TSqlParser.MB:
			case TSqlParser.MEDIUM:
			case TSqlParser.MEMORY_OPTIMIZED_DATA:
			case TSqlParser.MESSAGE:
			case TSqlParser.MIN:
			case TSqlParser.MIN_ACTIVE_ROWVERSION:
			case TSqlParser.MIN_CPU_PERCENT:
			case TSqlParser.MIN_IOPS_PER_VOLUME:
			case TSqlParser.MIN_MEMORY_PERCENT:
			case TSqlParser.MINUTES:
			case TSqlParser.MIRROR_ADDRESS:
			case TSqlParser.MIXED_PAGE_ALLOCATION:
			case TSqlParser.MODE:
			case TSqlParser.MODIFY:
			case TSqlParser.MOVE:
			case TSqlParser.MULTI_USER:
			case TSqlParser.NAME:
			case TSqlParser.NESTED_TRIGGERS:
			case TSqlParser.NEW_ACCOUNT:
			case TSqlParser.NEW_BROKER:
			case TSqlParser.NEW_PASSWORD:
			case TSqlParser.NEXT:
			case TSqlParser.NO:
			case TSqlParser.NO_TRUNCATE:
			case TSqlParser.NO_WAIT:
			case TSqlParser.NOCOUNT:
			case TSqlParser.NODES:
			case TSqlParser.NOEXPAND:
			case TSqlParser.NON_TRANSACTED_ACCESS:
			case TSqlParser.NORECOMPUTE:
			case TSqlParser.NORECOVERY:
			case TSqlParser.NOWAIT:
			case TSqlParser.NTILE:
			case TSqlParser.NUMANODE:
			case TSqlParser.NUMBER:
			case TSqlParser.NUMERIC_ROUNDABORT:
			case TSqlParser.OBJECT:
			case TSqlParser.OFFLINE:
			case TSqlParser.OFFSET:
			case TSqlParser.OLD_ACCOUNT:
			case TSqlParser.ONLINE:
			case TSqlParser.ONLY:
			case TSqlParser.OPEN_EXISTING:
			case TSqlParser.OPTIMISTIC:
			case TSqlParser.OPTIMIZE:
			case TSqlParser.OUT:
			case TSqlParser.OUTPUT:
			case TSqlParser.OWNER:
			case TSqlParser.PAGE_VERIFY:
			case TSqlParser.PARAMETERIZATION:
			case TSqlParser.PARTITION:
			case TSqlParser.PARTITIONS:
			case TSqlParser.PARTNER:
			case TSqlParser.PATH:
			case TSqlParser.POISON_MESSAGE_HANDLING:
			case TSqlParser.POOL:
			case TSqlParser.PORT:
			case TSqlParser.PRECEDING:
			case TSqlParser.PRIMARY_ROLE:
			case TSqlParser.PRIOR:
			case TSqlParser.PRIORITY:
			case TSqlParser.PRIORITY_LEVEL:
			case TSqlParser.PRIVATE:
			case TSqlParser.PRIVATE_KEY:
			case TSqlParser.PRIVILEGES:
			case TSqlParser.PROCEDURE_NAME:
			case TSqlParser.PROPERTY:
			case TSqlParser.PROVIDER:
			case TSqlParser.PROVIDER_KEY_NAME:
			case TSqlParser.QUERY:
			case TSqlParser.QUEUE:
			case TSqlParser.QUEUE_DELAY:
			case TSqlParser.QUOTED_IDENTIFIER:
			case TSqlParser.RANGE:
			case TSqlParser.RANK:
			case TSqlParser.RC2:
			case TSqlParser.RC4:
			case TSqlParser.RC4_128:
			case TSqlParser.READ_COMMITTED_SNAPSHOT:
			case TSqlParser.READ_ONLY:
			case TSqlParser.READ_ONLY_ROUTING_LIST:
			case TSqlParser.READ_WRITE:
			case TSqlParser.READONLY:
			case TSqlParser.REBUILD:
			case TSqlParser.RECEIVE:
			case TSqlParser.RECOMPILE:
			case TSqlParser.RECOVERY:
			case TSqlParser.RECURSIVE_TRIGGERS:
			case TSqlParser.RELATIVE:
			case TSqlParser.REMOTE:
			case TSqlParser.REMOTE_SERVICE_NAME:
			case TSqlParser.REMOVE:
			case TSqlParser.REORGANIZE:
			case TSqlParser.REPEATABLE:
			case TSqlParser.REPLICA:
			case TSqlParser.REQUEST_MAX_CPU_TIME_SEC:
			case TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case TSqlParser.RESERVE_DISK_SPACE:
			case TSqlParser.RESOURCE:
			case TSqlParser.RESOURCE_MANAGER_LOCATION:
			case TSqlParser.RESTRICTED_USER:
			case TSqlParser.RETENTION:
			case TSqlParser.ROBUST:
			case TSqlParser.ROOT:
			case TSqlParser.ROUTE:
			case TSqlParser.ROW:
			case TSqlParser.ROW_NUMBER:
			case TSqlParser.ROWGUID:
			case TSqlParser.ROWS:
			case TSqlParser.SAMPLE:
			case TSqlParser.SCHEMABINDING:
			case TSqlParser.SCOPED:
			case TSqlParser.SCROLL:
			case TSqlParser.SCROLL_LOCKS:
			case TSqlParser.SEARCH:
			case TSqlParser.SECONDARY:
			case TSqlParser.SECONDARY_ONLY:
			case TSqlParser.SECONDARY_ROLE:
			case TSqlParser.SECONDS:
			case TSqlParser.SECRET:
			case TSqlParser.SECURITY_LOG:
			case TSqlParser.SEEDING_MODE:
			case TSqlParser.SELF:
			case TSqlParser.SEMI_SENSITIVE:
			case TSqlParser.SEND:
			case TSqlParser.SENT:
			case TSqlParser.SERIALIZABLE:
			case TSqlParser.SESSION_TIMEOUT:
			case TSqlParser.SETERROR:
			case TSqlParser.SHARE:
			case TSqlParser.SHOWPLAN:
			case TSqlParser.SIGNATURE:
			case TSqlParser.SIMPLE:
			case TSqlParser.SINGLE_USER:
			case TSqlParser.SIZE:
			case TSqlParser.SMALLINT:
			case TSqlParser.SNAPSHOT:
			case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
			case TSqlParser.STANDBY:
			case TSqlParser.START_DATE:
			case TSqlParser.STATIC:
			case TSqlParser.STATS_STREAM:
			case TSqlParser.STATUS:
			case TSqlParser.STDEV:
			case TSqlParser.STDEVP:
			case TSqlParser.STOPLIST:
			case TSqlParser.STUFF:
			case TSqlParser.SUBJECT:
			case TSqlParser.SUM:
			case TSqlParser.SUSPEND:
			case TSqlParser.SYMMETRIC:
			case TSqlParser.SYNCHRONOUS_COMMIT:
			case TSqlParser.SYNONYM:
			case TSqlParser.TAKE:
			case TSqlParser.TARGET_RECOVERY_TIME:
			case TSqlParser.TB:
			case TSqlParser.TEXTIMAGE_ON:
			case TSqlParser.THROW:
			case TSqlParser.TIES:
			case TSqlParser.TIME:
			case TSqlParser.TIMEOUT:
			case TSqlParser.TIMER:
			case TSqlParser.TINYINT:
			case TSqlParser.TORN_PAGE_DETECTION:
			case TSqlParser.TRANSFORM_NOISE_WORDS:
			case TSqlParser.TRIPLE_DES:
			case TSqlParser.TRIPLE_DES_3KEY:
			case TSqlParser.TRUSTWORTHY:
			case TSqlParser.TRY:
			case TSqlParser.TSQL:
			case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
			case TSqlParser.TYPE:
			case TSqlParser.TYPE_WARNING:
			case TSqlParser.UNBOUNDED:
			case TSqlParser.UNCOMMITTED:
			case TSqlParser.UNKNOWN:
			case TSqlParser.UNLIMITED:
			case TSqlParser.USING:
			case TSqlParser.VALID_XML:
			case TSqlParser.VALIDATION:
			case TSqlParser.VALUE:
			case TSqlParser.VAR:
			case TSqlParser.VARP:
			case TSqlParser.VIEW_METADATA:
			case TSqlParser.VIEWS:
			case TSqlParser.WAIT:
			case TSqlParser.WELL_FORMED_XML:
			case TSqlParser.WORK:
			case TSqlParser.WORKLOAD:
			case TSqlParser.XML:
			case TSqlParser.XMLNAMESPACES:
			case TSqlParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10626;
				this.simple_id();
				}
				break;
			case TSqlParser.DOUBLE_QUOTE_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10627;
				this.match(TSqlParser.DOUBLE_QUOTE_ID);
				}
				break;
			case TSqlParser.SQUARE_BRACKET_ID:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10628;
				this.match(TSqlParser.SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_id(): Simple_idContext {
		let _localctx: Simple_idContext = new Simple_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 950, TSqlParser.RULE_simple_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10631;
			_la = this._input.LA(1);
			if (!(_la === TSqlParser.CALLED || _la === TSqlParser.DATA_COMPRESSION || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (TSqlParser.EVENTDATA - 113)) | (1 << (TSqlParser.FILENAME - 113)) | (1 << (TSqlParser.FILLFACTOR - 113)) | (1 << (TSqlParser.FORCESEEK - 113)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) !== 0) || _la === TSqlParser.OFFSETS || _la === TSqlParser.PAGE || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (TSqlParser.PUBLIC - 259)) | (1 << (TSqlParser.R - 259)) | (1 << (TSqlParser.RAW - 259)) | (1 << (TSqlParser.RETURN - 259)) | (1 << (TSqlParser.RETURNS - 259)) | (1 << (TSqlParser.ROWCOUNT - 259)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.TARGET - 329)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 415)) | (1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BACKUP_PRIORITY - 415)) | (1 << (TSqlParser.BEGIN_DIALOG - 415)) | (1 << (TSqlParser.BIGINT - 415)) | (1 << (TSqlParser.BINARY_BASE64 - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.BINDING - 415)) | (1 << (TSqlParser.BLOB_STORAGE - 415)) | (1 << (TSqlParser.BROKER - 415)) | (1 << (TSqlParser.BROKER_INSTANCE - 415)) | (1 << (TSqlParser.BULK_LOGGED - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATALOG - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHANGE_RETENTION - 415)) | (1 << (TSqlParser.CHANGE_TRACKING - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.CLEANUP - 415)) | (1 << (TSqlParser.COLLECTION - 415)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTENT - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)))) !== 0) || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DIRECTORY_NAME - 479)) | (1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DISABLE_BROKER - 479)) | (1 << (TSqlParser.DISABLED - 479)) | (1 << (TSqlParser.DISK_DRIVE - 479)) | (1 << (TSqlParser.DOCUMENT - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.EMERGENCY - 479)) | (1 << (TSqlParser.EMPTY - 479)) | (1 << (TSqlParser.ENABLE - 479)) | (1 << (TSqlParser.ENABLE_BROKER - 479)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.ENDPOINT_URL - 479)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 479)) | (1 << (TSqlParser.EXCLUSIVE - 479)) | (1 << (TSqlParser.EXECUTABLE - 479)) | (1 << (TSqlParser.EXIST - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.EXPIRY_DATE - 479)) | (1 << (TSqlParser.EXPLICIT - 479)) | (1 << (TSqlParser.FAIL_OPERATION - 479)) | (1 << (TSqlParser.FAILOVER_MODE - 479)) | (1 << (TSqlParser.FAILURE - 479)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FILEGROUP - 479)) | (1 << (TSqlParser.FILEGROWTH - 479)) | (1 << (TSqlParser.FILEPATH - 479)) | (1 << (TSqlParser.FILESTREAM - 479)))) !== 0) || ((((_la - 511)) & ~0x1F) === 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (TSqlParser.INITIATOR - 543)) | (1 << (TSqlParser.INPUT - 543)) | (1 << (TSqlParser.INSENSITIVE - 543)) | (1 << (TSqlParser.INSERTED - 543)) | (1 << (TSqlParser.INT - 543)) | (1 << (TSqlParser.IP - 543)) | (1 << (TSqlParser.ISOLATION - 543)) | (1 << (TSqlParser.KB - 543)) | (1 << (TSqlParser.KEEP - 543)) | (1 << (TSqlParser.KEEPFIXED - 543)) | (1 << (TSqlParser.KEY_SOURCE - 543)) | (1 << (TSqlParser.KEYS - 543)) | (1 << (TSqlParser.KEYSET - 543)) | (1 << (TSqlParser.LAG - 543)) | (1 << (TSqlParser.LAST - 543)) | (1 << (TSqlParser.LAST_VALUE - 543)) | (1 << (TSqlParser.LEAD - 543)) | (1 << (TSqlParser.LEVEL - 543)) | (1 << (TSqlParser.LIST - 543)) | (1 << (TSqlParser.LISTENER - 543)) | (1 << (TSqlParser.LISTENER_URL - 543)) | (1 << (TSqlParser.LOB_COMPACTION - 543)) | (1 << (TSqlParser.LOCAL - 543)) | (1 << (TSqlParser.LOCATION - 543)) | (1 << (TSqlParser.LOCK - 543)) | (1 << (TSqlParser.LOCK_ESCALATION - 543)) | (1 << (TSqlParser.LOGIN - 543)) | (1 << (TSqlParser.LOOP - 543)) | (1 << (TSqlParser.LOW - 543)) | (1 << (TSqlParser.MANUAL - 543)) | (1 << (TSqlParser.MARK - 543)))) !== 0) || ((((_la - 575)) & ~0x1F) === 0 && ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)))) !== 0) || ((((_la - 607)) & ~0x1F) === 0 && ((1 << (_la - 607)) & ((1 << (TSqlParser.NEW_BROKER - 607)) | (1 << (TSqlParser.NEW_PASSWORD - 607)) | (1 << (TSqlParser.NEXT - 607)) | (1 << (TSqlParser.NO - 607)) | (1 << (TSqlParser.NO_TRUNCATE - 607)) | (1 << (TSqlParser.NO_WAIT - 607)) | (1 << (TSqlParser.NOCOUNT - 607)) | (1 << (TSqlParser.NODES - 607)) | (1 << (TSqlParser.NOEXPAND - 607)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 607)) | (1 << (TSqlParser.NORECOMPUTE - 607)) | (1 << (TSqlParser.NORECOVERY - 607)) | (1 << (TSqlParser.NOWAIT - 607)) | (1 << (TSqlParser.NTILE - 607)) | (1 << (TSqlParser.NUMANODE - 607)) | (1 << (TSqlParser.NUMBER - 607)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 607)) | (1 << (TSqlParser.OBJECT - 607)) | (1 << (TSqlParser.OFFLINE - 607)) | (1 << (TSqlParser.OFFSET - 607)) | (1 << (TSqlParser.OLD_ACCOUNT - 607)) | (1 << (TSqlParser.ONLINE - 607)) | (1 << (TSqlParser.ONLY - 607)) | (1 << (TSqlParser.OPEN_EXISTING - 607)) | (1 << (TSqlParser.OPTIMISTIC - 607)) | (1 << (TSqlParser.OPTIMIZE - 607)) | (1 << (TSqlParser.OUT - 607)) | (1 << (TSqlParser.OUTPUT - 607)) | (1 << (TSqlParser.OWNER - 607)) | (1 << (TSqlParser.PAGE_VERIFY - 607)) | (1 << (TSqlParser.PARAMETERIZATION - 607)) | (1 << (TSqlParser.PARTITION - 607)))) !== 0) || ((((_la - 639)) & ~0x1F) === 0 && ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)))) !== 0) || ((((_la - 671)) & ~0x1F) === 0 && ((1 << (_la - 671)) & ((1 << (TSqlParser.REBUILD - 671)) | (1 << (TSqlParser.RECEIVE - 671)) | (1 << (TSqlParser.RECOMPILE - 671)) | (1 << (TSqlParser.RECOVERY - 671)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 671)) | (1 << (TSqlParser.RELATIVE - 671)) | (1 << (TSqlParser.REMOTE - 671)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 671)) | (1 << (TSqlParser.REMOVE - 671)) | (1 << (TSqlParser.REORGANIZE - 671)) | (1 << (TSqlParser.REPEATABLE - 671)) | (1 << (TSqlParser.REPLICA - 671)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 671)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 671)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 671)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 671)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 671)) | (1 << (TSqlParser.RESOURCE - 671)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 671)) | (1 << (TSqlParser.RESTRICTED_USER - 671)) | (1 << (TSqlParser.RETENTION - 671)) | (1 << (TSqlParser.ROBUST - 671)) | (1 << (TSqlParser.ROOT - 671)) | (1 << (TSqlParser.ROUTE - 671)) | (1 << (TSqlParser.ROW - 671)) | (1 << (TSqlParser.ROW_NUMBER - 671)) | (1 << (TSqlParser.ROWGUID - 671)) | (1 << (TSqlParser.ROWS - 671)) | (1 << (TSqlParser.SAMPLE - 671)) | (1 << (TSqlParser.SCHEMABINDING - 671)) | (1 << (TSqlParser.SCOPED - 671)) | (1 << (TSqlParser.SCROLL - 671)))) !== 0) || ((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)))) !== 0) || ((((_la - 735)) & ~0x1F) === 0 && ((1 << (_la - 735)) & ((1 << (TSqlParser.STOPLIST - 735)) | (1 << (TSqlParser.STUFF - 735)) | (1 << (TSqlParser.SUBJECT - 735)) | (1 << (TSqlParser.SUM - 735)) | (1 << (TSqlParser.SUSPEND - 735)) | (1 << (TSqlParser.SYMMETRIC - 735)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 735)) | (1 << (TSqlParser.SYNONYM - 735)) | (1 << (TSqlParser.TAKE - 735)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 735)) | (1 << (TSqlParser.TB - 735)) | (1 << (TSqlParser.TEXTIMAGE_ON - 735)) | (1 << (TSqlParser.THROW - 735)) | (1 << (TSqlParser.TIES - 735)) | (1 << (TSqlParser.TIME - 735)) | (1 << (TSqlParser.TIMEOUT - 735)) | (1 << (TSqlParser.TIMER - 735)) | (1 << (TSqlParser.TINYINT - 735)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 735)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 735)) | (1 << (TSqlParser.TRIPLE_DES - 735)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 735)) | (1 << (TSqlParser.TRUSTWORTHY - 735)) | (1 << (TSqlParser.TRY - 735)) | (1 << (TSqlParser.TSQL - 735)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 735)) | (1 << (TSqlParser.TYPE - 735)) | (1 << (TSqlParser.TYPE_WARNING - 735)) | (1 << (TSqlParser.UNBOUNDED - 735)) | (1 << (TSqlParser.UNCOMMITTED - 735)) | (1 << (TSqlParser.UNKNOWN - 735)) | (1 << (TSqlParser.UNLIMITED - 735)))) !== 0) || ((((_la - 767)) & ~0x1F) === 0 && ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.ID - 767)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparison_operator(): Comparison_operatorContext {
		let _localctx: Comparison_operatorContext = new Comparison_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 952, TSqlParser.RULE_comparison_operator);
		try {
			this.state = 10648;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1507, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10633;
				this.match(TSqlParser.EQUAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10634;
				this.match(TSqlParser.GREATER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10635;
				this.match(TSqlParser.LESS);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10636;
				this.match(TSqlParser.LESS);
				this.state = 10637;
				this.match(TSqlParser.EQUAL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10638;
				this.match(TSqlParser.GREATER);
				this.state = 10639;
				this.match(TSqlParser.EQUAL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10640;
				this.match(TSqlParser.LESS);
				this.state = 10641;
				this.match(TSqlParser.GREATER);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10642;
				this.match(TSqlParser.EXCLAMATION);
				this.state = 10643;
				this.match(TSqlParser.EQUAL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10644;
				this.match(TSqlParser.EXCLAMATION);
				this.state = 10645;
				this.match(TSqlParser.GREATER);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 10646;
				this.match(TSqlParser.EXCLAMATION);
				this.state = 10647;
				this.match(TSqlParser.LESS);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_operator(): Assignment_operatorContext {
		let _localctx: Assignment_operatorContext = new Assignment_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 954, TSqlParser.RULE_assignment_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10650;
			_la = this._input.LA(1);
			if (!(((((_la - 805)) & ~0x1F) === 0 && ((1 << (_la - 805)) & ((1 << (TSqlParser.PLUS_ASSIGN - 805)) | (1 << (TSqlParser.MINUS_ASSIGN - 805)) | (1 << (TSqlParser.MULT_ASSIGN - 805)) | (1 << (TSqlParser.DIV_ASSIGN - 805)) | (1 << (TSqlParser.MOD_ASSIGN - 805)) | (1 << (TSqlParser.AND_ASSIGN - 805)) | (1 << (TSqlParser.XOR_ASSIGN - 805)) | (1 << (TSqlParser.OR_ASSIGN - 805)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_size(): File_sizeContext {
		let _localctx: File_sizeContext = new File_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 956, TSqlParser.RULE_file_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10652;
			this.match(TSqlParser.DECIMAL);
			this.state = 10654;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TSqlParser.GB || _la === TSqlParser.KB || _la === TSqlParser.MB || _la === TSqlParser.TB || _la === TSqlParser.MODULE) {
				{
				this.state = 10653;
				_la = this._input.LA(1);
				if (!(_la === TSqlParser.GB || _la === TSqlParser.KB || _la === TSqlParser.MB || _la === TSqlParser.TB || _la === TSqlParser.MODULE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 46:
			return this.assembly_option_sempred(_localctx as Assembly_optionContext, predIndex);

		case 357:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);
		}
		return true;
	}
	private assembly_option_sempred(_localctx: Assembly_optionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 5);

		case 2:
			return this.precpred(this._ctx, 4);

		case 3:
			return this.precpred(this._ctx, 3);

		case 4:
			return this.precpred(this._ctx, 2);

		case 5:
			return this.precpred(this._ctx, 10);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 21;
	private static readonly _serializedATNSegment0: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x03\u0343\u29A3\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
		"\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
		"\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
		"\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
		"\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
		"\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
		"\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
		"\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
		"\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
		"\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
		"\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
		"\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
		"\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
		"\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
		"\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
		"\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
		"\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
		"\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
		"\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
		"\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
		"\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
		"\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
		"\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
		"\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
		"\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
		"\u01DF\t\u01DF\x04\u01E0\t\u01E0\x03\x02\x07\x02\u03C2\n\x02\f\x02\x0E" +
		"\x02\u03C5\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x07\x03\u03CB\n\x03\f" +
		"\x03\x0E\x03\u03CE\v\x03\x03\x03\x05\x03\u03D1\n\x03\x03\x03\x03\x03\x07" +
		"\x03\u03D5\n\x03\f\x03\x0E\x03\u03D8\v\x03\x05\x03\u03DA\n\x03\x03\x04" +
		"\x03\x04\x05\x04\u03DE\n\x04\x06\x04\u03E0\n\x04\r\x04\x0E\x04\u03E1\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u03EB\n\x05" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\u03F2\n\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u0493\n\x07\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u049A\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u04A8\n\t\x03\n\x03\n\x05\n\u04AC" +
		"\n\n\x03\n\x05\n\u04AF\n\n\x03\n\x03\n\x05\n\u04B3\n\n\x03\v\x03\v\x05" +
		"\v\u04B7\n\v\x03\f\x03\f\x05\f\u04BB\n\f\x03\r\x03\r\x03\r\x05\r\u04C0" +
		"\n\r\x03\r\x03\r\x03\r\x05\r\u04C5\n\r\x05\r\u04C7\n\r\x03\x0E\x03\x0E" +
		"\x05\x0E\u04CB\n\x0E\x03\x0E\x05\x0E\u04CE\n\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x05\x0F\u04D5\n\x0F\x03\x0F\x05\x0F\u04D8\n\x0F\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u04E1\n\x10\x03" +
		"\x10\x05\x10\u04E4\n\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x14\x05\x14\u04EF\n\x14\x03\x14\x05\x14\u04F2\n\x14" +
		"\x03\x14\x03\x14\x03\x14\x05\x14\u04F7\n\x14\x03\x14\x03\x14\x03\x14\x05" +
		"\x14\u04FC\n\x14\x03\x14\x05\x14\u04FF\n\x14\x03\x14\x03\x14\x03\x14\x05" +
		"\x14\u0504\n\x14\x03\x15\x03\x15\x05\x15\u0508\n\x15\x03\x15\x05\x15\u050B" +
		"\n\x15\x03\x15\x03\x15\x05\x15\u050F\n\x15\x03\x15\x05\x15\u0512\n\x15" +
		"\x03\x15\x05\x15\u0515\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05" +
		"\x16\u051C\n\x16\x03\x16\x03\x16\x05\x16\u0520\n\x16\x05\x16\u0522\n\x16" +
		"\x03\x17\x03\x17\x03\x17\x05\x17\u0527\n\x17\x03\x17\x03\x17\x07\x17\u052B" +
		"\n\x17\f\x17\x0E\x17\u052E\v\x17\x03\x17\x05\x17\u0531\n\x17\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u053C" +
		"\n\x18\f\x18\x0E\x18\u053F\v\x18\x03\x18\x03\x18\x03\x18\x05\x18\u0544" +
		"\n\x18\x03\x18\x05\x18\u0547\n\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x07\x18\u054E\n\x18\f\x18\x0E\x18\u0551\v\x18\x05\x18\u0553\n\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0564\n\x1A\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u056C\n\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x05\x1B\u0571\n\x1B\x03\x1B\x05\x1B\u0574\n\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x05\x1B\u0579\n\x1B\x03\x1B\x05\x1B\u057C\n\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x05\x1B\u0581\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03" +
		"\x1C\x03\x1C\x05\x1C\u0589\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u058E" +
		"\n\x1C\x03\x1C\x05\x1C\u0591\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0596" +
		"\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u059C\n\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x05\x1D\u05A1\n\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x05" +
		"!\u05B2\n!\x03!\x05!\u05B5\n!\x03!\x05!\u05B8\n!\x03!\x05!\u05BB\n!\x03" +
		"\"\x03\"\x03\"\x05\"\u05C0\n\"\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x05" +
		"%\u05C9\n%\x03&\x03&\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03)\x03)\x03" +
		")\x03)\x05)\u05D8\n)\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x03-\x03-\x03" +
		"-\x03.\x03.\x03/\x03/\x03/\x05/\u05E9\n/\x030\x030\x030\x030\x030\x03" +
		"0\x030\x030\x030\x050\u05F4\n0\x030\x030\x070\u05F8\n0\f0\x0E0\u05FB\v" +
		"0\x031\x031\x031\x031\x032\x032\x033\x033\x034\x034\x034\x034\x054\u0609" +
		"\n4\x035\x035\x036\x036\x036\x037\x037\x038\x038\x038\x038\x038\x038\x05" +
		"8\u0618\n8\x039\x039\x03:\x03:\x03:\x03:\x03:\x05:\u0621\n:\x03:\x03:" +
		"\x05:\u0625\n:\x03:\x06:\u0628\n:\r:\x0E:\u0629\x03:\x03:\x03:\x03:\x05" +
		":\u0630\n:\x03;\x03;\x03;\x03;\x05;\u0636\n;\x03;\x05;\u0639\n;\x03;\x06" +
		";\u063C\n;\r;\x0E;\u063D\x03;\x03;\x03;\x05;\u0643\n;\x03<\x03<\x03<\x03" +
		"<\x03<\x03<\x05<\u064B\n<\x03=\x03=\x03=\x03=\x03>\x03>\x03>\x03>\x05" +
		">\u0655\n>\x03>\x03>\x03?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03" +
		"@\x03@\x03@\x03@\x03@\x03@\x05@\u0668\n@\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x05A\u0670\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x05A\u067D\nA\x05A\u067F\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A" +
		"\x03A\x03A\x05A\u068B\nA\x05A\u068D\nA\x03A\x03A\x03A\x03A\x03A\x05A\u0694" +
		"\nA\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x05B\u069D\nB\x03C\x03C\x03C\x03" +
		"C\x05C\u06A3\nC\x03C\x03C\x03C\x03C\x03D\x03D\x03D\x05D\u06AC\nD\x03E" +
		"\x03E\x03F\x03F\x03F\x03G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x05H\u06BB" +
		"\nH\x03H\x03H\x03H\x03H\x03I\x03I\x03I\x03I\x05I\u06C5\nI\x03I\x03I\x03" +
		"I\x03I\x03J\x03J\x03J\x03J\x05J\u06CF\nJ\x03J\x03J\x03J\x03J\x03K\x03" +
		"K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03" +
		"K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03" +
		"K\x03K\x03K\x03K\x03K\x05K\u06F7\nK\x03L\x03L\x03L\x03L\x03L\x03L\x03" +
		"L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03" +
		"L\x05L\u070E\nL\x03M\x03M\x03N\x03N\x03O\x03O\x03O\x03O\x03O\x03P\x03" +
		"P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u0732\nR\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x05R\u0744\nR\x03R\x05R\u0747\nR\x03R\x03R\x03R\x05R\u074C\nR\x03R\x05" +
		"R\u074F\nR\x03R\x03R\x03R\x05R\u0754\nR\x03R\x05R\u0757\nR\x03R\x03R\x03" +
		"R\x05R\u075C\nR\x03R\x05R\u075F\nR\x03R\x03R\x03R\x05R\u0764\nR\x03R\x05" +
		"R\u0767\nR\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u076F\nR\x03R\x05R\u0772" +
		"\nR\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u077A\nR\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u0787\nR\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x05R\u0792\nR\x03R\x07R\u0795\nR\fR\x0ER\u0798\v" +
		"R\x03R\x05R\u079B\nR\x03R\x03R\x03R\x03R\x05R\u07A1\nR\x03R\x03R\x03R" +
		"\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x05R\u07B8\nR\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x05R\u07C4\nR\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x05R\u07CF\nR\x03R\x07R\u07D2\nR\fR\x0ER\u07D5\vR\x03R\x05R\u07D8" +
		"\nR\x03R\x03R\x03R\x03R\x05R\u07DE\nR\x05R\u07E0\nR\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u07ED\nR\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x06R\u0802\nR\rR\x0ER\u0803\x03R\x03R\x03R\x03R\x03R\x05R\u080B" +
		"\nR\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u0814\nR\x03R\x03R\x03R\x05" +
		"R\u0819\nR\x03R\x05R\u081C\nR\x03R\x03R\x03R\x05R\u0821\nR\x03R\x05R\u0824" +
		"\nR\x03R\x03R\x03R\x05R\u0829\nR\x03R\x06R\u082C\nR\rR\x0ER\u082D\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u084A\n" +
		"R\x03R\x03R\x03R\x03R\x03R\x05R\u0851\nR\x03R\x06R\u0854\nR\rR\x0ER\u0855" +
		"\x03R\x03R\x03R\x03R\x03R\x05R\u085D\nR\x05R\u085F\nR\x03R\x03R\x03R\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x05R\u086A\nR\x03R\x03R\x03R\x03R\x05R\u0870" +
		"\nR\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05" +
		"R\u087F\nR\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03" +
		"S\x05S\u088D\nS\x03S\x05S\u0890\nS\x05S\u0892\nS\x03S\x03S\x03S\x05S\u0897" +
		"\nS\x03S\x03S\x05S\u089B\nS\x03S\x05S\u089E\nS\x05S\u08A0\nS\x03S\x03" +
		"S\x03S\x03S\x05S\u08A6\nS\x03S\x05S\u08A9\nS\x05S\u08AB\nS\x03S\x03S\x03" +
		"S\x03S\x05S\u08B1\nS\x05S\u08B3\nS\x03S\x03S\x03T\x03T\x03T\x03T\x03T" +
		"\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x05" +
		"U\u08C9\nU\x03U\x03U\x03U\x03U\x03U\x03U\x05U\u08D1\nU\x03U\x03U\x03U" +
		"\x03U\x03U\x03U\x05U\u08D9\nU\x06U\u08DB\nU\rU\x0EU\u08DC\x03U\x03U\x03" +
		"U\x03U\x03U\x03U\x03U\x05U\u08E6\nU\x03V\x03V\x03V\x03V\x03V\x03V\x03" +
		"V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x05V\u08FB" +
		"\nV\x03V\x03V\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x05W\u0908" +
		"\nW\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x05" +
		"W\u0917\nW\x06W\u0919\nW\rW\x0EW\u091A\x03X\x03X\x03X\x03X\x03Y\x03Y\x03" +
		"Y\x03Y\x03Y\x03Y\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03[\x03[\x03[\x03[\x03" +
		"\\\x03\\\x03\\\x03\\\x03]\x03]\x03]\x03]\x03]\x03^\x03^\x03^\x03^\x05" +
		"^\u093E\n^\x03^\x05^\u0941\n^\x03^\x06^\u0944\n^\r^\x0E^\u0945\x03_\x03" +
		"_\x03_\x03_\x03_\x03_\x03`\x03`\x03`\x03`\x03`\x03`\x03a\x03a\x03a\x03" +
		"a\x05a\u0958\na\x03a\x05a\u095B\na\x03a\x03a\x03a\x05a\u0960\na\x03a\x03";
	private static readonly _serializedATNSegment1: string =
		"a\x03b\x03b\x03b\x03b\x03c\x03c\x03c\x03c\x03c\x03c\x03d\x03d\x03d\x03" +
		"d\x03d\x03d\x03e\x03e\x03e\x03e\x03e\x03e\x05e\u097A\ne\x03f\x03f\x03" +
		"f\x03f\x03f\x03f\x03g\x03g\x03g\x03g\x03g\x03g\x05g\u0988\ng\x03g\x03" +
		"g\x03g\x05g\u098D\ng\x03g\x03g\x03h\x03h\x03h\x03h\x05h\u0995\nh\x03h" +
		"\x06h\u0998\nh\rh\x0Eh\u0999\x03h\x03h\x03h\x03h\x03h\x05h\u09A1\nh\x03" +
		"i\x03i\x03i\x03i\x03i\x03i\x03i\x03j\x03j\x03j\x03j\x03j\x03k\x03k\x03" +
		"k\x03k\x03k\x03k\x03k\x05k\u09B6\nk\x03k\x03k\x03l\x03l\x03l\x03l\x03" +
		"l\x03m\x03m\x03m\x03m\x03n\x03n\x03n\x03n\x03o\x03o\x03o\x03o\x03o\x03" +
		"p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03q\x03q\x03r\x03r\x03r\x03r\x03" +
		"r\x05r\u09DB\nr\x03r\x03r\x03r\x05r\u09E0\nr\x03r\x03r\x03s\x03s\x03s" +
		"\x03s\x03s\x03s\x03t\x03t\x03t\x03t\x03t\x03u\x03u\x03u\x03u\x05u\u09F3" +
		"\nu\x03u\x03u\x03v\x03v\x03v\x03v\x03w\x03w\x03w\x03w\x05w\u09FF\nw\x03" +
		"w\x05w\u0A02\nw\x03w\x03w\x03w\x05w\u0A07\nw\x03w\x05w\u0A0A\nw\x03x\x03" +
		"x\x03x\x03x\x05x\u0A10\nx\x03x\x03x\x03y\x03y\x03y\x03y\x03y\x03y\x03" +
		"z\x03z\x03z\x03z\x03z\x05z\u0A1F\nz\x03z\x03z\x03z\x05z\u0A24\nz\x03z" +
		"\x03z\x03{\x03{\x03{\x03{\x05{\u0A2C\n{\x03{\x05{\u0A2F\n{\x03{\x03{\x03" +
		"{\x05{\u0A34\n{\x03{\x03{\x03{\x05{\u0A39\n{\x03{\x05{\u0A3C\n{\x03|\x03" +
		"|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03}\x03}\x03~\x03~\x03~\x03~\x03" +
		"~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x05\x80\u0A54\n\x80" +
		"\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u0A5B\n\x80\x03\x80\x03" +
		"\x80\x03\x80\x05\x80\u0A60\n\x80\x03\x80\x03\x80\x03\x80\x05\x80\u0A65" +
		"\n\x80\x03\x80\x03\x80\x03\x80\x06\x80\u0A6A\n\x80\r\x80\x0E\x80\u0A6B" +
		"\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x05\x81\u0A73\n\x81\x03\x81\x03" +
		"\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03" +
		"\x82\x05\x82\u0A80\n\x82\x03\x83\x03\x83\x03\x83\x03\x83\x05\x83\u0A86" +
		"\n\x83\x03\x83\x03\x83\x03\x83\x05\x83\u0A8B\n\x83\x03\x83\x03\x83\x03" +
		"\x84\x03\x84\x03\x84\x03\x84\x05\x84\u0A93\n\x84\x03\x84\x03\x84\x03\x85" +
		"\x03\x85\x03\x85\x03\x85\x03\x85\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86" +
		"\x03\x86\x03\x86\x05\x86\u0AA3\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03" +
		"\x87\x05\x87\u0AAA\n\x87\x03\x87\x03\x87\x03\x87\x05\x87\u0AAF\n\x87\x03" +
		"\x87\x06\x87\u0AB2\n\x87\r\x87\x0E\x87\u0AB3\x03\x87\x05\x87\u0AB7\n\x87" +
		"\x03\x87\x03\x87\x03\x87\x03\x87\x05\x87\u0ABD\n\x87\x03\x87\x03\x87\x03" +
		"\x87\x03\x87\x05\x87\u0AC3\n\x87\x03\x88\x03\x88\x03\x88\x05\x88\u0AC8" +
		"\n\x88\x03\x88\x03\x88\x03\x88\x05\x88\u0ACD\n\x88\x03\x88\x06\x88\u0AD0" +
		"\n\x88\r\x88\x0E\x88\u0AD1\x03\x88\x05\x88\u0AD5\n\x88\x03\x88\x03\x88" +
		"\x03\x88\x03\x88\x05\x88\u0ADB\n\x88\x03\x88\x03\x88\x03\x88\x03\x88\x05" +
		"\x88\u0AE1\n\x88\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89" +
		"\x03\x89\x03\x89\x05\x89\u0AEC\n\x89\x03\x89\x05\x89\u0AEF\n\x89\x03\x8A" +
		"\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0AF9" +
		"\n\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0AFF\n\x8A\x06\x8A\u0B01" +
		"\n\x8A\r\x8A\x0E\x8A\u0B02\x03\x8A\x03\x8A\x05\x8A\u0B07\n\x8A\x03\x8B" +
		"\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
		"\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8C" +
		"\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C" +
		"\u0B24\n\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03" +
		"\x8D\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u0B31\n\x8D\x03\x8D\x03\x8D\x03\x8D" +
		"\x03\x8D\x05\x8D\u0B37\n\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03" +
		"\x8E\x03\x8E\x03\x8E\x05\x8E\u0B41\n\x8E\x03\x8E\x05\x8E\u0B44\n\x8E\x03" +
		"\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03" +
		"\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x05" +
		"\x90\u0B58\n\x90\x03\x90\x03\x90\x05\x90\u0B5C\n\x90\x03\x90\x03\x90\x05" +
		"\x90\u0B60\n\x90\x03\x90\x06\x90\u0B63\n\x90\r\x90\x0E\x90\u0B64\x03\x90" +
		"\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x91\x03\x91\x03\x91\x03\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u0B74\n\x91\x03\x91\x03\x91\x03\x91\x03" +
		"\x91\x03\x91\x05\x91\u0B7B\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91" +
		"\x03\x91\x03\x91\x05\x91\u0B84\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x07" +
		"\x91\u0B8A\n\x91\f\x91\x0E\x91\u0B8D\v\x91\x05\x91\u0B8F\n\x91\x03\x91" +
		"\x03\x91\x03\x91\x05\x91\u0B94\n\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0B99" +
		"\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x06\x91\u0B9F\n\x91\r\x91\x0E\x91" +
		"\u0BA0\x03\x91\x03\x91\x06\x91\u0BA5\n\x91\r\x91\x0E\x91\u0BA6\x03\x91" +
		"\x03\x91\x05\x91\u0BAB\n\x91\x03\x91\x03\x91\x07\x91\u0BAF\n\x91\f\x91" +
		"\x0E\x91\u0BB2\v\x91\x07\x91\u0BB4\n\x91\f\x91\x0E\x91\u0BB7\v\x91\x03" +
		"\x91\x05\x91\u0BBA\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91" +
		"\u0BC1\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x07\x91\u0BC7\n\x91\f\x91" +
		"\x0E\x91\u0BCA\v\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0BD1" +
		"\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91" +
		"\u0BDA\n\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0BDF\n\x91\x03\x91\x03\x91" +
		"\x05\x91\u0BE3\n\x91\x03\x91\x05\x91\u0BE6\n\x91\x06\x91\u0BE8\n\x91\r" +
		"\x91\x0E\x91\u0BE9\x03\x91\x03\x91\x07\x91\u0BEE\n\x91\f\x91\x0E\x91\u0BF1" +
		"\v\x91\x07\x91\u0BF3\n\x91\f\x91\x0E\x91\u0BF6\v\x91\x03\x91\x03\x91\x03" +
		"\x91\x03\x91\x03\x91\x05\x91\u0BFD\n\x91\x03\x91\x03\x91\x03\x91\x03\x91" +
		"\x07\x91\u0C03\n\x91\f\x91\x0E\x91\u0C06\v\x91\x03\x91\x03\x91\x03\x91" +
		"\x05\x91\u0C0B\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0C11\n\x91" +
		"\x03\x91\x05\x91\u0C14\n\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0C19\n\x91" +
		"\x03\x91\x05\x91\u0C1C\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05" +
		"\x91\u0C23\n\x91\x05\x91\u0C25\n\x91\x03\x91\x05\x91\u0C28\n\x91\x03\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u0C2E\n\x91\x03\x91\x05\x91\u0C31\n\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u0C36\n\x91\x03\x91\x05\x91\u0C39\n\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u0C3E\n\x91\x03\x91\x05\x91\u0C41\n\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u0C46\n\x91\x03\x91\x05\x91\u0C49\n\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u0C4E\n\x91\x03\x92\x05\x92\u0C51\n\x92" +
		"\x03\x92\x05\x92\u0C54\n\x92\x03\x92\x05\x92\u0C57\n\x92\x03\x92\x03\x92" +
		"\x03\x92\x03\x92\x03\x92\x05\x92\u0C5E\n\x92\x06\x92\u0C60\n\x92\r\x92" +
		"\x0E\x92\u0C61\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x05\x93\u0C69\n" +
		"\x93\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x05\x94\u0C70\n\x94\x03\x94" +
		"\x03\x94\x03\x94\x03\x94\x05\x94\u0C76\n\x94\x03\x94\x03\x94\x03\x94\x03" +
		"\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x05\x94\u0C83" +
		"\n\x94\x03\x94\x03\x94\x05\x94\u0C87\n\x94\x03\x94\x03\x94\x03\x94\x05" +
		"\x94\u0C8C\n\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94" +
		"\x03\x94\x05\x94\u0C96\n\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03" +
		"\x94\x03\x94\x05\x94\u0C9F\n\x94\x03\x94\x03\x94\x05\x94\u0CA3\n\x94\x03" +
		"\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03" +
		"\x95\x05\x95\u0CAF\n\x95\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0CB5" +
		"\n\x95\x03\x95\x03\x95\x03\x95\x06\x95\u0CBA\n\x95\r\x95\x0E\x95\u0CBB" +
		"\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95" +
		"\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95" +
		"\x05\x95\u0CD0\n\x95\x03\x95\x03\x95\x05\x95\u0CD4\n\x95\x03\x96\x03\x96" +
		"\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0CDC\n\x96\x03\x96\x03\x96\x03" +
		"\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0CE5\n\x96\x03\x96\x03\x96" +
		"\x03\x96\x03\x96\x05\x96\u0CEB\n\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05" +
		"\x96\u0CF1\n\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x06\x96" +
		"\u0CF9\n\x96\r\x96\x0E\x96\u0CFA\x03\x96\x03\x96\x03\x97\x03\x97\x03\x97" +
		"\x03\x97\x03\x97\x03\x97\x05\x97\u0D05\n\x97\x03\x97\x03\x97\x05\x97\u0D09" +
		"\n\x97\x03\x97\x05\x97\u0D0C\n\x97\x03\x97\x03\x97\x05\x97\u0D10\n\x97" +
		"\x03\x97\x03\x97\x03\x97\x05\x97\u0D15\n\x97\x03\x97\x03\x97\x03\x97\x03" +
		"\x97\x05\x97\u0D1B\n\x97\x03\x97\x05\x97\u0D1E\n\x97\x03\x97\x03\x97\x05" +
		"\x97\u0D22\n\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x06\x97" +
		"\u0D2A\n\x97\r\x97\x0E\x97\u0D2B\x03\x97\x05\x97\u0D2F\n\x97\x03\x98\x03" +
		"\x98\x03\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0D37\n\x98\x03\x98\x03\x98" +
		"\x03\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0D3F\n\x98\x03\x98\x03\x98\x03" +
		"\x98\x03\x98\x03\x98\x05\x98\u0D46\n\x98\x03\x98\x03\x98\x03\x98\x03\x98" +
		"\x03\x98\x06\x98\u0D4D\n\x98\r\x98\x0E\x98\u0D4E\x05\x98\u0D51\n\x98\x03" +
		"\x98\x03\x98\x03\x98\x05\x98\u0D56\n\x98\x03\x98\x03\x98\x03\x98\x03\x98" +
		"\x05\x98\u0D5C\n\x98\x03\x98\x06\x98\u0D5F\n\x98\r\x98\x0E\x98\u0D60\x05" +
		"\x98\u0D63\n\x98\x03\x98\x05\x98\u0D66\n\x98\x03\x98\x03\x98\x03\x98\x05" +
		"\x98\u0D6B\n\x98\x03\x98\x05\x98\u0D6E\n\x98\x03\x98\x03\x98\x03\x98\x05" +
		"\x98\u0D73\n\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99" +
		"\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x05\x99\u0D82\n\x99\x03" +
		"\x99\x03\x99\x03\x99\x03\x99\x03\x99\x05\x99\u0D89\n\x99\x03\x99\x03\x99" +
		"\x03\x99\x03\x99\x03\x99\x06\x99\u0D90\n\x99\r\x99\x0E\x99\u0D91\x05\x99" +
		"\u0D94\n\x99\x03\x99\x03\x99\x03\x99\x05\x99\u0D99\n\x99\x03\x99\x03\x99" +
		"\x03\x99\x03\x99\x05\x99\u0D9F\n\x99\x03\x99\x06\x99\u0DA2\n\x99\r\x99" +
		"\x0E\x99\u0DA3\x05\x99\u0DA6\n\x99\x03\x99\x05\x99\u0DA9\n\x99\x03\x99" +
		"\x03\x99\x03\x99\x05\x99\u0DAE\n\x99\x03\x99\x05\x99\u0DB1\n\x99\x03\x99" +
		"\x03\x99\x03\x99\x05\x99\u0DB6\n\x99\x03\x99\x03\x99\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0DC3\n\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0DC8\n\x9A\x03\x9B\x03\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0DD1\n\x9B\x03\x9B\x03\x9B\x03\x9B" +
		"\x05\x9B\u0DD6\n\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0DDC\n\x9B" +
		"\x03\x9B\x03\x9B\x05\x9B\u0DE0\n\x9B\x03\x9B\x03\x9B\x05\x9B\u0DE4\n\x9B" +
		"\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C" +
		"\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u0DF5\n\x9C\x05" +
		"\x9C\u0DF7\n\x9C\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D" +
		"\x03\x9D\x05\x9D\u0E01\n\x9D\x03\x9D\x03\x9D\x03\x9D\x05\x9D\u0E06\n\x9D" +
		"\x05\x9D\u0E08\n\x9D\x03\x9D\x03\x9D\x05\x9D\u0E0C\n\x9D\x03\x9E\x03\x9E" +
		"\x03\x9E\x03\x9E\x05\x9E\u0E12\n\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03" +
		"\x9E\x03\x9E\x05\x9E\u0E1A\n\x9E\x03\x9E\x07\x9E\u0E1D\n\x9E\f\x9E\x0E" +
		"\x9E\u0E20\v\x9E\x05\x9E\u0E22\n\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x07" +
		"\x9E\u0E28\n\x9E\f\x9E\x0E\x9E\u0E2B\v\x9E\x05\x9E\u0E2D\n\x9E\x03\x9E" +
		"\x03\x9E\x03\x9E\x05\x9E\u0E32\n\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0E37" +
		"\n\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0E3C\n\x9E\x03\x9E\x03\x9E\x03" +
		"\x9E\x05\x9E\u0E41\n\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0E46\n\x9E\x03" +
		"\x9E\x03\x9E\x03\x9E\x05\x9E\u0E4B\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0E4F" +
		"\n\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0E54\n\x9E\x03\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E5F\n\x9F" +
		"\x03\x9F\x07\x9F\u0E62\n\x9F\f\x9F\x0E\x9F\u0E65\v\x9F\x05\x9F\u0E67\n" +
		"\x9F\x03\x9F\x05\x9F\u0E6A\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E6F" +
		"\n\x9F\x03\x9F\x05\x9F\u0E72\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E77" +
		"\n\x9F\x03\x9F\x05\x9F\u0E7A\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E7F" +
		"\n\x9F\x03\x9F\x05\x9F\u0E82\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E87" +
		"\n\x9F\x03\x9F\x05\x9F\u0E8A\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E8F" +
		"\n\x9F\x03\x9F\x05\x9F\u0E92\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E97" +
		"\n\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0E9D\n\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x05\x9F\u0EA2\n\x9F\x03\x9F\x05\x9F\u0EA5\n\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x05\x9F\u0EAA\n\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F" +
		"\x05\x9F\u0EB1\n\x9F\x05\x9F\u0EB3\n\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0" +
		"\x05\xA0\u0EB9\n\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03" +
		"\xA0\x05\xA0\u0EC2\n\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u0EC7\n\xA0\x05" +
		"\xA0\u0EC9\n\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1" +
		"\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0ED5\n\xA1\x03\xA2\x03\xA2\x03\xA2\x03" +
		"\xA2\x05\xA2\u0EDB\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x07\xA2\u0EE5\n\xA2\f\xA2\x0E\xA2\u0EE8\v\xA2\x05\xA2" +
		"\u0EEA\n\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0EEF\n\xA2\x05\xA2\u0EF1" +
		"\n\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3" +
		"\x05\xA3\u0EFB\n\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0F00\n\xA3\x05\xA3" +
		"\u0F02\n\xA3\x03\xA3\x03\xA3\x05\xA3\u0F06\n\xA3\x03\xA4\x03\xA4\x03\xA4" +
		"\x03\xA4\x05\xA4\u0F0C\n\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03" +
		"\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03" +
		"\xA4\x03\xA4\x05\xA4\u0F1E\n\xA4\x05\xA4\u0F20\n\xA4\x03\xA5\x03\xA5\x03" +
		"\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x03" +
		"\xA6\x03\xA6\x05\xA6\u0F2F\n\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6" +
		"\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6" +
		"\x03\xA6\x03\xA6\x05\xA6\u0F41\n\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03" +
		"\xA6\x03\xA6\x05\xA6\u0F49\n\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x05\xA7\u0F53\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x03\xA8\x05\xA8\u0F63\n\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9" +
		"\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA" +
		"\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x05\xAA\u0F78\n\xAA\x03\xAB\x03" +
		"\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB\u0F83" +
		"\n\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB\u0F89\n\xAB\x03\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0F92\n\xAC\x03\xAC" +
		"\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0F9B\n\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0FA1\n\xAC\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0FAA\n\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x05\xAD\u0FAF\n\xAD\x03\xAD\x05\xAD\u0FB2\n\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x05\xAD\u0FB7\n\xAD\x03\xAD\x05\xAD\u0FBA\n\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x05\xAD\u0FBF\n\xAD\x03\xAD\x05\xAD\u0FC2\n\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0FCA\n\xAD\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x05\xAD\u0FD0\n\xAD\x06\xAD\u0FD2\n\xAD\r\xAD\x0E\xAD\u0FD3\x03" +
		"\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0FDB\n\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x03\xAD\x05\xAD\u0FE1\n\xAD\x06\xAD\u0FE3\n\xAD\r\xAD\x0E\xAD" +
		"\u0FE4\x03\xAD\x05\xAD\u0FE8\n\xAD\x05\xAD\u0FEA\n\xAD\x03\xAD\x05\xAD" +
		"\u0FED\n\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0FF2\n\xAD\x03\xAD\x05\xAD" +
		"\u0FF5\n\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0FFA\n\xAD\x03\xAD\x05\xAD" +
		"\u0FFD\n\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u1002\n\xAD\x03\xAD\x05\xAD" +
		"\u1005\n\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u100A\n\xAD\x03\xAD\x05\xAD" +
		"\u100D\n\xAD\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u101C\n\xAE\x03\xAE" +
		"\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x05\xAE" +
		"\u1027\n\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03" +
		"\xAF\x03\xAF\x03\xAF\x05\xAF\u1033\n\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB0" +
		"\x03\xB0\x05\xB0\u103A\n\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x05" +
		"\xB1\u1041\n\xB1\x03\xB1\x03\xB1\x05\xB1\u1045\n\xB1\x03\xB1\x03\xB1\x03" +
		"\xB1\x05\xB1\u104A\n\xB1\x03\xB1\x05\xB1\u104D\n\xB1\x03\xB1\x03\xB1\x03" +
		"\xB1\x05\xB1\u1052\n\xB1\x03\xB1\x05\xB1\u1055\n\xB1\x03\xB1\x03\xB1\x03" +
		"\xB1\x05\xB1\u105A\n\xB1\x03\xB1\x05\xB1\u105D\n\xB1\x03\xB1\x03\xB1\x03" +
		"\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x05\xB1\u1066\n\xB1\x03\xB2\x03\xB2" +
		"\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u106D\n\xB2\x03\xB2\x03\xB2\x03\xB2\x03" +
		"\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03" +
		"\xB3\x05\xB3\u107C\n\xB3\x03\xB3\x03\xB3\x05\xB3\u1080\n\xB3\x03\xB3\x03" +
		"\xB3\x03\xB3\x05\xB3\u1085\n\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
		"\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u1090\n\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u109A\n\xB4\x03\xB4" +
		"\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
		"\x05\xB4\u10A6\n\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x07\xB4\u10AC\n\xB4" +
		"\f\xB4\x0E\xB4\u10AF\v\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05" +
		"\xB5\u10B6\n\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6" +
		"\x05\xB6\u10BF\n\xB6\x03\xB6\x03\xB6\x03\xB6\x05\xB6\u10C4\n\xB6\x03\xB7" +
		"\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7" +
		"\u10CF\n\xB7\x03\xB7\x05\xB7\u10D2\n\xB7\x03\xB7\x03\xB7\x05\xB7\u10D6" +
		"\n\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u10DE\n" +
		"\xB8\x03\xB8\x03\xB8\x05\xB8\u10E2\n\xB8\x03\xB8\x03\xB8\x05\xB8\u10E6" +
		"\n\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u10EE\n" +
		"\xB8\x03\xB8\x06\xB8\u10F1\n\xB8\r\xB8\x0E\xB8\u10F2\x03\xB8\x03\xB8\x03" +
		"\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u10FB\n\xB8\x03\xB8\x03\xB8\x03\xB8" +
		"\x05\xB8\u1100\n\xB8\x03\xB8\x03\xB8\x07\xB8\u1104\n\xB8\f\xB8\x0E\xB8" +
		"\u1107\v\xB8\x06\xB8\u1109\n\xB8\r\xB8\x0E\xB8\u110A\x03\xB8\x03\xB8\x03" +
		"\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u1114\n\xB8\x03\xB8\x05\xB8" +
		"\u1117\n\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u111C\n\xB8\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u1123\n\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
		"\xB9\x05\xB9\u1129\n\xB9\x05\xB9\u112B\n\xB9\x03\xB9\x03\xB9\x03\xB9\x05" +
		"\xB9\u1130\n\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u1136\n\xB9\x03" +
		"\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u113C\n\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x05\xB9\u1141\n\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u1147\n\xB9" +
		"\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u114E\n\xBA\x03\xBA\x03" +
		"\xBA\x03\xBA\x05\xBA\u1153\n\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u1158" +
		"\n\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u115D\n\xBA\x03\xBA\x05\xBA\u1160" +
		"\n\xBA\x03\xBA\x03\xBA\x05\xBA\u1164\n\xBA\x03\xBA\x03\xBA\x05\xBA\u1168" +
		"\n\xBA\x03\xBA\x03\xBA\x05\xBA\u116C\n\xBA\x03\xBA\x03\xBA\x05\xBA\u1170" +
		"\n\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u1175\n\xBA\x03\xBA\x03\xBA\x05" +
		"\xBA\u1179\n\xBA\x03\xBA\x03\xBA\x05\xBA\u117D\n\xBA\x03\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u1187\n\xBB\x03\xBB" +
		"\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u118D\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x05\xBB\u1194\n\xBB\x03\xBB\x05\xBB\u1197\n\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x03\xBB\x05\xBB\u119D\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB" +
		"\x05\xBB\u11A3\n\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u11A8\n\xBB\f\xBB" +
		"\x0E\xBB\u11AB\v\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u11B0\n\xBB\x05\xBB" +
		"\u11B2\n\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u11B7\n\xBB\x03\xBB\x03\xBB" +
		"\x03\xBB\x03\xBB\x05\xBB\u11BD\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05" +
		"\xBB\u11C3\n\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u11C8\n\xBB\f\xBB\x0E" +
		"\xBB\u11CB\v\xBB\x03\xBB\x05\xBB\u11CE\n\xBB\x03\xBB\x03\xBB\x05\xBB\u11D2" +
		"\n\xBB\x03\xBB\x05\xBB\u11D5\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u11E3" +
		"\n\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u11E8\n\xBB\x03\xBB\x03\xBB\x05" +
		"\xBB\u11EC\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB" +
		"\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u11F9\n\xBB\x03\xBB\x05\xBB\u11FC" +
		"\n\xBB\x05\xBB\u11FE\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03" +
		"\xBB\x05\xBB\u1206\n\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x03\xBC\x05\xBC\u1210\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u1216\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u121D" +
		"\n\xBC\x03\xBC\x05\xBC\u1220\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u1226\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u122C\n\xBC\x03" +
		"\xBC\x03\xBC\x03\xBC\x07\xBC\u1231\n\xBC\f\xBC\x0E\xBC\u1234\v\xBC\x03" +
		"\xBC\x03\xBC\x03\xBC\x05\xBC\u1239\n\xBC\x05\xBC\u123B\n\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x05\xBC\u1240\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC" +
		"\u1246\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u124C\n\xBC\x03\xBC" +
		"\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u1252\n\xBC\x03\xBC\x03\xBC\x03\xBC\x07" +
		"\xBC\u1257\n\xBC\f\xBC\x0E\xBC\u125A\v\xBC\x03\xBC\x05\xBC\u125D\n\xBC" +
		"\x03\xBC\x03\xBC\x05";
	private static readonly _serializedATNSegment2: string =
		"\xBC\u1261\n\xBC\x03\xBC\x05\xBC\u1264\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u1272\n\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u1277\n\xBC\x03\xBC\x03" +
		"\xBC\x05\xBC\u127B\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u1288\n\xBC\x03\xBC\x05" +
		"\xBC\u128B\n\xBC\x05\xBC\u128D\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x05\xBC\u1295\n\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD" +
		"\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u12A0\n\xBD\x03\xBD\x03\xBD\x03" +
		"\xBD\x03\xBD\x03\xBD\x07\xBD\u12A7\n\xBD\f\xBD\x0E\xBD\u12AA\v\xBD\x03" +
		"\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u12B2\n\xBD\x03\xBE" +
		"\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05\xBE" +
		"\u12BD\n\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x07\xBE\u12C4\n\xBE" +
		"\f\xBE\x0E\xBE\u12C7\v\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03" +
		"\xBE\x05\xBE\u12CF\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
		"\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u12DB\n\xBF\x03\xBF\x03\xBF\x05" +
		"\xBF\u12DF\n\xBF\x03\xBF\x03\xBF\x03\xBF\x06\xBF\u12E4\n\xBF\r\xBF\x0E" +
		"\xBF\u12E5\x05\xBF\u12E8\n\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u12ED\n" +
		"\xBF\x03\xBF\x03\xBF\x05\xBF\u12F1\n\xBF\x03\xBF\x03\xBF\x03\xBF\x06\xBF" +
		"\u12F6\n\xBF\r\xBF\x0E\xBF\u12F7\x05\xBF\u12FA\n\xBF\x03\xBF\x03\xBF\x03" +
		"\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03" +
		"\xBF\x05\xBF\u1308\n\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u130D\n\xBF\x03" +
		"\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03" +
		"\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03" +
		"\xBF\x03\xBF\x05\xBF\u1323\n\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
		"\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
		"\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u1339\n\xBF\x03" +
		"\xBF\x03\xBF\x03\xBF\x05\xBF\u133E\n\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u134B" +
		"\n\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u1353\n" +
		"\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03" +
		"\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03" +
		"\xC3\x05\xC3\u1367\n\xC3\x03\xC3\x05\xC3\u136A\n\xC3\x03\xC3\x03\xC3\x07" +
		"\xC3\u136E\n\xC3\f\xC3\x0E\xC3\u1371\v\xC3\x03\xC4\x03\xC4\x03\xC4\x03" +
		"\xC4\x03\xC4\x05\xC4\u1378\n\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4" +
		"\x05\xC4\u137F\n\xC4\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u1384\n\xC4\x03\xC4" +
		"\x03\xC4\x05\xC4\u1388\n\xC4\x06\xC4\u138A\n\xC4\r\xC4\x0E\xC4\u138B\x03" +
		"\xC4\x05\xC4\u138F\n\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5" +
		"\u1396\n\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03" +
		"\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05" +
		"\xC5\u13A8\n\xC5\x05\xC5\u13AA\n\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03" +
		"\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03" +
		"\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x05\xC6\u13BE\n\xC6\x03\xC7\x03\xC7" +
		"\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u13C6\n\xC7\x03\xC7\x03\xC7\x03" +
		"\xC7\x05\xC7\u13CB\n\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7" +
		"\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7" +
		"\x03\xC7\x05\xC7\u13DD\n\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03" +
		"\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u13EC" +
		"\n\xC7\x05\xC7\u13EE\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05" +
		"\xC8\u13F5\n\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u13FC" +
		"\n\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u1401\n\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u1406\n\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u140C" +
		"\n\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u1411\n\xC8\x05\xC8\u1413\n\xC8" +
		"\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u141A\n\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x03\xC9\x05\xC9\u1420\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x05\xC9\u1426\n\xC9\x03\xC9\x05\xC9\u1429\n\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x03\xC9\x05\xC9\u142F\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x06\xC9\u1437\n\xC9\r\xC9\x0E\xC9\u1438\x03\xC9\x05\xC9\u143C\n\xC9" +
		"\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u1443\n\xC9\x03\xC9\x05" +
		"\xC9\u1446\n\xC9\x03\xC9\x03\xC9\x03\xC9\x06\xC9\u144B\n\xC9\r\xC9\x0E" +
		"\xC9\u144C\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u1455" +
		"\n\xCA\x03\xCA\x03\xCA\x05\xCA\u1459\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x05\xCA\u145F\n\xCA\x03\xCA\x03\xCA\x03\xCA\x07\xCA\u1464\n\xCA\f" +
		"\xCA\x0E\xCA\u1467\v\xCA\x05\xCA\u1469\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCA\x05\xCA\u1470\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA" +
		"\u1476\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u147D\n\xCA" +
		"\x03\xCA\x05\xCA\u1480\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u1486" +
		"\n\xCA\x03\xCA\x03\xCA\x03\xCA\x07\xCA\u148B\n\xCA\f\xCA\x0E\xCA\u148E" +
		"\v\xCA\x05\xCA\u1490\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x05\xCA\u1498\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u149E" +
		"\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u14A5\n\xCA\x03" +
		"\xCA\x05\xCA\u14A8\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u14AE" +
		"\n\xCA\x03\xCA\x03\xCA\x03\xCA\x07\xCA\u14B3\n\xCA\f\xCA\x0E\xCA\u14B6" +
		"\v\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u14BD\n\xCA\x03" +
		"\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u14C5\n\xCA\x03\xCA" +
		"\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u14CB\n\xCA\x03\xCA\x03\xCA\x03\xCA\x07" +
		"\xCA\u14D0\n\xCA\f\xCA\x0E\xCA\u14D3\v\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u14DC\n\xCA\x03\xCA\x03\xCA\x03\xCA" +
		"\x05\xCA\u14E1\n\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x03\xCB\x05\xCB\u14EB\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB" +
		"\u14F1\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x03\xCB\x03\xCB\x05\xCB\u14FD\n\xCB\x05\xCB\u14FF\n\xCB\x03\xCC\x03" +
		"\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u1506\n\xCC\x03\xCC\x03\xCC\x03\xCC" +
		"\x03\xCC\x05\xCC\u150C\n\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u1512" +
		"\n\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u1518\n\xCC\x03\xCC\x03" +
		"\xCC\x03\xCC\x06\xCC\u151D\n\xCC\r\xCC\x0E\xCC\u151E\x03\xCD\x03\xCD\x03" +
		"\xCD\x03\xCD\x03\xCD\x05\xCD\u1526\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x05\xCD\u152E\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05" +
		"\xCD\u1534\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x06\xCD\u1542\n\xCD\r\xCD\x0E" +
		"\xCD\u1543\x03\xCD\x05\xCD\u1547\n\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD" +
		"\u154C\n\xCD\x05\xCD\u154E\n\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE" +
		"\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x05\xCE\u155A\n\xCE\x03\xCE\x03" +
		"\xCE\x03\xCE\x03\xCE\x05\xCE\u1560\n\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE" +
		"\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x06\xCE" +
		"\u156E\n\xCE\r\xCE\x0E\xCE\u156F\x03\xCE\x05\xCE\u1573\n\xCE\x03\xCE\x03" +
		"\xCE\x03\xCE\x05\xCE\u1578\n\xCE\x03\xCE\x05\xCE\u157B\n\xCE\x03\xCE\x03" +
		"\xCE\x03\xCE\x05\xCE\u1580\n\xCE\x05\xCE\u1582\n\xCE\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u158B\n\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u1592\n\xCF\x03\xD0\x03\xD0\x03\xD0\x03" +
		"\xD0\x05\xD0\u1598\n\xD0\x03\xD0\x05\xD0\u159B\n\xD0\x03\xD0\x03\xD0\x03" +
		"\xD0\x05\xD0\u15A0\n\xD0\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x05\xD1" +
		"\u15A7\n\xD1\x05\xD1\u15A9\n\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x05\xD1" +
		"\u15AF\n\xD1\x05\xD1\u15B1\n\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1" +
		"\x03\xD1\x05\xD1\u15B9\n\xD1\x05\xD1\u15BB\n\xD1\x03\xD1\x03\xD1\x03\xD1" +
		"\x03\xD1\x05\xD1\u15C1\n\xD1\x05\xD1\u15C3\n\xD1\x03\xD1\x03\xD1\x03\xD1" +
		"\x03\xD1\x05\xD1\u15C9\n\xD1\x05\xD1\u15CB\n\xD1\x03\xD1\x03\xD1\x03\xD1" +
		"\x03\xD1\x03\xD1\x05\xD1\u15D2\n\xD1\x03\xD1\x05\xD1\u15D5\n\xD1\x05\xD1" +
		"\u15D7\n\xD1\x03\xD1\x05\xD1\u15DA\n\xD1\x03\xD1\x03\xD1\x05\xD1\u15DE" +
		"\n\xD1\x05\xD1\u15E0\n\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03" +
		"\xD1\x03\xD1\x05\xD1\u15E9\n\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2" +
		"\u15EF\n\xD2\x03\xD2\x03\xD2\x05\xD2\u15F3\n\xD2\x03\xD3\x03\xD3\x03\xD3" +
		"\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u15FB\n\xD3\x03\xD3\x03\xD3\x03\xD3\x03" +
		"\xD3\x03\xD3\x05\xD3\u1602\n\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3" +
		"\u1608\n\xD3\x05\xD3\u160A\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD5" +
		"\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u1615\n\xD5\x03\xD5\x03\xD5\x03" +
		"\xD5\x05\xD5\u161A\n\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u1620" +
		"\n\xD5\x06\xD5\u1622\n\xD5\r\xD5\x0E\xD5\u1623\x03\xD5\x03\xD5\x03\xD6" +
		"\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x05\xD6\u162E\n\xD6\x03\xD7\x03" +
		"\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u1636\n\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7" +
		"\u1642\n\xD7\x03\xD8\x05\xD8\u1645\n\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8" +
		"\x03\xD8\x03\xD8\x05\xD8\u164D\n\xD8\x05\xD8\u164F\n\xD8\x03\xD8\x05\xD8" +
		"\u1652\n\xD8\x03\xD8\x03\xD8\x05\xD8\u1656\n\xD8\x03\xD8\x05\xD8\u1659" +
		"\n\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8" +
		"\x05\xD8\u1663\n\xD8\x03\xD8\x03\xD8\x07\xD8\u1667\n\xD8\f\xD8\x0E\xD8" +
		"\u166A\v\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u1671\n\xD8" +
		"\x03\xD8\x03\xD8\x05\xD8\u1675\n\xD8\x03\xD8\x03\xD8\x05\xD8\u1679\n\xD8" +
		"\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u1682" +
		"\n\xD8\x03\xD8\x03\xD8\x07\xD8\u1686\n\xD8\f\xD8\x0E\xD8\u1689\v\xD8\x03" +
		"\xD8\x05\xD8\u168C\n\xD8\x03\xD8\x05\xD8\u168F\n\xD8\x03\xD8\x03\xD8\x03" +
		"\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x07\xD9\u1698\n\xD9\f\xD9\x0E\xD9" +
		"\u169B\v\xD9\x03\xD9\x05\xD9\u169E\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x05\xDA\u16A5\n\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u16AA\n\xDA" +
		"\x03\xDB\x05\xDB\u16AD\n\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x05\xDB\u16B5\n\xDB\x03\xDB\x03\xDB\x05\xDB\u16B9\n\xDB\x03\xDB\x05" +
		"\xDB\u16BC\n\xDB\x03\xDB\x03\xDB\x05\xDB\u16C0\n\xDB\x03\xDB\x05\xDB\u16C3" +
		"\n\xDB\x03\xDB\x03\xDB\x05\xDB\u16C7\n\xDB\x03\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x03\xDB\x05\xDB\u16CE\n\xDB\x03\xDB\x03\xDB\x05\xDB\u16D2\n\xDB\x05" +
		"\xDB\u16D4\n\xDB\x05\xDB\u16D6\n\xDB\x03\xDB\x05\xDB\u16D9\n\xDB\x03\xDB" +
		"\x05\xDB\u16DC\n\xDB\x03\xDB\x05\xDB\u16DF\n\xDB\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x05\xDC\u16E5\n\xDC\x03\xDD\x05\xDD\u16E8\n\xDD\x03\xDD\x03\xDD" +
		"\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u16F0\n\xDD\x05\xDD\u16F2\n\xDD" +
		"\x03\xDD\x05\xDD\u16F5\n\xDD\x03\xDD\x03\xDD\x05\xDD\u16F9\n\xDD\x03\xDD" +
		"\x05\xDD\u16FC\n\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u1702\n\xDD" +
		"\x03\xDD\x05\xDD\u1705\n\xDD\x03\xDD\x03\xDD\x05\xDD\u1709\n\xDD\x03\xDD" +
		"\x05\xDD\u170C\n\xDD\x03\xDD\x05\xDD\u170F\n\xDD\x03\xDE\x03\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x05\xDE\u1716\n\xDE\x03\xDF\x05\xDF\u1719\n\xDF\x03\xDF" +
		"\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u1720\n\xDF\x03\xDF\x03\xDF\x03" +
		"\xDF\x03\xDF\x05\xDF\u1726\n\xDF\x07\xDF\u1728\n\xDF\f\xDF\x0E\xDF\u172B" +
		"\v\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF" +
		"\u1734\n\xDF\x03\xDF\x05\xDF\u1737\n\xDF\x03\xE0\x05\xE0\u173A\n\xE0\x03" +
		"\xE0\x03\xE0\x05\xE0\u173E\n\xE0\x03\xE0\x05\xE0\u1741\n\xE0\x03\xE0\x05" +
		"\xE0\u1744\n\xE0\x03\xE0\x05\xE0\u1747\n\xE0\x03\xE1\x03\xE1\x05\xE1\u174B" +
		"\n\xE1\x03\xE2\x05\xE2\u174E\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03" +
		"\xE2\x03\xE2\x05\xE2\u1756\n\xE2\x05\xE2\u1758\n\xE2\x03\xE2\x03\xE2\x05" +
		"\xE2\u175C\n\xE2\x03\xE2\x05\xE2\u175F\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03" +
		"\xE2\x07\xE2\u1765\n\xE2\f\xE2\x0E\xE2\u1768\v\xE2\x03\xE2\x05\xE2\u176B" +
		"\n\xE2\x03\xE2\x03\xE2\x05\xE2\u176F\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03" +
		"\xE2\x03\xE2\x05\xE2\u1776\n\xE2\x03\xE2\x03\xE2\x05\xE2\u177A\n\xE2\x05" +
		"\xE2\u177C\n\xE2\x05\xE2\u177E\n\xE2\x03\xE2\x05\xE2\u1781\n\xE2\x03\xE2" +
		"\x05\xE2\u1784\n\xE2\x03\xE2\x05\xE2\u1787\n\xE2\x03\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x07\xE3\u178D\n\xE3\f\xE3\x0E\xE3\u1790\v\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x05\xE3\u1795\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u179B" +
		"\n\xE3\x05\xE3\u179D\n\xE3\x03\xE4\x03\xE4\x05\xE4\u17A1\n\xE4\x03\xE4" +
		"\x05\xE4\u17A4\n\xE4\x03\xE5\x03\xE5\x03\xE5\x05\xE5\u17A9\n\xE5\x03\xE5" +
		"\x03\xE5\x03\xE5\x05\xE5\u17AE\n\xE5\x03\xE5\x05\xE5\u17B1\n\xE5\x03\xE6" +
		"\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u17B9\n\xE6\x03\xE6\x03" +
		"\xE6\x05\xE6\u17BD\n\xE6\x03\xE6\x03\xE6\x03\xE6\x07\xE6\u17C2\n\xE6\f" +
		"\xE6\x0E\xE6\u17C5\v\xE6\x05\xE6\u17C7\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x07\xE6\u17CE\n\xE6\f\xE6\x0E\xE6\u17D1\v\xE6\x05\xE6\u17D3" +
		"\n\xE6\x03\xE6\x03\xE6\x05\xE6\u17D7\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
		"\xE6\x07\xE6\u17DD\n\xE6\f\xE6\x0E\xE6\u17E0\v\xE6\x05\xE6\u17E2\n\xE6" +
		"\x03\xE7\x03\xE7\x05\xE7\u17E6\n\xE7\x03\xE7\x05\xE7\u17E9\n\xE7\x03\xE7" +
		"\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7" +
		"\x03\xE7\x03\xE7\x05\xE7\u17F7\n\xE7\x03\xE7\x03\xE7\x05\xE7\u17FB\n\xE7" +
		"\x03\xE7\x05\xE7\u17FE\n\xE7\x03\xE7\x03\xE7\x05\xE7\u1802\n\xE7\x03\xE7" +
		"\x05\xE7\u1805\n\xE7\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u180A\n\xE8\x03\xE8" +
		"\x05\xE8\u180D\n\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u1813\n\xE8" +
		"\x03\xE8\x05\xE8\u1816\n\xE8\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u181B\n\xE8" +
		"\f\xE8\x0E\xE8\u181E\v\xE8\x03\xE8\x05\xE8\u1821\n\xE8\x05\xE8\u1823\n" +
		"\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u1829\n\xE8\f\xE8\x0E\xE8" +
		"\u182C\v\xE8\x05\xE8\u182E\n\xE8\x03\xE8\x03\xE8\x05\xE8\u1832\n\xE8\x03" +
		"\xE8\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x05\xE9\u1839\n\xE9\x03\xEA\x03\xEA" +
		"\x03\xEA\x05\xEA\u183E\n\xEA\x03\xEA\x05\xEA\u1841\n\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x07\xEA\u184B\n\xEA\f" +
		"\xEA\x0E\xEA\u184E\v\xEA\x05\xEA\u1850\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03" +
		"\xEA\x05\xEA\u1856\n\xEA\x03\xEA\x03\xEA\x03\xEA\x07\xEA\u185B\n\xEA\f" +
		"\xEA\x0E\xEA\u185E\v\xEA\x03\xEA\x03\xEA\x05\xEA\u1862\n\xEA\x03\xEA\x03" +
		"\xEA\x03\xEA\x05\xEA\u1867\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEB\x03\xEB" +
		"\x05\xEB\u186E\n\xEB\x03\xEC\x03\xEC\x03\xED\x03\xED\x03\xED\x05\xED\u1875" +
		"\n\xED\x03\xED\x05\xED\u1878\n\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x05\xED\u1880\n\xED\x03\xED\x03\xED\x03\xED\x03\xED\x07\xED" +
		"\u1886\n\xED\f\xED\x0E\xED\u1889\v\xED\x05\xED\u188B\n\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x07\xED\u1891\n\xED\f\xED\x0E\xED\u1894\v\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xEE\x03\xEE\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u189E" +
		"\n\xEF\x03\xEF\x05\xEF\u18A1\n\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03" +
		"\xEF\x03\xEF\x07\xEF\u18A9\n\xEF\f\xEF\x0E\xEF\u18AC\v\xEF\x03\xEF\x03" +
		"\xEF\x03\xEF\x03\xEF\x05\xEF\u18B2\n\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF" +
		"\u18B7\n\xEF\x03\xEF\x05\xEF\u18BA\n\xEF\x03\xF0\x03\xF0\x03\xF0\x03\xF0" +
		"\x03\xF0\x03\xF0\x07\xF0\u18C2\n\xF0\f\xF0\x0E\xF0\u18C5\v\xF0\x05\xF0" +
		"\u18C7\n\xF0\x03\xF0\x05\xF0\u18CA\n\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0" +
		"\x03\xF0\x03\xF0\x05\xF0\u18D2\n\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03" +
		"\xF1\x03\xF1\x03\xF1\x07\xF1\u18DB\n\xF1\f\xF1\x0E\xF1\u18DE\v\xF1\x05" +
		"\xF1\u18E0\n\xF1\x03\xF1\x05\xF1\u18E3\n\xF1\x03\xF1\x03\xF1\x07\xF1\u18E7" +
		"\n\xF1\f\xF1\x0E\xF1\u18EA\v\xF1\x03\xF1\x03\xF1\x05\xF1\u18EE\n\xF1\x03" +
		"\xF1\x03\xF1\x05\xF1\u18F2\n\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF2\x03\xF2" +
		"\x03\xF2\x07\xF2\u18FA\n\xF2\f\xF2\x0E\xF2\u18FD\v\xF2\x05\xF2\u18FF\n" +
		"\xF2\x03\xF2\x05\xF2\u1902\n\xF2\x03\xF2\x03\xF2\x07\xF2\u1906\n\xF2\f" +
		"\xF2\x0E\xF2\u1909\v\xF2\x03\xF2\x03\xF2\x03\xF2\x05\xF2\u190E\n\xF2\x03" +
		"\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x05\xF3\u1916\n\xF3\x03\xF3" +
		"\x05\xF3\u1919\n\xF3\x03\xF3\x03\xF3\x05\xF3\u191D\n\xF3\x03\xF3\x03\xF3" +
		"\x05\xF3\u1921\n\xF3\x03\xF3\x05\xF3\u1924\n\xF3\x03\xF4\x03\xF4\x03\xF4" +
		"\x05\xF4\u1929\n\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03" +
		"\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u1937\n\xF5\x03\xF6" +
		"\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6" +
		"\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u1947\n\xF6\x03\xF6\x03\xF6\x05" +
		"\xF6\u194B\n\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u1951\n\xF6\x05" +
		"\xF6\u1953\n\xF6\x03\xF6\x05\xF6\u1956\n\xF6\x03\xF7\x03\xF7\x05\xF7\u195A" +
		"\n\xF7\x03\xF7\x03\xF7\x03\xF7\x05\xF7\u195F\n\xF7\x03\xF7\x03\xF7\x03" +
		"\xF7\x05\xF7\u1964\n\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8" +
		"\x05\xF8\u196C\n\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u1971\n\xF8\x03\xF8" +
		"\x07\xF8\u1974\n\xF8\f\xF8\x0E\xF8\u1977\v\xF8\x03\xF8\x03\xF8\x03\xF8" +
		"\x05\xF8\u197C\n\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u1981\n\xF8\x03\xF8" +
		"\x05\xF8\u1984\n\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x07\xF9\u198B" +
		"\n\xF9\f\xF9\x0E\xF9\u198E\v\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
		"\x07\xF9\u1995\n\xF9\f\xF9\x0E\xF9\u1998\v\xF9\x05\xF9\u199A\n\xF9\x03" +
		"\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u19A3\n\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x07\xFA\u19A9\n\xFA\f\xFA\x0E\xFA\u19AC" +
		"\v\xFA\x05\xFA\u19AE\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05" +
		"\xFA\u19B5\n\xFA\x03\xFA\x05\xFA\u19B8\n\xFA\x03\xFB\x03\xFB\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x05\xFC\u19E6\n\xFC\x03\xFC\x03\xFC" +
		"\x05\xFC\u19EA\n\xFC\x03\xFC\x05\xFC\u19ED\n\xFC\x03\xFD\x03\xFD\x03\xFD" +
		"\x03\xFD\x05\xFD\u19F3\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03" +
		"\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u19FF\n\xFD\x05\xFD\u1A01" +
		"\n\xFD\x03\xFD\x05\xFD\u1A04\n\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03" +
		"\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03" +
		"\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03" +
		"\xFE\x05\xFE\u1A1D\n\xFE\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF" +
		"\x03\xFF\x03\xFF\x03\xFF\x05\xFF\u1A28\n\xFF\x03\xFF\x03\xFF\x03\xFF\x03" +
		"\xFF\x03\xFF\x03\xFF\x05\xFF\u1A30\n\xFF\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x07\u0100\u1A39\n\u0100\f\u0100" +
		"\x0E\u0100\u1A3C\v\u0100\x07\u0100\u1A3E\n\u0100\f\u0100\x0E\u0100\u1A41" +
		"\v\u0100\x05\u0100\u1A43\n\u0100\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x05\u0101\u1A4B\n\u0101\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u1A55\n\u0103" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1A5C\n\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1A63\n\u0104" +
		"\x05\u0104\u1A65\n\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1A71\n\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x05\u0104\u1A7C\n\u0104\x03\u0104\x03\u0104\x05\u0104" +
		"\u1A80\n\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1A85\n\u0104\x03" +
		"\u0104\x05\u0104\u1A88\n\u0104\x05\u0104\u1A8A\n\u0104\x03\u0104\x05\u0104" +
		"\u1A8D\n\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1A99\n\u0104\x05\u0104" +
		"\u1A9B\n\u0104\x05\u0104\u1A9D\n\u0104\x03\u0104\x05\u0104\u1AA0\n\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1AA5\n\u0104\x03\u0104\x05\u0104" +
		"\u1AA8\n\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1AAD\n\u0104\x03" +
		"\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03" +
		"\u0104\x05\u0104\u1AB7\n\u0104\x03\u0104\x03\u0104\x05\u0104\u1ABB\n\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1AC0\n\u0104\x03\u0104\x05\u0104" +
		"\u1AC3\n\u0104\x05\u0104\u1AC5\n\u0104\x03\u0104\x05\u0104\u1AC8\n\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1AD4\n\u0104\x05\u0104\u1AD6" +
		"\n\u0104\x05\u0104\u1AD8\n\u0104\x03\u0104\x05\u0104\u1ADB\n\u0104\x03" +
		"\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1AE1\n\u0104\x03\u0105" +
		"\x03\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x05\u0106\u1AEB\n\u0106\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x03\u0109" +
		"\x03\u0109\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x05\u010A" +
		"\u1AFF\n\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x05\u010B\u1B05" +
		"\n\u010B\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03" +
		"\u010D\x03\u010E\x03\u010E\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03" +
		"\u0110\x03\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x03" +
		"\u0111\x03\u0111\x03\u0111\x05\u0111\u1B1E\n\u0111\x05\u0111\u1B20\n\u0111" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0113\x03\u0113\x03\u0113\x03\u0114" +
		"\x03\u0114\x03\u0115\x03\u0115\x03\u0116\x03\u0116\x03\u0117\x03\u0117" +
		"\x03\u0117\x03\u0117\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118" +
		"\x03\u0118\x03\u0118\x03\u0118\x05\u0118\u1B3A\n\u0118\x03\u0118\x03\u0118" +
		"\x03\u0118\x03\u0118\x05\u0118\u1B40\n\u0118\x03\u0118\x03\u0118\x03\u0118" +
		"\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118" +
		"\u1B4B\n\u0118\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x05\u0119\u1B53\n\u0119";
	private static readonly _serializedATNSegment3: string =
		"\x03\u0119\x05\u0119\u1B56\n\u0119\x03\u011A\x03\u011A\x03\u011A\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011C\x05\u011C\u1B64\n\u011C\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
		"\x03\u011D\x03\u011D\x05\u011D\u1B6C\n\u011D\x03\u011E\x03\u011E\x03\u011E" +
		"\x03\u011E\x03\u011E\x05\u011E\u1B73\n\u011E\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x05\u011F\u1B8A\n\u011F\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0121\x03\u0121\x03\u0121" +
		"\x03\u0121\x03\u0121\x03\u0121\x05\u0121\u1B97\n\u0121\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x05\u0122\u1B9D\n\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x07\u0122\u1BA2\n\u0122\f\u0122\x0E\u0122\u1BA5\v\u0122\x03\u0122\x03" +
		"\u0122\x03\u0122\x07\u0122\u1BAA\n\u0122\f\u0122\x0E\u0122\u1BAD\v\u0122" +
		"\x05\u0122\u1BAF\n\u0122\x03\u0122\x05\u0122\u1BB2\n\u0122\x03\u0123\x03" +
		"\u0123\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u1BBB" +
		"\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0125\x03\u0125\x03" +
		"\u0125\x03\u0125\x05\u0125\u1BC5\n\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x07\u0125\u1BCA\n\u0125\f\u0125\x0E\u0125\u1BCD\v\u0125\x03\u0125\x05" +
		"\u0125\u1BD0\n\u0125\x03\u0126\x03\u0126\x05\u0126\u1BD4\n\u0126\x03\u0127" +
		"\x03\u0127\x03\u0127\x03\u0127\x05\u0127\u1BDA\n\u0127\x03\u0127\x03\u0127" +
		"\x03\u0127\x07\u0127\u1BDF\n\u0127\f\u0127\x0E\u0127\u1BE2\v\u0127\x03" +
		"\u0127\x05\u0127\u1BE5\n\u0127\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
		"\x05\u0128\u1BEB\n\u0128\x03\u0128\x03\u0128\x03\u0128\x07\u0128\u1BF0" +
		"\n\u0128\f\u0128\x0E\u0128\u1BF3\v\u0128\x03\u0128\x03\u0128\x03\u0128" +
		"\x03\u0128\x05\u0128\u1BF9\n\u0128\x03\u0128\x05\u0128\u1BFC\n\u0128\x03" +
		"\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u1C02\n\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x07\u0129\u1C07\n\u0129\f\u0129\x0E\u0129\u1C0A\v" +
		"\u0129\x03\u0129\x05\u0129\u1C0D\n\u0129\x03\u012A\x03\u012A\x03\u012A" +
		"\x05\u012A\u1C12\n\u012A\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u1C17" +
		"\n\u012A\x03\u012A\x06\u012A\u1C1A\n\u012A\r\u012A\x0E\u012A\u1C1B\x03" +
		"\u012A\x03\u012A\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u1C24" +
		"\n\u012B\x03\u012B\x03\u012B\x05\u012B\u1C28\n\u012B\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x05\u012C\u1C2E\n\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x07\u012C\u1C33\n\u012C\f\u012C\x0E\u012C\u1C36\v\u012C\x03\u012C\x05" +
		"\u012C\u1C39\n\u012C\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x03\u012D\x03\u012D\x05\u012D\u1C42\n\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x03\u012D\x03\u012D\x03\u012D\x05\u012D\u1C4A\n\u012D\x03\u012E\x03\u012E" +
		"\x03\u012E\x03\u012E\x05\u012E\u1C50\n\u012E\x03\u012E\x03\u012E\x03\u012F" +
		"\x03\u012F\x05\u012F\u1C56\n\u012F\x03\u0130\x03\u0130\x03\u0130\x03\u0130" +
		"\x03\u0130\x03\u0130\x03\u0130\x03\u0131\x03\u0131\x03\u0131\x03\u0131" +
		"\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x05\u0131\u1C67\n\u0131\x03\u0131" +
		"\x03\u0131\x05\u0131\u1C6B\n\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0132" +
		"\x03\u0132\x03\u0132\x05\u0132\u1C73\n\u0132\x03\u0132\x03\u0132\x05\u0132" +
		"\u1C77\n\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x07\u0132\u1C7D" +
		"\n\u0132\f\u0132\x0E\u0132\u1C80\v\u0132\x03\u0132\x05\u0132\u1C83\n\u0132" +
		"\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u1C88\n\u0132\x03\u0132\x03\u0132" +
		"\x05\u0132\u1C8C\n\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132" +
		"\x05\u0132\u1C93\n\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132" +
		"\u1C99\n\u0132\x05\u0132\u1C9B\n\u0132\x03\u0133\x03\u0133\x05\u0133\u1C9F" +
		"\n\u0133\x03\u0133\x03\u0133\x05\u0133\u1CA3\n\u0133\x03\u0133\x03\u0133" +
		"\x05\u0133\u1CA7\n\u0133\x03\u0133\x05\u0133\u1CAA\n\u0133\x03\u0133\x03" +
		"\u0133\x05\u0133\u1CAE\n\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
		"\x05\u0133\u1CB4\n\u0133\x03\u0133\x03\u0133\x05\u0133\u1CB8\n\u0133\x05" +
		"\u0133\u1CBA\n\u0133\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1CC1\n\u0134\x03\u0134\x03\u0134\x03\u0134\x07\u0134\u1CC6" +
		"\n\u0134\f\u0134\x0E\u0134\u1CC9\v\u0134\x05\u0134\u1CCB\n\u0134\x03\u0134" +
		"\x05\u0134\u1CCE\n\u0134\x03\u0134\x03\u0134\x03\u0134\x07\u0134\u1CD3" +
		"\n\u0134\f\u0134\x0E\u0134\u1CD6\v\u0134\x03\u0134\x03\u0134\x05\u0134" +
		"\u1CDA\n\u0134\x03\u0134\x06\u0134\u1CDD\n\u0134\r\u0134\x0E\u0134\u1CDE" +
		"\x03\u0134\x03\u0134\x05\u0134\u1CE3\n\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x05\u0134\u1CE9\n\u0134\x06\u0134\u1CEB\n\u0134\r\u0134\x0E" +
		"\u0134\u1CEC\x05\u0134\u1CEF\n\u0134\x03\u0134\x03\u0134\x03\u0134\x05" +
		"\u0134\u1CF4\n\u0134\x03\u0134\x06\u0134\u1CF7\n\u0134\r\u0134\x0E\u0134" +
		"\u1CF8\x06\u0134\u1CFB\n\u0134\r\u0134\x0E\u0134\u1CFC\x03\u0134\x03\u0134" +
		"\x03\u0134\x05\u0134\u1D02\n\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1D08\n\u0134\x06\u0134\u1D0A\n\u0134\r\u0134\x0E\u0134\u1D0B" +
		"\x06\u0134\u1D0E\n\u0134\r\u0134\x0E\u0134\u1D0F\x05\u0134\u1D12\n\u0134" +
		"\x03\u0134\x03\u0134\x05\u0134\u1D16\n\u0134\x03\u0134\x03\u0134\x05\u0134" +
		"\u1D1A\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1D1E\n\u0134\x03\u0134\x03" +
		"\u0134\x05\u0134\u1D22\n\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1D28\n\u0134\x03\u0134\x05\u0134\u1D2B\n\u0134\x03\u0134\x03" +
		"\u0134\x03\u0134\x03\u0134\x05\u0134\u1D31\n\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1D35\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1D39\n\u0134\x03" +
		"\u0134\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u1D3F\n\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u1D45\n\u0134\x05\u0134\u1D47" +
		"\n\u0134\x03\u0134\x05\u0134\u1D4A\n\u0134\x03\u0134\x03\u0134\x05\u0134" +
		"\u1D4E\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1D52\n\u0134\x03\u0134\x03" +
		"\u0134\x05\u0134\u1D56\n\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1D5C\n\u0134\x03\u0134\x05\u0134\u1D5F\n\u0134\x03\u0134\x03" +
		"\u0134\x03\u0134\x03\u0134\x05\u0134\u1D65\n\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x05\u0134\u1D6B\n\u0134\x03\u0134\x05\u0134\u1D6E" +
		"\n\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u1D74\n\u0134" +
		"\x03\u0134\x05\u0134\u1D77\n\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1D7D\n\u0134\x03\u0134\x05\u0134\u1D80\n\u0134\x03\u0134\x03" +
		"\u0134\x05\u0134\u1D84\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1D88\n\u0134" +
		"\x03\u0134\x03\u0134\x05\u0134\u1D8C\n\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1D91\n\u0134\x03\u0134\x05\u0134\u1D94\n\u0134\x03\u0134\x03" +
		"\u0134\x05\u0134\u1D98\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1D9C\n\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x05\u0134\u1DAD\n\u0134\x07\u0134\u1DAF\n\u0134\f\u0134\x0E" +
		"\u0134\u1DB2\v\u0134\x05\u0134\u1DB4\n\u0134\x03\u0135\x03\u0135\x03\u0135" +
		"\x03\u0135\x03\u0135\x05\u0135\u1DBB\n\u0135\x03\u0135\x06\u0135\u1DBE" +
		"\n\u0135\r\u0135\x0E\u0135\u1DBF\x03\u0135\x03\u0135\x05\u0135\u1DC4\n" +
		"\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1DCA\n\u0135" +
		"\x06\u0135\u1DCC\n\u0135\r\u0135\x0E\u0135\u1DCD\x05\u0135\u1DD0\n\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1DD5\n\u0135\x03\u0135\x06\u0135" +
		"\u1DD8\n\u0135\r\u0135\x0E\u0135\u1DD9\x06\u0135\u1DDC\n\u0135\r\u0135" +
		"\x0E\u0135\u1DDD\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1DE3\n\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1DE9\n\u0135\x06\u0135" +
		"\u1DEB\n\u0135\r\u0135\x0E\u0135\u1DEC\x06\u0135\u1DEF\n\u0135\r\u0135" +
		"\x0E\u0135\u1DF0\x05\u0135\u1DF3\n\u0135\x03\u0135\x03\u0135\x05\u0135" +
		"\u1DF7\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1DFB\n\u0135\x03\u0135\x03" +
		"\u0135\x05\u0135\u1DFF\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1E03\n\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1E09\n\u0135\x03\u0135" +
		"\x05\u0135\u1E0C\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135" +
		"\u1E12\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1E16\n\u0135\x03\u0135\x03" +
		"\u0135\x05\u0135\u1E1A\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x05\u0135\u1E20\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135" +
		"\u1E26\n\u0135\x05\u0135\u1E28\n\u0135\x03\u0135\x05\u0135\u1E2B\n\u0135" +
		"\x03\u0135\x03\u0135\x05\u0135\u1E2F\n\u0135\x03\u0135\x03\u0135\x05\u0135" +
		"\u1E33\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1E37\n\u0135\x03\u0135\x03" +
		"\u0135\x03\u0135\x03\u0135\x05\u0135\u1E3D\n\u0135\x03\u0135\x05\u0135" +
		"\u1E40\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1E46" +
		"\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1E4C\n\u0135" +
		"\x03\u0135\x05\u0135\u1E4F\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x05\u0135\u1E55\n\u0135\x03\u0135\x05\u0135\u1E58\n\u0135\x03\u0135\x03" +
		"\u0135\x03\u0135\x03\u0135\x05\u0135\u1E5E\n\u0135\x03\u0135\x05\u0135" +
		"\u1E61\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1E65\n\u0135\x03\u0135\x03" +
		"\u0135\x05\u0135\u1E69\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1E6D\n\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1E72\n\u0135\x03\u0135\x05\u0135" +
		"\u1E75\n\u0135\x03\u0135\x03\u0135\x05\u0135\u1E79\n\u0135\x03\u0135\x03" +
		"\u0135\x05\u0135\u1E7D\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x05\u0135\u1E83\n\u0135\x03\u0135\x05\u0135\u1E86\n\u0135\x03\u0135\x03" +
		"\u0135\x05\u0135\u1E8A\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u1E9B\n\u0135\x07\u0135" +
		"\u1E9D\n\u0135\f\u0135\x0E\u0135\u1EA0\v\u0135\x05\u0135\u1EA2\n\u0135" +
		"\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
		"\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136\u1EB0\n\u0136" +
		"\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136\u1EB6\n\u0136\x03\u0136" +
		"\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136\u1EBE\n\u0136" +
		"\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x06\u0136\u1EC5\n\u0136" +
		"\r\u0136\x0E\u0136\u1EC6\x03\u0136\x05\u0136\u1ECA\n\u0136\x03\u0137\x03" +
		"\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03" +
		"\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0138\x03\u0138\x03" +
		"\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03" +
		"\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0139\x03\u0139\x03" +
		"\u0139\x03\u013A\x03\u013A\x05\u013A\u1EEC\n\u013A\x03\u013A\x03\u013A" +
		"\x05\u013A\u1EF0\n\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A\u1EF5" +
		"\n\u013A\f\u013A\x0E\u013A\u1EF8\v\u013A\x05\u013A\u1EFA\n\u013A\x03\u013A" +
		"\x05\u013A\u1EFD\n\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A" +
		"\u1F03\n\u013A\f\u013A\x0E\u013A\u1F06\v\u013A\x03\u013A\x03\u013A\x05" +
		"\u013A\u1F0A\n\u013A\x03\u013A\x03\u013A\x03\u013A\x05\u013A\u1F0F\n\u013A" +
		"\x03\u013A\x05\u013A\u1F12\n\u013A\x05\u013A\u1F14\n\u013A\x03\u013B\x03" +
		"\u013B\x05\u013B\u1F18\n\u013B\x03\u013B\x03\u013B\x05\u013B\u1F1C\n\u013B" +
		"\x03\u013B\x05\u013B\u1F1F\n\u013B\x03\u013B\x03\u013B\x05\u013B\u1F23" +
		"\n\u013B\x03\u013C\x03\u013C\x03\u013D\x03\u013D\x05\u013D\u1F29\n\u013D" +
		"\x03\u013D\x03\u013D\x03\u013D\x05\u013D\u1F2E\n\u013D\x03\u013D\x03\u013D" +
		"\x03\u013D\x03\u013D\x03\u013D\x05\u013D\u1F35\n\u013D\x05\u013D\u1F37" +
		"\n\u013D\x03\u013D\x03\u013D\x05\u013D\u1F3B\n\u013D\x03\u013D\x03\u013D" +
		"\x03\u013D\x03\u013D\x07\u013D\u1F41\n\u013D\f\u013D\x0E\u013D\u1F44\v" +
		"\u013D\x03\u013D\x03\u013D\x03\u013D\x05\u013D\u1F49\n\u013D\x03\u013D" +
		"\x03\u013D\x05\u013D\u1F4D\n\u013D\x03\u013D\x05\u013D\u1F50\n\u013D\x03" +
		"\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x05" +
		"\u013D\u1F59\n\u013D\x03\u013D\x05\u013D\u1F5C\n\u013D\x03\u013D\x03\u013D" +
		"\x03\u013D\x03\u013D\x05\u013D\u1F62\n\u013D\x03\u013E\x03\u013E\x03\u013E" +
		"\x03\u013E\x03\u013E\x05\u013E\u1F69\n\u013E\x03\u013E\x03\u013E\x03\u013E" +
		"\x05\u013E\u1F6E\n\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E" +
		"\x03\u013E\x05\u013E\u1F76\n\u013E\x03\u013F\x03\u013F\x03\u013F\x05\u013F" +
		"\u1F7B\n\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F" +
		"\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x05\u013F\u1F87\n\u013F\x05\u013F" +
		"\u1F89\n\u013F\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x03\u0140\x05\u0140\u1F94\n\u0140\x03\u0141\x03\u0141" +
		"\x03\u0141\x03\u0141\x03\u0141\x05\u0141\u1F9B\n\u0141\x03\u0141\x03\u0141" +
		"\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x07\u0141\u1FA3\n\u0141\f\u0141" +
		"\x0E\u0141\u1FA6\v\u0141\x03\u0142\x03\u0142\x03\u0142\x03\u0142\x03\u0143" +
		"\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143" +
		"\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143" +
		"\x03\u0143\x05\u0143\u1FBC\n\u0143\x03\u0144\x03\u0144\x03\u0144\x03\u0144" +
		"\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144" +
		"\x05\u0144\u1FC9\n\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x03\u0145\x03\u0145\x05\u0145\u1FD9\n\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x05\u0145\u1FDE\n\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x05\u0145\u1FE5\n\u0145\x03\u0145\x05\u0145\u1FE8\n\u0145\x06\u0145\u1FEA" +
		"\n\u0145\r\u0145\x0E\u0145\u1FEB\x05\u0145\u1FEE\n\u0145\x03\u0146\x03" +
		"\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03" +
		"\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x05" +
		"\u0146\u1FFF\n\u0146\x03\u0147\x03\u0147\x03\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x05\u0148\u200E\n\u0148\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x05\u0149\u2016\n\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u201F\n\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u2027\n\u0149" +
		"\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A" +
		"\x05\u014A\u2030\n\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x05\u014A\u203B\n\u014A\x03\u014A" +
		"\x03\u014A\x05\u014A\u203F\n\u014A\x05\u014A\u2041\n\u014A\x05\u014A\u2043" +
		"\n\u014A\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x05\u014B\u2049\n\u014B" +
		"\x03\u014B\x03\u014B\x03\u014B\x05\u014B\u204E\n\u014B\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x03\u014B\x05\u014B\u2055\n\u014B\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x05\u014B\u2062\n\u014B\x05\u014B\u2064\n\u014B\x05" +
		"\u014B\u2066\n\u014B\x03\u014B\x05\u014B\u2069\n\u014B\x03\u014B\x05\u014B" +
		"\u206C\n\u014B\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C" +
		"\u2073\n\u014C\x03\u014C\x05\u014C\u2076\n\u014C\x03\u014C\x03\u014C\x03" +
		"\u014C\x03\u014C\x05\u014C\u207C\n\u014C\x03\u014C\x03\u014C\x03\u014C" +
		"\x05\u014C\u2081\n\u014C\x05\u014C\u2083\n\u014C\x03\u014C\x05\u014C\u2086" +
		"\n\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C\u208C\n\u014C" +
		"\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C" +
		"\u2094\n\u014C\x05\u014C\u2096\n\u014C\x03\u014C\x05\u014C\u2099\n\u014C" +
		"\x03\u014C\x03\u014C\x05\u014C\u209D\n\u014C\x03\u014C\x05\u014C\u20A0" +
		"\n\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03" +
		"\u014C\x03\u014C\x05\u014C\u20AA\n\u014C\x03\u014C\x05\u014C\u20AD\n\u014C" +
		"\x03\u014C\x03\u014C\x05\u014C\u20B1\n\u014C\x03\u014C\x05\u014C\u20B4" +
		"\n\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C\u20BA\n\u014C" +
		"\x03\u014C\x05\u014C\u20BD\n\u014C\x05\u014C\u20BF\n\u014C\x03\u014D\x03" +
		"\u014D\x05\u014D\u20C3\n\u014D\x03\u014E\x03\u014E\x03\u014E\x05\u014E" +
		"\u20C8\n\u014E\x03\u014F\x03\u014F\x05\u014F\u20CC\n\u014F\x03\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x05\u0150\u20D4\n\u0150" +
		"\x03\u0150\x03\u0150\x05\u0150\u20D8\n\u0150\x03\u0150\x05\u0150\u20DB" +
		"\n\u0150\x03\u0151\x03\u0151\x03\u0151\x05\u0151\u20E0\n\u0151\x03\u0152" +
		"\x03\u0152\x03\u0152\x03\u0152\x03\u0153\x03\u0153\x05\u0153\u20E8\n\u0153" +
		"\x03\u0153\x03\u0153\x03\u0153\x05\u0153\u20ED\n\u0153\x03\u0154\x03\u0154" +
		"\x03\u0154\x03\u0154\x03\u0154\x03\u0155\x03\u0155\x03\u0155\x05\u0155" +
		"\u20F7\n\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0157\x03\u0157\x05\u0157\u2102\n\u0157\x03\u0157\x07\u0157" +
		"\u2105\n\u0157\f\u0157\x0E\u0157\u2108\v\u0157\x03\u0158\x03\u0158\x03" +
		"\u0158\x05\u0158\u210D\n\u0158\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u2113\n\u0159\x03\u0159\x03\u0159\x05\u0159\u2117\n\u0159\x03" +
		"\u0159\x05\u0159\u211A\n\u0159\x03\u0159\x03\u0159\x05\u0159\u211E\n\u0159" +
		"\x03\u0159\x03\u0159\x05\u0159\u2122\n\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u212A\n\u0159\x03\u0159\x03\u0159" +
		"\x03\u0159\x05\u0159\u212F\n\u0159\x05\u0159\u2131\n\u0159\x03\u0159\x05" +
		"\u0159\u2134\n\u0159\x03\u0159\x07\u0159\u2137\n\u0159\f\u0159\x0E\u0159" +
		"\u213A\v\u0159\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x05\u015A\u2142\n\u015A\x03\u015B\x03\u015B\x05\u015B\u2146\n\u015B\x03" +
		"\u015B\x03\u015B\x03\u015B\x05\u015B\u214B\n\u015B\x03\u015B\x05\u015B" +
		"\u214E\n\u015B\x03\u015B\x05\u015B\u2151\n\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x05\u015B\u2157\n\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x05\u015B\u215F\n\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x05\u015B\u2167\n\u015B\x03\u015B" +
		"\x05\u015B\u216A\n\u015B\x03\u015B\x05\u015B\u216D\n\u015B\x03\u015C\x03" +
		"\u015C\x05\u015C\u2171\n\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C" +
		"\u2176\n\u015C\x03\u015C\x05\u015C\u2179\n\u015C\x03\u015C\x03\u015C\x03" +
		"\u015C\x03\u015C\x05\u015C\u217F\n\u015C\x03\u015C\x03\u015C\x05\u015C" +
		"\u2183\n\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C\u2189" +
		"\n\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x05" +
		"\u015C\u2191\n\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x06\u015C" +
		"\u2197\n\u015C\r\u015C\x0E\u015C\u2198\x03\u015C\x05\u015C\u219C\n\u015C" +
		"\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C" +
		"\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C" +
		"\u21AB\n\u015C\x03\u015C\x05\u015C\u21AE\n\u015C\x03\u015C\x05\u015C\u21B1" +
		"\n\u015C\x05\u015C\u21B3\n\u015C\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u21BE\n\u015D" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x03\u015E\x05\u015E\u21C9\n\u015E\x03\u015F\x03\u015F\x03\u015F" +
		"\x03\u015F\x03\u015F\x07\u015F\u21D0\n\u015F\f\u015F\x0E\u015F\u21D3\v" +
		"\u015F\x03\u015F\x03\u015F\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03" +
		"\u0160\x05\u0160\u21DC\n\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161\u21E6\n\u0161\x05\u0161" +
		"\u21E8\n\u0161\x05\u0161\u21EA\n\u0161\x03\u0161\x05\u0161\u21ED\n\u0161" +
		"\x03\u0161\x05\u0161\u21F0\n\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161\u21FB\n\u0161" +
		"\x05\u0161\u21FD\n\u0161\x05\u0161\u21FF\n\u0161\x03\u0161\x05\u0161\u2202" +
		"\n\u0161\x03\u0162\x07\u0162\u2205\n\u0162\f\u0162\x0E\u0162\u2208\v\u0162" +
		"\x03\u0162\x03\u0162\x03\u0162\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
		"\x03\u0163\x05\u0163\u2212\n\u0163\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u221B\n\u0164\x03\u0164\x05\u0164" +
		"\u221E\n\u0164\x03\u0164\x05\u0164\u2221\n\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x07\u0164\u2228\n\u0164\f\u0164\x0E\u0164\u222B" +
		"\v\u0164\x05\u0164\u222D\n\u0164\x03\u0164\x05\u0164\u2230\n\u0164\x03" +
		"\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x05\u0165\u2237\n\u0165" +
		"\x03\u0165\x05\u0165\u223A\n\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x05\u0165\u2249\n\u0165\x03\u0165\x05\u0165\u224C" +
		"\n\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x05\u0165\u2253" +
		"\n\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03" +
		"\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03" +
		"\u0165\x05\u0165\u2263\n\u0165\x03\u0166\x03\u0166\x05\u0166\u2267\n\u0166" +
		"\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
		"\x03\u0167\x05\u0167\u2271\n\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
		"\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
		"\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x07\u0167" +
		"\u2284\n\u0167\f\u0167\x0E\u0167\u2287\v\u0167\x03\u0168\x03\u0168\x03" +
		"\u0168\x03\u0168\x05\u0168\u228D\n\u0168\x03\u0169\x03\u0169\x03\u0169" +
		"\x06\u0169\u2292\n\u0169\r\u0169\x0E\u0169\u2293\x03\u0169\x03\u0169\x05" +
		"\u0169\u2298\n\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x06\u0169" +
		"\u229E\n\u0169\r\u0169\x0E\u0169\u229F\x03\u0169\x03\u0169\x05\u0169\u22A4" +
		"\n\u0169\x03\u0169\x03\u0169\x05\u0169\u22A8\n\u0169\x03\u016A\x03\u016A" +
		"\x03\u016A\x03\u016A\x05\u016A\u22AE\n\u016A\x03\u016B\x03\u016B\x03\u016B" +
		"\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x05\u016B\u22B8\n\u016B" +
		"\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C" +
		"\x03\u016C\x05\u016C\u22C2\n\u016C\x03\u016D\x03\u016D\x03\u016E\x03\u016E" +
		"\x03\u016E\x05\u016E\u22C9\n\u016E\x03\u016E\x03\u016E\x03\u016E\x07\u016E" +
		"\u22CE\n\u016E\f\u016E\x0E\u016E\u22D1\v\u016E\x03\u016E\x03\u016E\x03" +
		"\u016E\x03\u016E\x03\u016E\x03\u016E\x05\u016E\u22D9\n\u016E\x03\u016E" +
		"\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x05\u016E\u22E0\n\u016E\x03\u016F" +
		"\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x05\u016F\u22E7\n\u016F\x03\u016F" +
		"\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x03\u0170\x03\u0170\x05\u0170" +
		"\u22F0\n\u0170\x03\u0170\x03\u0170\x05\u0170\u22F4\n\u0170\x03\u0170\x03" +
		"\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x05" +
		"\u0170\u22FE\n\u0170\x03\u0171\x03\u0171\x03\u0171\x07\u0171\u2303\n\u0171" +
		"\f\u0171\x0E\u0171\u2306\v\u0171\x03\u0172\x03\u0172\x03\u0172\x07\u0172" +
		"\u230B\n\u0172\f\u0172\x0E\u0172\u230E\v\u0172\x03\u0173\x03\u0173\x03" +
		"\u0173\x07\u0173\u2313\n\u0173\f\u0173\x0E\u0173\u2316\v\u0173\x03\u0174" +
		"\x05\u0174\u2319\n\u0174\x03\u0174\x03\u0174\x03\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x05\u0175\u232F\n\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x03\u0175\x03\u0175\x05\u0175\u2338\n\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x03\u0175\x05\u0175\u233E\n\u0175\x03\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x05\u0175\u2344\n\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175" +
		"\x05\u0175\u234A\n\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175" +
		"\x03\u0175\x03\u0175\x03\u0175\x05\u0175\u2354\n\u0175\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x05\u0176\u235B\n\u0176\x03\u0176\x07\u0176" +
		"\u235E\n\u0176\f\u0176\x0E\u0176\u2361\v\u0176\x03\u0177\x03\u0177\x05" +
		"\u0177\u2365\n\u0177\x03\u0177\x03\u0177\x05\u0177\u2369\n\u0177\x03\u0177" +
		"\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x05\u0177\u2370\n\u0177\x03\u0178" +
		"\x03\u0178\x05\u0178\u2374\n\u0178\x03\u0178\x05\u0178\u2377\n\u0178\x03" +
		"\u0178\x03\u0178\x03\u0178\x05\u0178\u237C\n\u0178\x03\u0178\x03\u0178" +
		"\x05\u0178\u2380\n\u0178\x03\u0178\x03\u0178\x05\u0178\u2384\n\u0178\x03" +
		"\u0178\x03\u0178\x03\u0178\x05\u0178\u2389\n\u0178\x03\u0178\x03\u0178" +
		"\x03\u0178\x07\u0178\u238E\n\u0178\f\u0178\x0E\u0178\u2391\v\u0178\x05" +
		"\u0178\u2393\n\u0178\x03\u0178\x03\u0178\x05\u0178\u2397\n\u0178\x03\u0179" +
		"\x03\u0179\x03\u0179\x05\u0179\u239C\n\u0179\x03\u0179\x03\u0179\x05\u0179" +
		"\u23A0\n\u0179\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A" +
		"\x03\u017A\x05\u017A\u23A9\n\u017A\x03\u017B\x03\u017B\x03\u017B\x03\u017B" +
		"\x03\u017B\x05\u017B\u23B0\n\u017B\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x07\u017C\u23B7\n\u017C\f\u017C\x0E\u017C\u23BA\v\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x05\u017C\u23C5\n\u017C\x05\u017C\u23C7\n\u017C\x03\u017D" +
		"\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D" +
		"\x05\u017D\u23D1\n\u017D\x03\u017D\x05\u017D\u23D4\n\u017D\x03\u017D\x07" +
		"\u017D\u23D7\n\u017D\f\u017D\x0E\u017D\u23DA\v\u017D\x03\u017D\x03\u017D" +
		"\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x05\u017D\u23E2\n\u017D\x05\u017D" +
		"\u23E4\n\u017D\x05\u017D\u23E6\n\u017D\x03\u017D\x03\u017D\x03\u017D\x05" +
		"\u017D\u23EB\n\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x07\u017D" +
		"\u23F1\n\u017D\f\u017D\x0E\u017D\u23F4\v\u017D\x03\u017D\x03\u017D\x05" +
		"\u017D\u23F8\n\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D" +
		"\x03\u017D\x05\u017D\u2400\n\u017D\x03\u017D\x07\u017D\u2403\n\u017D\f" +
		"\u017D\x0E\u017D\u2406\v\u017D\x03\u017D\x03\u017D\x03\u017D\x05\u017D" +
		"\u240B\n\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D" +
		"\x03\u017D\x03\u017D\x05\u017D\u2415\n\u017D\x05\u017D\u2417\n\u017D\x03" +
		"\u017D\x03\u017D\x05\u017D\u241B\n\u017D\x03\u017D\x03\u017D\x05\u017D" +
		"\u241F\n\u017D\x05\u017D\u2421\n\u017D\x03\u017E\x03\u017E\x03\u017E\x03" +
		"\u017F\x03\u017F\x05\u017F\u2428\n\u017F\x03\u0180\x03\u0180\x03\u0181" +
		"\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x07\u0181\u2431\n\u0181\f\u0181" +
		"\x0E\u0181\u2434\v\u0181\x03\u0181\x03\u0181\x03\u0182\x03\u0182\x03\u0182" +
		"\x03\u0182";
	private static readonly _serializedATNSegment4: string =
		"\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182" +
		"\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182" +
		"\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182" +
		"\x03\u0182\x03\u0182\x07\u0182\u2453\n\u0182\f\u0182\x0E\u0182\u2456\v" +
		"\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03" +
		"\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x05" +
		"\u0182\u2465\n\u0182\x03\u0183\x03\u0183\x03\u0183\x03\u0183\x03\u0183" +
		"\x05\u0183\u246C\n\u0183\x05\u0183\u246E\n\u0183\x03\u0184\x03\u0184\x03" +
		"\u0184\x07\u0184\u2473\n\u0184\f\u0184\x0E\u0184\u2476\v\u0184\x03\u0185" +
		"\x03\u0185\x03\u0185\x03\u0185\x07\u0185\u247C\n\u0185\f\u0185\x0E\u0185" +
		"\u247F\v\u0185\x03\u0185\x03\u0185\x03\u0186\x03\u0186\x03\u0186\x03\u0186" +
		"\x03\u0186\x05\u0186\u2488\n\u0186\x03\u0187\x03\u0187\x03\u0187\x05\u0187" +
		"\u248D\n\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x05\u0187" +
		"\u2494\n\u0187\x03\u0187\x05\u0187\u2497\n\u0187\x03\u0188\x03\u0188\x03" +
		"\u0188\x03\u0188\x03\u0188\x05\u0188\u249E\n\u0188\x03\u0188\x03\u0188" +
		"\x03\u0188\x03\u0188\x03\u0188\x05\u0188\u24A5\n\u0188\x03\u0188\x05\u0188" +
		"\u24A8\n\u0188\x05\u0188\u24AA\n\u0188\x03\u0189\x03\u0189\x03\u0189\x03" +
		"\u0189\x03\u0189\x03\u0189\x05\u0189\u24B2\n\u0189\x05\u0189\u24B4\n\u0189" +
		"\x03\u018A\x03\u018A\x03\u018A\x03\u018A\x05\u018A\u24BA\n\u018A\x03\u018B" +
		"\x03\u018B\x03\u018B\x07\u018B\u24BF\n\u018B\f\u018B\x0E\u018B\u24C2\v" +
		"\u018B\x03\u018C\x03\u018C\x03\u018C\x03\u018C\x03\u018C\x05\u018C\u24C9" +
		"\n\u018C\x03\u018D\x03\u018D\x07\u018D\u24CD\n\u018D\f\u018D\x0E\u018D" +
		"\u24D0\v\u018D\x03\u018E\x03\u018E\x05\u018E\u24D4\n\u018E\x03\u018E\x03" +
		"\u018E\x05\u018E\u24D8\n\u018E\x03\u018E\x03\u018E\x05\u018E\u24DC\n\u018E" +
		"\x03\u018E\x03\u018E\x03\u018E\x05\u018E\u24E1\n\u018E\x05\u018E\u24E3" +
		"\n\u018E\x03\u018E\x03\u018E\x03\u018E\x03\u018E\x03\u018E\x05\u018E\u24EA" +
		"\n\u018E\x03\u018E\x03\u018E\x05\u018E\u24EE\n\u018E\x03\u018E\x03\u018E" +
		"\x03\u018E\x03\u018E\x03\u018E\x05\u018E\u24F5\n\u018E\x05\u018E\u24F7" +
		"\n\u018E\x03\u018E\x03\u018E\x03\u018E\x03\u018E\x03\u018E\x05\u018E\u24FE" +
		"\n\u018E\x05\u018E\u2500\n\u018E\x03\u018F\x03\u018F\x03\u018F\x03\u018F" +
		"\x03\u018F\x03\u018F\x03\u018F\x05\u018F\u2509\n\u018F\x03\u018F\x03\u018F" +
		"\x03\u018F\x03\u018F\x03\u018F\x03\u018F\x05\u018F\u2511\n\u018F\x03\u0190" +
		"\x03\u0190\x03\u0190\x07\u0190\u2516\n\u0190\f\u0190\x0E\u0190\u2519\v" +
		"\u0190\x03\u0191\x03\u0191\x03\u0191\x05\u0191\u251E\n\u0191\x03\u0192" +
		"\x03\u0192\x03\u0192\x03\u0192\x03\u0192\x03\u0192\x03\u0192\x03\u0192" +
		"\x03\u0193\x05\u0193\u2529\n\u0193\x03\u0193\x03\u0193\x05\u0193\u252D" +
		"\n\u0193\x05\u0193\u252F\n\u0193\x03\u0193\x05\u0193\u2532\n\u0193\x03" +
		"\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03" +
		"\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03" +
		"\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03" +
		"\u0193\x05\u0193\u254A\n\u0193\x03\u0194\x03\u0194\x03\u0194\x03\u0194" +
		"\x03\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x03\u0195" +
		"\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195" +
		"\x03\u0196\x03\u0196\x03\u0196\x07\u0196\u2561\n\u0196\f\u0196\x0E\u0196" +
		"\u2564\v\u0196\x03\u0197\x03\u0197\x05\u0197\u2568\n\u0197\x03\u0198\x03" +
		"\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03" +
		"\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03" +
		"\u0198\x07\u0198\u257A\n\u0198\f\u0198\x0E\u0198\u257D\v\u0198\x03\u0198" +
		"\x05\u0198\u2580\n\u0198\x03\u0198\x03\u0198\x05\u0198\u2584\n\u0198\x03" +
		"\u0199\x03\u0199\x03\u0199\x03\u0199\x03\u019A\x03\u019A\x03\u019A\x03" +
		"\u019A\x03\u019A\x03\u019A\x03\u019A\x03\u019A\x03\u019A\x03\u019A\x05" +
		"\u019A\u2594\n\u019A\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x05\u019B\u259C\n\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x05\u019B\u25B2\n\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x05\u019B\u25EC\n\u019B\x03\u019B" +
		"\x03\u019B\x05\u019B\u25F0\n\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
		"\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x03\u019B\x05\u019B" +
		"\u2611\n\u019B\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x05\u019C" +
		"\u2618\n\u019C\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x05\u019D\u261E" +
		"\n\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03" +
		"\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x05\u019D\u262B\n\u019D" +
		"\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D" +
		"\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x05\u019D" +
		"\u263A\n\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D" +
		"\x03\u019D\x03\u019D\x03\u019D\x05\u019D\u2645\n\u019D\x03\u019E\x03\u019E" +
		"\x03\u019E\x05\u019E\u264A\n\u019E\x03\u019E\x03\u019E\x03\u019E\x03\u019E" +
		"\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x05\u019E\u2654\n\u019E\x03\u019E" +
		"\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x05\u019E" +
		"\u265D\n\u019E\x03\u019F\x03\u019F\x03\u019F\x03\u019F\x03\u019F\x03\u019F" +
		"\x03\u019F\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0" +
		"\x03\u01A0\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1" +
		"\x03\u01A1\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A3" +
		"\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A4\x05\u01A4\u267F\n\u01A4" +
		"\x03\u01A4\x03\u01A4\x03\u01A5\x05\u01A5\u2684\n\u01A5\x03\u01A5\x03\u01A5" +
		"\x03\u01A6\x03\u01A6\x05\u01A6\u268A\n\u01A6\x03\u01A7\x05\u01A7\u268D" +
		"\n\u01A7\x03\u01A7\x03\u01A7\x03\u01A7\x05\u01A7\u2692\n\u01A7\x03\u01A7" +
		"\x07\u01A7\u2695\n\u01A7\f\u01A7\x0E\u01A7\u2698\v\u01A7\x03\u01A7\x03" +
		"\u01A7\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x05\u01A8\u26A0\n\u01A8" +
		"\x03\u01A8\x07\u01A8\u26A3\n\u01A8\f\u01A8\x0E\u01A8\u26A6\v\u01A8\x03" +
		"\u01A8\x03\u01A8\x03\u01A9\x05\u01A9\u26AB\n\u01A9\x03\u01A9\x03\u01A9" +
		"\x03\u01A9\x03\u01A9\x03\u01A9\x07\u01A9\u26B2\n\u01A9\f\u01A9\x0E\u01A9" +
		"\u26B5\v\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x07\u01A9" +
		"\u26BC\n\u01A9\f\u01A9\x0E\u01A9\u26BF\v\u01A9\x05\u01A9\u26C1\n\u01A9" +
		"\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9" +
		"\x03\u01A9\x03\u01A9\x03\u01A9\x07\u01A9\u26CD\n\u01A9\f\u01A9\x0E\u01A9" +
		"\u26D0\v\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x05\u01A9\u26D5\n\u01A9\x03" +
		"\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x05\u01A9\u26DD" +
		"\n\u01A9\x03\u01AA\x03\u01AA\x05\u01AA\u26E1\n\u01AA\x03\u01AB\x03\u01AB" +
		"\x03\u01AB\x03\u01AB\x07\u01AB\u26E7\n\u01AB\f\u01AB\x0E\u01AB\u26EA\v" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AC\x03\u01AC\x05\u01AC\u26F0\n\u01AC" +
		"\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD" +
		"\x03\u01AD\x03\u01AD\x07\u01AD\u26FB\n\u01AD\f\u01AD\x0E\u01AD\u26FE\v" +
		"\u01AD\x03\u01AE\x03\u01AE\x03\u01AE\x07\u01AE\u2703\n\u01AE\f\u01AE\x0E" +
		"\u01AE\u2706\v\u01AE\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF" +
		"\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x05\u01AF\u2712\n\u01AF" +
		"\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x05\u01B0\u2719\n\u01B0" +
		"\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x05\u01B0\u271F\n\u01B0\x03\u01B0" +
		"\x03\u01B0\x05\u01B0\u2723\n\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0" +
		"\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0" +
		"\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x05\u01B0\u2734\n\u01B0\x03\u01B1" +
		"\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1" +
		"\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u2743\n\u01B1" +
		"\x05\u01B1\u2745\n\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u274A" +
		"\n\u01B1\x03\u01B2\x05\u01B2\u274D\n\u01B2\x03\u01B2\x03\u01B2\x03\u01B3" +
		"\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x05\u01B3\u2756\n\u01B3\x03\u01B3" +
		"\x05\u01B3\u2759\n\u01B3\x03\u01B3\x05\u01B3\u275C\n\u01B3\x03\u01B3\x03" +
		"\u01B3\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B5\x03\u01B5\x03\u01B5\x03" +
		"\u01B5\x03\u01B5\x03\u01B5\x05\u01B5\u2769\n\u01B5\x03\u01B6\x03\u01B6" +
		"\x05\u01B6\u276D\n\u01B6\x03\u01B7\x03\u01B7\x03\u01B7\x03\u01B7\x03\u01B7" +
		"\x03\u01B7\x05\u01B7\u2775\n\u01B7\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8" +
		"\x05\u01B8\u277B\n\u01B8\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x07\u01B9" +
		"\u2781\n\u01B9\f\u01B9\x0E\u01B9\u2784\v\u01B9\x03\u01B9\x03\u01B9\x03" +
		"\u01B9\x03\u01B9\x05\u01B9\u278A\n\u01B9\x03\u01B9\x03\u01B9\x03\u01B9" +
		"\x03\u01B9\x05\u01B9\u2790\n\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9" +
		"\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9" +
		"\x03\u01B9\x03\u01B9\x05\u01B9\u279F\n\u01B9\x03\u01BA\x03\u01BA\x03\u01BA" +
		"\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x05\u01BA\u27A8\n\u01BA\x03\u01BA" +
		"\x03\u01BA\x03\u01BB\x03\u01BB\x05\u01BB\u27AE\n\u01BB\x03\u01BC\x03\u01BC" +
		"\x03\u01BC\x03\u01BC\x05\u01BC\u27B4\n\u01BC\x03\u01BC\x05\u01BC\u27B7" +
		"\n\u01BC\x03\u01BC\x03\u01BC\x05\u01BC\u27BB\n\u01BC\x03\u01BC\x03\u01BC" +
		"\x03\u01BC\x07\u01BC\u27C0\n\u01BC\f\u01BC\x0E\u01BC\u27C3\v\u01BC\x03" +
		"\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x05\u01BD\u27CA\n\u01BD" +
		"\x03\u01BD\x05\u01BD\u27CD\n\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD" +
		"\x05\u01BD\u27D3\n\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x05\u01BD" +
		"\u27D9\n\u01BD\x05\u01BD\u27DB\n\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03" +
		"\u01BD\x05\u01BD\u27E1\n\u01BD\x03\u01BD\x05\u01BD\u27E4\n\u01BD\x05\u01BD" +
		"\u27E6\n\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x05\u01BD\u27EC" +
		"\n\u01BD\x05\u01BD\u27EE\n\u01BD\x03\u01BD\x03\u01BD\x03\u01BE\x03\u01BE" +
		"\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE" +
		"\x03\u01BE\x05\u01BE\u27FC\n\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE" +
		"\x03\u01BE\x05\u01BE\u2803\n\u01BE\x03\u01BE\x03\u01BE\x03\u01BF\x03\u01BF" +
		"\x03\u01BF\x03\u01BF\x03\u01BF\x05\u01BF\u280C\n\u01BF\x03\u01C0\x03\u01C0" +
		"\x03\u01C0\x03\u01C0\x03\u01C0\x05\u01C0\u2813\n\u01C0\x03\u01C1\x03\u01C1" +
		"\x03\u01C1\x03\u01C1\x03\u01C1\x03\u01C1\x03\u01C1\x03\u01C1\x03\u01C1" +
		"\x03\u01C1\x05\u01C1\u281F\n\u01C1\x03\u01C1\x03\u01C1\x03\u01C1\x03\u01C1" +
		"\x03\u01C1\x05\u01C1\u2826\n\u01C1\x03\u01C1\x03\u01C1\x03\u01C2\x03\u01C2" +
		"\x03\u01C2\x05\u01C2\u282D\n\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2" +
		"\x03\u01C2\x05\u01C2\u2834\n\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2" +
		"\x05\u01C2\u283A\n\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2" +
		"\x05\u01C2\u2841\n\u01C2\x03\u01C2\x05\u01C2\u2844\n\u01C2\x03\u01C3\x03" +
		"\u01C3\x03\u01C3\x05\u01C3\u2849\n\u01C3\x03\u01C3\x03\u01C3\x03\u01C4" +
		"\x03\u01C4\x03\u01C4\x05\u01C4\u2850\n\u01C4\x03\u01C4\x03\u01C4\x03\u01C4" +
		"\x03\u01C4\x03\u01C4\x05\u01C4\u2857\n\u01C4\x03\u01C4\x03\u01C4\x03\u01C4" +
		"\x03\u01C4\x03\u01C4\x03\u01C4\x05\u01C4\u285F\n\u01C4\x03\u01C4\x03\u01C4" +
		"\x03\u01C4\x05\u01C4\u2864\n\u01C4\x03\u01C5\x03\u01C5\x05\u01C5\u2868" +
		"\n\u01C5\x03\u01C6\x03\u01C6\x03\u01C6\x05\u01C6\u286D\n\u01C6\x03\u01C6" +
		"\x03\u01C6\x03\u01C6\x03\u01C6\x05\u01C6\u2873\n\u01C6\x03\u01C6\x03\u01C6" +
		"\x03\u01C6\x03\u01C6\x05\u01C6\u2879\n\u01C6\x03\u01C6\x03\u01C6\x03\u01C6" +
		"\x03\u01C6\x05\u01C6\u287F\n\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6" +
		"\x05\u01C6\u2885\n\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x05\u01C6" +
		"\u288B\n\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x05\u01C6\u2891" +
		"\n\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x05\u01C6\u2897\n\u01C6" +
		"\x03\u01C6\x05\u01C6\u289A\n\u01C6\x03\u01C7\x03\u01C7\x05\u01C7\u289E" +
		"\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u28A3\n\u01C7\x07\u01C7" +
		"\u28A5\n\u01C7\f\u01C7\x0E\u01C7\u28A8\v\u01C7\x03\u01C8\x03\u01C8\x03" +
		"\u01C8\x07\u01C8\u28AD\n\u01C8\f\u01C8\x0E\u01C8\u28B0\v\u01C8\x03\u01C9" +
		"\x03\u01C9\x05\u01C9\u28B4\n\u01C9\x03\u01CA\x03\u01CA\x03\u01CB\x03\u01CB" +
		"\x03\u01CC\x05\u01CC\u28BB\n\u01CC\x03\u01CC\x03\u01CC\x03\u01CD\x03\u01CD" +
		"\x03\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u28C4\n\u01CD\x05\u01CD\u28C6" +
		"\n\u01CD\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CE\x05\u01CE\u28CD" +
		"\n\u01CE\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03" +
		"\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x05\u01CF\u28D9\n\u01CF\x03\u01D0" +
		"\x03\u01D0\x03\u01D0\x05\u01D0\u28DE\n\u01D0\x03\u01D0\x03\u01D0\x03\u01D0" +
		"\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x05\u01D0" +
		"\u28E9\n\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0" +
		"\x03\u01D0\x03\u01D0\x05\u01D0\u28F3\n\u01D0\x05\u01D0\u28F5\n\u01D0\x03" +
		"\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x05\u01D0\u28FB\n\u01D0\x05\u01D0" +
		"\u28FD\n\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x05\u01D0\u2902\n\u01D0\x05" +
		"\u01D0\u2904\n\u01D0\x03\u01D0\x05\u01D0\u2907\n\u01D0\x03\u01D1\x03\u01D1" +
		"\x05\u01D1\u290B\n\u01D1\x03\u01D2\x03\u01D2\x05\u01D2\u290F\n\u01D2\x03" +
		"\u01D3\x03\u01D3\x03\u01D3\x03\u01D3\x05\u01D3\u2915\n\u01D3\x03\u01D3" +
		"\x03\u01D3\x03\u01D3\x03\u01D3\x03\u01D3\x03\u01D3\x03\u01D3\x05\u01D3" +
		"\u291E\n\u01D3\x03\u01D3\x05\u01D3\u2921\n\u01D3\x05\u01D3\u2923\n\u01D3" +
		"\x03\u01D4\x05\u01D4\u2926\n\u01D4\x03\u01D4\x03\u01D4\x03\u01D4\x03\u01D4" +
		"\x05\u01D4\u292C\n\u01D4\x03\u01D4\x03\u01D4\x05\u01D4\u2930\n\u01D4\x03" +
		"\u01D4\x05\u01D4\u2933\n\u01D4\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
		"\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u293C\n\u01D5\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u2945\n\u01D6" +
		"\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7" +
		"\x03\u01D7\x03\u01D7\x03\u01D7\x05\u01D7\u2951\n\u01D7\x03\u01D7\x05\u01D7" +
		"\u2954\n\u01D7\x03\u01D8\x03\u01D8\x05\u01D8\u2958\n\u01D8\x03\u01D8\x03" +
		"\u01D8\x03\u01D8\x03\u01D8\x05\u01D8\u295E\n\u01D8\x03\u01D8\x05\u01D8" +
		"\u2961\n\u01D8\x03\u01D8\x03\u01D8\x05\u01D8\u2965\n\u01D8\x03\u01D8\x03" +
		"\u01D8\x03\u01D8\x03\u01D8\x05\u01D8\u296B\n\u01D8\x03\u01D9\x03\u01D9" +
		"\x03\u01D9\x05\u01D9\u2970\n\u01D9\x03\u01DA\x03\u01DA\x03\u01DA\x05\u01DA" +
		"\u2975\n\u01DA\x03\u01DA\x03\u01DA\x05\u01DA\u2979\n\u01DA\x03\u01DA\x03" +
		"\u01DA\x05\u01DA\u297D\n\u01DA\x03\u01DA\x03\u01DA\x05\u01DA\u2981\n\u01DA" +
		"\x03\u01DB\x03\u01DB\x03\u01DC\x03\u01DC\x03\u01DC\x05\u01DC\u2988\n\u01DC" +
		"\x03\u01DD\x03\u01DD\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE" +
		"\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE" +
		"\x03\u01DE\x03\u01DE\x03\u01DE\x05\u01DE\u299B\n\u01DE\x03\u01DF\x03\u01DF" +
		"\x03\u01E0\x03\u01E0\x05\u01E0\u29A1\n\u01E0\x03\u01E0\x02\x02\x04^\u02CC" +
		"\u01E1\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02" +
		"\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02" +
		"(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02" +
		"D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02" +
		"`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02" +
		"|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E" +
		"\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0" +
		"\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2" +
		"\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4" +
		"\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6" +
		"\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8" +
		"\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA" +
		"\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02" +
		"\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02" +
		"\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02" +
		"\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02" +
		"\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02" +
		"\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02" +
		"\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02" +
		"\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02" +
		"\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02" +
		"\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02" +
		"\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02" +
		"\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02" +
		"\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02" +
		"\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02" +
		"\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02" +
		"\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02" +
		"\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02" +
		"\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02" +
		"\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02" +
		"\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02" +
		"\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02" +
		"\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02" +
		"\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02" +
		"\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02" +
		"\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02" +
		"\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02" +
		"\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02" +
		"\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02" +
		"\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02" +
		"\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02" +
		"\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02" +
		"\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02" +
		"\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02" +
		"\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6\x02" +
		"\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02\u02E4\x02" +
		"\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE\x02\u02F0\x02\u02F2\x02" +
		"\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC\x02\u02FE\x02\u0300\x02" +
		"\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A\x02\u030C\x02\u030E\x02" +
		"\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318\x02\u031A\x02\u031C\x02" +
		"\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326\x02\u0328\x02\u032A\x02" +
		"\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334\x02\u0336\x02\u0338\x02" +
		"\u033A\x02\u033C\x02\u033E\x02\u0340\x02\u0342\x02\u0344\x02\u0346\x02" +
		"\u0348\x02\u034A\x02\u034C\x02\u034E\x02\u0350\x02\u0352\x02\u0354\x02" +
		"\u0356\x02\u0358\x02\u035A\x02\u035C\x02\u035E\x02\u0360\x02\u0362\x02" +
		"\u0364\x02\u0366\x02\u0368\x02\u036A\x02\u036C\x02\u036E\x02\u0370\x02" +
		"\u0372\x02\u0374\x02\u0376\x02\u0378\x02\u037A\x02\u037C\x02\u037E\x02" +
		"\u0380\x02\u0382\x02\u0384\x02\u0386\x02\u0388\x02\u038A\x02\u038C\x02" +
		"\u038E\x02\u0390\x02\u0392\x02\u0394\x02\u0396\x02\u0398\x02\u039A\x02" +
		"\u039C\x02\u039E\x02\u03A0\x02\u03A2\x02\u03A4\x02\u03A6\x02\u03A8\x02" +
		"\u03AA\x02\u03AC\x02\u03AE\x02\u03B0\x02\u03B2\x02\u03B4\x02\u03B6\x02" +
		"\u03B8\x02\u03BA\x02\u03BC\x02\u03BE\x02\x02\x8C\x03\x02\u031A\u031B\x04" +
		"\x02\u031A\u031A\u031F\u031F\x04\x02\u01D7\u01D7\u02EF\u02F0\x04\x02\u031A" +
		"\u031B\u031F\u031F\x04\x02\xBB\xBB\u02D0\u02D0\x05\x02\u0317\u0317\u031A" +
		"\u031A\u031F\u031F\x05\x02}}\u012B\u012B\u016B\u016B\x04\x02\xE2\xE2\xE5" +
		"\xE5\x03\x02\u031F\u0320\x03\x02\u0124\u0128\x04\x02\u01C5\u01C5\u0278" +
		"\u0278\x04\x02\u012E\u012E\u0272\u0272\x05\x02UU\u012E\u012E\u0272\u0272" +
		"\x05\x02\xD5\xD5\u0100\u0100\u02C3\u02C4\x04\x02\x13\x13\u02E7\u02E7\x04" +
		"\x02\x17\x17\u023F\u023F\x04\x02\x06\x06\u029F\u029F\x05\x02\x06\x06\u0264" +
		"\u0264\u029D\u029D\x04\x02\n\nII\x04\x02\x04\x04hh\x04\x02\u01F1\u01F1" +
		"\u02D1\u02D1\x04\x02\u01E2\u01E2\u01EB\u01EB\x04\x02\u031B\u031B\u031F" +
		"\u031F\x04\x02\u0229\u0229\u024E\u024E\x04\x02\b\t\xDB\xDB\x05\x02\xD5" +
		"\xD5\xF7\xF7\xF9\xF9\x04\x02\u014D\u014D\u0150\u0150\x04\x02\v\v\xED\xED" +
		"\x03\x02\u031D\u031E\x04\x02\x04\x04\u013D\u013D\x04\x02\xB6\xB6\u017B" +
		"\u017B\x03\x02\u0106\u0107\x04\x02\u031B\u031B\u031F\u0320\x04\x02\xCE" +
		"\xCE\u0169\u0169\x04\x02\xC9\xC9\u0146\u0146\x04\x02\u010D\u010D\u01E2" +
		"\u01E2\x04\x02\u031D\u031D\u031F\u031F\x04\x02^^\x92\x92\x06\x02]]\xA2" +
		"\xA2\u0132\u0132\u016C\u016C\x04\x02\x1E\x1E\u0201\u0201\x04\x02\xA2\xA2" +
		"\u016C\u016C\x04\x02]]\u016C\u016C\x05\x02\u020C\u020C\u024E\u024E\u02EB" +
		"\u02EB\x04\x02\u0300\u0300\u031B\u031B\x05\x02BB\u013F\u013F\u01F7\u01F7" +
		"\x04\x02ZZ\u031F\u031F\x04\x02ZZ\u031B\u031B\x04\x02\u0238\u0238\u031F" +
		"\u031F\x05\x02\u020C\u020C\u0229\u0229\u024E\u024E\x07\x02\u0187\u0189" +
		"\u01DC\u01DC\u01DE\u01DE\u0299\u029B\u02F5\u02F6\x04\x02\x86\x86\x8C\x8C" +
		"\x05\x02\u0217\u0217\u023E\u023E\u024F\u024F\x05\x02\r\r\u0159\u0159\u0221" +
		"\u0221\x04\x02\xD5\xD5\xF3\xF3\x03\x02\u0102\u0103\x05\x02]]\xA2\xA2\u016C" +
		"\u016C\x04\x02\x86\x86\u018B\u018B\x04\x02\u027B\u027C\u02A0\u02A0\x04" +
		"\x02\xF5\xF5\u02BC\u02BC\x04\x02\x06\x06\x9E\x9E\x05\x02\u01EE\u01EE\u02BE" +
		"\u02BE\u0307\u0307\x05\x02\u0156\u0156\u019B\u019B\u01E2\u01E2\x05\x02" +
		"\u01D0\u01D0\u0219\u0219\u0257\u0257\x04\x02\u020F\u020F\u0238\u0238\x04" +
		"\x02\x06\x06\xA6\xA7\x05\x02\xAB\xAB\xD0\xD0\xDE\xDE\x05\x02\u0113\u0113" +
		"\u0153\u0153\u01E4\u01E4\x04\x02ll\u01E4\u01E4\x05\x02\x06\x06\u017F\u017F" +
		"\u0282\u0282\x04\x02\x8D\x8D\xE2\xE2\x05\x02\u01E9\u01E9\u0273\u0273\u0276" +
		"\u0276\x04\x02\u029D\u029D\u029F\u029F\x05\x02\u025D\u025D\u02B4\u02B4" +
		"\u02D5\u02D5\x05\x02\u0190\u0190\u01E4\u01E4\u0207\u0207\x04\x02\u0118" +
		"\u0118\u02E5\u02E5\x04\x02\u0207\u0207\u02D4\u02D4\x05\x02\x8D\x8D\u01AD" +
		"\u01AD\u02D4\u02D4\x05\x02\xD5\xD5\u01B5\u01B5\u02F3\u02F3\x04\x02\u0257" +
		"\u0257\u02C6\u02C6\x04\x02\x82\x82\u01FD\u01FD\x05\x02bb\u0158\u0158\u016E" +
		"\u016E\x04\x0299\xDA\xDA\x04\x02\xA0\xA0\xD3\xD3\x04\x02\xD7\xD7\u0141" +
		"\u0141\x04\x02\xD2\xD2\u0208\u0208\x04\x02\xD9\xD9\u01B5\u01B5\x04\x02" +
		"CC\u0152\u0152\x04\x02\xD6\xD6\u011E\u011E\x04\x02\xB9\xB9\xD8\xD8\x04" +
		"\x02\u0187\u0189\u02F6\u02F6\x04\x02\u0171\u0171\u023C\u023C\x03\x02\u027B" +
		"\u027C\x04\x02\x82\x82\u0320\u0320\x04\x02\u01D3\u01D3\u01EE\u01EE\x04" +
		"\x02\u01F5\u01F5\u02DB\u02DB\x04\x02\u0156\u0156\u0175\u0175\x03\x02\u0160" +
		"\u0161\x06\x02\u01AE\u01AE\u027D\u027D\u02CA\u02CA\u031F\u031F\x04\x02" +
		"\u01BE\u01BE\u01E6\u01E6\x04\x02\x10\x10;;\x04\x02\u0223\u0223\u02CB\u02CB" +
		"\x04\x02\u0209\u0209\u02C0\u02C0\x06\x02\u01E7\u01E7\u01FC\u01FC\u022E" +
		"\u022E\u02DC\u02DC\x05\x02\u0279\u0279\u029D\u029D\u02C1\u02C1\x04\x02" +
		"\u0181\u0181\u02A6\u02A6\x03\x02\u033A\u033C\x05\x02\u032F\u032F\u033D" +
		"\u033E\u0340\u0342\x03\x02\u033D\u033E\x05\x02\x06\x06\r\r\u0143\u0143" +
		"\x04\x02\x06\x06cc\x03\x02\u0321\u0322\x04\x02\u02B9\u02B9\u02BC\u02BC" +
		"\x04\x02\u0202\u0202\u0263\u0263\x04\x02\x03\x03\u0312\u0312\x04\x02\u019B" +
		"\u019B\u0283\u0283\x05\x02\u01A7\u01A7\u02B7\u02B7\u02FB\u02FB\x04\x02" +
		"\x11\x11__\x04\x02\xEE\xEE\u0215\u0215\x05\x02\xC9\xC9\u01BC\u01BC\u0215" +
		"\u0215\x05\x02\xC9\xC9\u0215\u0215\u023D\u023D\x04\x02\xDF\xDF\u031A\u031B" +
		"\x05\x02\x8D\x8D\xB1\xB1\u011F\u011F\x06\x02\xC9\xC9\u0215\u0215\u023D" +
		"\u023D\u02A7\u02A7\x04\x02\u031A\u031A\u031C\u031C\x05\x02\u01DA\u01DA" +
		"\u0298\u0298\u02BA\u02BA\b\x02\u01A3\u01A3\u0242\u0242\u0252\u0252\u02DF" +
		"\u02E0\u02E4\u02E4\u0305\u0306\x03\x02\u01C1\u01C2\x04\x02\u0203\u0203" +
		"\u0231\u0231\x04\x02\u022F\u022F\u0232\u0232\x04\x02\u0297\u0297\u02BC" +
		"\u02BC\x05\x02\x8D\x8D\xE2\xE2\u029D\u029D\x04\x0255\xD4\xD4\x03\x02\u0110" +
		"\u0111\x04\x02\u0242\u0242\u031B\u031B\x04\x02\u031B\u031B\u0321\u0321" +
		"\x1F\x02((SSss\x83\x84\x87\x87\xA0\xA0\xAC\xAC\xBD\xBE\xE3\xE3\xF1\xF1" +
		"\u0105\u0105\u0107\u0107\u0109\u0109\u011A\u011B\u0122\u0122\u0129\u0129" +
		"\u0137\u0137\u0140\u0140\u0144\u0144\u014B\u014B\u014D\u014D\u0159\u0159" +
		"\u0181\u01E7\u01E9\u021E\u0220\u0227\u0229\u030A\u030C\u030E\u0310\u0310" +
		"\u031C\u031C\x03\x02\u0327\u032E\x07\x02\u020C\u020C\u0229\u0229\u024E" +
		"\u024E\u02EB\u02EB\u033C\u033C\u3075\x02\u03C3\x03\x02\x02\x02\x04\u03D9" +
		"\x03\x02\x02\x02\x06\u03DF\x03\x02\x02\x02\b\u03EA\x03\x02\x02\x02\n\u03F1" +
		"\x03\x02\x02\x02\f\u0492\x03\x02\x02\x02\x0E\u0499\x03\x02\x02\x02\x10" +
		"\u04A7\x03\x02\x02\x02\x12\u04A9\x03\x02\x02\x02\x14\u04B4\x03\x02\x02" +
		"\x02\x16\u04B8\x03\x02\x02\x02\x18\u04C6\x03\x02\x02\x02\x1A\u04C8\x03" +
		"\x02\x02\x02\x1C\u04CF\x03\x02\x02\x02\x1E\u04D9\x03\x02\x02\x02 \u04E5" +
		"\x03\x02\x02\x02\"\u04E7\x03\x02\x02\x02";
	private static readonly _serializedATNSegment5: string =
		"$\u04E9\x03\x02\x02\x02&\u04EB\x03\x02\x02\x02(\u0505\x03\x02\x02\x02" +
		"*\u0516\x03\x02\x02\x02,\u0523\x03\x02\x02\x02.\u0552\x03\x02\x02\x02" +
		"0\u0554\x03\x02\x02\x022\u0563\x03\x02\x02\x024\u0565\x03\x02\x02\x02" +
		"6\u0582\x03\x02\x02\x028\u0597\x03\x02\x02\x02:\u05A4\x03\x02\x02\x02" +
		"<\u05A9\x03\x02\x02\x02>\u05AD\x03\x02\x02\x02@\u05B1\x03\x02\x02\x02" +
		"B\u05BC\x03\x02\x02\x02D\u05C1\x03\x02\x02\x02F\u05C3\x03\x02\x02\x02" +
		"H\u05C8\x03\x02\x02\x02J\u05CA\x03\x02\x02\x02L\u05CC\x03\x02\x02\x02" +
		"N\u05CF\x03\x02\x02\x02P\u05D3\x03\x02\x02\x02R\u05D9\x03\x02\x02\x02" +
		"T\u05DB\x03\x02\x02\x02V\u05DE\x03\x02\x02\x02X\u05E0\x03\x02\x02\x02" +
		"Z\u05E3\x03\x02\x02\x02\\\u05E8\x03\x02\x02\x02^\u05F3\x03\x02\x02\x02" +
		"`\u05FC\x03\x02\x02\x02b\u0600\x03\x02\x02\x02d\u0602\x03\x02\x02\x02" +
		"f\u0608\x03\x02\x02\x02h\u060A\x03\x02\x02\x02j\u060C\x03\x02\x02\x02" +
		"l\u060F\x03\x02\x02\x02n\u0617\x03\x02\x02\x02p\u0619\x03\x02\x02\x02" +
		"r\u061B\x03\x02\x02\x02t\u0631\x03\x02\x02\x02v\u0644\x03\x02\x02\x02" +
		"x\u064C\x03\x02\x02\x02z\u0650\x03\x02\x02\x02|\u0658\x03\x02\x02\x02" +
		"~\u0667\x03\x02\x02\x02\x80\u0669\x03\x02\x02\x02\x82\u0695\x03\x02\x02" +
		"\x02\x84\u069E\x03\x02\x02\x02\x86\u06AB\x03\x02\x02\x02\x88\u06AD\x03" +
		"\x02\x02\x02\x8A\u06AF\x03\x02\x02\x02\x8C\u06B2\x03\x02\x02\x02\x8E\u06B6" +
		"\x03\x02\x02\x02\x90\u06C0\x03\x02\x02\x02\x92\u06CA\x03\x02\x02\x02\x94" +
		"\u06F6\x03\x02\x02\x02\x96\u070D\x03\x02\x02\x02\x98\u070F\x03\x02\x02" +
		"\x02\x9A\u0711\x03\x02\x02\x02\x9C\u0713\x03\x02\x02\x02\x9E\u0718\x03" +
		"\x02\x02\x02\xA0\u071B\x03\x02\x02\x02\xA2\u087E\x03\x02\x02\x02\xA4\u0880" +
		"\x03\x02\x02\x02\xA6\u08B6\x03\x02\x02\x02\xA8\u08BB\x03\x02\x02\x02\xAA" +
		"\u08E7\x03\x02\x02\x02\xAC\u08FE\x03\x02\x02\x02\xAE\u091C\x03\x02\x02" +
		"\x02\xB0\u0920\x03\x02\x02\x02\xB2\u0926\x03\x02\x02\x02\xB4\u092C\x03" +
		"\x02\x02\x02\xB6\u0930\x03\x02\x02\x02\xB8\u0934\x03\x02\x02\x02\xBA\u0939" +
		"\x03\x02\x02\x02\xBC\u0947\x03\x02\x02\x02\xBE\u094D\x03\x02\x02\x02\xC0" +
		"\u0953\x03\x02\x02\x02\xC2\u0963\x03\x02\x02\x02\xC4\u0967\x03\x02\x02" +
		"\x02\xC6\u096D\x03\x02\x02\x02\xC8\u0973\x03\x02\x02\x02\xCA\u097B\x03" +
		"\x02\x02\x02\xCC\u0981\x03\x02\x02\x02\xCE\u0990\x03\x02\x02\x02\xD0\u09A2" +
		"\x03\x02\x02\x02\xD2\u09A9\x03\x02\x02\x02\xD4\u09AE\x03\x02\x02\x02\xD6" +
		"\u09B9\x03\x02\x02\x02\xD8\u09BE\x03\x02\x02\x02\xDA\u09C2\x03\x02\x02" +
		"\x02\xDC\u09C6\x03\x02\x02\x02\xDE\u09CB\x03\x02\x02\x02\xE0\u09D0\x03" +
		"\x02\x02\x02\xE2\u09D5\x03\x02\x02\x02\xE4\u09E3\x03\x02\x02\x02\xE6\u09E9" +
		"\x03\x02\x02\x02\xE8\u09EE\x03\x02\x02\x02\xEA\u09F6\x03\x02\x02\x02\xEC" +
		"\u09FA\x03\x02\x02\x02\xEE\u0A0B\x03\x02\x02\x02\xF0\u0A13\x03\x02\x02" +
		"\x02\xF2\u0A19\x03\x02\x02\x02\xF4\u0A27\x03\x02\x02\x02\xF6\u0A3D\x03" +
		"\x02\x02\x02\xF8\u0A42\x03\x02\x02\x02\xFA\u0A48\x03\x02\x02\x02\xFC\u0A4D" +
		"\x03\x02\x02\x02\xFE\u0A51\x03\x02\x02\x02\u0100\u0A6D\x03\x02\x02\x02" +
		"\u0102\u0A78\x03\x02\x02\x02\u0104\u0A81\x03\x02\x02\x02\u0106\u0A8E\x03" +
		"\x02\x02\x02\u0108\u0A96\x03\x02\x02\x02\u010A\u0A9B\x03\x02\x02\x02\u010C" +
		"\u0AA6\x03\x02\x02\x02\u010E\u0AC4\x03\x02\x02\x02\u0110\u0AE2\x03\x02" +
		"\x02\x02\u0112\u0AF0\x03\x02\x02\x02\u0114\u0B08\x03\x02\x02\x02\u0116" +
		"\u0B18\x03\x02\x02\x02\u0118\u0B25\x03\x02\x02\x02\u011A\u0B38\x03\x02" +
		"\x02\x02\u011C\u0B45\x03\x02\x02\x02\u011E\u0B4E\x03\x02\x02\x02\u0120" +
		"\u0B6C\x03\x02\x02\x02\u0122\u0C5F\x03\x02\x02\x02\u0124\u0C68\x03\x02" +
		"\x02\x02\u0126\u0CA2\x03\x02\x02\x02\u0128\u0CD3\x03\x02\x02\x02\u012A" +
		"\u0CD5\x03\x02\x02\x02\u012C\u0CFE\x03\x02\x02\x02\u012E\u0D30\x03\x02" +
		"\x02\x02\u0130\u0D76\x03\x02\x02\x02\u0132\u0DB9\x03\x02\x02\x02\u0134" +
		"\u0DC9\x03\x02\x02\x02\u0136\u0DE5\x03\x02\x02\x02\u0138\u0DF8\x03\x02" +
		"\x02\x02\u013A\u0E0D\x03\x02\x02\x02\u013C\u0E55\x03\x02\x02\x02\u013E" +
		"\u0EB4\x03\x02\x02\x02\u0140\u0ECA\x03\x02\x02\x02\u0142\u0ED6\x03\x02" +
		"\x02\x02\u0144\u0EF2\x03\x02\x02\x02\u0146\u0F07\x03\x02\x02\x02\u0148" +
		"\u0F21\x03\x02\x02\x02\u014A\u0F2A\x03\x02\x02\x02\u014C\u0F4A\x03\x02" +
		"\x02\x02\u014E\u0F54\x03\x02\x02\x02\u0150\u0F64\x03\x02\x02\x02\u0152" +
		"\u0F70\x03\x02\x02\x02\u0154\u0F79\x03\x02\x02\x02\u0156\u0F8A\x03\x02" +
		"\x02\x02\u0158\u0FA2\x03\x02\x02\x02\u015A\u100E\x03\x02\x02\x02\u015C" +
		"\u1028\x03\x02\x02\x02\u015E\u1034\x03\x02\x02\x02\u0160\u103B\x03\x02" +
		"\x02\x02\u0162\u1067\x03\x02\x02\x02\u0164\u1072\x03\x02\x02\x02\u0166" +
		"\u1086\x03\x02\x02\x02\u0168\u10B0\x03\x02\x02\x02\u016A\u10B7\x03\x02" +
		"\x02\x02\u016C\u10C5\x03\x02\x02\x02\u016E\u10D7\x03\x02\x02\x02\u0170" +
		"\u111D\x03\x02\x02\x02\u0172\u1148\x03\x02\x02\x02\u0174\u117E\x03\x02" +
		"\x02\x02\u0176\u1207\x03\x02\x02\x02\u0178\u1296\x03\x02\x02\x02\u017A" +
		"\u12B3\x03\x02\x02\x02\u017C\u12D0\x03\x02\x02\x02\u017E\u133F\x03\x02" +
		"\x02\x02\u0180\u134C\x03\x02\x02\x02\u0182\u1354\x03\x02\x02\x02\u0184" +
		"\u135C\x03\x02\x02\x02\u0186\u1372\x03\x02\x02\x02\u0188\u1390\x03\x02" +
		"\x02\x02\u018A\u13AB\x03\x02\x02\x02\u018C\u13BF\x03\x02\x02\x02\u018E" +
		"\u13EF\x03\x02\x02\x02\u0190\u1414\x03\x02\x02\x02\u0192\u14E0\x03\x02" +
		"\x02\x02\u0194\u14FE\x03\x02\x02\x02\u0196\u1500\x03\x02\x02\x02\u0198" +
		"\u1520\x03\x02\x02\x02\u019A\u154F\x03\x02\x02\x02\u019C\u1583\x03\x02" +
		"\x02\x02\u019E\u1593\x03\x02\x02\x02\u01A0\u15A1\x03\x02\x02\x02\u01A2" +
		"\u15EA\x03\x02\x02\x02\u01A4\u1609\x03\x02\x02\x02\u01A6\u160B\x03\x02" +
		"\x02\x02\u01A8\u160F\x03\x02\x02\x02\u01AA\u162D\x03\x02\x02\x02\u01AC" +
		"\u162F\x03\x02\x02\x02\u01AE\u1644\x03\x02\x02\x02\u01B0\u169D\x03\x02" +
		"\x02\x02\u01B2\u169F\x03\x02\x02\x02\u01B4\u16AC\x03\x02\x02\x02\u01B6" +
		"\u16E4\x03\x02\x02\x02\u01B8\u16E7\x03\x02\x02\x02\u01BA\u1715\x03\x02" +
		"\x02\x02\u01BC\u1718\x03\x02\x02\x02\u01BE\u1739\x03\x02\x02\x02\u01C0" +
		"\u174A\x03\x02\x02\x02\u01C2\u174D\x03\x02\x02\x02\u01C4\u1788\x03\x02" +
		"\x02\x02\u01C6\u17A0\x03\x02\x02\x02\u01C8\u17B0\x03\x02\x02\x02\u01CA" +
		"\u17B2\x03\x02\x02\x02\u01CC\u17E3\x03\x02\x02\x02\u01CE\u180C\x03\x02" +
		"\x02\x02\u01D0\u1838\x03\x02\x02\x02\u01D2\u1840\x03\x02\x02\x02\u01D4" +
		"\u186D\x03\x02\x02\x02\u01D6\u186F\x03\x02\x02\x02\u01D8\u1877\x03\x02" +
		"\x02\x02\u01DA\u1898\x03\x02\x02\x02\u01DC\u18A0\x03\x02\x02\x02\u01DE" +
		"\u18BB\x03\x02\x02\x02\u01E0\u18D3\x03\x02\x02\x02\u01E2\u18F3\x03\x02" +
		"\x02\x02\u01E4\u1911\x03\x02\x02\x02\u01E6\u1928\x03\x02\x02\x02\u01E8" +
		"\u1936\x03\x02\x02\x02\u01EA\u1938\x03\x02\x02\x02\u01EC\u1957\x03\x02" +
		"\x02\x02\u01EE\u1965\x03\x02\x02\x02\u01F0\u1985\x03\x02\x02\x02\u01F2" +
		"\u199B\x03\x02\x02\x02\u01F4\u19B9\x03\x02\x02\x02\u01F6\u19BB\x03\x02" +
		"\x02\x02\u01F8\u19EE\x03\x02\x02\x02\u01FA\u1A1C\x03\x02\x02\x02\u01FC" +
		"\u1A2F\x03\x02\x02\x02\u01FE\u1A31\x03\x02\x02\x02\u0200\u1A4A\x03\x02" +
		"\x02\x02\u0202\u1A4C\x03\x02\x02\x02\u0204\u1A54\x03\x02\x02\x02\u0206" +
		"\u1A56\x03\x02\x02\x02\u0208\u1AE2\x03\x02\x02\x02\u020A\u1AEA\x03\x02" +
		"\x02\x02\u020C\u1AEC\x03\x02\x02\x02\u020E\u1AEE\x03\x02\x02\x02\u0210" +
		"\u1AF0\x03\x02\x02\x02\u0212\u1AFE\x03\x02\x02\x02\u0214\u1B04\x03\x02" +
		"\x02\x02\u0216\u1B06\x03\x02\x02\x02\u0218\u1B08\x03\x02\x02\x02\u021A" +
		"\u1B0D\x03\x02\x02\x02\u021C\u1B0F\x03\x02\x02\x02\u021E\u1B13\x03\x02" +
		"\x02\x02\u0220\u1B1F\x03\x02\x02\x02\u0222\u1B21\x03\x02\x02\x02\u0224" +
		"\u1B24\x03\x02\x02\x02\u0226\u1B27\x03\x02\x02\x02\u0228\u1B29\x03\x02" +
		"\x02\x02\u022A\u1B2B\x03\x02\x02\x02\u022C\u1B2D\x03\x02\x02\x02\u022E" +
		"\u1B4A\x03\x02\x02\x02\u0230\u1B4C\x03\x02\x02\x02\u0232\u1B57\x03\x02" +
		"\x02\x02\u0234\u1B5A\x03\x02\x02\x02\u0236\u1B63\x03\x02\x02\x02\u0238" +
		"\u1B6B\x03\x02\x02\x02\u023A\u1B72\x03\x02\x02\x02\u023C\u1B89\x03\x02" +
		"\x02\x02\u023E\u1B8B\x03\x02\x02\x02\u0240\u1B96\x03\x02\x02\x02\u0242" +
		"\u1B98\x03\x02\x02\x02\u0244\u1BB3\x03\x02\x02\x02\u0246\u1BBA\x03\x02" +
		"\x02\x02\u0248\u1BC0\x03\x02\x02\x02\u024A\u1BD3\x03\x02\x02\x02\u024C" +
		"\u1BD5\x03\x02\x02\x02\u024E\u1BE6\x03\x02\x02\x02\u0250\u1BFD\x03\x02" +
		"\x02\x02\u0252\u1C0E\x03\x02\x02\x02\u0254\u1C1F\x03\x02\x02\x02\u0256" +
		"\u1C29\x03\x02\x02\x02\u0258\u1C3A\x03\x02\x02\x02\u025A\u1C4B\x03\x02" +
		"\x02\x02\u025C\u1C55\x03\x02\x02\x02\u025E\u1C57\x03\x02\x02\x02\u0260" +
		"\u1C5E\x03\x02\x02\x02\u0262\u1C9A\x03\x02\x02\x02\u0264\u1CB9\x03\x02" +
		"\x02\x02\u0266\u1CBB\x03\x02\x02\x02\u0268\u1DB5\x03\x02\x02\x02\u026A" +
		"\u1EA3\x03\x02\x02\x02\u026C\u1ECB\x03\x02\x02\x02\u026E\u1ED8\x03\x02" +
		"\x02\x02\u0270\u1EE6\x03\x02\x02\x02\u0272\u1F13\x03\x02\x02\x02\u0274" +
		"\u1F17\x03\x02\x02\x02\u0276\u1F24\x03\x02\x02\x02\u0278\u1F61\x03\x02" +
		"\x02\x02\u027A\u1F63\x03\x02\x02\x02\u027C\u1F88\x03\x02\x02\x02\u027E" +
		"\u1F8A\x03\x02\x02\x02\u0280\u1F9A\x03\x02\x02\x02\u0282\u1FA7\x03\x02" +
		"\x02\x02\u0284\u1FBB\x03\x02\x02\x02\u0286\u1FC8\x03\x02\x02\x02\u0288" +
		"\u1FED\x03\x02\x02\x02\u028A\u1FFE\x03\x02\x02\x02\u028C\u2000\x03\x02" +
		"\x02\x02\u028E\u200D\x03\x02\x02\x02\u0290\u2026\x03\x02\x02\x02\u0292" +
		"\u2042\x03\x02\x02\x02\u0294\u206B\x03\x02\x02\x02\u0296\u20BE\x03\x02" +
		"\x02\x02\u0298\u20C0\x03\x02\x02\x02\u029A\u20C4\x03\x02\x02\x02\u029C" +
		"\u20C9\x03\x02\x02\x02\u029E\u20CD\x03\x02\x02\x02\u02A0\u20DC\x03\x02" +
		"\x02\x02\u02A2\u20E1\x03\x02\x02\x02\u02A4\u20E5\x03\x02\x02\x02\u02A6" +
		"\u20EE\x03\x02\x02\x02\u02A8\u20F3\x03\x02\x02\x02\u02AA\u20FB\x03\x02" +
		"\x02\x02\u02AC\u20FF\x03\x02\x02\x02\u02AE\u210C\x03\x02\x02\x02\u02B0" +
		"\u210E\x03\x02\x02\x02\u02B2\u213B\x03\x02\x02\x02\u02B4\u2145\x03\x02" +
		"\x02\x02\u02B6\u2170\x03\x02\x02\x02\u02B8\u21B4\x03\x02\x02\x02\u02BA" +
		"\u21BF\x03\x02\x02\x02\u02BC\u21CA\x03\x02\x02\x02\u02BE\u21D6\x03\x02" +
		"\x02\x02\u02C0\u21DD\x03\x02\x02\x02\u02C2\u2206\x03\x02\x02\x02\u02C4" +
		"\u2211\x03\x02\x02\x02\u02C6\u2213\x03\x02\x02\x02\u02C8\u2262\x03\x02" +
		"\x02\x02\u02CA\u2266\x03\x02\x02\x02\u02CC\u2270\x03\x02\x02\x02\u02CE" +
		"\u228C\x03\x02\x02\x02\u02D0\u22A7\x03\x02\x02\x02\u02D2\u22AD\x03\x02" +
		"\x02\x02\u02D4\u22B7\x03\x02\x02\x02\u02D6\u22C1\x03\x02\x02\x02\u02D8" +
		"\u22C3\x03\x02\x02\x02\u02DA\u22DF\x03\x02\x02\x02\u02DC\u22E1\x03\x02" +
		"\x02\x02\u02DE\u22FD\x03\x02\x02\x02\u02E0\u22FF\x03\x02\x02\x02\u02E2" +
		"\u2307\x03\x02\x02\x02\u02E4\u230F\x03\x02\x02\x02\u02E6\u2318\x03\x02" +
		"\x02\x02\u02E8\u2353\x03\x02\x02\x02\u02EA\u235A\x03\x02\x02\x02\u02EC" +
		"\u2368\x03\x02\x02\x02\u02EE\u2371\x03\x02\x02\x02\u02F0\u2398\x03\x02" +
		"\x02\x02\u02F2\u23A8\x03\x02\x02\x02\u02F4\u23AF\x03\x02\x02\x02\u02F6" +
		"\u23B1\x03\x02\x02\x02\u02F8\u2420\x03\x02\x02\x02\u02FA\u2422\x03\x02" +
		"\x02\x02\u02FC\u2425\x03\x02\x02\x02\u02FE\u2429\x03\x02\x02\x02\u0300" +
		"\u242B\x03\x02\x02\x02\u0302\u2464\x03\x02\x02\x02\u0304\u2466\x03\x02" +
		"\x02\x02\u0306\u246F\x03\x02\x02\x02\u0308\u2477\x03\x02\x02\x02\u030A" +
		"\u2487\x03\x02\x02\x02\u030C\u248C\x03\x02\x02\x02\u030E\u24A9\x03\x02" +
		"\x02\x02\u0310\u24B3\x03\x02\x02\x02\u0312\u24B9\x03\x02\x02\x02\u0314" +
		"\u24BB\x03\x02\x02\x02\u0316\u24C8\x03\x02\x02\x02\u0318\u24CA\x03\x02" +
		"\x02\x02\u031A\u24FF\x03\x02\x02\x02\u031C\u2501\x03\x02\x02\x02\u031E" +
		"\u2512\x03\x02\x02\x02\u0320\u251A\x03\x02\x02\x02\u0322\u251F\x03\x02" +
		"\x02\x02\u0324\u2549\x03\x02\x02\x02\u0326\u254B\x03\x02\x02\x02\u0328" +
		"\u2553\x03\x02\x02\x02\u032A\u255D\x03\x02\x02\x02\u032C\u2565\x03\x02" +
		"\x02\x02\u032E\u2583\x03\x02\x02\x02\u0330\u2585\x03\x02\x02\x02\u0332" +
		"\u2593\x03\x02\x02\x02\u0334\u2610\x03\x02\x02\x02\u0336\u2617\x03\x02" +
		"\x02\x02\u0338\u2644\x03\x02\x02\x02\u033A\u265C\x03\x02\x02\x02\u033C" +
		"\u265E\x03\x02\x02\x02\u033E\u2665\x03\x02\x02\x02\u0340\u266C\x03\x02" +
		"\x02\x02\u0342\u2673\x03\x02\x02\x02\u0344\u2678\x03\x02\x02\x02\u0346" +
		"\u267E\x03\x02\x02\x02\u0348\u2683\x03\x02\x02\x02\u034A\u2687\x03\x02" +
		"\x02\x02\u034C\u268C\x03\x02\x02\x02\u034E\u269B\x03\x02\x02\x02\u0350" +
		"\u26AA\x03\x02\x02\x02\u0352\u26E0\x03\x02\x02\x02\u0354\u26E2\x03\x02" +
		"\x02\x02\u0356\u26EF\x03\x02\x02\x02\u0358\u26F1\x03\x02\x02\x02\u035A" +
		"\u26FF\x03\x02\x02\x02\u035C\u2711\x03\x02\x02\x02\u035E\u2733\x03\x02" +
		"\x02\x02\u0360\u2749\x03\x02\x02\x02\u0362\u274C\x03\x02\x02\x02\u0364" +
		"\u2750\x03\x02\x02\x02\u0366\u275F\x03\x02\x02\x02\u0368\u2768\x03\x02" +
		"\x02\x02\u036A\u276C\x03\x02\x02\x02\u036C\u2774\x03\x02\x02\x02\u036E" +
		"\u277A\x03\x02\x02\x02\u0370\u279E\x03\x02\x02\x02\u0372\u27A0\x03\x02" +
		"\x02\x02\u0374\u27AD\x03\x02\x02\x02\u0376\u27AF\x03\x02\x02\x02\u0378" +
		"\u27C4\x03\x02\x02\x02\u037A\u2802\x03\x02\x02\x02\u037C\u280B\x03\x02" +
		"\x02\x02\u037E\u2812\x03\x02\x02\x02\u0380\u2825\x03\x02\x02\x02\u0382" +
		"\u2843\x03\x02\x02\x02\u0384\u2848\x03\x02\x02\x02\u0386\u2863\x03\x02" +
		"\x02\x02\u0388\u2867\x03\x02\x02\x02\u038A\u2899\x03\x02\x02\x02\u038C" +
		"\u289B\x03\x02\x02\x02\u038E\u28A9\x03\x02\x02\x02\u0390\u28B3\x03\x02" +
		"\x02\x02\u0392\u28B5\x03\x02\x02\x02\u0394\u28B7\x03\x02\x02\x02\u0396" +
		"\u28BA\x03\x02\x02\x02\u0398\u28C5\x03\x02\x02\x02\u039A\u28CC\x03\x02" +
		"\x02\x02\u039C\u28CE\x03\x02\x02\x02\u039E\u28DA\x03\x02\x02\x02\u03A0" +
		"\u290A\x03\x02\x02\x02\u03A2\u290E\x03\x02\x02\x02\u03A4\u2910\x03\x02" +
		"\x02\x02\u03A6\u2925\x03\x02\x02\x02\u03A8\u2934\x03\x02\x02\x02\u03AA" +
		"\u2944\x03\x02\x02\x02\u03AC\u2946\x03\x02\x02\x02\u03AE\u296A\x03\x02" +
		"\x02\x02\u03B0\u296F\x03\x02\x02\x02\u03B2\u2980\x03\x02\x02\x02\u03B4" +
		"\u2982\x03\x02\x02\x02\u03B6\u2987\x03\x02\x02\x02\u03B8\u2989\x03\x02" +
		"\x02\x02\u03BA\u299A\x03\x02\x02\x02\u03BC\u299C\x03\x02\x02\x02\u03BE" +
		"\u299E\x03\x02\x02\x02\u03C0\u03C2\x05\x04\x03\x02\u03C1\u03C0\x03\x02" +
		"\x02\x02\u03C2\u03C5\x03\x02\x02\x02\u03C3\u03C1\x03\x02\x02\x02\u03C3" +
		"\u03C4\x03\x02\x02\x02\u03C4\u03C6\x03\x02\x02\x02\u03C5\u03C3\x03\x02" +
		"\x02\x02\u03C6\u03C7\x07\x02\x02\x03\u03C7\x03\x03\x02\x02\x02\u03C8\u03CC" +
		"\x05\u0272\u013A\x02\u03C9\u03CB\x05\u0298\u014D\x02\u03CA\u03C9\x03\x02" +
		"\x02\x02\u03CB\u03CE\x03\x02\x02\x02\u03CC\u03CA\x03\x02\x02\x02\u03CC" +
		"\u03CD\x03\x02\x02\x02\u03CD\u03DA\x03\x02\x02\x02\u03CE\u03CC\x03\x02" +
		"\x02\x02\u03CF\u03D1\x05\u0272\u013A\x02\u03D0\u03CF\x03\x02\x02\x02\u03D0" +
		"\u03D1\x03\x02\x02\x02\u03D1\u03D2\x03\x02\x02\x02\u03D2\u03D6\x05\x06" +
		"\x04\x02\u03D3\u03D5\x05\u0298\u014D\x02\u03D4\u03D3\x03\x02\x02\x02\u03D5" +
		"\u03D8\x03\x02\x02\x02\u03D6\u03D4\x03\x02\x02\x02\u03D6\u03D7\x03\x02" +
		"\x02\x02\u03D7\u03DA\x03\x02\x02\x02\u03D8\u03D6\x03\x02\x02\x02\u03D9" +
		"\u03C8\x03\x02\x02\x02\u03D9\u03D0\x03\x02\x02\x02\u03DA\x05\x03\x02\x02" +
		"\x02\u03DB\u03DD\x05\b\x05\x02\u03DC\u03DE\x07\u0338\x02\x02\u03DD\u03DC" +
		"\x03\x02\x02\x02\u03DD\u03DE\x03\x02\x02\x02\u03DE\u03E0\x03\x02\x02\x02" +
		"\u03DF\u03DB\x03\x02\x02\x02\u03E0\u03E1\x03\x02\x02\x02\u03E1\u03DF\x03" +
		"\x02\x02\x02\u03E1\u03E2\x03\x02\x02\x02\u03E2\x07\x03\x02\x02\x02\u03E3" +
		"\u03EB\x05\n\x06\x02\u03E4\u03EB\x05\f\x07\x02\u03E5\u03EB\x05\x10\t\x02" +
		"\u03E6\u03EB\x05\u029E\u0150\x02\u03E7\u03EB\x050\x19\x02\u03E8\u03EB" +
		"\x052\x1A\x02\u03E9\u03EB\x05\x0E\b\x02\u03EA\u03E3\x03\x02\x02\x02\u03EA" +
		"\u03E4\x03\x02\x02\x02\u03EA\u03E5\x03\x02\x02\x02\u03EA\u03E6\x03\x02" +
		"\x02\x02\u03EA\u03E7\x03\x02\x02\x02\u03EA\u03E8\x03\x02\x02\x02\u03EA" +
		"\u03E9\x03\x02\x02\x02\u03EB\t\x03\x02\x02\x02\u03EC\u03F2\x05\u01AE\xD8" +
		"\x02\u03ED\u03F2\x05\u01B4\xDB\x02\u03EE\u03F2\x05\u01B8\xDD\x02\u03EF" +
		"\u03F2\x05\u01BE\xE0\x02\u03F0\u03F2\x05\u01C2\xE2\x02\u03F1\u03EC\x03" +
		"\x02\x02\x02\u03F1\u03ED\x03\x02\x02\x02\u03F1\u03EE\x03\x02\x02\x02\u03F1" +
		"\u03EF\x03\x02\x02\x02\u03F1\u03F0\x03\x02\x02\x02\u03F2\v\x03\x02\x02" +
		"\x02\u03F3\u0493\x054\x1B\x02\u03F4\u0493\x05<\x1F\x02\u03F5\u0493\x05" +
		"v<\x02\u03F6\u0493\x05\x84C\x02\u03F7\u0493\x05\x90I\x02\u03F8\u0493\x05" +
		"\x92J\x02\u03F9\u0493\x05\x8EH\x02\u03FA\u0493\x05\x9EP\x02\u03FB\u0493" +
		"\x05\xA8U\x02\u03FC\u0493\x05\xAAV\x02\u03FD\u0493\x05\u0116\x8C\x02\u03FE" +
		"\u0493\x05\u011A\x8E\x02\u03FF\u0493\x05\u01F8\xFD\x02\u0400\u0493\x05" +
		"\u015C\xAF\x02\u0401\u0493\x05\u0206\u0104\x02\u0402\u0493\x05\u0120\x91" +
		"\x02\u0403\u0493\x05\u0128\x95\x02\u0404\u0493\x05\u012A\x96\x02\u0405" +
		"\u0493\x05\u012E\x98\x02\u0406\u0493\x05\u0132\x9A\x02\u0407\u0493\x05" +
		"\u0136\x9C\x02\u0408\u0493\x05\u013E\xA0\x02\u0409\u0493\x05\u0142\xA2" +
		"\x02\u040A\u0493\x05\u013A\x9E\x02\u040B\u0493\x05\u014A\xA6\x02\u040C" +
		"\u0493\x05\u0146\xA4\x02\u040D\u0493\x05\u014E\xA8\x02\u040E\u0493\x05" +
		"\u0150\xA9\x02\u040F\u0493\x05\u0152\xAA\x02\u0410\u0493\x05\u0154\xAB" +
		"\x02\u0411\u0493\x05\u015A\xAE\x02\u0412\u0493\x05\u016A\xB6\x02\u0413" +
		"\u0493\x05\u0164\xB3\x02\u0414\u0493\x05\u0170\xB9\x02\u0415\u0493\x05" +
		"\u0174\xBB\x02\u0416\u0493\x05\u0178\xBD\x02\u0417\u0493\x05\u017C\xBF" +
		"\x02\u0418\u0493\x05\u017E\xC0\x02\u0419\u0493\x05\u0182\xC2\x02\u041A" +
		"\u0493\x05\u0184\xC3\x02\u041B\u0493\x05\u0188\xC5\x02\u041C\u0493\x05" +
		"\u018A\xC6\x02\u041D\u0493\x05\u01F6\xFC\x02\u041E\u0493\x05\u0190\xC9" +
		"\x02\u041F\u0493\x05\u0196\xCC\x02\u0420\u0493\x05\u0198\xCD\x02\u0421" +
		"\u0493\x056\x1C\x02\u0422\u0493\x05r:\x02\u0423\u0493\x05\x80A\x02\u0424" +
		"\u0493\x05\xACW\x02\u0425\u0493\x05\u0114\x8B\x02\u0426\u0493\x05\u0118" +
		"\x8D\x02\u0427\u0493\x05\u011C\x8F\x02\u0428\u0493\x05\u01CA\xE6\x02\u0429" +
		"\u0493\x05\u015E\xB0\x02\u042A\u0493\x05\u011E\x90\x02\u042B\u0493\x05" +
		"\u012C\x97\x02\u042C\u0493\x05\u0130\x99\x02\u042D\u0493\x05\u0134\x9B" +
		"\x02\u042E\u0493\x05\u0138\x9D\x02\u042F\u0493\x05\u01CC\xE7\x02\u0430" +
		"\u0493\x05\u0140\xA1\x02\u0431\u0493\x05\u0144\xA3\x02\u0432\u0493\x05" +
		"\u013C\x9F\x02\u0433\u0493\x05\u014C\xA7\x02\u0434\u0493\x05\u0148\xA5" +
		"\x02\u0435\u0493\x05\xA4S\x02\u0436\u0493\x05\u01DC\xEF\x02\u0437\u0493" +
		"\x05\u01CE\xE8\x02\u0438\u0493\x05\u01D0\xE9\x02\u0439\u0493\x05\u0156" +
		"\xAC\x02\u043A\u0493\x05\u0158\xAD\x02\u043B\u0493\x05\u0160\xB1\x02\u043C" +
		"\u0493\x05\u0162\xB2\x02\u043D\u0493\x05\u0166\xB4\x02\u043E\u0493\x05" +
		"\u0168\xB5\x02\u043F\u0493\x05\u016C\xB7\x02\u0440\u0493\x05\u016E\xB8" +
		"\x02\u0441\u0493\x05\u0172\xBA\x02\u0442\u0493\x05\u0176\xBC\x02\u0443" +
		"\u0493\x05\u017A\xBE\x02\u0444\u0493\x05\u0180\xC1\x02\u0445\u0493\x05" +
		"\u0186\xC4\x02\u0446\u0493\x05\u01EA\xF6\x02\u0447\u0493\x05\u018C\xC7" +
		"\x02\u0448\u0493\x05\u018E\xC8\x02\u0449\u0493\x05\u01EE\xF8\x02\u044A" +
		"\u0493\x05\u0258\u012D\x02\u044B\u0493\x05\u0192\xCA\x02\u044C\u0493\x05" +
		"\u0194\xCB\x02\u044D\u0493\x05\u01F2\xFA\x02\u044E\u0493\x05\u019A\xCE" +
		"\x02\u044F\u0493\x05\u019C\xCF\x02\u0450\u0493\x058\x1D\x02\u0451\u0493" +
		"\x05:\x1E\x02\u0452\u0493\x05t;\x02\u0453\u0493\x05\x82B\x02\u0454\u0493" +
		"\x05\x9CO\x02\u0455\u0493\x05\xA6T\x02\u0456\u0493\x05\xAEX\x02\u0457" +
		"\u0493\x05\xB0Y\x02\u0458\u0493\x05\xB2Z\x02\u0459\u0493\x05\xB4[\x02" +
		"\u045A\u0493\x05\xB6\\\x02\u045B\u0493\x05\xB8]\x02\u045C\u0493\x05\xBA" +
		"^\x02\u045D\u0493\x05\xBC_\x02\u045E\u0493\x05\xBE`\x02\u045F\u0493\x05" +
		"\xE8u\x02\u0460\u0493\x05\xC0a\x02\u0461\u0493\x05\xC2b\x02\u0462\u0493" +
		"\x05\xCEh\x02\u0463\u0493\x05\xD0i\x02\u0464\u0493\x05\xC4c\x02\u0465" +
		"\u0493\x05\xC6d\x02\u0466\u0493\x05\xC8e\x02\u0467\u0493\x05\xCAf\x02" +
		"\u0468\u0493\x05\xCCg\x02\u0469\u0493\x05\xD2j\x02\u046A\u0493\x05\xD4" +
		"k\x02\u046B\u0493\x05\xD6l\x02\u046C\u0493\x05\u0250\u0129\x02\u046D\u0493" +
		"\x05\u0242\u0122\x02\u046E\u0493\x05\xD8m\x02\u046F\u0493\x05\xDAn\x02" +
		"\u0470\u0493\x05\xDCo\x02\u0471\u0493\x05\xDEp\x02\u0472\u0493\x05\xE0" +
		"q\x02\u0473\u0493\x05\u0248\u0125\x02\u0474\u0493\x05\xE2r\x02\u0475\u0493" +
		"\x05\xE4s\x02\u0476\u0493\x05\xE6t\x02\u0477\u0493\x05\xEAv\x02\u0478" +
		"\u0493\x05\xECw\x02\u0479\u0493\x05\xEEx\x02\u047A\u0493\x05\xF0y\x02" +
		"\u047B\u0493\x05\xF2z\x02\u047C\u0493\x05\xF4{\x02\u047D\u0493\x05\xF6" +
		"|\x02\u047E\u0493\x05\xF8}\x02\u047F\u0493\x05\xFA~\x02\u0480\u0493\x05" +
		"\xFC\x7F\x02\u0481\u0493\x05\xFE\x80\x02\u0482\u0493\x05\u0252\u012A\x02" +
		"\u0483\u0493\x05\u0100\x81\x02\u0484\u0493\x05\u0102\x82\x02\u0485\u0493" +
		"\x05\u0104\x83\x02\u0486\u0493\x05\u0254\u012B\x02\u0487\u0493\x05\u024A" +
		"\u0126\x02\u0488\u0493\x05\u025A\u012E\x02\u0489\u0493\x05\u0106\x84\x02" +
		"\u048A\u0493\x05\u0256\u012C\x02\u048B\u0493\x05\u0108\x85\x02\u048C\u0493" +
		"\x05\u010A\x86\x02\u048D\u0493\x05\u010C\x87\x02\u048E\u0493\x05\u010E" +
		"\x88\x02\u048F\u0493\x05\u0110\x89\x02\u0490\u0493\x05\u0112\x8A\x02\u0491" +
		"\u0493\x05\u01EC\xF7\x02\u0492\u03F3\x03\x02\x02\x02\u0492\u03F4\x03\x02" +
		"\x02\x02\u0492\u03F5\x03\x02\x02\x02\u0492\u03F6\x03\x02\x02\x02\u0492" +
		"\u03F7\x03\x02\x02\x02\u0492\u03F8\x03\x02\x02\x02\u0492\u03F9\x03\x02" +
		"\x02\x02\u0492\u03FA\x03\x02\x02\x02\u0492\u03FB\x03\x02\x02\x02\u0492" +
		"\u03FC\x03\x02\x02\x02\u0492\u03FD\x03\x02\x02\x02\u0492\u03FE\x03\x02" +
		"\x02\x02\u0492\u03FF\x03\x02\x02\x02\u0492\u0400\x03\x02\x02\x02\u0492" +
		"\u0401\x03\x02\x02\x02\u0492\u0402\x03\x02\x02\x02\u0492\u0403\x03\x02" +
		"\x02\x02\u0492\u0404\x03\x02\x02\x02\u0492\u0405\x03\x02\x02\x02\u0492" +
		"\u0406\x03\x02\x02\x02\u0492\u0407\x03\x02\x02\x02\u0492\u0408\x03\x02" +
		"\x02\x02\u0492\u0409\x03\x02\x02\x02\u0492\u040A\x03\x02\x02\x02\u0492" +
		"\u040B\x03\x02\x02\x02\u0492\u040C\x03\x02\x02\x02\u0492\u040D\x03\x02" +
		"\x02\x02\u0492\u040E\x03\x02\x02\x02\u0492\u040F\x03\x02\x02\x02\u0492" +
		"\u0410\x03\x02\x02\x02\u0492\u0411\x03\x02\x02\x02\u0492\u0412\x03\x02" +
		"\x02\x02\u0492\u0413\x03\x02\x02\x02\u0492\u0414\x03\x02\x02\x02\u0492" +
		"\u0415\x03\x02\x02\x02\u0492\u0416\x03\x02\x02\x02\u0492\u0417\x03\x02" +
		"\x02\x02\u0492\u0418\x03\x02\x02\x02\u0492\u0419\x03\x02\x02\x02\u0492" +
		"\u041A\x03\x02\x02\x02\u0492\u041B\x03\x02\x02\x02\u0492\u041C\x03\x02" +
		"\x02\x02\u0492\u041D\x03\x02\x02\x02\u0492\u041E\x03\x02\x02\x02\u0492" +
		"\u041F\x03\x02\x02\x02\u0492\u0420\x03\x02\x02\x02\u0492\u0421\x03\x02" +
		"\x02\x02\u0492\u0422\x03\x02\x02\x02\u0492\u0423\x03\x02\x02\x02\u0492" +
		"\u0424\x03\x02\x02\x02\u0492\u0425\x03\x02\x02\x02\u0492\u0426\x03\x02" +
		"\x02\x02\u0492\u0427\x03\x02\x02\x02\u0492\u0428\x03\x02\x02\x02\u0492" +
		"\u0429\x03\x02\x02\x02\u0492\u042A\x03\x02\x02\x02\u0492\u042B\x03\x02" +
		"\x02\x02\u0492\u042C\x03\x02\x02\x02\u0492\u042D\x03\x02\x02\x02\u0492" +
		"\u042E\x03\x02\x02\x02\u0492\u042F\x03\x02\x02\x02\u0492\u0430\x03\x02" +
		"\x02\x02\u0492\u0431\x03\x02\x02\x02\u0492\u0432\x03\x02\x02\x02\u0492" +
		"\u0433\x03\x02\x02\x02\u0492\u0434\x03\x02\x02\x02\u0492\u0435\x03\x02" +
		"\x02\x02\u0492\u0436\x03\x02\x02\x02\u0492\u0437\x03\x02\x02\x02\u0492" +
		"\u0438\x03\x02\x02\x02\u0492\u0439\x03\x02\x02\x02\u0492\u043A\x03\x02" +
		"\x02\x02\u0492\u043B\x03\x02\x02\x02\u0492\u043C\x03\x02\x02\x02\u0492" +
		"\u043D\x03\x02\x02\x02\u0492\u043E\x03\x02\x02\x02\u0492\u043F\x03\x02" +
		"\x02\x02\u0492\u0440\x03\x02\x02\x02\u0492\u0441\x03\x02\x02\x02\u0492" +
		"\u0442\x03\x02\x02\x02\u0492\u0443\x03\x02\x02\x02\u0492\u0444\x03\x02" +
		"\x02\x02\u0492\u0445\x03\x02\x02\x02\u0492\u0446\x03\x02\x02\x02\u0492" +
		"\u0447\x03\x02\x02\x02\u0492\u0448\x03\x02\x02\x02\u0492\u0449\x03\x02" +
		"\x02\x02\u0492\u044A\x03\x02\x02\x02\u0492\u044B\x03\x02\x02\x02\u0492" +
		"\u044C\x03\x02\x02\x02\u0492\u044D\x03\x02\x02\x02\u0492\u044E\x03\x02" +
		"\x02\x02\u0492\u044F\x03\x02\x02\x02\u0492\u0450\x03\x02\x02\x02\u0492" +
		"\u0451\x03\x02\x02\x02\u0492\u0452\x03\x02\x02\x02\u0492\u0453\x03\x02" +
		"\x02\x02\u0492\u0454\x03\x02\x02\x02\u0492\u0455\x03\x02\x02\x02\u0492" +
		"\u0456\x03\x02\x02\x02\u0492\u0457\x03\x02\x02\x02\u0492\u0458\x03\x02" +
		"\x02\x02\u0492\u0459\x03\x02\x02\x02\u0492\u045A\x03\x02\x02\x02\u0492" +
		"\u045B\x03\x02\x02\x02\u0492\u045C\x03\x02\x02\x02\u0492\u045D\x03\x02" +
		"\x02\x02\u0492\u045E\x03\x02\x02\x02\u0492\u045F\x03\x02\x02\x02\u0492" +
		"\u0460\x03\x02\x02\x02\u0492\u0461\x03\x02\x02\x02\u0492\u0462\x03\x02" +
		"\x02\x02\u0492\u0463\x03\x02\x02\x02\u0492\u0464\x03\x02\x02\x02\u0492" +
		"\u0465\x03\x02\x02\x02\u0492\u0466\x03\x02\x02\x02\u0492\u0467\x03\x02" +
		"\x02\x02\u0492\u0468\x03\x02\x02\x02\u0492\u0469\x03\x02\x02\x02\u0492" +
		"\u046A\x03\x02\x02\x02\u0492\u046B\x03\x02\x02\x02\u0492\u046C\x03\x02" +
		"\x02\x02\u0492\u046D\x03\x02\x02\x02\u0492\u046E\x03\x02\x02\x02\u0492" +
		"\u046F\x03\x02\x02\x02\u0492\u0470\x03\x02\x02\x02\u0492\u0471\x03\x02" +
		"\x02\x02\u0492\u0472\x03\x02\x02\x02\u0492\u0473\x03\x02\x02\x02\u0492" +
		"\u0474\x03\x02\x02\x02\u0492\u0475\x03\x02\x02\x02\u0492\u0476\x03\x02" +
		"\x02\x02\u0492\u0477\x03\x02\x02\x02\u0492\u0478\x03\x02\x02\x02\u0492" +
		"\u0479\x03\x02\x02\x02\u0492\u047A\x03\x02\x02\x02\u0492\u047B\x03\x02" +
		"\x02\x02\u0492\u047C\x03\x02\x02\x02\u0492\u047D\x03\x02\x02\x02\u0492" +
		"\u047E\x03\x02\x02\x02\u0492\u047F\x03\x02\x02\x02\u0492\u0480\x03\x02" +
		"\x02\x02\u0492\u0481\x03\x02\x02\x02\u0492\u0482\x03\x02\x02\x02\u0492" +
		"\u0483";
	private static readonly _serializedATNSegment6: string =
		"\x03\x02\x02\x02\u0492\u0484\x03\x02\x02\x02\u0492\u0485\x03\x02\x02\x02" +
		"\u0492\u0486\x03\x02\x02\x02\u0492\u0487\x03\x02\x02\x02\u0492\u0488\x03" +
		"\x02\x02\x02\u0492\u0489\x03\x02\x02\x02\u0492\u048A\x03\x02\x02\x02\u0492" +
		"\u048B\x03\x02\x02\x02\u0492\u048C\x03\x02\x02\x02\u0492\u048D\x03\x02" +
		"\x02\x02\u0492\u048E\x03\x02\x02\x02\u0492\u048F\x03\x02\x02\x02\u0492" +
		"\u0490\x03\x02\x02\x02\u0492\u0491\x03\x02\x02\x02\u0493\r\x03\x02\x02" +
		"\x02\u0494\u049A\x05\u0266\u0134\x02\u0495\u049A\x05\u0268\u0135\x02\u0496" +
		"\u049A\x05\u026A\u0136\x02\u0497\u049A\x05\u026C\u0137\x02\u0498\u049A" +
		"\x05\u026E\u0138\x02\u0499\u0494\x03\x02\x02\x02\u0499\u0495\x03\x02\x02" +
		"\x02\u0499\u0496\x03\x02\x02\x02\u0499\u0497\x03\x02\x02\x02\u0499\u0498" +
		"\x03\x02\x02\x02\u049A\x0F\x03\x02\x02\x02\u049B\u04A8\x05\x12\n\x02\u049C" +
		"\u04A8\x05\x14\v\x02\u049D\u04A8\x05\x16\f\x02\u049E\u04A8\x05\x18\r\x02" +
		"\u049F\u04A8\x05\x1C\x0F\x02\u04A0\u04A8\x05\x1A\x0E\x02\u04A1\u04A8\x05" +
		"\x1E\x10\x02\u04A2\u04A8\x05&\x14\x02\u04A3\u04A8\x05(\x15\x02\u04A4\u04A8" +
		"\x05*\x16\x02\u04A5\u04A8\x05,\x17\x02\u04A6\u04A8\x05.\x18\x02\u04A7" +
		"\u049B\x03\x02\x02\x02\u04A7\u049C\x03\x02\x02\x02\u04A7\u049D\x03\x02" +
		"\x02\x02\u04A7\u049E\x03\x02\x02\x02\u04A7\u049F\x03\x02\x02\x02\u04A7" +
		"\u04A0\x03\x02\x02\x02\u04A7\u04A1\x03\x02\x02\x02\u04A7\u04A2\x03\x02" +
		"\x02\x02\u04A7\u04A3\x03\x02\x02\x02\u04A7\u04A4\x03\x02\x02\x02\u04A7" +
		"\u04A5\x03\x02\x02\x02\u04A7\u04A6\x03\x02\x02\x02\u04A8\x11\x03\x02\x02" +
		"\x02\u04A9\u04AB\x07\x1C\x02\x02\u04AA\u04AC\x07\u0338\x02\x02\u04AB\u04AA" +
		"\x03\x02\x02\x02\u04AB\u04AC\x03\x02\x02\x02\u04AC\u04AE\x03\x02\x02\x02" +
		"\u04AD\u04AF\x05\x06\x04\x02\u04AE\u04AD\x03\x02\x02\x02\u04AE\u04AF\x03" +
		"\x02\x02\x02\u04AF\u04B0\x03\x02\x02\x02\u04B0\u04B2\x07m\x02\x02\u04B1" +
		"\u04B3\x07\u0338\x02\x02\u04B2\u04B1\x03\x02\x02\x02\u04B2\u04B3\x03\x02" +
		"\x02\x02\u04B3\x13\x03\x02\x02\x02\u04B4\u04B6\x07!\x02\x02\u04B5\u04B7" +
		"\x07\u0338\x02\x02\u04B6\u04B5\x03\x02\x02\x02\u04B6\u04B7\x03\x02\x02" +
		"\x02\u04B7\x15\x03\x02\x02\x02\u04B8\u04BA\x07B\x02\x02\u04B9\u04BB\x07" +
		"\u0338\x02\x02\u04BA\u04B9\x03\x02\x02\x02\u04BA\u04BB\x03\x02\x02\x02" +
		"\u04BB\x17\x03\x02\x02\x02\u04BC\u04BD\x07\x90\x02\x02\u04BD\u04BF\x05" +
		"\u03B6\u01DC\x02\u04BE\u04C0\x07\u0338\x02\x02\u04BF\u04BE\x03\x02\x02" +
		"\x02\u04BF\u04C0\x03\x02\x02\x02\u04C0\u04C7\x03\x02\x02\x02\u04C1\u04C2" +
		"\x05\u03B6\u01DC\x02\u04C2\u04C4\x07\u0339\x02\x02\u04C3\u04C5\x07\u0338" +
		"\x02\x02\u04C4\u04C3\x03\x02\x02\x02\u04C4\u04C5\x03\x02\x02\x02\u04C5" +
		"\u04C7\x03\x02\x02\x02\u04C6\u04BC\x03\x02\x02\x02\u04C6\u04C1\x03\x02" +
		"\x02\x02\u04C7\x19\x03\x02\x02\x02\u04C8\u04CA\x07\u011A\x02\x02\u04C9" +
		"\u04CB\x05\u02CC\u0167\x02\u04CA\u04C9\x03\x02\x02\x02\u04CA\u04CB\x03" +
		"\x02\x02\x02\u04CB\u04CD\x03\x02\x02\x02\u04CC\u04CE\x07\u0338\x02\x02" +
		"\u04CD\u04CC\x03\x02\x02\x02\u04CD\u04CE\x03\x02\x02\x02\u04CE\x1B\x03" +
		"\x02\x02\x02\u04CF\u04D0\x07\x9A\x02\x02\u04D0\u04D1\x05\u02E2\u0172\x02" +
		"\u04D1\u04D4\x05\b\x05\x02\u04D2\u04D3\x07k\x02\x02\u04D3\u04D5\x05\b" +
		"\x05\x02\u04D4\u04D2\x03\x02\x02\x02\u04D4\u04D5\x03\x02\x02\x02\u04D5" +
		"\u04D7\x03\x02\x02\x02\u04D6\u04D8\x07\u0338\x02\x02\u04D7\u04D6\x03\x02" +
		"\x02\x02\u04D7\u04D8\x03\x02\x02\x02\u04D8\x1D\x03\x02\x02\x02\u04D9\u04E0" +
		"\x07\u02ED\x02\x02\u04DA\u04DB\x05 \x11\x02\u04DB\u04DC\x07\u0337\x02" +
		"\x02\u04DC\u04DD\x05\"\x12\x02\u04DD\u04DE\x07\u0337\x02\x02\u04DE\u04DF" +
		"\x05$\x13\x02\u04DF\u04E1\x03\x02\x02\x02\u04E0\u04DA\x03\x02\x02\x02" +
		"\u04E0\u04E1\x03\x02\x02\x02\u04E1\u04E3\x03\x02\x02\x02\u04E2\u04E4\x07" +
		"\u0338\x02\x02\u04E3\u04E2\x03\x02\x02\x02\u04E3\u04E4\x03\x02\x02\x02" +
		"\u04E4\x1F\x03\x02\x02\x02\u04E5\u04E6\t\x02\x02\x02\u04E6!\x03\x02\x02" +
		"\x02\u04E7\u04E8\t\x03\x02\x02\u04E8#\x03\x02\x02\x02\u04E9\u04EA\t\x02" +
		"\x02\x02\u04EA%\x03\x02\x02\x02\u04EB\u04EC\x07\x1C\x02\x02\u04EC\u04EE" +
		"\x07\u02F8\x02\x02\u04ED\u04EF\x07\u0338\x02\x02\u04EE\u04ED\x03\x02\x02" +
		"\x02\u04EE\u04EF\x03\x02\x02\x02\u04EF\u04F1\x03\x02\x02\x02\u04F0\u04F2" +
		"\x05\x06\x04\x02\u04F1\u04F0\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02" +
		"\u04F2\u04F3\x03\x02\x02\x02\u04F3\u04F4\x07m\x02\x02\u04F4\u04F6\x07" +
		"\u02F8\x02\x02\u04F5\u04F7\x07\u0338\x02\x02\u04F6\u04F5\x03\x02\x02\x02" +
		"\u04F6\u04F7\x03\x02\x02\x02\u04F7\u04F8\x03\x02\x02\x02\u04F8\u04F9\x07" +
		"\x1C\x02\x02\u04F9\u04FB\x07\u01B2\x02\x02\u04FA\u04FC\x07\u0338\x02\x02" +
		"\u04FB\u04FA\x03\x02\x02\x02\u04FB\u04FC\x03\x02\x02\x02\u04FC\u04FE\x03" +
		"\x02\x02\x02\u04FD\u04FF\x05\x06\x04\x02\u04FE\u04FD\x03\x02\x02\x02\u04FE" +
		"\u04FF\x03\x02\x02\x02\u04FF\u0500\x03\x02\x02\x02\u0500\u0501\x07m\x02" +
		"\x02\u0501\u0503\x07\u01B2\x02\x02\u0502\u0504\x07\u0338\x02\x02\u0503" +
		"\u0502\x03\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504\'\x03\x02\x02" +
		"\x02\u0505\u0507\x07\u0177\x02\x02\u0506\u0508\x05\u01BC\xDF\x02\u0507" +
		"\u0506\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508\u050A\x03\x02" +
		"\x02\x02\u0509\u050B\x07\u0337\x02\x02\u050A\u0509\x03\x02\x02\x02\u050A" +
		"\u050B\x03\x02\x02\x02\u050B\u050E\x03\x02\x02\x02\u050C\u050D\t\x04\x02" +
		"\x02\u050D\u050F\x05\u01C0\xE1\x02\u050E\u050C\x03\x02\x02\x02\u050E\u050F" +
		"\x03\x02\x02\x02\u050F\u0511\x03\x02\x02\x02\u0510\u0512\x05\u02CC\u0167" +
		"\x02\u0511\u0510\x03\x02\x02\x02\u0511\u0512\x03\x02\x02\x02\u0512\u0514" +
		"\x03\x02\x02\x02\u0513\u0515\x07\u0338\x02\x02\u0514\u0513\x03\x02\x02" +
		"\x02\u0514\u0515\x03\x02\x02\x02\u0515)\x03\x02\x02\x02\u0516\u0517\x07" +
		"\u017A\x02\x02\u0517\u0521\x05\u02E2\u0172\x02\u0518\u0522\x05\b\x05\x02" +
		"\u0519\u051B\x07!\x02\x02\u051A\u051C\x07\u0338\x02\x02\u051B\u051A\x03" +
		"\x02\x02\x02\u051B\u051C\x03\x02\x02\x02\u051C\u0522\x03\x02\x02\x02\u051D" +
		"\u051F\x07B\x02\x02\u051E\u0520\x07\u0338\x02\x02\u051F\u051E\x03\x02" +
		"\x02\x02\u051F\u0520\x03\x02\x02\x02\u0520\u0522\x03\x02\x02\x02\u0521" +
		"\u0518\x03\x02\x02\x02\u0521\u0519\x03\x02\x02\x02\u0521\u051D\x03\x02" +
		"\x02\x02\u0522+\x03\x02\x02\x02\u0523\u0526\x07\u0101\x02\x02\u0524\u0527" +
		"\x05\u02CC\u0167\x02\u0525\u0527\x07\u0317\x02\x02\u0526\u0524\x03\x02" +
		"\x02\x02\u0526\u0525\x03\x02\x02\x02\u0527\u052C\x03\x02\x02\x02\u0528" +
		"\u0529\x07\u0337\x02\x02\u0529\u052B\x07\u031A\x02\x02\u052A\u0528\x03" +
		"\x02\x02\x02\u052B\u052E\x03\x02\x02\x02\u052C\u052A\x03\x02\x02\x02\u052C" +
		"\u052D\x03\x02\x02\x02\u052D\u0530\x03\x02\x02\x02\u052E\u052C\x03\x02" +
		"\x02\x02\u052F\u0531\x07\u0338\x02\x02\u0530\u052F\x03\x02\x02\x02\u0530" +
		"\u0531\x03\x02\x02\x02\u0531-\x03\x02\x02\x02\u0532\u0533\x07\u0108\x02" +
		"\x02\u0533\u0534\x07\u0335\x02\x02\u0534\u0535\t\x05\x02\x02\u0535\u0536" +
		"\x07\u0337\x02\x02\u0536\u0537\x05\u02CA\u0166\x02\u0537\u0538\x07\u0337" +
		"\x02\x02\u0538\u053D\x05\u02CA\u0166\x02\u0539\u053A\x07\u0337\x02\x02" +
		"\u053A\u053C\x05\u02CA\u0166\x02\u053B\u0539\x03\x02\x02\x02\u053C\u053F" +
		"\x03\x02\x02\x02\u053D\u053B\x03\x02\x02\x02\u053D\u053E\x03\x02\x02\x02" +
		"\u053E\u0540\x03\x02\x02\x02\u053F\u053D\x03\x02\x02\x02\u0540\u0543\x07" +
		"\u0336\x02\x02\u0541\u0542\x07\u017C\x02\x02\u0542\u0544\t\x06\x02\x02" +
		"\u0543\u0541\x03\x02\x02\x02\u0543\u0544\x03\x02\x02\x02\u0544\u0546\x03" +
		"\x02\x02\x02\u0545\u0547\x07\u0338\x02\x02\u0546\u0545\x03\x02\x02\x02" +
		"\u0546\u0547\x03\x02\x02\x02\u0547\u0553\x03\x02\x02\x02\u0548\u0549\x07" +
		"\u0108\x02\x02\u0549\u054A\x07\u031B\x02\x02\u054A\u054F\t\x07\x02\x02" +
		"\u054B\u054C\x07\u0337\x02\x02\u054C\u054E\t\x05\x02\x02\u054D\u054B\x03" +
		"\x02\x02\x02\u054E\u0551\x03\x02\x02\x02\u054F\u054D\x03\x02\x02\x02\u054F" +
		"\u0550\x03\x02\x02\x02\u0550\u0553\x03\x02\x02\x02\u0551\u054F\x03\x02" +
		"\x02\x02\u0552\u0532\x03\x02\x02\x02\u0552\u0548\x03\x02\x02\x02\u0553" +
		"/\x03\x02\x02\x02\u0554\u0555\x07\u0338\x02\x02\u05551\x03\x02\x02\x02" +
		"\u0556\u0564\x05\u0262\u0132\x02\u0557\u0564\x05\u0264\u0133\x02\u0558" +
		"\u0564\x05\u01AA\xD6\x02\u0559\u0564\x05\u01A8\xD5\x02\u055A\u0564\x05" +
		"\u019E\xD0\x02\u055B\u0564\x05\u01A2\xD2\x02\u055C\u0564\x05\u0270\u0139" +
		"\x02\u055D\u0564\x05\u01AC\xD7\x02\u055E\u0564\x05\u0278\u013D\x02\u055F" +
		"\u0564\x05\u0294\u014B\x02\u0560\u0564\x05\u0296\u014C\x02\u0561\u0564" +
		"\x05\u029A\u014E\x02\u0562\u0564\x05\u029C\u014F\x02\u0563\u0556\x03\x02" +
		"\x02\x02\u0563\u0557\x03\x02\x02\x02\u0563\u0558\x03\x02\x02\x02\u0563" +
		"\u0559\x03\x02\x02\x02\u0563\u055A\x03\x02\x02\x02\u0563\u055B\x03\x02" +
		"\x02\x02\u0563\u055C\x03\x02\x02\x02\u0563\u055D\x03\x02\x02\x02\u0563" +
		"\u055E\x03\x02\x02\x02\u0563\u055F\x03\x02\x02\x02\u0563\u0560\x03\x02" +
		"\x02\x02\u0563\u0561\x03\x02\x02\x02\u0563\u0562\x03\x02\x02\x02\u0564" +
		"3\x03\x02\x02\x02\u0565\u0566\x07\n\x02\x02\u0566\u0567\x07\x0F\x02\x02" +
		"\u0567\u0568\x07\u0121\x02\x02\u0568\u0569\x05\u03B6\u01DC\x02\u0569\u0570" +
		"\x07\u017C\x02\x02\u056A\u056C\x07\u0337\x02\x02\u056B\u056A\x03\x02\x02" +
		"\x02\u056B\u056C\x03\x02\x02\x02\u056C\u056D\x03\x02\x02\x02\u056D\u056E" +
		"\x07\u025E\x02\x02\u056E\u056F\x07\u0323\x02\x02\u056F\u0571\x05\u03B6" +
		"\u01DC\x02\u0570\u056B\x03\x02\x02\x02\u0570\u0571\x03\x02\x02\x02\u0571" +
		"\u0578\x03\x02\x02\x02\u0572\u0574\x07\u0337\x02\x02\u0573\u0572\x03\x02" +
		"\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574\u0575\x03\x02\x02\x02\u0575" +
		"\u0576\x07\xF4\x02\x02\u0576\u0577\x07\u0323\x02\x02\u0577\u0579\x07\u031F" +
		"\x02\x02\u0578\u0573\x03\x02\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579" +
		"\u0580\x03\x02\x02\x02\u057A\u057C\x07\u0337\x02\x02\u057B\u057A\x03\x02" +
		"\x02\x02\u057B\u057C\x03\x02\x02\x02\u057C\u057D\x03\x02\x02\x02\u057D" +
		"\u057E\x07\\\x02\x02\u057E\u057F\x07\u0323\x02\x02\u057F\u0581\x05\u03B6" +
		"\u01DC\x02\u0580\u057B\x03\x02\x02\x02\u0580\u0581\x03\x02\x02\x02\u0581" +
		"5\x03\x02\x02\x02\u0582\u0583\x07I\x02\x02\u0583\u0584\x07\x0F\x02\x02" +
		"\u0584\u0585\x07\u0121\x02\x02\u0585\u0586\x05\u03B6\u01DC\x02\u0586\u058D" +
		"\x07\u017C\x02\x02\u0587\u0589\x07\u0337\x02\x02\u0588\u0587\x03\x02\x02" +
		"\x02\u0588\u0589\x03\x02\x02\x02\u0589\u058A\x03\x02\x02\x02\u058A\u058B" +
		"\x07\xF4\x02\x02\u058B\u058C\x07\u0323\x02\x02\u058C\u058E\x07\u031F\x02" +
		"\x02\u058D\u0588\x03\x02\x02\x02\u058D\u058E\x03\x02\x02\x02\u058E\u0595" +
		"\x03\x02\x02\x02\u058F\u0591\x07\u0337\x02\x02\u0590\u058F\x03\x02\x02" +
		"\x02\u0590\u0591\x03\x02\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592\u0593" +
		"\x07\\\x02\x02\u0593\u0594\x07\u0323\x02\x02\u0594\u0596\x05\u03B6\u01DC" +
		"\x02\u0595\u0590\x03\x02\x02\x02\u0595\u0596\x03\x02\x02\x02\u05967\x03" +
		"\x02\x02\x02\u0597\u0598\x07h\x02\x02\u0598\u059B\x07\u018C\x02\x02\u0599" +
		"\u059A\x07\x9A\x02\x02\u059A\u059C\x07x\x02\x02\u059B\u0599\x03\x02\x02" +
		"\x02\u059B\u059C\x03\x02\x02\x02\u059C\u05A0\x03\x02\x02\x02\u059D\u059E" +
		"\x05\u03B6\u01DC\x02\u059E\u059F\x07\u0330\x02\x02\u059F\u05A1\x03\x02" +
		"\x02\x02\u05A0\u059D\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1" +
		"\u05A2\x03\x02\x02\x02\u05A2\u05A3\x05\u03B6\u01DC\x02\u05A39\x03\x02" +
		"\x02\x02\u05A4\u05A5\x07h\x02\x02\u05A5\u05A6\x07\x0F\x02\x02\u05A6\u05A7" +
		"\x07\u0121\x02\x02\u05A7\u05A8\x05\u03B6\u01DC\x02\u05A8;\x03\x02\x02" +
		"\x02\u05A9\u05AA\x05> \x02\u05AA\u05AB\x05\u03B6\u01DC\x02\u05AB\u05AC" +
		"\x05@!\x02\u05AC=\x03\x02\x02\x02\u05AD\u05AE\x07\n\x02\x02\u05AE\u05AF" +
		"\x07\u0198\x02\x02\u05AF?\x03\x02\x02\x02\u05B0\u05B2\x05B\"\x02\u05B1" +
		"\u05B0\x03\x02\x02\x02\u05B1\u05B2\x03\x02\x02\x02\u05B2\u05B4\x03\x02" +
		"\x02\x02\u05B3\u05B5\x05X-\x02\u05B4\u05B3\x03\x02\x02\x02\u05B4\u05B5" +
		"\x03\x02\x02\x02\u05B5\u05B7\x03\x02\x02\x02\u05B6\u05B8\x05F$\x02\u05B7" +
		"\u05B6\x03\x02\x02\x02\u05B7\u05B8\x03\x02\x02\x02\u05B8\u05BA\x03\x02" +
		"\x02\x02\u05B9\u05BB\x05L\'\x02\u05BA\u05B9\x03\x02\x02\x02\u05BA\u05BB" +
		"\x03\x02\x02\x02\u05BBA\x03\x02\x02\x02\u05BC\u05BF\x05D#\x02\u05BD\u05C0" +
		"\x05\\/\x02\u05BE\u05C0\x05T+\x02\u05BF\u05BD\x03\x02\x02\x02\u05BF\u05BE" +
		"\x03\x02\x02\x02\u05C0C\x03\x02\x02\x02\u05C1\u05C2\x07\x8C\x02\x02\u05C2" +
		"E\x03\x02\x02\x02\u05C3\u05C4\x05J&\x02\u05C4\u05C5\x05H%\x02\u05C5G\x03" +
		"\x02\x02\x02\u05C6\u05C9\x07\x06\x02\x02\u05C7\u05C9\x05n8\x02\u05C8\u05C6" +
		"\x03\x02\x02\x02\u05C8\u05C7\x03\x02\x02\x02\u05C9I\x03\x02\x02\x02\u05CA" +
		"\u05CB\x07h\x02\x02\u05CBK\x03\x02\x02\x02\u05CC\u05CD\x05N(\x02\u05CD" +
		"\u05CE\x05P)\x02\u05CEM\x03\x02\x02\x02\u05CF\u05D0\x07\x04\x02\x02\u05D0" +
		"\u05D1\x07\x82\x02\x02\u05D1\u05D2\x07\x8C\x02\x02\u05D2O\x03\x02\x02" +
		"\x02\u05D3\u05D7\x05R*\x02\u05D4\u05D5\x05V,\x02\u05D5\u05D6\x05\u03B6" +
		"\u01DC\x02\u05D6\u05D8\x03\x02\x02\x02\u05D7\u05D4\x03\x02\x02\x02\u05D7" +
		"\u05D8\x03\x02\x02\x02\u05D8Q\x03\x02\x02\x02\u05D9\u05DA\x07\u031F\x02" +
		"\x02\u05DAS\x03\x02\x02\x02\u05DB\u05DC\x05V,\x02\u05DC\u05DD\x05\u03B6" +
		"\u01DC\x02\u05DDU\x03\x02\x02\x02\u05DE\u05DF\x07\x10\x02\x02\u05DFW\x03" +
		"\x02\x02\x02\u05E0\u05E1\x05Z.\x02\u05E1\u05E2\x05^0\x02\u05E2Y\x03\x02" +
		"\x02\x02\u05E3\u05E4\x07\u017C\x02\x02\u05E4[\x03\x02\x02\x02\u05E5\u05E9" +
		"\x05`1\x02\u05E6\u05E9\x05j6\x02\u05E7\u05E9\x07\u031F\x02\x02\u05E8\u05E5" +
		"\x03\x02\x02\x02\u05E8\u05E6\x03\x02\x02\x02\u05E8\u05E7\x03\x02\x02\x02" +
		"\u05E9]\x03\x02\x02\x02\u05EA\u05EB\b0\x01\x02\u05EB\u05EC\x07\xF6\x02" +
		"\x02\u05EC\u05ED\x07\u0323\x02\x02\u05ED\u05F4\t\b\x02\x02\u05EE\u05EF" +
		"\x07\u0176\x02\x02\u05EF\u05F0\x07\u0323\x02\x02\u05F0\u05F4\t\t\x02\x02" +
		"\u05F1\u05F2\x07\u0166\x02\x02\u05F2\u05F4\x07R\x02\x02\u05F3\u05EA\x03" +
		"\x02\x02\x02\u05F3\u05EE\x03\x02\x02\x02\u05F3\u05F1\x03\x02\x02\x02\u05F4" +
		"\u05F9\x03\x02\x02\x02\u05F5\u05F6\f\x03\x02\x02\u05F6\u05F8\x07\u0337" +
		"\x02\x02\u05F7\u05F5\x03\x02\x02\x02\u05F8\u05FB\x03\x02\x02\x02\u05F9" +
		"\u05F7\x03\x02\x02\x02\u05F9\u05FA\x03\x02\x02\x02\u05FA_\x03\x02\x02" +
		"\x02\u05FB\u05F9\x03\x02\x02\x02\u05FC\u05FD\x05d3\x02\u05FD\u05FE\x05" +
		"b2\x02\u05FE\u05FF\x05f4\x02\u05FFa\x03\x02\x02\x02\u0600\u0601\x05\u03B6" +
		"\u01DC\x02\u0601c\x03\x02\x02\x02\u0602\u0603\x07f\x02\x02\u0603e\x03" +
		"\x02\x02\x02\u0604\u0605\x05h5\x02\u0605\u0606\x05f4\x02\u0606\u0609\x03" +
		"\x02\x02\x02\u0607\u0609\x05\u03B6\u01DC\x02\u0608\u0604\x03\x02\x02\x02" +
		"\u0608\u0607\x03\x02\x02\x02\u0609g\x03\x02\x02\x02\u060A\u060B\x07\x19" +
		"\x02\x02\u060Bi\x03\x02\x02\x02\u060C\u060D\x05l7\x02\u060D\u060E\x05" +
		"f4\x02\u060Ek\x03\x02\x02\x02\u060F\u0610\x07\u01E5\x02\x02\u0610m\x03" +
		"\x02\x02\x02\u0611\u0612\x05p9\x02\u0612\u0613\x05j6\x02\u0613\u0614\x07" +
		"\u0318\x02\x02\u0614\u0615\x07\u0337\x02\x02\u0615\u0618\x03\x02\x02\x02" +
		"\u0616\u0618\x05j6\x02\u0617\u0611\x03\x02\x02\x02\u0617\u0616\x03\x02" +
		"\x02\x02\u0618o\x03\x02\x02\x02\u0619\u061A\x07\u0318\x02\x02\u061Aq\x03" +
		"\x02\x02\x02\u061B\u061C\x07I\x02\x02\u061C\u061D\x07\u0198\x02\x02\u061D" +
		"\u0620\x05\u03B6\u01DC\x02\u061E\u061F\x07\x14\x02\x02\u061F\u0621\x05" +
		"\u03B6\u01DC\x02\u0620\u061E\x03\x02\x02\x02\u0620\u0621\x03\x02\x02\x02" +
		"\u0621\u0622\x03\x02\x02\x02\u0622\u0627\x07\x8C\x02\x02\u0623\u0625\x07" +
		"\u0337\x02\x02\u0624\u0623\x03\x02\x02\x02\u0624\u0625\x03\x02\x02\x02" +
		"\u0625\u0626\x03\x02\x02\x02\u0626\u0628\t\n\x02\x02\u0627\u0624\x03\x02" +
		"\x02\x02\u0628\u0629\x03\x02\x02\x02\u0629\u0627\x03\x02\x02\x02\u0629" +
		"\u062A\x03\x02\x02\x02\u062A\u062F\x03\x02\x02\x02\u062B\u062C\x07\u017C" +
		"\x02\x02\u062C\u062D\x07\xF6\x02\x02\u062D\u062E\x07\u0323\x02\x02\u062E" +
		"\u0630\t\b\x02\x02\u062F\u062B\x03\x02\x02\x02\u062F\u0630\x03\x02\x02" +
		"\x02\u0630s\x03\x02\x02\x02\u0631\u0632\x07h\x02\x02\u0632\u0635\x07\u0198" +
		"\x02\x02\u0633\u0634\x07\x9A\x02\x02\u0634\u0636\x07x\x02\x02\u0635\u0633" +
		"\x03\x02\x02\x02\u0635\u0636\x03\x02\x02\x02\u0636\u063B\x03\x02\x02\x02" +
		"\u0637\u0639\x07\u0337\x02\x02\u0638\u0637\x03\x02\x02\x02\u0638\u0639" +
		"\x03\x02\x02\x02\u0639\u063A\x03\x02\x02\x02\u063A\u063C\x05\u03B6\u01DC" +
		"\x02\u063B\u0638\x03\x02\x02\x02\u063C\u063D\x03\x02\x02\x02\u063D\u063B" +
		"\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u0642\x03\x02\x02\x02" +
		"\u063F\u0640\x07\u017C\x02\x02\u0640\u0641\x07\u0264\x02\x02\u0641\u0643" +
		"\x07\u01DB\x02\x02\u0642\u063F\x03\x02\x02\x02\u0642\u0643\x03\x02\x02" +
		"\x02\u0643u\x03\x02\x02\x02\u0644\u0645\x05x=\x02\u0645\u064A\x05\u03B6" +
		"\u01DC\x02\u0646\u064B\x05z>\x02\u0647\u0648\x07\u02A9\x02\x02\u0648\u0649" +
		"\x07\u028C\x02\x02\u0649\u064B\x07\xAC\x02\x02\u064A\u0646\x03\x02\x02" +
		"\x02\u064A\u0647\x03\x02\x02\x02\u064Bw\x03\x02\x02\x02\u064C\u064D\x07" +
		"\n\x02\x02\u064D\u064E\x07\x12\x02\x02\u064E\u064F\x07\xAC\x02\x02\u064F" +
		"y\x03\x02\x02\x02\u0650\u0651\x05|?\x02\u0651\u0654\x05~@\x02\u0652\u0653" +
		"\x07\u0337\x02\x02\u0653\u0655\x05~@\x02\u0654\u0652\x03\x02\x02\x02\u0654" +
		"\u0655\x03\x02\x02\x02\u0655\u0656\x03\x02\x02\x02\u0656\u0657\x07\u0336" +
		"\x02\x02\u0657{\x03\x02\x02\x02\u0658\u0659\x07\u017C\x02\x02\u0659\u065A" +
		"\x07\u028C\x02\x02\u065A\u065B\x07\xAC\x02\x02\u065B\u065C\x07\u0335\x02" +
		"\x02\u065C}\x03\x02\x02\x02\u065D\u065E\x07\u01D3\x02\x02\u065E\u065F" +
		"\x07&\x02\x02\u065F\u0660\x07\xF4\x02\x02\u0660\u0661\x07\u0323\x02\x02" +
		"\u0661\u0668\x07\u031F\x02\x02\u0662\u0663\x07\u01EE\x02\x02\u0663\u0664" +
		"\x07&\x02\x02\u0664\u0665\x07\xF4\x02\x02\u0665\u0666\x07\u0323\x02\x02" +
		"\u0666\u0668\x07\u031F\x02\x02\u0667\u065D\x03\x02\x02\x02\u0667\u0662" +
		"\x03\x02\x02\x02\u0668\x7F\x03\x02\x02\x02\u0669\u066A\x07I\x02\x02\u066A" +
		"\u066B\x07\x12\x02\x02\u066B\u066C\x07\xAC\x02\x02\u066C\u066F\x05\u03B6" +
		"\u01DC\x02\u066D\u066E\x07\x14\x02\x02\u066E\u0670\x05\u03B6\u01DC\x02" +
		"\u066F\u066D\x03\x02\x02\x02\u066F\u0670\x03\x02\x02\x02\u0670\u067E\x03" +
		"\x02\x02\x02\u0671\u067C\x07\x8C\x02\x02\u0672\u0673\x07\x82\x02\x02\u0673" +
		"\u0674\x07\u0323\x02\x02\u0674\u067D\x07\u031F\x02\x02\u0675\u0676\x07" +
		"v\x02\x02\u0676\u0677\x07\u0323\x02\x02\u0677\u067D\x07\u031F\x02\x02" +
		"\u0678\u0679\x07\u0198\x02\x02\u0679\u067D\x05\u03B6\u01DC\x02\u067A\u067B" +
		"\x07\u0291\x02\x02\u067B\u067D\x05\u03B6\u01DC\x02\u067C\u0672\x03\x02" +
		"\x02\x02\u067C\u0675\x03\x02\x02\x02\u067C\u0678\x03\x02\x02\x02\u067C" +
		"\u067A\x03\x02\x02\x02\u067D\u067F\x03\x02\x02\x02\u067E\u0671\x03\x02" +
		"\x02\x02\u067E\u067F\x03\x02\x02\x02\u067F\u068C\x03\x02\x02\x02\u0680" +
		"\u068A\x07\u017C\x02\x02\u0681\u0682\x07\u018D\x02\x02\u0682\u0683\x07" +
		"\u0323\x02\x02\u0683\u068B\t\v\x02\x02\u0684\u0685\x07\u0292\x02\x02\u0685" +
		"\u0686\x07\u0323\x02\x02\u0686\u068B\x07\u031F\x02\x02\u0687\u0688\x07" +
		"\u01C6\x02\x02\u0688\u0689\x07\u0323\x02\x02\u0689\u068B\t\f\x02\x02\u068A" +
		"\u0681\x03\x02\x02\x02\u068A\u0684\x03\x02\x02\x02\u068A\u0687\x03\x02" +
		"\x02\x02\u068B\u068D\x03\x02\x02\x02\u068C\u0680\x03\x02\x02\x02\u068C" +
		"\u068D\x03\x02\x02\x02\u068D\u0693\x03\x02\x02\x02\u068E\u068F\x07\u01EE" +
		"\x02\x02\u068F\u0690\x07&\x02\x02\u0690\u0691\x07\xF4\x02\x02\u0691\u0692" +
		"\x07\u0323\x02\x02\u0692\u0694\x07\u031F\x02\x02\u0693\u068E\x03\x02\x02" +
		"\x02\u0693\u0694\x03\x02\x02\x02\u0694\x81\x03\x02\x02\x02\u0695\u0696" +
		"\x07h\x02\x02\u0696\u0697\x07\x12\x02\x02\u0697\u0698\x07\xAC\x02\x02" +
		"\u0698\u069C\x05\u03B6\u01DC\x02\u0699\u069A\x07\u02A9\x02\x02\u069A\u069B" +
		"\x07\u0291\x02\x02\u069B\u069D\x07\xAC\x02\x02\u069C\u0699\x03\x02\x02" +
		"\x02\u069C\u069D\x03\x02\x02\x02\u069D\x83\x03\x02\x02\x02\u069E\u06A2" +
		"\x05\x8CG\x02\u069F\u06A0\x05\x94K\x02\u06A0\u06A1\x05\x8AF\x02\u06A1" +
		"\u06A3\x03\x02\x02\x02\u06A2\u069F\x03\x02\x02\x02\u06A2\u06A3\x03\x02" +
		"\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4\u06A5\x05\u037A\u01BE\x02\u06A5" +
		"\u06A6\x05\x88E\x02\u06A6\u06A7\x05\x86D\x02\u06A7\x85\x03\x02\x02\x02" +
		"\u06A8\u06AC\x05\u03B6\u01DC\x02\u06A9\u06AA\x07\u012E\x02\x02\u06AA\u06AC" +
		"\x07\u027D\x02\x02\u06AB\u06A8\x03\x02\x02\x02\u06AB\u06A9\x03\x02\x02" +
		"\x02\u06AC\x87\x03\x02\x02\x02\u06AD\u06AE\x07\u015D\x02\x02\u06AE\x89" +
		"\x03\x02\x02\x02\u06AF\u06B0\x07\u0339\x02\x02\u06B0\u06B1\x07\u0339\x02" +
		"\x02\u06B1\x8B\x03\x02\x02\x02\u06B2\u06B3\x07\n\x02\x02\u06B3\u06B4\x07" +
		"\x14\x02\x02\u06B4\u06B5\x07\xE5\x02\x02\u06B5\x8D\x03\x02\x02\x02\u06B6" +
		"\u06BA\x05\x8CG\x02\u06B7\u06B8\x05\x96L\x02\u06B8\u06B9\x05\x8AF\x02" +
		"\u06B9\u06BB\x03\x02\x02\x02\u06BA\u06B7\x03\x02\x02\x02\u06BA\u06BB\x03" +
		"\x02\x02\x02\u06BB\u06BC\x03\x02\x02\x02\u06BC\u06BD\x05\u037A\u01BE\x02" +
		"\u06BD\u06BE\x05\x88E\x02\u06BE\u06BF\x05\x86D\x02\u06BF\x8F\x03\x02\x02" +
		"\x02\u06C0\u06C4\x05\x8CG\x02\u06C1\u06C2\x05\x98M\x02\u06C2\u06C3\x05" +
		"\x8AF\x02\u06C3\u06C5\x03\x02\x02\x02\u06C4\u06C1\x03\x02\x02\x02\u06C4" +
		"\u06C5\x03\x02\x02\x02\u06C5\u06C6\x03\x02\x02\x02\u06C6\u06C7\x05\u037C" +
		"\u01BF\x02\u06C7\u06C8\x05\x88E\x02\u06C8\u06C9\x05\x86D\x02\u06C9\x91" +
		"\x03\x02\x02\x02\u06CA\u06CE\x05\x8CG\x02\u06CB\u06CC\x05\x9AN\x02\u06CC" +
		"\u06CD\x05\x8AF\x02\u06CD\u06CF\x03\x02\x02\x02\u06CE\u06CB\x03\x02\x02" +
		"\x02\u06CE\u06CF\x03\x02\x02\x02\u06CF\u06D0\x03\x02\x02\x02\u06D0\u06D1" +
		"\x05\u037E\u01C0\x02\u06D1\u06D2\x05\x88E\x02\u06D2\u06D3\x05\x86D\x02" +
		"\u06D3\x93\x03\x02\x02\x02\u06D4\u06F7\x07\u0272\x02\x02\u06D5\u06F7\x07" +
		"\u0198\x02\x02\u06D6\u06D7\x07\x12\x02\x02\u06D7\u06F7\x07\xAC\x02\x02" +
		"\u06D8\u06D9\x07\u01A2\x02\x02\u06D9\u06F7\x07\x93\x02\x02\u06DA\u06F7" +
		"\x07+\x02\x02\u06DB\u06F7\x07D\x02\x02\u06DC\u06F7\x07\u02FB\x02\x02\u06DD" +
		"\u06F7\x07U\x02\x02\u06DE\u06F7\x07n\x02\x02\u06DF\u06E0\x07\u020B\x02" +
		"\x02\u06E0\u06F7\x07\u01B1\x02\x02\u06E1\u06E2\x07\u020B\x02\x02\u06E2" +
		"\u06F7\x07\u02E1\x02\x02\u06E3\u06E4\x07\u0251\x02\x02\u06E4\u06F7\x07" +
		"\u02FB\x02\x02\u06E5\u06E6\x07\u02A7\x02\x02\u06E6\u06E7\x07\u0138\x02" +
		"\x02\u06E7\u06F7\x07\u01A9\x02\x02\u06E8\u06F7\x07\u0121\x02\x02\u06E9" +
		"\u06F7\x07\u02B8\x02\x02\u06EA\u06F7\x07\u012E\x02\x02\u06EB\u06EC\x07" +
		"\u02C2\x02\x02\u06EC\u06ED\x07\u0290\x02\x02\u06ED\u06F7\x07\u0234\x02" +
		"\x02\u06EE\u06EF\x07\u0137\x02\x02\u06EF\u06F7\x07\u0121\x02\x02\u06F0" +
		"\u06F7\x07\u0138\x02\x02\u06F1\u06F2\x07\u02E6\x02\x02\u06F2\u06F7\x07" +
		"\xAC\x02\x02\u06F3\u06F4\x07\u030E\x02\x02\u06F4\u06F5\x07\u012E\x02\x02" +
		"\u06F5\u06F7\x07\u01B8\x02\x02\u06F6\u06D4\x03\x02\x02\x02\u06F6\u06D5" +
		"\x03\x02\x02\x02\u06F6\u06D6\x03\x02\x02\x02\u06F6\u06D8\x03\x02\x02\x02" +
		"\u06F6\u06DA\x03\x02\x02\x02\u06F6\u06DB\x03\x02\x02\x02\u06F6\u06DC\x03" +
		"\x02\x02\x02\u06F6\u06DD\x03\x02\x02\x02\u06F6\u06DE\x03\x02\x02\x02\u06F6" +
		"\u06DF\x03\x02\x02\x02\u06F6\u06E1\x03\x02\x02\x02\u06F6\u06E3\x03\x02" +
		"\x02\x02\u06F6\u06E5\x03\x02\x02\x02\u06F6\u06E8\x03\x02\x02\x02\u06F6" +
		"\u06E9\x03\x02\x02\x02\u06F6\u06EA\x03\x02\x02\x02\u06F6\u06EB\x03\x02" +
		"\x02\x02\u06F6\u06EE\x03\x02\x02\x02\u06F6\u06F0\x03\x02\x02\x02\u06F6" +
		"\u06F1\x03\x02\x02\x02\u06F6\u06F3\x03\x02\x02\x02\u06F7\x95\x03\x02\x02" +
		"\x02\u06F8\u070E\x07\u0272\x02\x02\u06F9\u070E\x07\u0198\x02\x02\u06FA" +
		"\u06FB\x07\x12\x02\x02\u06FB\u070E\x07\xAC\x02\x02\u06FC\u070E\x07+\x02" +
		"\x02\u06FD\u070E\x07\u02FB\x02\x02\u06FE\u070E\x07U\x02\x02\u06FF\u0700" +
		"\x07\u020B\x02\x02\u0700\u070E\x07\u01B1\x02\x02\u0701\u0702\x07\u020B" +
		"\x02\x02\u0702\u070E\x07\u02E1\x02\x02\u0703\u070E\x07\u0121\x02\x02\u0704" +
		"\u070E\x07\u012E\x02\x02\u0705\u0706\x07\u02C2\x02\x02\u0706\u0707\x07" +
		"\u0290\x02\x02\u0707\u070E\x07\u0234\x02\x02\u0708\u0709\x07\u02E6\x02" +
		"\x02\u0709\u070E\x07\xAC\x02\x02\u070A\u070B\x07\u030E\x02\x02\u070B\u070C" +
		"\x07\u012E\x02\x02\u070C\u070E\x07\u01B8\x02\x02\u070D\u06F8\x03\x02\x02" +
		"\x02\u070D\u06F9\x03\x02\x02\x02\u070D\u06FA\x03\x02\x02\x02\u070D\u06FC" +
		"\x03\x02\x02\x02\u070D\u06FD\x03\x02\x02\x02\u070D\u06FE\x03\x02\x02\x02" +
		"\u070D\u06FF\x03\x02\x02\x02\u070D\u0701\x03\x02\x02\x02\u070D\u0703\x03" +
		"\x02\x02\x02\u070D\u0704\x03\x02\x02\x02\u070D\u0705\x03\x02\x02\x02\u070D" +
		"\u0708\x03\x02\x02\x02\u070D\u070A\x03\x02\x02\x02\u070E\x97\x03\x02\x02" +
		"\x02\u070F\u0710\t\r\x02\x02\u0710\x99\x03\x02\x02\x02\u0711\u0712\t\x0E" +
		"\x02\x02\u0712\x9B\x03\x02\x02\x02\u0713\u0714\x07h\x02\x02\u0714\u0715" +
		"\x07\u01A2\x02\x02\u0715\u0716\x07\x93\x02\x02\u0716\u0717\x05\u03B6\u01DC" +
		"\x02\u0717\x9D\x03\x02\x02\x02\u0718\u0719\x05\xA0Q\x02\u0719\u071A\x05" +
		"\xA2R\x02\u071A\x9F\x03\x02\x02\x02\u071B\u071C\x07\n\x02\x02\u071C\u071D" +
		"\x07\u01A2\x02\x02\u071D\u071E\x07\x93\x02\x02\u071E\u071F\x05\u03B6\u01DC" +
		"\x02\u071F\xA1\x03\x02\x02\x02\u0720\u0721\x07\u013D\x02\x02\u0721\u0731" +
		"\x07\u0335\x02\x02\u0722\u0723\x07\x16\x02\x02\u0723\u0724\x07\u0323\x02" +
		"\x02\u0724\u0732\t\x0F\x02\x02\u0725\u0726\x07\u01FA\x02\x02\u0726\u0727" +
		"\x07\u0323\x02\x02\u0727\u0732\x07\u031B\x02\x02\u0728\u0729\x07\u0216" +
		"\x02\x02\u0729\u072A\x07\u0323\x02\x02\u072A\u0732\x07\u031B\x02\x02\u072B" +
		"\u072C\x07\u01D2\x02\x02\u072C\u072D\x07\u0323\x02\x02\u072D\u0732\t\t" +
		"\x02\x02\u072E\u072F\x07\u02B0\x02\x02\u072F\u0730\x07\u0323\x02\x02\u0730" +
		"\u0732\x07\u031B\x02\x02\u0731\u0722\x03\x02";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\u0731\u0725\x03\x02\x02\x02\u0731\u0728\x03\x02\x02\x02\u0731" +
		"\u072B\x03\x02\x02\x02\u0731\u072E\x03\x02\x02\x02\u0732\u0733\x03\x02" +
		"\x02\x02\u0733\u087F\x07\u0336\x02\x02\u0734\u0735\x07\x04\x02\x02\u0735" +
		"\u0736\x07U\x02\x02\u0736\u087F\x05\u03B6\u01DC\x02\u0737\u0738\x07\u02A9" +
		"\x02\x02\u0738\u0739\x07U\x02\x02\u0739\u087F\x05\u03B6\u01DC\x02\u073A" +
		"\u073B\x07\x04\x02\x02\u073B\u073C\x07\u02AC\x02\x02\u073C\u073D\x07\xE5" +
		"\x02\x02\u073D\u073E\x07\u031F\x02\x02\u073E\u073F\x07\u017C\x02\x02\u073F" +
		"\u0743\x07\u0335\x02\x02\u0740\u0741\x07\u01EF\x02\x02\u0741\u0742\x07" +
		"\u0323\x02\x02\u0742\u0744\x07\u031F\x02\x02\u0743\u0740\x03\x02\x02\x02" +
		"\u0743\u0744\x03\x02\x02\x02\u0744\u074B\x03\x02\x02\x02\u0745\u0747\x07" +
		"\u0337\x02\x02\u0746\u0745\x03\x02\x02\x02\u0746\u0747\x03\x02\x02\x02" +
		"\u0747\u0748\x03\x02\x02\x02\u0748\u0749\x07\x18\x02\x02\u0749\u074A\x07" +
		"\u0323\x02\x02\u074A\u074C\t\x10\x02\x02\u074B\u0746\x03\x02\x02\x02\u074B" +
		"\u074C\x03\x02\x02\x02\u074C\u0753\x03\x02\x02\x02\u074D\u074F\x07\u0337" +
		"\x02\x02\u074E\u074D\x03\x02\x02\x02\u074E\u074F\x03\x02\x02\x02\u074F" +
		"\u0750\x03\x02\x02\x02\u0750\u0751\x07\u01F8\x02\x02\u0751\u0752\x07\u0323" +
		"\x02\x02\u0752\u0754\t\x11\x02\x02\u0753\u074E\x03\x02\x02\x02\u0753\u0754" +
		"\x03\x02\x02\x02\u0754\u075B\x03\x02\x02\x02\u0755\u0757\x07\u0337\x02" +
		"\x02\u0756\u0755\x03\x02\x02\x02\u0756\u0757\x03\x02\x02\x02\u0757\u0758" +
		"\x03\x02\x02\x02\u0758\u0759\x07\u02C9\x02\x02\u0759\u075A\x07\u0323\x02" +
		"\x02\u075A\u075C\t\x11\x02\x02\u075B\u0756\x03\x02\x02\x02\u075B\u075C" +
		"\x03\x02\x02\x02\u075C\u0763\x03\x02\x02\x02\u075D\u075F\x07\u0337\x02" +
		"\x02\u075E\u075D\x03\x02\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F\u0760" +
		"\x03\x02\x02\x02\u0760\u0761\x07\u01A4\x02\x02\u0761\u0762\x07\u0323\x02" +
		"\x02\u0762\u0764\x07\u031B\x02\x02\u0763\u075E\x03\x02\x02\x02\u0763\u0764" +
		"\x03\x02\x02\x02\u0764\u076E\x03\x02\x02\x02\u0765\u0767\x07\u0337\x02" +
		"\x02\u0766\u0765\x03\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u0768" +
		"\x03\x02\x02\x02\u0768\u0769\x07\u0288\x02\x02\u0769\u076A\x07\u0335\x02" +
		"\x02\u076A\u076B\x07\x07\x02\x02\u076B\u076C\x07\u0323\x02\x02\u076C\u076D" +
		"\t\x12\x02\x02\u076D\u076F\x07\u0336\x02\x02\u076E\u0766\x03\x02\x02\x02" +
		"\u076E\u076F\x03\x02\x02\x02\u076F\u0779\x03\x02\x02\x02\u0770\u0772\x07" +
		"\u0337\x02\x02\u0771\u0770\x03\x02\x02\x02\u0771\u0772\x03\x02\x02\x02" +
		"\u0772\u0773\x03\x02\x02\x02\u0773\u0774\x07\u02C5\x02\x02\u0774\u0775" +
		"\x07\u0335\x02\x02\u0775\u0776\x07\x07\x02\x02\u0776\u0777\x07\u0323\x02" +
		"\x02\u0777\u0778\x07\u029D\x02\x02\u0778\u077A\x07\u0336\x02\x02\u0779" +
		"\u0771\x03\x02\x02\x02\u0779\u077A\x03\x02\x02\x02\u077A\u077B\x03\x02" +
		"\x02\x02\u077B\u087F\x07\u0336\x02\x02\u077C\u077D\x07\u02C5\x02\x02\u077D" +
		"\u0786\x07\u0335\x02\x02\u077E\u077F\x07\x07\x02\x02\u077F\u0780\x07\u0323" +
		"\x02\x02\u0780\u0787\t\x13\x02\x02\u0781\u0782\x07\u029E\x02\x02\u0782" +
		"\u0783\x07\u0323\x02\x02\u0783\u0784\x07\u0335\x02\x02\u0784\u0785\x07" +
		"\u031F\x02\x02\u0785\u0787\x07\u0336\x02\x02\u0786\u077E\x03\x02\x02\x02" +
		"\u0786\u0781\x03\x02\x02\x02\u0787\u087F\x03\x02\x02\x02\u0788\u0789\x07" +
		"\u0288\x02\x02\u0789\u07A0\x07\u0335\x02\x02\u078A\u078B\x07\x07\x02\x02" +
		"\u078B\u078C\x07\u0323\x02\x02\u078C\u07A1\t\x13\x02\x02\u078D\u078E\x07" +
		"\u029E\x02\x02\u078E\u078F\x07\u0323\x02\x02\u078F\u079A\x07\u0335\x02" +
		"\x02\u0790\u0792\x07\u0337\x02\x02\u0791\u0790\x03\x02\x02\x02\u0791\u0792" +
		"\x03\x02\x02\x02\u0792\u0793\x03\x02\x02\x02\u0793\u0795\x07\u031F\x02" +
		"\x02\u0794\u0791\x03\x02\x02\x02\u0795\u0798\x03\x02\x02\x02\u0796\u0794" +
		"\x03\x02\x02\x02\u0796\u0797\x03\x02\x02\x02\u0797\u079B\x03\x02\x02\x02" +
		"\u0798\u0796\x03\x02\x02\x02\u0799\u079B\x07\xD5\x02\x02\u079A\u0796\x03" +
		"\x02\x02\x02\u079A\u0799\x03\x02\x02\x02\u079B\u079C\x03\x02\x02\x02\u079C" +
		"\u07A1\x07\u0336\x02\x02\u079D\u079E\x07\u02CF\x02\x02\u079E\u079F\x07" +
		"\u0323\x02\x02\u079F\u07A1\x07\u031B\x02\x02\u07A0\u078A\x03\x02\x02\x02" +
		"\u07A0\u078D\x03\x02\x02\x02\u07A0\u079D\x03\x02\x02\x02\u07A1\u087F\x03" +
		"\x02\x02\x02\u07A2\u07A3\x07\u025B\x02\x02\u07A3\u07A4\x07\u02AC\x02\x02" +
		"\u07A4\u07A5\x07\xE5\x02\x02\u07A5\u07DF\x07\u031F\x02\x02\u07A6\u07A7" +
		"\x07\u017C\x02\x02\u07A7\u07B7\x07\u0335\x02\x02\u07A8\u07A9\x07\u01EF" +
		"\x02\x02\u07A9\u07AA\x07\u0323\x02\x02\u07AA\u07B8\x07\u031F\x02\x02\u07AB" +
		"\u07AC\x07\x18\x02\x02\u07AC\u07AD\x07\u0323\x02\x02\u07AD\u07B8\t\x10" +
		"\x02\x02\u07AE\u07AF\x07\u01F8\x02\x02\u07AF\u07B0\x07\u0323\x02\x02\u07B0" +
		"\u07B8\t\x11\x02\x02\u07B1\u07B2\x07\u02C9\x02\x02\u07B2\u07B3\x07\u0323" +
		"\x02\x02\u07B3\u07B8\t\x11\x02\x02\u07B4\u07B5\x07\u01A4\x02\x02\u07B5" +
		"\u07B6\x07\u0323\x02\x02\u07B6\u07B8\x07\u031B\x02\x02\u07B7\u07A8\x03" +
		"\x02\x02\x02\u07B7\u07AB\x03\x02\x02\x02\u07B7\u07AE\x03\x02\x02\x02\u07B7" +
		"\u07B1\x03\x02\x02\x02\u07B7\u07B4\x03\x02\x02\x02\u07B8\u07E0\x03\x02" +
		"\x02\x02\u07B9\u07BA\x07\u02C5\x02\x02\u07BA\u07C3\x07\u0335\x02\x02\u07BB" +
		"\u07BC\x07\x07\x02\x02\u07BC\u07BD\x07\u0323\x02\x02\u07BD\u07C4\t\x13" +
		"\x02\x02\u07BE\u07BF\x07\u029E\x02\x02\u07BF\u07C0\x07\u0323\x02\x02\u07C0" +
		"\u07C1\x07\u0335\x02\x02\u07C1\u07C2\x07\u031F\x02\x02\u07C2\u07C4\x07" +
		"\u0336\x02\x02\u07C3\u07BB\x03\x02\x02\x02\u07C3\u07BE\x03\x02\x02\x02" +
		"\u07C4\u07E0\x03\x02\x02\x02\u07C5\u07C6\x07\u0288\x02\x02\u07C6\u07DD" +
		"\x07\u0335\x02\x02\u07C7\u07C8\x07\x07\x02\x02\u07C8\u07C9\x07\u0323\x02" +
		"\x02\u07C9\u07DE\t\x13\x02\x02\u07CA\u07CB\x07\u029E\x02\x02\u07CB\u07CC" +
		"\x07\u0323\x02\x02\u07CC\u07D7\x07\u0335\x02\x02\u07CD\u07CF\x07\u0337" +
		"\x02\x02\u07CE\u07CD\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF" +
		"\u07D0\x03\x02\x02\x02\u07D0\u07D2\x07\u031F\x02\x02\u07D1\u07CE\x03\x02" +
		"\x02\x02\u07D2\u07D5\x03\x02\x02\x02\u07D3\u07D1\x03\x02\x02\x02\u07D3" +
		"\u07D4\x03\x02\x02\x02\u07D4\u07D8\x03\x02\x02\x02\u07D5\u07D3\x03\x02" +
		"\x02\x02\u07D6\u07D8\x07\xD5\x02\x02\u07D7\u07D3\x03\x02\x02\x02\u07D7" +
		"\u07D6\x03\x02\x02\x02\u07D8\u07D9\x03\x02\x02\x02\u07D9\u07DE\x07\u0336" +
		"\x02\x02\u07DA\u07DB\x07\u02CF\x02\x02\u07DB\u07DC\x07\u0323\x02\x02\u07DC" +
		"\u07DE\x07\u031B\x02\x02\u07DD\u07C7\x03\x02\x02\x02\u07DD\u07CA\x03\x02" +
		"\x02\x02\u07DD\u07DA\x03\x02\x02\x02\u07DE\u07E0\x03\x02\x02\x02\u07DF" +
		"\u07A6\x03\x02\x02\x02\u07DF\u07B9\x03\x02\x02\x02\u07DF\u07C5\x03\x02" +
		"\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1\u087F\x07\u0336\x02\x02\u07E2" +
		"\u07E3\x07\u02A9\x02\x02\u07E3\u07E4\x07\u02AC\x02\x02\u07E4\u07E5\x07" +
		"\xE5\x02\x02\u07E5\u087F\x07\u031F\x02\x02\u07E6\u087F\x07\xAA\x02\x02" +
		"\u07E7\u07E8\x07\xAA\x02\x02\u07E8\u07E9\x07\u01A2\x02\x02\u07E9\u07EA" +
		"\x07\x93\x02\x02\u07EA\u0801\x07\xE5\x02\x02\u07EB\u07ED\x07\u0337\x02" +
		"\x02\u07EC\u07EB\x03\x02\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED\u07EE" +
		"\x03\x02\x02\x02\u07EE\u07EF\x07\u031F\x02\x02\u07EF\u07F0\x07\u017C\x02" +
		"\x02\u07F0\u07F1\x07\u0335\x02\x02\u07F1\u07F2\x07\u0236\x02\x02\u07F2" +
		"\u07F3\x07\u0323\x02\x02\u07F3\u07F4\x07\u031F\x02\x02\u07F4\u07F5\x07" +
		"\u0337\x02\x02\u07F5\u07F6\x07\x18\x02\x02\u07F6\u07F7\x07\u0323\x02\x02" +
		"\u07F7\u07F8\t\x10\x02\x02\u07F8\u07F9\x07\u0337\x02\x02\u07F9\u07FA\x07" +
		"\u01F8\x02\x02\u07FA\u07FB\x07\u0323\x02\x02\u07FB\u07FC\x07\u023F\x02" +
		"\x02\u07FC\u07FD\x07\u0337\x02\x02\u07FD\u07FE\x07\u02C9\x02\x02\u07FE" +
		"\u07FF\x07\u0323\x02\x02\u07FF\u0800\t\x11\x02\x02\u0800\u0802\x07\u0336" +
		"\x02\x02\u0801\u07EC\x03\x02\x02\x02\u0802\u0803\x03\x02\x02\x02\u0803" +
		"\u0801\x03\x02\x02\x02\u0803\u0804\x03\x02\x02\x02\u0804\u087F\x03\x02" +
		"\x02\x02\u0805\u0806\x07\u025B\x02\x02\u0806\u0807\x07\u01A2\x02\x02\u0807" +
		"\u0808\x07\x93\x02\x02\u0808\u082B\x07\xE5\x02\x02\u0809\u080B\x07\u0337" +
		"\x02\x02\u080A\u0809\x03\x02\x02\x02\u080A\u080B\x03\x02\x02\x02\u080B" +
		"\u080C\x03\x02\x02\x02\u080C\u080D\x07\u031F\x02\x02\u080D\u080E\x07\u017C" +
		"\x02\x02\u080E\u080F\x07\u0335\x02\x02\u080F\u0810\x07\u0236\x02\x02\u0810" +
		"\u0811\x07\u0323\x02\x02\u0811\u0818\x07\u031F\x02\x02\u0812\u0814\x07" +
		"\u0337\x02\x02\u0813\u0812\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02" +
		"\u0814\u0815\x03\x02\x02\x02\u0815\u0816\x07\x18\x02\x02\u0816\u0817\x07" +
		"\u0323\x02\x02\u0817\u0819\t\x10\x02\x02\u0818\u0813\x03\x02\x02\x02\u0818" +
		"\u0819\x03\x02\x02\x02\u0819\u0820\x03\x02\x02\x02\u081A\u081C\x07\u0337" +
		"\x02\x02\u081B\u081A\x03\x02\x02\x02\u081B\u081C\x03\x02\x02\x02\u081C" +
		"\u081D\x03\x02\x02\x02\u081D\u081E\x07\u01F8\x02\x02\u081E\u081F\x07\u0323" +
		"\x02\x02\u081F\u0821\x07\u023F\x02\x02\u0820\u081B\x03\x02\x02\x02\u0820" +
		"\u0821\x03\x02\x02\x02\u0821\u0828\x03\x02\x02\x02\u0822\u0824\x07\u0337" +
		"\x02\x02\u0823\u0822\x03\x02\x02\x02\u0823\u0824\x03\x02\x02\x02\u0824" +
		"\u0825\x03\x02\x02\x02\u0825\u0826\x07\u02C9\x02\x02\u0826\u0827\x07\u0323" +
		"\x02\x02\u0827\u0829\t\x11\x02\x02\u0828\u0823\x03\x02\x02\x02\u0828\u0829" +
		"\x03\x02\x02\x02\u0829\u082A\x03\x02\x02\x02\u082A\u082C\x07\u0336\x02" +
		"\x02\u082B\u080A\x03\x02\x02\x02\u082C\u082D\x03\x02\x02\x02\u082D\u082B" +
		"\x03\x02\x02\x02\u082D\u082E\x03\x02\x02\x02\u082E\u087F\x03\x02\x02\x02" +
		"\u082F\u0830\x07\x92\x02\x02\u0830\u0831\x07I\x02\x02\u0831\u0832\x07" +
		"\r\x02\x02\u0832\u087F\x07U\x02\x02\u0833\u0834\x07^\x02\x02\u0834\u0835" +
		"\x07I\x02\x02\u0835\u0836\x07\r\x02\x02\u0836\u087F\x07U\x02\x02\u0837" +
		"\u087F\x07~\x02\x02\u0838\u087F\x07\u0206\x02\x02\u0839\u083A\x07\x04" +
		"\x02\x02\u083A\u083B\x07\u0235\x02\x02\u083B\u083C\x07\u031F\x02\x02\u083C" +
		"\u085E\x07\u0335\x02\x02\u083D\u083E\x07\u017C\x02\x02\u083E\u083F\x07" +
		"\u01DF\x02\x02\u083F\u0840\x07\xE5\x02\x02\u0840\u0841\x07\u0335\x02\x02" +
		"\u0841\u0842\x07\xA6\x02\x02\u0842\u0843\x07\xA6\x02\x02\u0843\u0844\x03" +
		"\x02\x02\x02\u0844\u085F\x07\u0336\x02\x02\u0845\u0846\x07\u017C\x02\x02" +
		"\u0846\u0847\x07\u0226\x02\x02\u0847\u0853\x07\u0335\x02\x02\u0848\u084A" +
		"\x07\u0337\x02\x02\u0849\u0848\x03\x02\x02\x02\u0849\u084A\x03\x02\x02" +
		"\x02\u084A\u084B\x03\x02\x02\x02\u084B\u0850\x07\u0335\x02\x02\u084C\u084D" +
		"\x07\xA6\x02\x02\u084D\u084E\x07\u0337\x02\x02\u084E\u0851\x07\xA6\x02" +
		"\x02\u084F\u0851\x07\xA7\x02\x02\u0850\u084C\x03\x02\x02\x02\u0850\u084F" +
		"\x03\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852\u0854\x07\u0336\x02" +
		"\x02\u0853\u0849\x03\x02\x02\x02\u0854\u0855\x03\x02\x02\x02\u0855\u0853" +
		"\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0857\x03\x02\x02\x02" +
		"\u0857\u085C\x07\u0336\x02\x02\u0858\u0859\x07\u0337\x02\x02\u0859\u085A" +
		"\x07\u0286\x02\x02\u085A\u085B\x07\u0323\x02\x02\u085B\u085D\x07\u031B" +
		"\x02\x02\u085C\u0858\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D" +
		"\u085F\x03\x02\x02\x02\u085E\u083D\x03\x02\x02\x02\u085E\u0845\x03\x02" +
		"\x02\x02\u085F\u0860\x03\x02\x02\x02\u0860\u087F\x07\u0336\x02\x02\u0861" +
		"\u0862\x07\u025B\x02\x02\u0862\u086F\x07\u0235\x02\x02\u0863\u0864\x07" +
		"\x04\x02\x02\u0864\u0865\x07\u0226\x02\x02\u0865\u0869\x07\u0335\x02\x02" +
		"\u0866\u0867\x07\xA6\x02\x02\u0867\u086A\x07\xA6\x02\x02\u0868\u086A\x07" +
		"\xA7\x02\x02\u0869\u0866\x03\x02\x02\x02\u0869\u0868\x03\x02\x02\x02\u086A" +
		"\u086B\x03\x02\x02\x02\u086B\u0870\x07\u0336\x02\x02\u086C\u086D\x07\u0286" +
		"\x02\x02\u086D\u086E\x07\u0323\x02\x02\u086E\u0870\x07\u031B\x02\x02\u086F" +
		"\u0863\x03\x02\x02\x02\u086F\u086C\x03\x02\x02\x02\u0870\u087F\x03\x02" +
		"\x02\x02\u0871\u0872\x07\u0115\x02\x02\u0872\u0873\x07\u0235\x02\x02\u0873" +
		"\u087F\x07\u031F\x02\x02\u0874\u0875\x07\u02A9\x02\x02\u0875\u0876\x07" +
		"\u0235\x02\x02\u0876\u087F\x07\u031F\x02\x02\u0877\u087F\x07\u0273\x02" +
		"\x02\u0878\u0879\x07\u017C\x02\x02\u0879\u087A\x07\u0335\x02\x02\u087A" +
		"\u087B\x07i\x02\x02\u087B\u087C\x07\u0323\x02\x02\u087C\u087D\x07\xF8" +
		"\x02\x02\u087D\u087F\x07\u0336\x02\x02\u087E\u0720\x03\x02\x02\x02\u087E" +
		"\u0734\x03\x02\x02\x02\u087E\u0737\x03\x02\x02\x02\u087E\u073A\x03\x02" +
		"\x02\x02\u087E\u077C\x03\x02\x02\x02\u087E\u0788\x03\x02\x02\x02\u087E" +
		"\u07A2\x03\x02\x02\x02\u087E\u07E2\x03\x02\x02\x02\u087E\u07E6\x03\x02" +
		"\x02\x02\u087E\u07E7\x03\x02\x02\x02\u087E\u0805\x03\x02\x02\x02\u087E" +
		"\u082F\x03\x02\x02\x02\u087E\u0833\x03\x02\x02\x02\u087E\u0837\x03\x02" +
		"\x02\x02\u087E\u0838\x03\x02\x02\x02\u087E\u0839\x03\x02\x02\x02\u087E" +
		"\u0861\x03\x02\x02\x02\u087E\u0871\x03\x02\x02\x02\u087E\u0874\x03\x02" +
		"\x02\x02\u087E\u0877\x03\x02\x02\x02\u087E\u0878\x03\x02\x02\x02\u087F" +
		"\xA3\x03\x02\x02\x02\u0880\u0881\t\x14\x02\x02\u0881\u0882\x07\u01AB\x02" +
		"\x02\u0882\u0883\x07\u028A\x02\x02\u0883\u0884\x05\u03B6\u01DC\x02\u0884" +
		"\u0885\x07\x86\x02\x02\u0885\u0886\x07F\x02\x02\u0886\u0887\x07\u013D" +
		"\x02\x02\u0887\u0891\x07\u0335\x02\x02\u0888\u0889\x07E\x02\x02\u0889" +
		"\u088C\x07\u0323\x02\x02\u088A\u088D\x05\u03B6\u01DC\x02\u088B\u088D\x07" +
		"\r\x02\x02\u088C\u088A\x03\x02\x02\x02\u088C\u088B\x03\x02\x02\x02\u088D" +
		"\u088F\x03\x02\x02\x02\u088E\u0890\x07\u0337\x02\x02\u088F\u088E\x03\x02" +
		"\x02\x02\u088F\u0890\x03\x02\x02\x02\u0890\u0892\x03\x02\x02\x02\u0891" +
		"\u0888\x03\x02\x02\x02\u0891\u0892\x03\x02\x02\x02\u0892\u089F\x03\x02" +
		"\x02\x02\u0893\u0894\x07\xBA\x02\x02\u0894\u089A\x07\u0323\x02\x02\u0895" +
		"\u0897\x07g\x02\x02\u0896\u0895\x03\x02\x02\x02\u0896\u0897\x03\x02\x02" +
		"\x02\u0897\u0898\x03\x02\x02\x02\u0898\u089B\x05\u03B6\u01DC\x02\u0899" +
		"\u089B\x07\r\x02\x02\u089A\u0896\x03\x02\x02\x02\u089A\u0899\x03\x02\x02" +
		"\x02\u089B\u089D\x03\x02\x02\x02\u089C\u089E\x07\u0337\x02\x02\u089D\u089C" +
		"\x03\x02\x02\x02\u089D\u089E\x03\x02\x02\x02\u089E\u08A0\x03\x02\x02\x02" +
		"\u089F\u0893\x03\x02\x02\x02\u089F\u08A0\x03\x02\x02\x02\u08A0\u08AA\x03" +
		"\x02\x02\x02\u08A1\u08A2\x07\u02A8\x02\x02\u08A2\u08A5\x07\u0323\x02\x02" +
		"\u08A3\u08A6\x07\u031F\x02\x02\u08A4\u08A6\x07\r\x02\x02\u08A5\u08A3\x03" +
		"\x02\x02\x02\u08A5\u08A4\x03\x02\x02\x02\u08A6\u08A8\x03\x02\x02\x02\u08A7" +
		"\u08A9\x07\u0337\x02\x02\u08A8\u08A7\x03\x02\x02\x02\u08A8\u08A9\x03\x02" +
		"\x02\x02\u08A9\u08AB\x03\x02\x02\x02\u08AA\u08A1\x03\x02\x02\x02\u08AA" +
		"\u08AB\x03\x02\x02\x02\u08AB\u08B2\x03\x02\x02\x02\u08AC\u08AD\x07\u028B" +
		"\x02\x02\u08AD\u08B0\x07\u0323\x02\x02\u08AE\u08B1\x07\u031B\x02\x02\u08AF" +
		"\u08B1\x07Z\x02\x02\u08B0\u08AE\x03\x02\x02\x02\u08B0\u08AF\x03\x02\x02" +
		"\x02\u08B1\u08B3\x03\x02\x02\x02\u08B2\u08AC\x03\x02\x02\x02\u08B2\u08B3" +
		"\x03\x02\x02\x02\u08B3\u08B4\x03\x02\x02\x02\u08B4\u08B5\x07\u0336\x02" +
		"\x02\u08B5\xA5\x03\x02\x02\x02\u08B6\u08B7\x07h\x02\x02\u08B7\u08B8\x07" +
		"\u01AB\x02\x02\u08B8\u08B9\x07\u028A\x02\x02\u08B9\u08BA\x05\u03B6\u01DC" +
		"\x02\u08BA\xA7\x03\x02\x02\x02\u08BB\u08BC\x07\n\x02\x02\u08BC\u08BD\x07" +
		"+\x02\x02\u08BD\u08E5\x05\u03B6\u01DC\x02\u08BE\u08BF\x07\u02A9\x02\x02" +
		"\u08BF\u08E6\x07\u028D\x02\x02\u08C0\u08C1\x07\u017C\x02\x02\u08C1\u08C2" +
		"\x07\u028C\x02\x02\u08C2\u08C3\x07\xAC\x02\x02\u08C3\u08DA\x07\u0335\x02" +
		"\x02\u08C4\u08C5\x07\x82\x02\x02\u08C5\u08C6\x07\u0323\x02\x02\u08C6\u08C8" +
		"\x07\u031F\x02\x02\u08C7\u08C9\x07\u0337\x02\x02\u08C8\u08C7\x03\x02\x02" +
		"\x02\u08C8\u08C9\x03\x02\x02\x02\u08C9\u08DB\x03\x02\x02\x02\u08CA\u08CB" +
		"\x07\u01D3\x02\x02\u08CB\u08CC\x07&\x02\x02\u08CC\u08CD\x07\xF4\x02\x02" +
		"\u08CD\u08CE\x07\u0323\x02\x02\u08CE\u08D0\x07\u031F\x02\x02\u08CF\u08D1" +
		"\x07\u0337\x02\x02\u08D0\u08CF\x03\x02\x02\x02\u08D0\u08D1\x03\x02\x02" +
		"\x02\u08D1\u08DB\x03\x02\x02\x02\u08D2\u08D3\x07\u01EE\x02\x02\u08D3\u08D4" +
		"\x07&\x02\x02\u08D4\u08D5\x07\xF4\x02\x02\u08D5\u08D6\x07\u0323\x02\x02" +
		"\u08D6\u08D8\x07\u031F\x02\x02\u08D7\u08D9\x07\u0337\x02\x02\u08D8\u08D7" +
		"\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02\x02\u08D9\u08DB\x03\x02\x02\x02" +
		"\u08DA\u08C4\x03\x02\x02\x02\u08DA\u08CA\x03\x02\x02\x02\u08DA\u08D2\x03" +
		"\x02\x02\x02\u08DB\u08DC\x03\x02\x02\x02\u08DC\u08DA\x03\x02\x02\x02\u08DC" +
		"\u08DD\x03\x02\x02\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE\u08E6\x07\u0336" +
		"\x02\x02\u08DF\u08E0\x07\u017C\x02\x02\u08E0\u08E1\x07\u0185\x02\x02\u08E1" +
		"\u08E2\x07\x86\x02\x02\u08E2\u08E3\x07\u01A5\x02\x02\u08E3\u08E4\x07\u0323" +
		"\x02\x02\u08E4\u08E6\t\t\x02\x02\u08E5\u08BE\x03\x02\x02\x02\u08E5\u08C0" +
		"\x03\x02\x02\x02\u08E5\u08DF\x03\x02\x02\x02\u08E6\xA9\x03\x02\x02\x02" +
		"\u08E7\u08E8\x07\n\x02\x02\u08E8\u08E9\x078\x02\x02\u08E9\u08EA\x07\u01EE" +
		"\x02\x02\u08EA\u08EB\x07\xAC\x02\x02\u08EB\u08EC\x05\u03B6\u01DC\x02\u08EC" +
		"\u08ED\t\x15\x02\x02\u08ED\u08EE\x07\u0304\x02\x02\u08EE\u08EF\x07\u0335" +
		"\x02\x02\u08EF\u08F0\x07\u01B9\x02\x02\u08F0\u08F1\x07\u0323\x02\x02\u08F1" +
		"\u08FA\x05\u03B6\u01DC\x02\u08F2\u08F3\x07\u0337\x02\x02\u08F3\u08F4\x07" +
		"\u018D\x02\x02\u08F4\u08F5\x07\u0323\x02\x02\u08F5\u08F6\x07\u031F\x02" +
		"\x02\u08F6\u08F7\x07\u0337\x02\x02\u08F7\u08F8\x07\u01ED\x02\x02\u08F8" +
		"\u08F9\x07\u0323\x02\x02\u08F9\u08FB\x07\u0320\x02\x02\u08FA\u08F2\x03" +
		"\x02\x02\x02\u08FA\u08FB\x03\x02\x02\x02\u08FB\u08FC\x03\x02\x02\x02\u08FC" +
		"\u08FD\x07\u0336\x02\x02\u08FD\xAB\x03\x02\x02\x02\u08FE\u08FF\x07I\x02" +
		"\x02\u08FF\u0900\x078\x02\x02\u0900\u0901\x07\u01EE\x02\x02\u0901\u0902" +
		"\x07\xAC\x02\x02\u0902\u0903\x05\u03B6\u01DC\x02\u0903\u0904\x07\u017C" +
		"\x02\x02\u0904\u0918\x07\u0172\x02\x02\u0905\u0907\x07\u0335\x02\x02\u0906" +
		"\u0908\x07\u0337\x02\x02\u0907\u0906\x03\x02\x02\x02\u0907\u0908\x03\x02" +
		"\x02\x02\u0908\u0909\x03\x02\x02\x02\u0909\u090A\x07\u01B9\x02\x02\u090A" +
		"\u090B\x07\u0323\x02\x02\u090B\u090C\x05\u03B6\u01DC\x02\u090C\u090D\x07" +
		"\u0337\x02\x02\u090D\u090E\x07\u018D\x02\x02\u090E\u090F\x07\u0323\x02" +
		"\x02\u090F\u0910\x07\u031F\x02\x02\u0910\u0911\x07\u0337\x02\x02\u0911" +
		"\u0912\x07\u01ED\x02\x02\u0912\u0913\x07\u0323\x02\x02\u0913\u0914\x07" +
		"\u0320\x02\x02\u0914\u0916\x07\u0336\x02\x02\u0915\u0917\x07\u0337\x02" +
		"\x02\u0916\u0915\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917\u0919" +
		"\x03\x02\x02\x02\u0918\u0905\x03\x02\x02\x02\u0919\u091A\x03\x02\x02\x02" +
		"\u091A\u0918\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02\u091B\xAD\x03" +
		"\x02\x02\x02\u091C\u091D\x07h\x02\x02\u091D\u091E\x07+\x02\x02\u091E\u091F" +
		"\x05\u03B6\u01DC\x02\u091F\xAF\x03\x02\x02\x02\u0920\u0921\x07h\x02\x02" +
		"\u0921\u0922\x078\x02\x02\u0922\u0923\x07\u01EE\x02\x02\u0923\u0924\x07" +
		"\xAC\x02\x02\u0924\u0925\x05\u03B6\u01DC\x02\u0925\xB1\x03\x02\x02\x02" +
		"\u0926\u0927\x07h\x02\x02\u0927\u0928\x078\x02\x02\u0928\u0929\x07\xBD" +
		"\x02\x02\u0929\u092A\x07\xAC\x02\x02\u092A\u092B\x05\u03B6\u01DC\x02\u092B" +
		"\xB3\x03\x02\x02\x02\u092C\u092D\x07h\x02\x02\u092D\u092E\x07D\x02\x02" +
		"\u092E\u092F\x05\u03B6\u01DC\x02\u092F\xB5\x03\x02\x02\x02\u0930\u0931" +
		"\x07h\x02\x02\u0931\u0932\x07\u01C7\x02\x02\u0932\u0933\x05\u03B6\u01DC" +
		"\x02\u0933\xB7\x03\x02\x02\x02\u0934\u0935\x07h\x02\x02\u0935\u0936\x07" +
		"\u01C8\x02\x02\u0936\u0937\x07\u0291\x02\x02\u0937\u0938\x05\u03B6\u01DC" +
		"\x02\u0938\xB9\x03\x02\x02\x02\u0939\u093A\x07h\x02\x02\u093A\u093D\x07" +
		"U\x02\x02\u093B\u093C\x07\x9A\x02\x02\u093C\u093E\x07x\x02\x02\u093D\u093B" +
		"\x03\x02\x02\x02\u093D\u093E\x03\x02\x02\x02\u093E\u0943\x03\x02\x02\x02" +
		"\u093F\u0941\x07\u0337\x02\x02\u0940\u093F\x03\x02\x02\x02\u0940\u0941" +
		"\x03\x02\x02\x02\u0941\u0942\x03\x02\x02\x02\u0942\u0944\x05\u03B6\u01DC" +
		"\x02\u0943\u0940\x03\x02\x02\x02\u0944\u0945\x03\x02\x02\x02\u0945\u0943" +
		"\x03\x02\x02\x02\u0945\u0946\x03\x02\x02\x02\u0946\xBB\x03\x02\x02\x02" +
		"\u0947\u0948\x07h\x02\x02\u0948\u0949\x07U\x02\x02\u0949\u094A\x07\u0199" +
		"\x02\x02\u094A\u094B\x07\u0145\x02\x02\u094B\u094C\x05\u03B6\u01DC\x02" +
		"\u094C\xBD\x03\x02\x02\x02\u094D\u094E\x07h\x02\x02\u094E\u094F\x07U\x02" +
		"\x02\u094F\u0950\x07\u02BF\x02\x02\u0950\u0951\x07\u01C7\x02\x02\u0951" +
		"\u0952\x05\u03B6\u01DC\x02\u0952\xBF\x03\x02\x02\x02\u0953\u0954\x07h" +
		"\x02\x02\u0954\u0957\x07Z\x02\x02\u0955\u0956\x07\x9A\x02\x02\u0956\u0958" +
		"\x07x\x02\x02\u0957\u0955\x03\x02\x02\x02\u0957\u0958\x03\x02\x02\x02" +
		"\u0958\u095A\x03\x02\x02\x02\u0959\u095B\x07\u0337\x02\x02\u095A\u0959" +
		"\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02\u095B\u095F\x03\x02\x02\x02" +
		"\u095C\u095D\x05\u03B6\u01DC\x02\u095D\u095E\x07\u0330\x02\x02\u095E\u0960" +
		"\x03\x02\x02\x02\u095F\u095C\x03\x02\x02\x02\u095F\u0960\x03\x02\x02\x02" +
		"\u0960\u0961\x03\x02\x02\x02\u0961\u0962\x05\u03B6\u01DC\x02\u0962\xC1" +
		"\x03\x02\x02\x02\u0963\u0964\x07h\x02\x02\u0964\u0965\x07n\x02\x02\u0965" +
		"\u0966\x05\u03B6\u01DC\x02\u0966\xC3\x03\x02\x02\x02\u0967\u0968\x07h" +
		"\x02\x02\u0968\u0969\x07|\x02\x02\u0969\u096A\x07R\x02\x02\u096A\u096B" +
		"\x07\u0144\x02\x02\u096B\u096C\x05\u03B6\u01DC\x02\u096C\xC5\x03\x02\x02" +
		"\x02\u096D\u096E\x07h\x02\x02\u096E\u096F\x07|\x02\x02\u096F\u0970\x07" +
		"\x82\x02\x02\u0970\u0971\x07\u0208\x02\x02\u0971\u0972\x05\u03B6\u01DC" +
		"\x02\u0972\xC7\x03\x02\x02\x02\u0973\u0974\x07h\x02\x02\u0974\u0975\x07" +
		"|\x02\x02\u0975\u0976\x07\xB2\x02\x02\u0976\u0979\x05\u03B6\u01DC\x02" +
		"\u0977\u0978\x07\x14\x02\x02\u0978\u097A\x05\u03B6\u01DC\x02\u0979\u0977" +
		"\x03\x02\x02\x02\u0979\u097A\x03\x02\x02\x02\u097A\xC9\x03\x02\x02\x02" +
		"\u097B\u097C\x07h\x02\x02\u097C\u097D\x07|\x02\x02\u097D\u097E\x07\u02B2" +
		"\x02\x02\u097E\u097F\x07\u0285\x02\x02\u097F\u0980\x05\u03B6\u01DC\x02" +
		"\u0980\xCB\x03\x02\x02\x02\u0981\u0982\x07h\x02\x02\u0982\u0983\x07|\x02" +
		"\x02\u0983\u0987\x07\u0156\x02\x02\u0984\u0985\x05\u03B6\u01DC\x02\u0985" +
		"\u0986\x07\u0330\x02\x02\u0986\u0988\x03\x02\x02\x02\u0987\u0984\x03\x02" +
		"\x02\x02\u0987\u0988\x03\x02\x02\x02\u0988\u098C\x03\x02\x02\x02\u0989" +
		"\u098A\x05\u03B6\u01DC\x02\u098A\u098B\x07\u0330\x02\x02\u098B\u098D\x03" +
		"\x02\x02\x02\u098C\u0989\x03\x02\x02\x02\u098C\u098D\x03\x02\x02\x02\u098D" +
		"\u098E\x03\x02\x02\x02\u098E\u098F\x05\u03B6\u01DC\x02\u098F\xCD\x03\x02" +
		"\x02\x02\u0990\u0991\x07h\x02\x02\u0991\u0992\x07r\x02\x02\u0992\u0997" +
		"\x07\xDD\x02\x02\u0993\u0995\x07\u0337\x02\x02\u0994\u0993\x03\x02\x02" +
		"\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996\u0998" +
		"\x05\u03B6\u01DC\x02\u0997\u0994\x03\x02\x02\x02\u0998\u0999\x03\x02\x02" +
		"\x02\u0999\u0997\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02\u099A\u099B" +
		"\x03\x02\x02\x02\u099B\u09A0\x07\xE5\x02\x02\u099C\u09A1\x07\u0137\x02" +
		"\x02\u099D\u09A1\x07U\x02\x02\u099E\u099F\x07\u0294\x02\x02\u099F\u09A1" +
		"\x05\u03B6\u01DC\x02\u09A0\u099C\x03\x02\x02\x02\u09A0\u099D\x03\x02\x02" +
		"\x02\u09A0\u099E\x03\x02\x02\x02\u09A1\xCF\x03\x02\x02\x02\u09A2\u09A3" +
		"\x07h\x02\x02\u09A3\u09A4\x07r\x02\x02\u09A4\u09A5\x07\u013B\x02\x02\u09A5" +
		"\u09A6\x05\u03B6\u01DC\x02\u09A6\u09A7\x07\xE5\x02\x02\u09A7\u09A8\x07" +
		"\u0137\x02\x02\u09A8\xD1\x03\x02\x02\x02\u09A9\u09AA\x07h\x02\x02\u09AA" +
		"\u09AB\x07\u020B\x02\x02\u09AB\u09AC\x07\u01B1\x02\x02\u09AC\u09AD\x05" +
		"\u03B6\u01DC\x02\u09AD\xD3\x03\x02\x02\x02\u09AE\u09AF\x07h\x02\x02\u09AF" +
		"\u09B0\x07\u020B\x02\x02\u09B0\u09B1\x07\x9E\x02\x02\u09B1\u09B5\x07\xE5" +
		"\x02\x02\u09B2\u09B3\x05\u03B6\u01DC\x02\u09B3\u09B4\x07\u0330\x02\x02" +
		"\u09B4\u09B6\x03\x02\x02\x02\u09B5\u09B2\x03\x02\x02\x02\u09B5\u09B6\x03" +
		"\x02\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7\u09B8\x05\u03B6\u01DC\x02" +
		"\u09B8\xD5\x03\x02\x02\x02\u09B9\u09BA\x07h\x02\x02\u09BA\u09BB\x07\u020B" +
		"\x02\x02\u09BB\u09BC\x07\u02E1\x02\x02\u09BC\u09BD\x05\u03B6\u01DC\x02" +
		"\u09BD\xD7\x03\x02\x02\x02\u09BE\u09BF\x07h\x02\x02\u09BF\u09C0\x07\u023C" +
		"\x02\x02\u09C0\u09C1\x05\u03B6\u01DC\x02\u09C1\xD9\x03\x02\x02\x02\u09C2" +
		"\u09C3\x07h\x02\x02\u09C3\u09C4\x07\xBD\x02\x02\u09C4\u09C5\x07\xAC\x02" +
		"\x02\u09C5\xDB\x03\x02\x02\x02\u09C6\u09C7\x07h\x02\x02\u09C7\u09C8\x07" +
		"\u0251\x02\x02\u09C8\u09C9\x07\u02FB\x02\x02\u09C9\u09CA\x05\u03B6\u01DC" +
		"\x02\u09CA\xDD\x03\x02\x02\x02\u09CB\u09CC\x07h\x02\x02\u09CC\u09CD\x07" +
		"\u0280\x02\x02\u09CD\u09CE\x07\x8E\x02\x02\u09CE\u09CF\x05\u03B6\u01DC" +
		"\x02\u09CF\xDF\x03\x02\x02\x02\u09D0\u09D1\x07h\x02\x02\u09D1\u09D2\x07" +
		"\u0280\x02\x02\u09D2\u09D3\x07\u012F\x02\x02\u09D3\u09D4\x05\u03B6\u01DC" +
		"\x02\u09D4\xE1\x03\x02\x02\x02\u09D5\u09D6\x07h\x02\x02\u09D6\u09DA\x07" +
		"\u0294\x02\x02\u09D7\u09D8\x05\u03B6\u01DC\x02\u09D8\u09D9\x07\u0330\x02" +
		"\x02\u09D9\u09DB\x03\x02\x02\x02\u09DA\u09D7\x03\x02\x02\x02\u09DA\u09DB" +
		"\x03\x02\x02\x02\u09DB\u09DF\x03\x02\x02\x02\u09DC\u09DD\x05\u03B6\u01DC" +
		"\x02\u09DD\u09DE\x07\u0330\x02\x02\u09DE\u09E0\x03\x02\x02\x02\u09DF\u09DC" +
		"\x03\x02\x02\x02\u09DF\u09E0\x03\x02\x02\x02\u09E0\u09E1\x03\x02\x02\x02" +
		"\u09E1\u09E2\x05\u03B6\u01DC\x02\u09E2\xE3\x03\x02\x02\x02\u09E3\u09E4" +
		"\x07h\x02\x02\u09E4\u09E5\x07\u02A7\x02\x02\u09E5\u09E6\x07\u0138\x02" +
		"\x02\u09E6\u09E7\x07\u01A9\x02\x02\u09E7\u09E8\x05\u03B6\u01DC\x02\u09E8" +
		"\xE5\x03\x02\x02\x02\u09E9\u09EA\x07h\x02\x02\u09EA\u09EB\x07\u02B2\x02" +
		"\x02\u09EB\u09EC\x07\u0285\x02\x02\u09EC\u09ED\x05\u03B6\u01DC\x02\u09ED" +
		"\xE7\x03\x02\x02\x02\u09EE\u09EF\x07h\x02\x02\u09EF\u09F2\x07\u0121\x02" +
		"\x02\u09F0\u09F1\x07\x9A\x02\x02\u09F1\u09F3\x07x\x02\x02\u09F2\u09F0" +
		"\x03\x02\x02\x02\u09F2\u09F3\x03\x02\x02\x02\u09F3\u09F4\x03\x02\x02\x02" +
		"\u09F4\u09F5\x05\u03B6\u01DC\x02\u09F5\xE9\x03\x02\x02\x02\u09F6\u09F7" +
		"\x07h\x02\x02\u09F7\u09F8\x07\u02B8\x02\x02\u09F8\u09F9\x05\u03B6\u01DC" +
		"\x02\u09F9\xEB\x03\x02\x02\x02\u09FA\u09FB\x07h\x02\x02\u09FB\u09FE\x07" +
		"\u012A\x02\x02\u09FC\u09FD\x07\x9A\x02\x02\u09FD\u09FF\x07x\x02\x02\u09FE" +
		"\u09FC\x03\x02\x02\x02\u09FE\u09FF\x03\x02\x02\x02\u09FF\u0A09\x03\x02" +
		"\x02\x02\u0A00\u0A02\x07\u0337\x02\x02";
	private static readonly _serializedATNSegment8: string =
		"\u0A01\u0A00\x03\x02\x02\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A06\x03" +
		"\x02\x02\x02\u0A03\u0A04\x05\u03B6\u01DC\x02\u0A04\u0A05\x07\u0330\x02" +
		"\x02\u0A05\u0A07\x03\x02\x02\x02\u0A06\u0A03\x03\x02\x02\x02\u0A06\u0A07" +
		"\x03\x02\x02\x02\u0A07\u0A08\x03\x02\x02\x02\u0A08\u0A0A\x05\u03B6\u01DC" +
		"\x02\u0A09\u0A01\x03\x02\x02\x02\u0A09\u0A0A\x03\x02\x02\x02\u0A0A\xED" +
		"\x03\x02\x02\x02\u0A0B\u0A0C\x07h\x02\x02\u0A0C\u0A0F\x07\u012E\x02\x02" +
		"\u0A0D\u0A0E\x07\x9A\x02\x02\u0A0E\u0A10\x07x\x02\x02\u0A0F\u0A0D\x03" +
		"\x02\x02\x02\u0A0F\u0A10\x03\x02\x02\x02\u0A10\u0A11\x03\x02\x02\x02\u0A11" +
		"\u0A12\x05\u03B6\u01DC\x02\u0A12\xEF\x03\x02\x02\x02\u0A13\u0A14\x07h" +
		"\x02\x02\u0A14\u0A15\x07\u02C2\x02\x02\u0A15\u0A16\x07\u0290\x02\x02\u0A16" +
		"\u0A17\x07\u0234\x02\x02\u0A17\u0A18\x05\u03B6\u01DC\x02\u0A18\xF1\x03" +
		"\x02\x02\x02\u0A19\u0A1A\x07h\x02\x02\u0A1A\u0A1B\x07\u0130\x02\x02\u0A1B" +
		"\u0A1E\x07\xFD\x02\x02\u0A1C\u0A1D\x07\x9A\x02\x02\u0A1D\u0A1F\x07x\x02" +
		"\x02\u0A1E\u0A1C\x03\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\u0A23" +
		"\x03\x02\x02\x02\u0A20\u0A21\x05\u03B6\u01DC\x02\u0A21\u0A22\x07\u0330" +
		"\x02\x02\u0A22\u0A24\x03\x02\x02\x02\u0A23\u0A20\x03\x02\x02\x02\u0A23" +
		"\u0A24\x03\x02\x02\x02\u0A24\u0A25\x03\x02\x02\x02\u0A25\u0A26\x05\u03B6" +
		"\u01DC\x02\u0A26\xF3\x03\x02\x02\x02\u0A27\u0A28\x07h\x02\x02\u0A28\u0A2B" +
		"\x07\u0136\x02\x02\u0A29\u0A2A\x07\x9A\x02\x02\u0A2A\u0A2C\x07x\x02\x02" +
		"\u0A2B\u0A29\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02\x02\x02\u0A2C\u0A3B\x03" +
		"\x02\x02\x02\u0A2D\u0A2F\x07\u0337\x02\x02\u0A2E\u0A2D\x03\x02\x02\x02" +
		"\u0A2E\u0A2F\x03\x02\x02\x02\u0A2F\u0A33\x03\x02\x02\x02\u0A30\u0A31\x05" +
		"\u03B6\u01DC\x02\u0A31\u0A32\x07\u0330\x02\x02\u0A32\u0A34\x03\x02\x02" +
		"\x02\u0A33\u0A30\x03\x02\x02\x02\u0A33\u0A34\x03\x02\x02\x02\u0A34\u0A38" +
		"\x03\x02\x02\x02\u0A35\u0A36\x05\u03B6\u01DC\x02\u0A36\u0A37\x07\u0330" +
		"\x02\x02\u0A37\u0A39\x03\x02\x02\x02\u0A38\u0A35\x03\x02\x02\x02\u0A38" +
		"\u0A39\x03\x02\x02\x02\u0A39\u0A3A\x03\x02\x02\x02\u0A3A\u0A3C\x05\u03B6" +
		"\u01DC\x02\u0A3B\u0A2E\x03\x02\x02\x02\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C" +
		"\xF5\x03\x02\x02\x02\u0A3D\u0A3E\x07h\x02\x02\u0A3E\u0A3F\x07\u0137\x02" +
		"\x02\u0A3F\u0A40\x07\u0199\x02\x02\u0A40\u0A41\x05\u03B6\u01DC\x02\u0A41" +
		"\xF7\x03\x02\x02\x02\u0A42\u0A43\x07h\x02\x02\u0A43\u0A44\x07\u0137\x02" +
		"\x02\u0A44\u0A45\x07\u0199\x02\x02\u0A45\u0A46\x07\u0145\x02\x02\u0A46" +
		"\u0A47\x05\u03B6\u01DC\x02\u0A47\xF9\x03\x02\x02\x02\u0A48\u0A49\x07h" +
		"\x02\x02\u0A49\u0A4A\x07\u0137\x02\x02\u0A4A\u0A4B\x07\u0121\x02\x02\u0A4B" +
		"\u0A4C\x05\u03B6\u01DC\x02\u0A4C\xFB\x03\x02\x02\x02\u0A4D\u0A4E\x07h" +
		"\x02\x02\u0A4E\u0A4F\x07\u0138\x02\x02\u0A4F\u0A50\x05\u03B6\u01DC\x02" +
		"\u0A50\xFD\x03\x02\x02\x02\u0A51\u0A53\x07h\x02\x02\u0A52\u0A54\x07\u01C3" +
		"\x02\x02\u0A53\u0A52\x03\x02\x02\x02\u0A53\u0A54\x03\x02\x02\x02\u0A54" +
		"\u0A55\x03\x02\x02\x02\u0A55\u0A56\x07\u02D3\x02\x02\u0A56\u0A5A\x07\x8C" +
		"\x02\x02\u0A57\u0A58\x05\u03B6\u01DC\x02\u0A58\u0A59\x07\u0330\x02\x02" +
		"\u0A59\u0A5B\x03\x02\x02\x02\u0A5A\u0A57\x03\x02\x02\x02\u0A5A\u0A5B\x03" +
		"\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5D\x05\u03B6\u01DC\x02" +
		"\u0A5D\u0A69\x07&\x02\x02\u0A5E\u0A60\x07\u0337\x02\x02\u0A5F\u0A5E\x03" +
		"\x02\x02\x02\u0A5F\u0A60\x03\x02\x02\x02\u0A60\u0A61\x03\x02\x02\x02\u0A61" +
		"\u0A62\x07+\x02\x02\u0A62\u0A6A\x05\u03B6\u01DC\x02\u0A63\u0A65\x07\u0337" +
		"\x02\x02\u0A64\u0A63\x03\x02\x02\x02\u0A64\u0A65\x03\x02\x02\x02\u0A65" +
		"\u0A66\x03\x02\x02\x02\u0A66\u0A67\x07\x12\x02\x02\u0A67\u0A68\x07\xAC" +
		"\x02\x02\u0A68\u0A6A\x05\u03B6\u01DC\x02\u0A69\u0A5F\x03\x02\x02\x02\u0A69" +
		"\u0A64\x03\x02\x02\x02\u0A6A\u0A6B\x03\x02\x02\x02\u0A6B\u0A69\x03\x02" +
		"\x02\x02\u0A6B\u0A6C\x03\x02\x02\x02\u0A6C\xFF\x03\x02\x02\x02\u0A6D\u0A6E" +
		"\x07h\x02\x02\u0A6E\u0A72\x07\u014A\x02\x02\u0A6F\u0A70\x05\u03B6\u01DC" +
		"\x02\u0A70\u0A71\x07\u0330\x02\x02\u0A71\u0A73\x03\x02\x02\x02\u0A72\u0A6F" +
		"\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A74\x03\x02\x02\x02" +
		"\u0A74\u0A75\x05\u03B6\u01DC\x02\u0A75\u0A76\x07\u0330\x02\x02\u0A76\u0A77" +
		"\x05\u03B6\u01DC\x02\u0A77\u0101\x03\x02\x02\x02\u0A78\u0A79\x07h\x02" +
		"\x02\u0A79\u0A7A\x07\u02E6\x02\x02\u0A7A\u0A7B\x07\xAC\x02\x02\u0A7B\u0A7F" +
		"\x05\u03B6\u01DC\x02\u0A7C\u0A7D\x07\u02A9\x02\x02\u0A7D\u0A7E\x07\u0291" +
		"\x02\x02\u0A7E\u0A80\x07\xAC\x02\x02\u0A7F\u0A7C\x03\x02\x02\x02\u0A7F" +
		"\u0A80\x03\x02\x02\x02\u0A80\u0103\x03\x02\x02\x02\u0A81\u0A82\x07h\x02" +
		"\x02\u0A82\u0A85\x07\u02E8\x02\x02\u0A83\u0A84\x07\x9A\x02\x02\u0A84\u0A86" +
		"\x07x\x02\x02\u0A85\u0A83\x03\x02\x02\x02\u0A85\u0A86\x03\x02\x02\x02" +
		"\u0A86\u0A8A\x03\x02\x02\x02\u0A87\u0A88\x05\u03B6\u01DC\x02\u0A88\u0A89" +
		"\x07\u0330\x02\x02\u0A89\u0A8B\x03\x02\x02\x02\u0A8A\u0A87\x03\x02\x02" +
		"\x02\u0A8A\u0A8B\x03\x02\x02\x02\u0A8B\u0A8C\x03\x02\x02\x02\u0A8C\u0A8D" +
		"\x05\u03B6\u01DC\x02\u0A8D\u0105\x03\x02\x02\x02\u0A8E\u0A8F\x07h\x02" +
		"\x02\u0A8F\u0A92\x07\u0171\x02\x02\u0A90\u0A91\x07\x9A\x02\x02\u0A91\u0A93" +
		"\x07x\x02\x02\u0A92\u0A90\x03\x02\x02\x02\u0A92\u0A93\x03\x02\x02\x02" +
		"\u0A93\u0A94\x03\x02\x02\x02\u0A94\u0A95\x05\u03B6\u01DC\x02\u0A95\u0107" +
		"\x03\x02\x02\x02\u0A96\u0A97\x07h\x02\x02\u0A97\u0A98\x07\u030D\x02\x02" +
		"\u0A98\u0A99\x07\x93\x02\x02\u0A99\u0A9A\x05\u03B6\u01DC\x02\u0A9A\u0109" +
		"\x03\x02\x02\x02\u0A9B\u0A9C\x07h\x02\x02\u0A9C\u0A9D\x07\u030E\x02\x02" +
		"\u0A9D\u0A9E\x07\u012E\x02\x02\u0A9E\u0AA2\x07\u01B8\x02\x02\u0A9F\u0AA0" +
		"\x05\u03B6\u01DC\x02\u0AA0\u0AA1\x07\u0330\x02\x02\u0AA1\u0AA3\x03\x02" +
		"\x02\x02\u0AA2\u0A9F\x03\x02\x02\x02\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3" +
		"\u0AA4\x03\x02\x02\x02\u0AA4\u0AA5\x05\u03B6\u01DC\x02\u0AA5\u010B\x03" +
		"\x02\x02\x02\u0AA6\u0AA7\x07\u01E2\x02\x02\u0AA7\u0AB6\x07\u0163\x02\x02" +
		"\u0AA8\u0AAA\x07\u0337\x02\x02\u0AA9\u0AA8\x03\x02\x02\x02\u0AA9\u0AAA" +
		"\x03\x02\x02\x02\u0AAA\u0AAE\x03\x02\x02\x02\u0AAB\u0AAC\x05\u03B6\u01DC" +
		"\x02\u0AAC\u0AAD\x07\u0330\x02\x02\u0AAD\u0AAF\x03\x02\x02\x02\u0AAE\u0AAB" +
		"\x03\x02\x02\x02\u0AAE\u0AAF\x03\x02\x02\x02\u0AAF\u0AB0\x03\x02\x02\x02" +
		"\u0AB0\u0AB2\x05\u03B6\u01DC\x02\u0AB1\u0AA9\x03\x02\x02\x02\u0AB2\u0AB3" +
		"\x03\x02\x02\x02\u0AB3\u0AB1\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02\x02\x02" +
		"\u0AB4\u0AB7\x03\x02\x02\x02\u0AB5\u0AB7\x07\x06\x02\x02\u0AB6\u0AB1\x03" +
		"\x02\x02\x02\u0AB6\u0AB5\x03\x02\x02\x02\u0AB7\u0AB8\x03\x02\x02\x02\u0AB8" +
		"\u0AC2\x07\xE5\x02\x02\u0AB9\u0ABA\x05\u03B6\u01DC\x02\u0ABA\u0ABB\x07" +
		"\u0330\x02\x02\u0ABB\u0ABD\x03\x02\x02\x02\u0ABC\u0AB9\x03\x02\x02\x02" +
		"\u0ABC\u0ABD\x03\x02\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE\u0AC3\x05" +
		"\u03B6\u01DC\x02\u0ABF\u0AC3\x07U\x02\x02\u0AC0\u0AC1\x07\x06\x02\x02" +
		"\u0AC1\u0AC3\x07\u0137\x02\x02\u0AC2\u0ABC\x03\x02\x02\x02\u0AC2\u0ABF" +
		"\x03\x02\x02\x02\u0AC2\u0AC0\x03\x02\x02\x02\u0AC3\u010D\x03\x02\x02\x02" +
		"\u0AC4\u0AC5\x07\u01EB\x02\x02\u0AC5\u0AD4\x07\u0163\x02\x02\u0AC6\u0AC8" +
		"\x07\u0337\x02\x02\u0AC7\u0AC6\x03\x02\x02\x02\u0AC7\u0AC8\x03\x02\x02" +
		"\x02\u0AC8\u0ACC\x03\x02\x02\x02\u0AC9\u0ACA\x05\u03B6\u01DC\x02\u0ACA" +
		"\u0ACB\x07\u0330\x02\x02\u0ACB\u0ACD\x03\x02\x02\x02\u0ACC\u0AC9\x03\x02" +
		"\x02\x02\u0ACC\u0ACD\x03\x02\x02\x02\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE" +
		"\u0AD0\x05\u03B6\u01DC\x02\u0ACF\u0AC7\x03\x02\x02\x02\u0AD0\u0AD1\x03" +
		"\x02\x02\x02\u0AD1\u0ACF\x03\x02\x02\x02\u0AD1\u0AD2\x03\x02\x02\x02\u0AD2" +
		"\u0AD5\x03\x02\x02\x02\u0AD3\u0AD5\x07\x06\x02\x02\u0AD4\u0ACF\x03\x02" +
		"\x02\x02\u0AD4\u0AD3\x03\x02\x02\x02\u0AD5\u0AD6\x03\x02\x02\x02\u0AD6" +
		"\u0AE0\x07\xE5\x02\x02\u0AD7\u0AD8\x05\u03B6\u01DC\x02\u0AD8\u0AD9\x07" +
		"\u0330\x02\x02\u0AD9\u0ADB\x03\x02\x02\x02\u0ADA\u0AD7\x03\x02\x02\x02" +
		"\u0ADA\u0ADB\x03\x02\x02\x02\u0ADB\u0ADC\x03\x02\x02\x02\u0ADC\u0AE1\x05" +
		"\u03B6\u01DC\x02\u0ADD\u0AE1\x07U\x02\x02\u0ADE\u0ADF\x07\x06\x02\x02" +
		"\u0ADF\u0AE1\x07\u0137\x02\x02\u0AE0\u0ADA\x03\x02\x02\x02\u0AE0\u0ADD" +
		"\x03\x02\x02\x02\u0AE0\u0ADE\x03\x02\x02\x02\u0AE1\u010F\x03\x02\x02\x02" +
		"\u0AE2\u0AE3\x07\u023A\x02\x02\u0AE3\u0AE4\x07\u0156\x02\x02\u0AE4\u0AE5" +
		"\x05\u0382\u01C2\x02\u0AE5\u0AE6\x07\x9B\x02\x02\u0AE6\u0AE7\t\x16\x02" +
		"\x02\u0AE7\u0AEB\x07\u025A\x02\x02\u0AE8\u0AE9\x07\u0309\x02\x02\u0AE9" +
		"\u0AEC\x07\u031B\x02\x02\u0AEA\u0AEC\x07\u026D\x02\x02\u0AEB\u0AE8\x03" +
		"\x02\x02\x02\u0AEB\u0AEA\x03\x02\x02\x02\u0AEB\u0AEC\x03\x02\x02\x02\u0AEC" +
		"\u0AEE\x03\x02\x02\x02\u0AED\u0AEF\x07\u0338\x02\x02\u0AEE\u0AED\x03\x02" +
		"\x02\x02\u0AEE\u0AEF\x03\x02\x02\x02\u0AEF\u0111\x03\x02\x02\x02\u0AF0" +
		"\u0AF1\x07\u0164\x02\x02\u0AF1\u0AF2\x07\u0156\x02\x02\u0AF2\u0B06\x05" +
		"\u0382\u01C2\x02\u0AF3\u0AF4\x07\u017C\x02\x02\u0AF4\u0AF5\x07\u0335\x02" +
		"\x02\u0AF5\u0AF6\x07\u0281\x02\x02\u0AF6\u0B00\x07\u0335\x02\x02\u0AF7" +
		"\u0AF9\x07\u0337\x02\x02\u0AF8\u0AF7\x03\x02\x02\x02\u0AF8\u0AF9\x03\x02" +
		"\x02\x02\u0AF9\u0AFE\x03\x02\x02\x02\u0AFA\u0AFF\x07\u031B\x02\x02\u0AFB" +
		"\u0AFC\x07\u031B\x02\x02\u0AFC\u0AFD\x07\u015D\x02\x02\u0AFD\u0AFF\x07" +
		"\u031B\x02\x02\u0AFE\u0AFA\x03\x02\x02\x02\u0AFE\u0AFB\x03\x02\x02\x02" +
		"\u0AFF\u0B01\x03\x02\x02\x02\u0B00\u0AF8\x03\x02\x02\x02\u0B01\u0B02\x03" +
		"\x02\x02\x02\u0B02\u0B00\x03\x02\x02\x02\u0B02\u0B03\x03\x02\x02\x02\u0B03" +
		"\u0B04\x03\x02\x02\x02\u0B04\u0B05\x07\u0336\x02\x02\u0B05\u0B07\x07\u0336" +
		"\x02\x02\u0B06\u0AF3\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07" +
		"\u0113\x03\x02\x02\x02\u0B08\u0B09\x07I\x02\x02\u0B09\u0B0A\x078\x02\x02" +
		"\u0B0A\u0B0B\x07\xBD\x02\x02\u0B0B\u0B0C\x07\xAC\x02\x02\u0B0C\u0B0D\x05" +
		"\u03B6\u01DC\x02\u0B0D\u0B0E\x07\u017C\x02\x02\u0B0E\u0B0F\x07\u0335\x02" +
		"\x02\u0B0F\u0B10\x07\xAE\x02\x02\u0B10\u0B11\x07\u0323\x02\x02\u0B11\u0B12" +
		"\x07\u031F\x02\x02\u0B12\u0B13\x07\u0337\x02\x02\u0B13\u0B14\x07\xAD\x02" +
		"\x02\u0B14\u0B15\x07\u0323\x02\x02\u0B15\u0B16\x07\u031F\x02\x02\u0B16" +
		"\u0B17\x07\u0336\x02\x02\u0B17\u0115\x03\x02\x02\x02\u0B18\u0B19\x07\n" +
		"\x02\x02\u0B19\u0B1A\x07\u01C7\x02\x02\u0B1A\u0B1B\x05\u03B6\u01DC\x02" +
		"\u0B1B\u0B1C\x07\u017C\x02\x02\u0B1C\u0B1D\x07\x97\x02\x02\u0B1D\u0B1E" +
		"\x07\u0323\x02\x02\u0B1E\u0B23\x07\u031F\x02\x02\u0B1F\u0B20\x07\u0337" +
		"\x02\x02\u0B20\u0B21\x07\u02C7\x02\x02\u0B21\u0B22\x07\u0323\x02\x02\u0B22" +
		"\u0B24\x07\u031F\x02\x02\u0B23\u0B1F\x03\x02\x02\x02\u0B23\u0B24\x03\x02" +
		"\x02\x02\u0B24\u0117\x03\x02\x02\x02\u0B25\u0B26\x07I\x02\x02\u0B26\u0B27" +
		"\x07\u01C7\x02\x02\u0B27\u0B28\x05\u03B6\u01DC\x02\u0B28\u0B29\x07\u017C" +
		"\x02\x02\u0B29\u0B2A\x07\x97\x02\x02\u0B2A\u0B2B\x07\u0323\x02\x02\u0B2B" +
		"\u0B30\x07\u031F\x02\x02\u0B2C\u0B2D\x07\u0337\x02\x02\u0B2D\u0B2E\x07" +
		"\u02C7\x02\x02\u0B2E\u0B2F\x07\u0323\x02\x02\u0B2F\u0B31\x07\u031F\x02" +
		"\x02\u0B30\u0B2C\x03\x02\x02\x02\u0B30\u0B31\x03\x02\x02\x02\u0B31\u0B36" +
		"\x03\x02\x02\x02\u0B32\u0B33\x07\x86\x02\x02\u0B33\u0B34\x07\u01C8\x02" +
		"\x02\u0B34\u0B35\x07\u0291\x02\x02\u0B35\u0B37\x05\u03B6\u01DC\x02\u0B36" +
		"\u0B32\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37\u0119\x03\x02" +
		"\x02\x02\u0B38\u0B39\x07\n\x02\x02\u0B39\u0B3A\x07\u01C8\x02\x02\u0B3A" +
		"\u0B3B\x07\u0291\x02\x02\u0B3B\u0B40\x05\u03B6\u01DC\x02\u0B3C\u0B3D\x07" +
		"\x8C\x02\x02\u0B3D\u0B3E\x07\x82\x02\x02\u0B3E\u0B3F\x07\u0323\x02\x02" +
		"\u0B3F\u0B41\x07\u031F\x02\x02\u0B40\u0B3C\x03\x02\x02\x02\u0B40\u0B41" +
		"\x03\x02\x02\x02\u0B41\u0B43\x03\x02\x02\x02\u0B42\u0B44\t\x17\x02\x02" +
		"\u0B43\u0B42\x03\x02\x02\x02\u0B43\u0B44\x03\x02\x02\x02\u0B44\u011B\x03" +
		"\x02\x02\x02\u0B45\u0B46\x07I\x02\x02\u0B46\u0B47\x07\u01C8\x02\x02\u0B47" +
		"\u0B48\x07\u0291\x02\x02\u0B48\u0B49\x05\u03B6\u01DC\x02\u0B49\u0B4A\x07" +
		"\x8C\x02\x02\u0B4A\u0B4B\x07\x82\x02\x02\u0B4B\u0B4C\x07\u0323\x02\x02" +
		"\u0B4C\u0B4D\x07\u031F\x02\x02\u0B4D\u011D\x03\x02\x02\x02\u0B4E\u0B4F" +
		"\x07I\x02\x02\u0B4F\u0B50\x07r\x02\x02\u0B50\u0B51\x07\xDD\x02\x02\u0B51" +
		"\u0B52\x05\u03B6\u01DC\x02\u0B52\u0B57\x07\xE5\x02\x02\u0B53\u0B58\x07" +
		"\u0137\x02\x02\u0B54\u0B58\x07U\x02\x02\u0B55\u0B56\x07\u0294\x02\x02" +
		"\u0B56\u0B58\x05\u03B6\u01DC\x02\u0B57\u0B53\x03\x02\x02\x02\u0B57\u0B54" +
		"\x03\x02\x02\x02\u0B57\u0B55\x03\x02\x02\x02\u0B58\u0B5B\x03\x02\x02\x02" +
		"\u0B59\u0B5A\x07\u017C\x02\x02\u0B5A\u0B5C\x07\x80\x02\x02\u0B5B\u0B59" +
		"\x03\x02\x02\x02\u0B5B\u0B5C\x03\x02\x02\x02\u0B5C\u0B5D\x03\x02\x02\x02" +
		"\u0B5D\u0B62\x07\x86\x02\x02\u0B5E\u0B60\x07\u0337\x02\x02\u0B5F\u0B5E" +
		"\x03\x02\x02\x02\u0B5F\u0B60\x03\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02" +
		"\u0B61\u0B63\x05\u03B6\u01DC\x02\u0B62\u0B5F\x03\x02\x02\x02\u0B63\u0B64" +
		"\x03\x02\x02\x02\u0B64\u0B62\x03\x02\x02\x02\u0B64\u0B65\x03\x02\x02\x02" +
		"\u0B65\u0B66\x03\x02\x02\x02\u0B66\u0B67\x07\u015D\x02\x02\u0B67\u0B68" +
		"\x07\u0138\x02\x02\u0B68\u0B69\x07\u031F\x02\x02\u0B69\u0B6A\x07\u0337" +
		"\x02\x02\u0B6A\u0B6B\x07\u031F\x02\x02\u0B6B\u011F\x03\x02\x02\x02\u0B6C" +
		"\u0B6D\t\x14\x02\x02\u0B6D\u0B6E\x07r\x02\x02\u0B6E\u0B6F\x07\u013B\x02" +
		"\x02\u0B6F\u0B70\x05\u03B6\u01DC\x02\u0B70\u0B71\x07\xE5\x02\x02\u0B71" +
		"\u0BB5\x07\u0137\x02\x02\u0B72\u0B74\x07\u0337\x02\x02\u0B73\u0B72\x03" +
		"\x02\x02\x02\u0B73\u0B74\x03\x02\x02\x02\u0B74\u0B75\x03\x02\x02\x02\u0B75" +
		"\u0B76\x07\x04\x02\x02\u0B76\u0B7A\x07r\x02\x02\u0B77\u0B78\x05\u03B6" +
		"\u01DC\x02\u0B78\u0B79\x07\u0330\x02\x02\u0B79\u0B7B\x03\x02\x02\x02\u0B7A" +
		"\u0B77\x03\x02\x02\x02\u0B7A\u0B7B\x03\x02\x02\x02\u0B7B\u0B7C\x03\x02" +
		"\x02\x02\u0B7C\u0B7D\x05\u03B6\u01DC\x02\u0B7D\u0B7E\x07\u0330\x02\x02" +
		"\u0B7E\u0B7F\x05\u03B6\u01DC\x02\u0B7F\u0BB0\x03\x02\x02\x02\u0B80\u0B8E" +
		"\x07\u0335\x02\x02\u0B81\u0B8B\x07\u013D\x02\x02\u0B82\u0B84\x07\u0337" +
		"\x02\x02\u0B83\u0B82\x03\x02\x02\x02\u0B83\u0B84\x03\x02\x02\x02\u0B84" +
		"\u0B85\x03\x02\x02\x02\u0B85\u0B86\x05\u03B6\u01DC\x02\u0B86\u0B87\x07" +
		"\u0323\x02\x02\u0B87\u0B88\t\x18\x02\x02\u0B88\u0B8A\x03\x02\x02\x02\u0B89" +
		"\u0B83\x03\x02\x02\x02\u0B8A\u0B8D\x03\x02\x02\x02\u0B8B\u0B89\x03\x02" +
		"\x02\x02\u0B8B\u0B8C\x03\x02\x02\x02\u0B8C\u0B8F\x03\x02\x02\x02\u0B8D" +
		"\u0B8B\x03\x02\x02\x02\u0B8E\u0B81\x03\x02\x02\x02\u0B8E\u0B8F\x03\x02" +
		"\x02\x02\u0B8F\u0BA4\x03\x02\x02\x02\u0B90\u0B91\x07\u0183\x02\x02\u0B91" +
		"\u0B9E\x07\u0335\x02\x02\u0B92\u0B94\x07\u0337\x02\x02\u0B93\u0B92\x03" +
		"\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02\u0B94\u0B98\x03\x02\x02\x02\u0B95" +
		"\u0B96\x05\u03B6\u01DC\x02\u0B96\u0B97\x07\u0330\x02\x02\u0B97\u0B99\x03" +
		"\x02\x02\x02\u0B98\u0B95\x03\x02\x02\x02\u0B98\u0B99\x03\x02\x02\x02\u0B99" +
		"\u0B9A\x03\x02\x02\x02\u0B9A\u0B9B\x05\u03B6\u01DC\x02\u0B9B\u0B9C\x07" +
		"\u0330\x02\x02\u0B9C\u0B9D\x05\u03B6\u01DC\x02\u0B9D\u0B9F\x03\x02\x02" +
		"\x02\u0B9E\u0B93\x03\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0B9E" +
		"\x03\x02\x02\x02\u0BA0\u0BA1\x03\x02\x02\x02\u0BA1\u0BA2\x03\x02\x02\x02" +
		"\u0BA2\u0BA3\x07\u0336\x02\x02\u0BA3\u0BA5\x03\x02\x02\x02\u0BA4\u0B90" +
		"\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02\u0BA6\u0BA4\x03\x02\x02\x02" +
		"\u0BA6\u0BA7\x03\x02\x02\x02\u0BA7\u0BAA\x03\x02\x02\x02\u0BA8\u0BA9\x07" +
		"\u0179\x02\x02\u0BA9\u0BAB\x05\u0122\x92\x02\u0BAA\u0BA8\x03\x02\x02\x02" +
		"\u0BAA\u0BAB\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC\u0BAD\x07" +
		"\u0336\x02\x02\u0BAD\u0BAF\x03\x02\x02\x02\u0BAE\u0B80\x03\x02\x02\x02" +
		"\u0BAF\u0BB2\x03\x02\x02\x02\u0BB0\u0BAE\x03\x02\x02\x02\u0BB0\u0BB1\x03" +
		"\x02\x02\x02\u0BB1\u0BB4\x03\x02\x02\x02\u0BB2\u0BB0\x03\x02\x02\x02\u0BB3" +
		"\u0B73\x03\x02\x02\x02\u0BB4\u0BB7\x03\x02\x02\x02\u0BB5\u0BB3\x03\x02" +
		"\x02\x02\u0BB5\u0BB6\x03\x02\x02\x02\u0BB6\u0BC8\x03\x02\x02\x02\u0BB7" +
		"\u0BB5\x03\x02\x02\x02\u0BB8\u0BBA\x07\u0337\x02\x02\u0BB9\u0BB8\x03\x02" +
		"\x02\x02\u0BB9\u0BBA\x03\x02\x02\x02\u0BBA\u0BBB\x03\x02\x02\x02\u0BBB" +
		"\u0BBC\x07h\x02\x02\u0BBC\u0BC0\x07r\x02\x02\u0BBD\u0BBE\x05\u03B6\u01DC" +
		"\x02\u0BBE\u0BBF\x07\u0330\x02\x02\u0BBF\u0BC1\x03\x02\x02\x02\u0BC0\u0BBD" +
		"\x03\x02\x02\x02\u0BC0\u0BC1\x03\x02\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02" +
		"\u0BC2\u0BC3\x05\u03B6\u01DC\x02\u0BC3\u0BC4\x07\u0330\x02\x02\u0BC4\u0BC5" +
		"\x05\u03B6\u01DC\x02\u0BC5\u0BC7\x03\x02\x02\x02\u0BC6\u0BB9\x03\x02\x02" +
		"\x02\u0BC7\u0BCA\x03\x02\x02\x02\u0BC8\u0BC6\x03\x02\x02\x02\u0BC8\u0BC9" +
		"\x03\x02\x02\x02\u0BC9\u0BF4\x03\x02\x02\x02\u0BCA\u0BC8\x03\x02\x02\x02" +
		"\u0BCB\u0BCC\x07\x04\x02\x02\u0BCC\u0BD0\x07\u0159\x02\x02\u0BCD\u0BCE" +
		"\x05\u03B6\u01DC\x02\u0BCE\u0BCF\x07\u0330\x02\x02\u0BCF\u0BD1\x03\x02" +
		"\x02\x02\u0BD0\u0BCD\x03\x02\x02\x02\u0BD0\u0BD1\x03\x02\x02\x02\u0BD1" +
		"\u0BD2\x03\x02\x02\x02\u0BD2\u0BD3\x05\u03B6\u01DC\x02\u0BD3\u0BD4\x07" +
		"\u0330\x02\x02\u0BD4\u0BD5\x05\u03B6\u01DC\x02\u0BD5\u0BEF\x03\x02\x02" +
		"\x02\u0BD6\u0BD7\x07\u0335\x02\x02\u0BD7\u0BE7\x07\u013D\x02\x02\u0BD8" +
		"\u0BDA\x07\u0337\x02\x02\u0BD9\u0BD8\x03\x02\x02\x02\u0BD9\u0BDA\x03\x02" +
		"\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\u0BDC\x05\u03B6\u01DC\x02\u0BDC" +
		"\u0BE5\x07\u0323\x02\x02\u0BDD\u0BDF\x07\u0335\x02\x02\u0BDE\u0BDD\x03" +
		"\x02\x02\x02\u0BDE\u0BDF\x03\x02\x02\x02\u0BDF\u0BE0\x03\x02\x02\x02\u0BE0" +
		"\u0BE2\x07\u031B\x02\x02\u0BE1\u0BE3\x07\u0336\x02\x02\u0BE2\u0BE1\x03" +
		"\x02\x02\x02\u0BE2\u0BE3\x03\x02\x02\x02\u0BE3\u0BE6\x03\x02\x02\x02\u0BE4" +
		"\u0BE6\x07\u031F\x02\x02\u0BE5\u0BDE\x03\x02\x02\x02\u0BE5\u0BE4\x03\x02" +
		"\x02\x02\u0BE6\u0BE8\x03\x02\x02\x02\u0BE7\u0BD9\x03\x02\x02\x02\u0BE8" +
		"\u0BE9\x03\x02\x02\x02\u0BE9\u0BE7\x03\x02\x02\x02\u0BE9\u0BEA\x03\x02" +
		"\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BEC\x07\u0336\x02\x02\u0BEC" +
		"\u0BEE\x03\x02\x02\x02\u0BED\u0BD6\x03\x02\x02\x02\u0BEE\u0BF1\x03\x02" +
		"\x02\x02\u0BEF\u0BED\x03\x02\x02\x02\u0BEF\u0BF0\x03\x02\x02\x02\u0BF0" +
		"\u0BF3\x03\x02\x02\x02\u0BF1\u0BEF\x03\x02\x02\x02\u0BF2\u0BCB\x03\x02" +
		"\x02\x02\u0BF3\u0BF6\x03\x02\x02\x02\u0BF4\u0BF2\x03\x02\x02\x02\u0BF4" +
		"\u0BF5\x03\x02\x02\x02\u0BF5\u0C04\x03\x02\x02\x02\u0BF6\u0BF4\x03\x02" +
		"\x02\x02\u0BF7\u0BF8\x07h\x02\x02\u0BF8\u0BFC\x07\u0159\x02\x02\u0BF9" +
		"\u0BFA\x05\u03B6\u01DC\x02\u0BFA\u0BFB\x07\u0330\x02\x02\u0BFB\u0BFD\x03" +
		"\x02\x02\x02\u0BFC\u0BF9\x03\x02\x02\x02\u0BFC\u0BFD\x03\x02\x02\x02\u0BFD" +
		"\u0BFE\x03\x02\x02\x02\u0BFE\u0BFF\x05\u03B6\u01DC\x02\u0BFF\u0C00\x07" +
		"\u0330\x02\x02\u0C00\u0C01\x05\u03B6\u01DC\x02\u0C01\u0C03\x03\x02\x02" +
		"\x02\u0C02\u0BF7\x03\x02\x02\x02\u0C03\u0C06\x03\x02\x02\x02\u0C04\u0C02" +
		"\x03\x02\x02\x02\u0C04\u0C05\x03\x02\x02\x02\u0C05\u0C48\x03\x02\x02\x02" +
		"\u0C06\u0C04\x03\x02\x02\x02\u0C07\u0C08\x07\u017C\x02\x02\u0C08\u0C10" +
		"\x07\u0335\x02\x02\u0C09\u0C0B\x07\u0337\x02\x02\u0C0A\u0C09\x03\x02\x02" +
		"\x02\u0C0A\u0C0B\x03\x02\x02\x02\u0C0B\u0C0C\x03\x02\x02\x02\u0C0C\u0C0D" +
		"\x07\xBE\x02\x02\u0C0D\u0C0E\x07\u0323\x02\x02\u0C0E\u0C0F\x07\u031B\x02" +
		"\x02\u0C0F\u0C11\t\x19\x02\x02\u0C10\u0C0A\x03\x02\x02\x02\u0C10\u0C11" +
		"\x03\x02\x02\x02\u0C11\u0C18\x03\x02\x02\x02\u0C12\u0C14\x07\u0337\x02" +
		"\x02\u0C13\u0C12\x03\x02\x02\x02\u0C13\u0C14\x03\x02\x02\x02\u0C14\u0C15" +
		"\x03\x02\x02\x02\u0C15\u0C16\x07t\x02\x02\u0C16\u0C17\x07\u0323\x02\x02" +
		"\u0C17\u0C19\t\x1A\x02\x02\u0C18\u0C13\x03\x02\x02\x02\u0C18\u0C19\x03" +
		"\x02\x02\x02\u0C19\u0C24\x03\x02\x02\x02\u0C1A\u0C1C\x07\u0337\x02\x02" +
		"\u0C1B\u0C1A\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02\x02\x02\u0C1C\u0C1D\x03" +
		"\x02\x02\x02\u0C1D\u0C1E\x07\xC1\x02\x02\u0C1E\u0C22\x07\u0323\x02\x02" +
		"\u0C1F\u0C20\x07\u031B\x02\x02\u0C20\u0C23\x07\u02C6\x02\x02\u0C21\u0C23" +
		"\x07\x9F\x02\x02\u0C22\u0C1F\x03\x02\x02\x02\u0C22\u0C21\x03\x02\x02\x02" +
		"\u0C23\u0C25\x03\x02\x02\x02\u0C24\u0C1B\x03\x02\x02\x02\u0C24\u0C25\x03" +
		"\x02\x02\x02\u0C25\u0C2D\x03\x02\x02\x02\u0C26\u0C28\x07\u0337\x02\x02" +
		"\u0C27\u0C26\x03\x02\x02\x02\u0C27\u0C28\x03\x02\x02\x02\u0C28\u0C29\x03" +
		"\x02\x02\x02\u0C29\u0C2A\x07\xC2\x02\x02\u0C2A\u0C2B\x07\u0323\x02\x02" +
		"\u0C2B\u0C2C\x07\u031B\x02\x02\u0C2C\u0C2E\t\x19\x02\x02\u0C2D\u0C27\x03" +
		"\x02\x02\x02\u0C2D\u0C2E\x03\x02\x02\x02\u0C2E\u0C35\x03\x02\x02\x02\u0C2F" +
		"\u0C31\x07\u0337\x02\x02\u0C30\u0C2F\x03\x02\x02\x02\u0C30\u0C31\x03\x02" +
		"\x02\x02\u0C31\u0C32\x03\x02\x02\x02\u0C32\u0C33\x07\xC8\x02\x02\u0C33" +
		"\u0C34\x07\u0323\x02\x02\u0C34\u0C36\t\x1B\x02\x02\u0C35\u0C30\x03\x02" +
		"\x02\x02\u0C35\u0C36\x03\x02\x02\x02\u0C36\u0C3D\x03\x02\x02\x02\u0C37" +
		"\u0C39\x07\u0337\x02\x02\u0C38\u0C37\x03\x02\x02\x02\u0C38\u0C39\x03\x02" +
		"\x02\x02\u0C39\u0C3A\x03\x02\x02\x02\u0C3A\u0C3B\x07\u015F\x02\x02\u0C3B" +
		"\u0C3C\x07\u0323\x02\x02\u0C3C\u0C3E\t\t\x02\x02\u0C3D\u0C38\x03\x02\x02" +
		"\x02\u0C3D\u0C3E\x03\x02\x02\x02\u0C3E\u0C45\x03\x02\x02\x02\u0C3F\u0C41" +
		"\x07\u0337\x02\x02\u0C40\u0C3F\x03\x02\x02\x02\u0C40\u0C41\x03\x02\x02" +
		"\x02\u0C41\u0C42\x03\x02\x02\x02\u0C42\u0C43\x07\u014F\x02\x02\u0C43\u0C44" +
		"\x07\u0323\x02\x02\u0C44\u0C46\t\t\x02\x02\u0C45\u0C40\x03\x02\x02\x02" +
		"\u0C45\u0C46\x03\x02\x02\x02\u0C46\u0C47\x03\x02\x02\x02\u0C47\u0C49\x07" +
		"\u0336\x02\x02\u0C48\u0C07\x03\x02\x02\x02\u0C48\u0C49\x03\x02\x02\x02" +
		"\u0C49\u0C4D\x03\x02\x02\x02\u0C4A\u0C4B\x07\u014B\x02\x02\u0C4B\u0C4C" +
		"\x07\u0323\x02\x02\u0C4C\u0C4E\t\x1C\x02\x02\u0C4D\u0C4A\x03\x02\x02\x02" +
		"\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0121\x03\x02\x02\x02\u0C4F\u0C51\x07" +
		"\u0337\x02\x02\u0C50\u0C4F\x03\x02\x02\x02\u0C50\u0C51\x03\x02\x02\x02" +
		"\u0C51\u0C53\x03\x02\x02\x02\u0C52\u0C54\t\x1D\x02\x02\u0C53\u0C52\x03" +
		"\x02\x02\x02\u0C53\u0C54\x03\x02\x02\x02\u0C54\u0C56\x03\x02\x02\x02\u0C55" +
		"\u0C57\x07\xDC\x02\x02\u0C56\u0C55\x03\x02\x02\x02\u0C56\u0C57\x03\x02" +
		"\x02\x02\u0C57\u0C5D\x03\x02\x02\x02\u0C58\u0C5E\x05\u0124\x93\x02\u0C59" +
		"\u0C5A\x07\u0335\x02\x02\u0C5A\u0C5B\x05\u0122\x92\x02\u0C5B\u0C5C\x07" +
		"\u0336\x02\x02\u0C5C\u0C5E\x03\x02\x02\x02\u0C5D\u0C58\x03\x02\x02\x02" +
		"\u0C5D\u0C59\x03\x02\x02\x02\u0C5E\u0C60\x03\x02\x02\x02\u0C5F\u0C50\x03" +
		"\x02\x02\x02\u0C60\u0C61\x03\x02\x02\x02\u0C61\u0C5F\x03\x02\x02\x02\u0C61" +
		"\u0C62\x03\x02\x02\x02\u0C62\u0123\x03\x02\x02\x02\u0C63\u0C69\x05\u0126" +
		"\x94\x02\u0C64\u0C65\x07\u0335\x02\x02\u0C65\u0C66\x05\u0122\x92\x02\u0C66" +
		"\u0C67\x07\u0336\x02\x02\u0C67\u0C69\x03\x02\x02\x02\u0C68\u0C63\x03\x02" +
		"\x02\x02\u0C68\u0C64\x03\x02\x02\x02\u0C69\u0125\x03\x02\x02\x02\u0C6A" +
		"\u0C87\x05\u03B6\u01DC\x02\u0C6B\u0C76\x05\u03B6\u01DC\x02\u0C6C\u0C6D" +
		"\x05\u03B6\u01DC\x02\u0C6D\u0C6E\x07\u0330\x02\x02\u0C6E\u0C70\x03\x02" +
		"\x02\x02\u0C6F\u0C6C\x03\x02\x02\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70" +
		"\u0C71\x03\x02\x02\x02\u0C71\u0C72\x05\u03B6\u01DC\x02\u0C72\u0C73\x07" +
		"\u0330\x02\x02\u0C73\u0C74\x05\u03B6\u01DC\x02\u0C74\u0C76\x03\x02\x02" +
		"\x02\u0C75\u0C6B\x03\x02\x02\x02\u0C75\u0C6F\x03\x02\x02\x02\u0C76\u0C82" +
		"\x03\x02\x02\x02\u0C77\u0C83\x07\u0323\x02\x02\u0C78\u0C79\x07\u0325\x02" +
		"\x02\u0C79\u0C83\x07\u0324\x02\x02\u0C7A\u0C7B\x07\u0326\x02\x02\u0C7B" +
		"\u0C83\x07\u0323\x02\x02\u0C7C\u0C83\x07\u0324\x02\x02\u0C7D\u0C7E\x07" +
		"\u0324\x02\x02\u0C7E\u0C83\x07\u0323\x02\x02\u0C7F\u0C83\x07\u0325\x02" +
		"\x02\u0C80\u0C81\x07\u0325\x02\x02\u0C81\u0C83\x07\u0323\x02\x02\u0C82" +
		"\u0C77\x03\x02\x02\x02\u0C82\u0C78\x03\x02\x02\x02\u0C82\u0C7A\x03\x02" +
		"\x02\x02\u0C82\u0C7C\x03\x02\x02\x02\u0C82\u0C7D\x03\x02\x02\x02\u0C82" +
		"\u0C7F\x03\x02\x02\x02\u0C82\u0C80\x03\x02\x02\x02\u0C83\u0C84\x03\x02" +
		"\x02\x02\u0C84\u0C85\t\x18\x02\x02\u0C85\u0C87\x03\x02\x02\x02\u0C86\u0C6A" +
		"\x03\x02\x02\x02\u0C86\u0C75\x03\x02\x02\x02\u0C87\u0CA3\x03\x02\x02\x02" +
		"\u0C88\u0C89\x05\u03B6\u01DC\x02\u0C89\u0C8A\x07\u0330\x02\x02\u0C8A\u0C8C" +
		"\x03\x02\x02\x02\u0C8B\u0C88\x03\x02\x02\x02\u0C8B\u0C8C\x03\x02\x02\x02" +
		"\u0C8C\u0C8D\x03\x02\x02\x02\u0C8D\u0C8E\x05\u03B6\u01DC\x02\u0C8E\u0C8F" +
		"\x07\u0330\x02\x02\u0C8F\u0C90\x05\u03B6\u01DC\x02\u0C90\u0C9E\x07\u0335" +
		"\x02\x02\u0C91\u0C9F\x05\u03B6\u01DC\x02\u0C92\u0C93\x05\u03B6\u01DC\x02" +
		"\u0C93\u0C94\x07\u0330\x02\x02\u0C94\u0C96\x03\x02\x02\x02\u0C95\u0C92" +
		"\x03\x02\x02\x02\u0C95\u0C96\x03\x02\x02\x02\u0C96\u0C97\x03\x02\x02\x02" +
		"\u0C97\u0C98\x05\u03B6\u01DC\x02\u0C98\u0C99\x07\u0330\x02\x02\u0C99\u0C9A" +
		"\x05\u03B6\u01DC\x02\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9C\x07\u0337" +
		"\x02\x02\u0C9C\u0C9D\t\x18\x02\x02\u0C9D\u0C9F\x03\x02\x02\x02\u0C9E\u0C91" +
		"\x03\x02\x02\x02\u0C9E\u0C95\x03\x02\x02\x02\u0C9F\u0CA0\x03\x02\x02\x02" +
		"\u0CA0\u0CA1\x07\u0336\x02\x02\u0CA1\u0CA3\x03\x02\x02\x02\u0CA2\u0C86" +
		"\x03\x02\x02\x02\u0CA2\u0C8B\x03\x02\x02\x02\u0CA3\u0127\x03\x02\x02\x02" +
		"\u0CA4\u0CA5\x07\n\x02\x02\u0CA5\u0CA6\x07|\x02\x02\u0CA6\u0CA7\x07R\x02" +
		"\x02\u0CA7\u0CA8\x07\u0144\x02\x02\u0CA8\u0CA9\x05\u03B6\u01DC\x02\u0CA9" +
		"\u0CB9\x07\u013D\x02\x02\u0CAA\u0CAB\x07\u0239\x02\x02\u0CAB\u0CAC\x07" +
		"\u0323\x02\x02\u0CAC\u0CAE\t\x1E\x02\x02\u0CAD\u0CAF\x07\u0337\x02\x02" +
		"\u0CAE\u0CAD\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02\x02\x02\u0CAF\u0CBA\x03" +
		"\x02\x02\x02\u0CB0\u0CB1\x07\u02B3\x02\x02\u0CB1\u0CB2\x07\u0323\x02\x02" +
		"\u0CB2\u0CB4\t\x1E\x02\x02\u0CB3\u0CB5\x07\u0337\x02\x02\u0CB4\u0CB3\x03" +
		"\x02\x02\x02\u0CB4\u0CB5\x03\x02\x02\x02\u0CB5\u0CBA\x03\x02\x02\x02\u0CB6" +
		"\u0CB7\x07\u01C7\x02\x02\u0CB7\u0CB8\x07\u0323\x02\x02\u0CB8\u0CBA\x05" +
		"\u03B6\u01DC\x02\u0CB9\u0CAA\x03\x02\x02\x02\u0CB9\u0CB0\x03\x02\x02\x02" +
		"\u0CB9\u0CB6\x03\x02\x02\x02\u0CBA\u0CBB\x03\x02\x02\x02\u0CBB\u0CB9\x03" +
		"\x02\x02\x02\u0CBB\u0CBC\x03\x02\x02\x02\u0CBC\u0CD4\x03\x02\x02\x02\u0CBD" +
		"\u0CBE\x07\n\x02\x02\u0CBE\u0CBF\x07|\x02\x02\u0CBF\u0CC0\x07R\x02\x02" +
		"\u0CC0\u0CC1\x07\u0144\x02\x02\u0CC1\u0CC2\x05\u03B6\u01DC\x02\u0CC2\u0CC3" +
		"\x07\u017C\x02\x02\u0CC3\u0CC4\x07\u0335\x02\x02\u0CC4\u0CC5\x07\u02FB" +
		"\x02\x02\u0CC5\u0CC6\x07\u0323\x02\x02\u0CC6\u0CC7\x07\u01AA\x02\x02\u0CC7" +
		"\u0CC8\x07\u0337\x02\x02\u0CC8\u0CC9\x07\u0239\x02\x02\u0CC9\u0CCA\x07" +
		"\u0323\x02\x02\u0CCA\u0CCF";
	private static readonly _serializedATNSegment9: string =
		"\x07\u031F\x02\x02\u0CCB\u0CCC\x07\u0337\x02\x02\u0CCC\u0CCD\x07\u01C7" +
		"\x02\x02\u0CCD\u0CCE\x07\u0323\x02\x02\u0CCE\u0CD0\x05\u03B6\u01DC\x02" +
		"\u0CCF\u0CCB\x03\x02\x02\x02\u0CCF\u0CD0\x03\x02\x02\x02\u0CD0\u0CD1\x03" +
		"\x02\x02\x02\u0CD1\u0CD2\x07\u0336\x02\x02\u0CD2\u0CD4\x03\x02\x02\x02" +
		"\u0CD3\u0CA4\x03\x02\x02\x02\u0CD3\u0CBD\x03\x02\x02\x02\u0CD4\u0129\x03" +
		"\x02\x02\x02\u0CD5\u0CD6\x07\n\x02\x02\u0CD6\u0CD7\x07|\x02\x02\u0CD7" +
		"\u0CD8\x07\xB2\x02\x02\u0CD8\u0CDB\x05\u03B6\u01DC\x02\u0CD9\u0CDA\x07" +
		"\x14\x02\x02\u0CDA\u0CDC\x05\u03B6\u01DC\x02\u0CDB\u0CD9\x03\x02\x02\x02" +
		"\u0CDB\u0CDC\x03\x02\x02\x02\u0CDC\u0CDD\x03\x02\x02\x02\u0CDD\u0CDE\t" +
		"\x1F\x02\x02\u0CDE\u0CDF\x07\u0335\x02\x02\u0CDF\u0CE0\x07\u01BE\x02\x02" +
		"\u0CE0\u0CE4\x07\u0323\x02\x02\u0CE1\u0CE5\x07\u031F\x02\x02\u0CE2\u0CE5" +
		"\x07\u0320\x02\x02\u0CE3\u0CE5\x07\xD5\x02\x02\u0CE4\u0CE1\x03\x02\x02" +
		"\x02\u0CE4\u0CE2\x03\x02\x02\x02\u0CE4\u0CE3\x03\x02\x02\x02\u0CE5\u0CE6" +
		"\x03\x02\x02\x02\u0CE6\u0CE7\x07\u0337\x02\x02\u0CE7\u0CE8\x07\xFC\x02" +
		"\x02\u0CE8\u0CEA\x07\u0323\x02\x02\u0CE9\u0CEB\t \x02\x02\u0CEA\u0CE9" +
		"\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02\x02\x02\u0CEB\u0CEC\x03\x02\x02\x02" +
		"\u0CEC\u0CED\x07\u0336\x02\x02\u0CED\u0CEE\x03\x02\x02\x02\u0CEE\u0CF8" +
		"\x07\u017C\x02\x02\u0CEF\u0CF1\x07\u0337\x02\x02\u0CF0\u0CEF\x03\x02\x02" +
		"\x02\u0CF0\u0CF1\x03\x02\x02\x02\u0CF1\u0CF2\x03\x02\x02\x02\u0CF2\u0CF3" +
		"\x07\xB0\x02\x02\u0CF3\u0CF4\x07\u0323\x02\x02\u0CF4\u0CF9\t!\x02\x02" +
		"\u0CF5\u0CF6\x07T\x02\x02\u0CF6\u0CF7\x07\u0323\x02\x02\u0CF7\u0CF9\x05" +
		"\u03B6\u01DC\x02\u0CF8\u0CF0\x03\x02\x02\x02\u0CF8\u0CF5\x03\x02\x02\x02" +
		"\u0CF9\u0CFA\x03\x02\x02\x02\u0CFA\u0CF8\x03\x02\x02\x02\u0CFA\u0CFB\x03" +
		"\x02\x02\x02\u0CFB\u0CFC\x03\x02\x02\x02\u0CFC\u0CFD\x07\u0336\x02\x02" +
		"\u0CFD\u012B\x03\x02\x02\x02\u0CFE\u0CFF\x07I\x02\x02\u0CFF\u0D00\x07" +
		"|\x02\x02\u0D00\u0D01\x07\xB2\x02\x02\u0D01\u0D04\x05\u03B6\u01DC\x02" +
		"\u0D02\u0D03\x07\x14\x02\x02\u0D03\u0D05\x05\u03B6\u01DC\x02\u0D04\u0D02" +
		"\x03\x02\x02\x02\u0D04\u0D05\x03\x02\x02\x02\u0D05\u0D06\x03\x02\x02\x02" +
		"\u0D06\u0D08\x07\x8C\x02\x02\u0D07\u0D09\x07\u0337\x02\x02\u0D08\u0D07" +
		"\x03\x02\x02\x02\u0D08\u0D09\x03\x02\x02\x02\u0D09\u0D0B\x03\x02\x02\x02" +
		"\u0D0A\u0D0C\x07\u0335\x02\x02\u0D0B\u0D0A\x03\x02\x02\x02\u0D0B\u0D0C" +
		"\x03\x02\x02\x02\u0D0C\u0D0F\x03\x02\x02\x02\u0D0D\u0D0E\x07\u01BE\x02" +
		"\x02\u0D0E\u0D10\x07\u0323\x02\x02\u0D0F\u0D0D\x03\x02\x02\x02\u0D0F\u0D10" +
		"\x03\x02\x02\x02\u0D10\u0D14\x03\x02\x02\x02\u0D11\u0D15\x07\u031F\x02" +
		"\x02\u0D12\u0D15\x07\u0320\x02\x02\u0D13\u0D15\x07\xD5\x02\x02\u0D14\u0D11" +
		"\x03\x02\x02\x02\u0D14\u0D12\x03\x02\x02\x02\u0D14\u0D13\x03\x02\x02\x02" +
		"\u0D15\u0D1D\x03\x02\x02\x02\u0D16\u0D17\x07\u0337\x02\x02\u0D17\u0D18" +
		"\x07\xFC\x02\x02\u0D18\u0D1A\x07\u0323\x02\x02\u0D19\u0D1B\t \x02\x02" +
		"\u0D1A\u0D19\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D1C\x03" +
		"\x02\x02\x02\u0D1C\u0D1E\x07\u0336\x02\x02\u0D1D\u0D16\x03\x02\x02\x02" +
		"\u0D1D\u0D1E\x03\x02\x02\x02\u0D1E\u0D2E\x03\x02\x02\x02\u0D1F\u0D29\x07" +
		"\u017C\x02\x02\u0D20\u0D22\x07\u0337\x02\x02\u0D21\u0D20\x03\x02\x02\x02" +
		"\u0D21\u0D22\x03\x02\x02\x02\u0D22\u0D23\x03\x02\x02\x02\u0D23\u0D24\x07" +
		"\xB0\x02\x02\u0D24\u0D25\x07\u0323\x02\x02\u0D25\u0D2A\t!\x02\x02\u0D26" +
		"\u0D27\x07T\x02\x02\u0D27\u0D28\x07\u0323\x02\x02\u0D28\u0D2A\x05\u03B6" +
		"\u01DC\x02\u0D29\u0D21\x03\x02\x02\x02\u0D29\u0D26\x03\x02\x02\x02\u0D2A" +
		"\u0D2B\x03\x02\x02\x02\u0D2B\u0D29\x03\x02\x02\x02\u0D2B\u0D2C\x03\x02" +
		"\x02\x02\u0D2C\u0D2D\x03\x02\x02\x02\u0D2D\u0D2F\x07\u0336\x02\x02\u0D2E" +
		"\u0D1F\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u012D\x03\x02" +
		"\x02\x02\u0D30\u0D31\x07\n\x02\x02\u0D31\u0D32\x07|\x02\x02\u0D32\u0D33" +
		"\x07\u02B2\x02\x02\u0D33\u0D36\x07\u0285\x02\x02\u0D34\u0D37\x05\u03B6" +
		"\u01DC\x02\u0D35\u0D37\x07\u01D4\x02\x02\u0D36\u0D34\x03\x02\x02\x02\u0D36" +
		"\u0D35\x03\x02\x02\x02\u0D37\u0D38\x03\x02\x02\x02\u0D38\u0D39\x07\u017C" +
		"\x02\x02\u0D39\u0D3A\x07\u0335\x02\x02\u0D3A\u0D3B\x07\u0243\x02\x02\u0D3B" +
		"\u0D3C\x07\u0323\x02\x02\u0D3C\u0D62\x07\u031B\x02\x02\u0D3D\u0D3F\x07" +
		"\u0337\x02\x02\u0D3E\u0D3D\x03\x02\x02\x02\u0D3E\u0D3F\x03\x02\x02\x02" +
		"\u0D3F\u0D40\x03\x02\x02\x02\u0D40\u0D41\x07\u018A\x02\x02\u0D41\u0D42" +
		"\x07\u01C4\x02\x02\u0D42\u0D50\x07\u0323\x02\x02\u0D43\u0D51\x07\u019B" +
		"\x02\x02\u0D44\u0D46\x07\u0337\x02\x02\u0D45\u0D44\x03\x02\x02\x02\u0D45" +
		"\u0D46\x03\x02\x02\x02\u0D46\u0D47\x03\x02\x02\x02\u0D47\u0D48\x07\u031B" +
		"\x02\x02\u0D48\u0D49\x07\u015D\x02\x02\u0D49\u0D4D\x07\u031B\x02\x02\u0D4A" +
		"\u0D4B\x07\u0337\x02\x02\u0D4B\u0D4D\x07\u031B\x02\x02\u0D4C\u0D45\x03" +
		"\x02\x02\x02\u0D4C\u0D4A\x03\x02\x02\x02\u0D4D\u0D4E\x03\x02\x02\x02\u0D4E" +
		"\u0D4C\x03\x02\x02\x02\u0D4E\u0D4F\x03\x02\x02\x02\u0D4F\u0D51\x03\x02" +
		"\x02\x02\u0D50\u0D43\x03\x02\x02\x02\u0D50\u0D4C\x03\x02\x02\x02\u0D51" +
		"\u0D63\x03\x02\x02\x02\u0D52\u0D53\x07\u026F\x02\x02\u0D53\u0D5E\x07\u0323" +
		"\x02\x02\u0D54\u0D56\x07\u0337\x02\x02\u0D55\u0D54\x03\x02\x02\x02\u0D55" +
		"\u0D56\x03\x02\x02\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u0D58\x07\u031B" +
		"\x02\x02\u0D58\u0D59\x07\u015D\x02\x02\u0D59\u0D5F\x07\u031B\x02\x02\u0D5A" +
		"\u0D5C\x07\u0337\x02\x02\u0D5B\u0D5A\x03\x02\x02\x02\u0D5B\u0D5C\x03\x02" +
		"\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D\u0D5F\x07\u031B\x02\x02\u0D5E" +
		"\u0D55\x03\x02\x02\x02\u0D5E\u0D5B\x03\x02\x02\x02\u0D5F\u0D60\x03\x02" +
		"\x02\x02\u0D60\u0D5E\x03\x02\x02\x02\u0D60\u0D61\x03\x02\x02\x02\u0D61" +
		"\u0D63\x03\x02\x02\x02\u0D62\u0D3E\x03\x02\x02\x02\u0D62\u0D52\x03\x02" +
		"\x02\x02\u0D63\u0D6A\x03\x02\x02\x02\u0D64\u0D66\x07\u0337\x02\x02\u0D65" +
		"\u0D64\x03\x02\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66\u0D67\x03\x02" +
		"\x02\x02\u0D67\u0D68\x07\u0247\x02\x02\u0D68\u0D69\x07\u0323\x02\x02\u0D69" +
		"\u0D6B\x07\u031B\x02\x02\u0D6A\u0D65\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02" +
		"\x02\x02\u0D6B\u0D72\x03\x02\x02\x02\u0D6C\u0D6E\x07\u0337\x02\x02\u0D6D" +
		"\u0D6C\x03\x02\x02\x02\u0D6D\u0D6E\x03\x02\x02\x02\u0D6E\u0D6F\x03\x02" +
		"\x02\x02\u0D6F\u0D70\x07\u0248\x02\x02\u0D70\u0D71\x07\u0323\x02\x02\u0D71" +
		"\u0D73\x07\u031B\x02\x02\u0D72\u0D6D\x03\x02\x02\x02\u0D72\u0D73\x03\x02" +
		"\x02\x02\u0D73\u0D74\x03\x02\x02\x02\u0D74\u0D75\x07\u0336\x02\x02\u0D75" +
		"\u012F\x03\x02\x02\x02\u0D76\u0D77\x07I\x02\x02\u0D77\u0D78\x07|\x02\x02" +
		"\u0D78\u0D79\x07\u02B2\x02\x02\u0D79\u0D7A\x07\u0285\x02\x02\u0D7A\u0D7B" +
		"\x05\u03B6\u01DC\x02\u0D7B\u0D7C\x07\u017C\x02\x02\u0D7C\u0D7D\x07\u0335" +
		"\x02\x02\u0D7D\u0D7E\x07\u0243\x02\x02\u0D7E\u0D7F\x07\u0323\x02\x02\u0D7F" +
		"\u0DA5\x07\u031B\x02\x02\u0D80\u0D82\x07\u0337\x02\x02\u0D81\u0D80\x03" +
		"\x02\x02\x02\u0D81\u0D82\x03\x02\x02\x02\u0D82\u0D83\x03\x02\x02\x02\u0D83" +
		"\u0D84\x07\u018A\x02\x02\u0D84\u0D85\x07\u01C4\x02\x02\u0D85\u0D93\x07" +
		"\u0323\x02\x02\u0D86\u0D94\x07\u019B\x02\x02\u0D87\u0D89\x07\u0337\x02" +
		"\x02\u0D88\u0D87\x03\x02\x02\x02\u0D88\u0D89\x03\x02\x02\x02\u0D89\u0D8A" +
		"\x03\x02\x02\x02\u0D8A\u0D8B\x07\u031B\x02\x02\u0D8B\u0D8C\x07\u015D\x02" +
		"\x02\u0D8C\u0D90\x07\u031B\x02\x02\u0D8D\u0D8E\x07\u0337\x02\x02\u0D8E" +
		"\u0D90\x07\u031B\x02\x02\u0D8F\u0D88\x03\x02\x02\x02\u0D8F\u0D8D\x03\x02" +
		"\x02\x02\u0D90\u0D91\x03\x02\x02\x02\u0D91\u0D8F\x03\x02\x02\x02\u0D91" +
		"\u0D92\x03\x02\x02\x02\u0D92\u0D94\x03\x02\x02\x02\u0D93\u0D86\x03\x02" +
		"\x02\x02\u0D93\u0D8F\x03\x02\x02\x02\u0D94\u0DA6\x03\x02\x02\x02\u0D95" +
		"\u0D96\x07\u026F\x02\x02\u0D96\u0DA1\x07\u0323\x02\x02\u0D97\u0D99\x07" +
		"\u0337\x02\x02\u0D98\u0D97\x03\x02\x02\x02\u0D98\u0D99\x03\x02\x02\x02" +
		"\u0D99\u0D9A\x03\x02\x02\x02\u0D9A\u0D9B\x07\u031B\x02\x02\u0D9B\u0D9C" +
		"\x07\u015D\x02\x02\u0D9C\u0DA2\x07\u031B\x02\x02\u0D9D\u0D9F\x07\u0337" +
		"\x02\x02\u0D9E\u0D9D\x03\x02\x02\x02\u0D9E\u0D9F\x03\x02\x02\x02\u0D9F" +
		"\u0DA0\x03\x02\x02\x02\u0DA0\u0DA2\x07\u031B\x02\x02\u0DA1\u0D98\x03\x02" +
		"\x02\x02\u0DA1\u0D9E\x03\x02\x02\x02\u0DA2\u0DA3\x03\x02\x02\x02\u0DA3" +
		"\u0DA1\x03\x02\x02\x02\u0DA3\u0DA4\x03\x02\x02\x02\u0DA4\u0DA6\x03\x02" +
		"\x02\x02\u0DA5\u0D81\x03\x02\x02\x02\u0DA5\u0D95\x03\x02\x02\x02\u0DA6" +
		"\u0DAD\x03\x02\x02\x02\u0DA7\u0DA9\x07\u0337\x02\x02\u0DA8\u0DA7\x03\x02" +
		"\x02\x02\u0DA8\u0DA9\x03\x02\x02\x02\u0DA9\u0DAA\x03\x02\x02\x02\u0DAA" +
		"\u0DAB\x07\u0247\x02\x02\u0DAB\u0DAC\x07\u0323\x02\x02\u0DAC\u0DAE\x07" +
		"\u031B\x02\x02\u0DAD\u0DA8\x03\x02\x02\x02\u0DAD\u0DAE\x03\x02\x02\x02" +
		"\u0DAE\u0DB5\x03\x02\x02\x02\u0DAF\u0DB1\x07\u0337\x02\x02\u0DB0\u0DAF" +
		"\x03\x02\x02\x02\u0DB0\u0DB1\x03\x02\x02\x02\u0DB1\u0DB2\x03\x02\x02\x02" +
		"\u0DB2\u0DB3\x07\u0248\x02\x02\u0DB3\u0DB4\x07\u0323\x02\x02\u0DB4\u0DB6" +
		"\x07\u031B\x02\x02\u0DB5\u0DB0\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02" +
		"\x02\u0DB6\u0DB7\x03\x02\x02\x02\u0DB7\u0DB8\x07\u0336\x02\x02\u0DB8\u0131" +
		"\x03\x02\x02\x02\u0DB9\u0DBA\x07\n\x02\x02\u0DBA\u0DBB\x07\u020B\x02\x02" +
		"\u0DBB\u0DBC\x07\u01B1\x02\x02\u0DBC\u0DC7\x05\u03B6\u01DC\x02\u0DBD\u0DC2" +
		"\x07\u02A1\x02\x02\u0DBE\u0DBF\x07\u017C\x02\x02\u0DBF\u0DC0\x07\u0182" +
		"\x02\x02\u0DC0\u0DC1\x07\u0323\x02\x02\u0DC1\u0DC3\t\t\x02\x02\u0DC2\u0DBE" +
		"\x03\x02\x02\x02\u0DC2\u0DC3\x03\x02\x02\x02\u0DC3\u0DC8\x03\x02\x02\x02" +
		"\u0DC4\u0DC8\x07\u02AA\x02\x02\u0DC5\u0DC6\x07\x10\x02\x02\u0DC6\u0DC8" +
		"\x07Z\x02\x02\u0DC7\u0DBD\x03\x02\x02\x02\u0DC7\u0DC4\x03\x02\x02\x02" +
		"\u0DC7\u0DC5\x03\x02\x02\x02\u0DC8\u0133\x03\x02\x02\x02\u0DC9\u0DCA\x07" +
		"I\x02\x02\u0DCA\u0DCB\x07\u020B\x02\x02\u0DCB\u0DCC\x07\u01B1\x02\x02" +
		"\u0DCC\u0DD0\x05\u03B6\u01DC\x02\u0DCD\u0DCE\x07\xE5\x02\x02\u0DCE\u0DCF" +
		"\x07\u01FD\x02\x02\u0DCF\u0DD1\x05\u03B6\u01DC\x02\u0DD0\u0DCD\x03\x02" +
		"\x02\x02\u0DD0\u0DD1\x03\x02\x02\x02\u0DD1\u0DD5\x03\x02\x02\x02\u0DD2" +
		"\u0DD3\x07\x9B\x02\x02\u0DD3\u0DD4\x07\u0283\x02\x02\u0DD4\u0DD6\x07\u031F" +
		"\x02\x02\u0DD5\u0DD2\x03\x02\x02\x02\u0DD5\u0DD6\x03\x02\x02\x02\u0DD6" +
		"\u0DDB\x03\x02\x02\x02\u0DD7\u0DD8\x07\u017C\x02\x02\u0DD8\u0DD9\x07\u0182" +
		"\x02\x02\u0DD9\u0DDA\x07\u0323\x02\x02\u0DDA\u0DDC\t\t\x02\x02\u0DDB\u0DD7" +
		"\x03\x02\x02\x02\u0DDB\u0DDC\x03\x02\x02\x02\u0DDC\u0DDF\x03\x02\x02\x02" +
		"\u0DDD\u0DDE\x07\x10\x02\x02\u0DDE\u0DE0\x07Z\x02\x02\u0DDF\u0DDD\x03" +
		"\x02\x02\x02\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0\u0DE3\x03\x02\x02\x02\u0DE1" +
		"\u0DE2\x07\x14\x02\x02\u0DE2\u0DE4\x05\u03B6\u01DC\x02\u0DE3\u0DE1\x03" +
		"\x02\x02\x02\u0DE3\u0DE4\x03\x02\x02\x02\u0DE4\u0135\x03\x02\x02\x02\u0DE5" +
		"\u0DE6\x07\n\x02\x02\u0DE6\u0DE7\x07\u020B\x02\x02\u0DE7\u0DE8\x07\u02E1" +
		"\x02\x02\u0DE8\u0DF6\x05\u03B6\u01DC\x02\u0DE9\u0DEA\x07\x04\x02\x02\u0DEA" +
		"\u0DEB\x07\u031F\x02\x02\u0DEB\u0DEC\x07\xB0\x02\x02\u0DEC\u0DF7\t\"\x02" +
		"\x02\u0DED\u0DF4\x07h\x02\x02\u0DEE\u0DEF\x07\u031F\x02\x02\u0DEF\u0DF0" +
		"\x07\xB0\x02\x02\u0DF0\u0DF5\t\"\x02\x02\u0DF1\u0DF2\x07\x06\x02\x02\u0DF2" +
		"\u0DF5\t\"\x02\x02\u0DF3\u0DF5\x07\x06\x02\x02\u0DF4\u0DEE\x03\x02\x02" +
		"\x02\u0DF4\u0DF1\x03\x02\x02\x02\u0DF4\u0DF3\x03\x02\x02\x02\u0DF5\u0DF7" +
		"\x03\x02\x02\x02\u0DF6\u0DE9\x03\x02\x02\x02\u0DF6\u0DED\x03\x02\x02\x02" +
		"\u0DF7\u0137\x03\x02\x02\x02\u0DF8\u0DF9\x07I\x02\x02\u0DF9\u0DFA\x07" +
		"\u020B\x02\x02\u0DFA\u0DFB\x07\u02E1\x02\x02\u0DFB\u0E07\x05\u03B6\u01DC" +
		"\x02\u0DFC\u0E05\x07\x8C\x02\x02\u0DFD\u0DFE\x05\u03B6\u01DC\x02\u0DFE" +
		"\u0DFF\x07\u0330\x02\x02\u0DFF\u0E01\x03\x02\x02\x02\u0E00\u0DFD\x03\x02" +
		"\x02\x02\u0E00\u0E01\x03\x02\x02\x02\u0E01\u0E02\x03\x02\x02\x02\u0E02" +
		"\u0E06\x05\u03B6\u01DC\x02\u0E03\u0E04\x07\u0154\x02\x02\u0E04\u0E06\x07" +
		"\u02E1\x02\x02\u0E05\u0E00\x03\x02\x02\x02\u0E05\u0E03\x03\x02\x02\x02" +
		"\u0E06\u0E08\x03\x02\x02\x02\u0E07\u0DFC\x03\x02\x02\x02\u0E07\u0E08\x03" +
		"\x02\x02\x02\u0E08\u0E0B\x03\x02\x02\x02\u0E09\u0E0A\x07\x14\x02\x02\u0E0A" +
		"\u0E0C\x05\u03B6\u01DC\x02\u0E0B\u0E09\x03\x02\x02\x02\u0E0B\u0E0C\x03" +
		"\x02\x02\x02\u0E0C\u0139\x03\x02\x02\x02\u0E0D\u0E0E\x07\n\x02\x02\u0E0E" +
		"\u0E0F\x07\u023C\x02\x02\u0E0F\u0E53\x05\u03B6\u01DC\x02\u0E10\u0E12\t" +
		"\x17\x02\x02\u0E11\u0E10\x03\x02\x02\x02\u0E11\u0E12\x03\x02\x02\x02\u0E12" +
		"\u0E54\x03\x02\x02\x02\u0E13\u0E21\x07\u017C\x02\x02\u0E14\u0E15\x07\xF4" +
		"\x02\x02\u0E15\u0E19\x07\u0323\x02\x02\u0E16\u0E1A\x07\u031F\x02\x02\u0E17" +
		"\u0E18\x07\u0320\x02\x02\u0E18\u0E1A\x07\x95\x02\x02\u0E19\u0E16\x03\x02" +
		"\x02\x02\u0E19\u0E17\x03\x02\x02\x02\u0E1A\u0E1E\x03\x02\x02\x02\u0E1B" +
		"\u0E1D\t#\x02\x02\u0E1C\u0E1B\x03\x02\x02\x02\u0E1D\u0E20\x03\x02\x02" +
		"\x02\u0E1E\u0E1C\x03\x02\x02\x02\u0E1E\u0E1F\x03\x02\x02\x02\u0E1F\u0E22" +
		"\x03\x02\x02\x02\u0E20\u0E1E\x03\x02\x02\x02\u0E21\u0E14\x03\x02\x02\x02" +
		"\u0E21\u0E22\x03\x02\x02\x02\u0E22\u0E2C\x03\x02\x02\x02\u0E23\u0E24\x07" +
		"\xE4\x02\x02\u0E24\u0E25\x07\u0323\x02\x02\u0E25\u0E29\x07\u031F\x02\x02" +
		"\u0E26\u0E28\t#\x02\x02\u0E27\u0E26\x03\x02\x02\x02\u0E28\u0E2B\x03\x02" +
		"\x02\x02\u0E29\u0E27\x03\x02\x02\x02\u0E29\u0E2A\x03\x02\x02\x02\u0E2A" +
		"\u0E2D\x03\x02\x02\x02\u0E2B\u0E29\x03\x02\x02\x02\u0E2C\u0E23\x03\x02" +
		"\x02\x02\u0E2C\u0E2D\x03\x02\x02\x02\u0E2D\u0E31\x03\x02\x02\x02\u0E2E" +
		"\u0E2F\x07[\x02\x02\u0E2F\u0E30\x07\u0323\x02\x02\u0E30\u0E32\x05\u03B6" +
		"\u01DC\x02\u0E31\u0E2E\x03\x02\x02\x02\u0E31\u0E32\x03\x02\x02\x02\u0E32" +
		"\u0E36\x03\x02\x02\x02\u0E33\u0E34\x07\u01D6\x02\x02\u0E34\u0E35\x07\u0323" +
		"\x02\x02\u0E35\u0E37\x05\u03B6\u01DC\x02\u0E36\u0E33\x03\x02\x02\x02\u0E36" +
		"\u0E37\x03\x02\x02\x02\u0E37\u0E3B\x03\x02\x02\x02\u0E38\u0E39\x07\u025E" +
		"\x02\x02\u0E39\u0E3A\x07\u0323\x02\x02\u0E3A\u0E3C\x05\u03B6\u01DC\x02" +
		"\u0E3B\u0E38\x03\x02\x02\x02\u0E3B\u0E3C\x03\x02\x02\x02\u0E3C\u0E40\x03" +
		"\x02\x02\x02\u0E3D\u0E3E\x070\x02\x02\u0E3E\u0E3F\x07\u0323\x02\x02\u0E3F" +
		"\u0E41\t\t\x02\x02\u0E40\u0E3D\x03\x02\x02\x02\u0E40\u0E41\x03\x02\x02" +
		"\x02\u0E41\u0E45\x03\x02\x02\x02\u0E42\u0E43\x071\x02\x02\u0E43\u0E44" +
		"\x07\u0323\x02\x02\u0E44\u0E46\t\t\x02\x02\u0E45\u0E42\x03\x02\x02\x02" +
		"\u0E45\u0E46\x03\x02\x02\x02\u0E46\u0E4A\x03\x02\x02\x02\u0E47\u0E48\x07" +
		"\u01C7\x02\x02\u0E48\u0E49\x07\u0323\x02\x02\u0E49\u0E4B\x05\u03B6\u01DC" +
		"\x02\u0E4A\u0E47\x03\x02\x02\x02\u0E4A\u0E4B\x03\x02\x02\x02\u0E4B\u0E4E" +
		"\x03\x02\x02\x02\u0E4C\u0E4D\x07\u0264\x02\x02\u0E4D\u0E4F\x07\u01C7\x02" +
		"\x02\u0E4E\u0E4C\x03\x02\x02\x02\u0E4E\u0E4F\x03\x02\x02\x02\u0E4F\u0E54" +
		"\x03\x02\x02\x02\u0E50\u0E51\t\x15\x02\x02\u0E51\u0E52\x07\u01C7\x02\x02" +
		"\u0E52\u0E54\x05\u03B6\u01DC\x02\u0E53\u0E11\x03\x02\x02\x02\u0E53\u0E13" +
		"\x03\x02\x02\x02\u0E53\u0E50\x03\x02\x02\x02\u0E54\u013B\x03\x02\x02\x02" +
		"\u0E55\u0E56\x07I\x02\x02\u0E56\u0E57\x07\u023C\x02\x02\u0E57\u0EB2\x05" +
		"\u03B6\u01DC\x02\u0E58\u0E66\x07\u017C\x02\x02\u0E59\u0E5A\x07\xF4\x02" +
		"\x02\u0E5A\u0E5E\x07\u0323\x02\x02\u0E5B\u0E5F\x07\u031F\x02\x02\u0E5C" +
		"\u0E5D\x07\u0320\x02\x02\u0E5D\u0E5F\x07\x95\x02\x02\u0E5E\u0E5B\x03\x02" +
		"\x02\x02\u0E5E\u0E5C\x03\x02\x02\x02\u0E5F\u0E63\x03\x02\x02\x02\u0E60" +
		"\u0E62\t#\x02\x02\u0E61\u0E60\x03\x02\x02\x02\u0E62\u0E65\x03\x02\x02" +
		"\x02\u0E63\u0E61\x03\x02\x02\x02\u0E63\u0E64\x03\x02\x02\x02\u0E64\u0E67" +
		"\x03\x02\x02\x02\u0E65\u0E63\x03\x02\x02\x02\u0E66\u0E59\x03\x02\x02\x02" +
		"\u0E66\u0E67\x03\x02\x02\x02\u0E67\u0E6E\x03\x02\x02\x02\u0E68\u0E6A\x07" +
		"\u0337\x02\x02\u0E69\u0E68\x03\x02\x02\x02\u0E69\u0E6A\x03\x02\x02\x02" +
		"\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B\u0E6C\x07\u0140\x02\x02\u0E6C\u0E6D" +
		"\x07\u0323\x02\x02\u0E6D\u0E6F\x07\u0320\x02\x02\u0E6E\u0E69\x03\x02\x02" +
		"\x02\u0E6E\u0E6F\x03\x02\x02\x02\u0E6F\u0E76\x03\x02\x02\x02\u0E70\u0E72" +
		"\x07\u0337\x02\x02\u0E71\u0E70\x03\x02\x02\x02\u0E71\u0E72\x03\x02\x02" +
		"\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73\u0E74\x07[\x02\x02\u0E74\u0E75" +
		"\x07\u0323\x02\x02\u0E75\u0E77\x05\u03B6\u01DC\x02\u0E76\u0E71\x03\x02" +
		"\x02\x02\u0E76\u0E77\x03\x02\x02\x02\u0E77\u0E7E\x03\x02\x02\x02\u0E78" +
		"\u0E7A\x07\u0337\x02\x02\u0E79\u0E78\x03\x02\x02\x02\u0E79\u0E7A\x03\x02" +
		"\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0E7C\x07\u01D6\x02\x02\u0E7C" +
		"\u0E7D\x07\u0323\x02\x02\u0E7D\u0E7F\x05\u03B6\u01DC\x02\u0E7E\u0E79\x03" +
		"\x02\x02\x02\u0E7E\u0E7F\x03\x02\x02\x02\u0E7F\u0E86\x03\x02\x02\x02\u0E80" +
		"\u0E82\x07\u0337\x02\x02\u0E81\u0E80\x03\x02\x02\x02\u0E81\u0E82\x03\x02" +
		"\x02\x02\u0E82\u0E83\x03\x02\x02\x02\u0E83\u0E84\x071\x02\x02\u0E84\u0E85" +
		"\x07\u0323\x02\x02\u0E85\u0E87\t\t\x02\x02\u0E86\u0E81\x03\x02\x02\x02" +
		"\u0E86\u0E87\x03\x02\x02\x02\u0E87\u0E8E\x03\x02\x02\x02\u0E88\u0E8A\x07" +
		"\u0337\x02\x02\u0E89\u0E88\x03\x02\x02\x02\u0E89\u0E8A\x03\x02\x02\x02" +
		"\u0E8A\u0E8B\x03\x02\x02\x02\u0E8B\u0E8C\x070\x02\x02\u0E8C\u0E8D\x07" +
		"\u0323\x02\x02\u0E8D\u0E8F\t\t\x02\x02\u0E8E\u0E89\x03\x02\x02\x02\u0E8E" +
		"\u0E8F\x03\x02\x02\x02\u0E8F\u0E96\x03\x02\x02\x02\u0E90\u0E92\x07\u0337" +
		"\x02\x02\u0E91\u0E90\x03\x02\x02\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92" +
		"\u0E93\x03\x02\x02\x02\u0E93\u0E94\x07\u01C7\x02\x02\u0E94\u0E95\x07\u0323" +
		"\x02\x02\u0E95\u0E97\x05\u03B6\u01DC\x02\u0E96\u0E91\x03\x02\x02\x02\u0E96" +
		"\u0E97\x03\x02\x02\x02\u0E97\u0EB3\x03\x02\x02\x02\u0E98\u0EB0\x07\x8C" +
		"\x02\x02\u0E99\u0E9A\x07\u017B\x02\x02\u0E9A\u0EA1\x07\u017C\x02\x02\u0E9B" +
		"\u0E9D\x07\u0337\x02\x02\u0E9C\u0E9B\x03\x02\x02\x02\u0E9C\u0E9D\x03\x02" +
		"\x02\x02\u0E9D\u0E9E\x03\x02\x02\x02\u0E9E\u0E9F\x07[\x02\x02\u0E9F\u0EA0" +
		"\x07\u0323\x02\x02\u0EA0\u0EA2\x05\u03B6\u01DC\x02\u0EA1\u0E9C\x03\x02" +
		"\x02\x02\u0EA1\u0EA2\x03\x02\x02\x02\u0EA2\u0EA9\x03\x02\x02\x02\u0EA3" +
		"\u0EA5\x07\u0337\x02\x02\u0EA4\u0EA3\x03\x02\x02\x02\u0EA4\u0EA5\x03\x02" +
		"\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02\u0EA6\u0EA7\x07\u01D6\x02\x02\u0EA7" +
		"\u0EA8\x07\u0323\x02\x02\u0EA8\u0EAA\x07\u031F\x02\x02\u0EA9\u0EA4\x03" +
		"\x02\x02\x02\u0EA9\u0EAA\x03\x02\x02\x02\u0EAA\u0EB1\x03\x02\x02\x02\u0EAB" +
		"\u0EAC\x07+\x02\x02\u0EAC\u0EB1\x05\u03B6\u01DC\x02\u0EAD\u0EAE\x07\x12" +
		"\x02\x02\u0EAE\u0EAF\x07\xAC\x02\x02\u0EAF\u0EB1\x05\u03B6\u01DC\x02\u0EB0" +
		"\u0E99\x03\x02\x02\x02\u0EB0\u0EAB\x03\x02\x02\x02\u0EB0\u0EAD\x03\x02" +
		"\x02\x02\u0EB1\u0EB3\x03\x02\x02\x02\u0EB2\u0E58\x03\x02\x02\x02\u0EB2" +
		"\u0E98\x03\x02\x02\x02\u0EB3\u013D\x03\x02\x02\x02\u0EB4\u0EB5\x07\n\x02" +
		"\x02\u0EB5\u0EB6\x07\u023C\x02\x02\u0EB6\u0EC8\x05\u03B6\u01DC\x02\u0EB7" +
		"\u0EB9\t\x17\x02\x02\u0EB8\u0EB7\x03\x02\x02\x02\u0EB8\u0EB9\x03\x02\x02" +
		"\x02\u0EB9\u0EC9\x03\x02\x02\x02\u0EBA\u0EC6\x07\u017C\x02\x02\u0EBB\u0EBC" +
		"\x07\xF4\x02\x02\u0EBC\u0EBD\x07\u0323\x02\x02\u0EBD\u0EC1\x07\u031F\x02" +
		"\x02\u0EBE\u0EBF\x07\xE4\x02\x02\u0EBF\u0EC0\x07\u0323\x02\x02\u0EC0\u0EC2" +
		"\x07\u031F\x02\x02\u0EC1\u0EBE\x03\x02\x02\x02\u0EC1\u0EC2\x03\x02\x02" +
		"\x02\u0EC2\u0EC7\x03\x02\x02\x02\u0EC3\u0EC4\x07\u025E\x02\x02\u0EC4\u0EC5" +
		"\x07\u0323\x02\x02\u0EC5\u0EC7\x05\u03B6\u01DC\x02\u0EC6\u0EBB\x03\x02" +
		"\x02\x02\u0EC6\u0EC3\x03\x02\x02\x02\u0EC7\u0EC9\x03\x02\x02\x02\u0EC8" +
		"\u0EB8\x03\x02\x02\x02\u0EC8\u0EBA\x03\x02\x02\x02\u0EC9\u013F\x03\x02" +
		"\x02\x02\u0ECA\u0ECB\x07I\x02\x02\u0ECB\u0ECC\x07\u023C\x02\x02\u0ECC" +
		"\u0ECD\x05\u03B6\u01DC\x02\u0ECD\u0ECE\x07\u017C\x02\x02\u0ECE\u0ECF\x07" +
		"\xF4\x02\x02\u0ECF\u0ED0\x07\u0323\x02\x02\u0ED0\u0ED4\x07\u031F\x02\x02" +
		"\u0ED1\u0ED2\x07\u0140\x02\x02\u0ED2\u0ED3\x07\u0323\x02\x02\u0ED3\u0ED5" +
		"\x07\u0320\x02\x02\u0ED4\u0ED1\x03\x02\x02\x02\u0ED4\u0ED5\x03\x02\x02" +
		"\x02\u0ED5\u0141\x03\x02\x02\x02\u0ED6\u0ED7\x07\n\x02\x02\u0ED7\u0ED8" +
		"\x07\u023C\x02\x02\u0ED8\u0EF0\x05\u03B6\u01DC\x02\u0ED9\u0EDB\t\x17\x02" +
		"\x02\u0EDA\u0ED9\x03\x02\x02\x02\u0EDA\u0EDB\x03\x02\x02\x02\u0EDB\u0EF1" +
		"\x03\x02\x02\x02\u0EDC\u0EEE\x07\u017C\x02\x02\u0EDD\u0EDE\x07\xF4\x02" +
		"\x02\u0EDE\u0EDF\x07\u0323\x02\x02\u0EDF\u0EE9\x07\u031F\x02\x02\u0EE0" +
		"\u0EE1\x07\xE4\x02\x02\u0EE1\u0EE2\x07\u0323\x02\x02\u0EE2\u0EE6\x07\u031F" +
		"\x02\x02\u0EE3\u0EE5\t#\x02\x02\u0EE4\u0EE3\x03\x02\x02\x02\u0EE5\u0EE8" +
		"\x03\x02\x02\x02\u0EE6\u0EE4\x03\x02\x02\x02\u0EE6\u0EE7\x03\x02\x02\x02" +
		"\u0EE7\u0EEA\x03\x02\x02\x02\u0EE8\u0EE6\x03\x02\x02\x02\u0EE9\u0EE0\x03" +
		"\x02\x02\x02\u0EE9\u0EEA\x03\x02\x02\x02\u0EEA\u0EEF\x03\x02\x02\x02\u0EEB" +
		"\u0EEC\x07\u025E\x02\x02\u0EEC\u0EED\x07\u0323\x02\x02\u0EED\u0EEF\x05" +
		"\u03B6\u01DC\x02\u0EEE\u0EDD\x03\x02\x02\x02\u0EEE\u0EEB\x03\x02\x02\x02" +
		"\u0EEF\u0EF1\x03\x02\x02\x02\u0EF0\u0EDA\x03\x02\x02\x02\u0EF0\u0EDC\x03" +
		"\x02\x02\x02\u0EF1\u0143\x03\x02\x02\x02\u0EF2\u0EF3\x07I\x02\x02\u0EF3" +
		"\u0EF4\x07\u023C\x02\x02\u0EF4\u0F05\x05\u03B6\u01DC\x02\u0EF5\u0EF6\x07" +
		"\u017C\x02\x02\u0EF6\u0EF7\x07\xF4\x02\x02\u0EF7\u0EF8\x07\u0323\x02\x02" +
		"\u0EF8\u0EFA\x07\u031F\x02\x02\u0EF9\u0EFB\x07\xCE\x02\x02\u0EFA\u0EF9" +
		"\x03\x02\x02\x02\u0EFA\u0EFB\x03\x02\x02\x02\u0EFB\u0F01\x03\x02\x02\x02" +
		"\u0EFC\u0EFD\x070\x02\x02\u0EFD\u0EFF\x07\u0323\x02\x02\u0EFE\u0F00\t" +
		"\t\x02\x02\u0EFF\u0EFE\x03\x02\x02\x02\u0EFF\u0F00\x03\x02\x02\x02\u0F00" +
		"\u0F02\x03\x02\x02\x02\u0F01\u0EFC\x03\x02\x02\x02\u0F01\u0F02\x03\x02" +
		"\x02\x02\u0F02\u0F06\x03\x02\x02\x02\u0F03\u0F04\x07\x8C\x02\x02\u0F04" +
		"\u0F06\x07\u017B\x02\x02\u0F05\u0EF5\x03\x02\x02\x02\u0F05\u0F03\x03\x02" +
		"\x02\x02\u0F06\u0145\x03\x02\x02\x02\u0F07\u0F08\x07\n\x02\x02\u0F08\u0F09" +
		"\x07\xBD\x02\x02\u0F09\u0F1F\x07\xAC\x02\x02\u0F0A\u0F0C\x07\u0205\x02" +
		"\x02\u0F0B\u0F0A\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02\x02\x02\u0F0C\u0F0D" +
		"\x03\x02\x02\x02\u0F0D\u0F0E\x07\u010F\x02\x02\u0F0E\u0F0F\x07\u017C\x02" +
		"\x02\u0F0F\u0F10\x07\u01EE\x02\x02\u0F10\u0F11\x07&\x02\x02\u0F11\u0F12" +
		"\x07\xF4\x02\x02\u0F12\u0F13\x07\u0323\x02\x02\u0F13\u0F20\x07\u031F\x02" +
		"\x02\u0F14\u0F15\t\x15\x02\x02\u0F15\u0F16\x07\u01EE\x02\x02\u0F16\u0F1D" +
		"\x07&\x02\x02\u0F17\u0F18\x07\u0138\x02\x02\u0F18\u0F19\x07\xBD\x02\x02" +
		"\u0F19\u0F1E\x07\xAC\x02\x02\u0F1A\u0F1B\x07\xF4\x02\x02\u0F1B\u0F1C\x07" +
		"\u0323\x02\x02\u0F1C\u0F1E\x07\u031F\x02\x02\u0F1D\u0F17\x03\x02\x02\x02" +
		"\u0F1D\u0F1A\x03\x02\x02\x02\u0F1E\u0F20\x03\x02\x02\x02\u0F1F\u0F0B\x03" +
		"\x02\x02\x02\u0F1F\u0F14\x03\x02\x02\x02\u0F20\u0147\x03\x02\x02\x02\u0F21" +
		"\u0F22\x07I\x02\x02\u0F22\u0F23\x07\xBD\x02\x02\u0F23\u0F24\x07\xAC\x02" +
		"\x02\u0F24\u0F25\x07\u01EE\x02\x02\u0F25\u0F26\x07&\x02\x02\u0F26\u0F27" +
		"\x07\xF4\x02\x02\u0F27\u0F28\x07\u0323\x02\x02\u0F28\u0F29\x07\u031F\x02" +
		"\x02\u0F29\u0149\x03\x02\x02\x02\u0F2A\u0F2B\x07\n\x02\x02\u0F2B\u0F2C" +
		"\x07\xBD\x02\x02\u0F2C\u0F48\x07\xAC\x02\x02\u0F2D\u0F2F\x07\u0205\x02" +
		"\x02\u0F2E\u0F2D\x03\x02\x02\x02\u0F2E\u0F2F\x03\x02\x02\x02\u0F2F\u0F30" +
		"\x03\x02\x02\x02\u0F30\u0F31\x07\u010F\x02\x02\u0F31\u0F32\x07\u017C\x02" +
		"\x02\u0F32\u0F33\x07\u01EE\x02\x02\u0F33\u0F34\x07&\x02\x02\u0F34\u0F35" +
		"\x07\xF4\x02\x02\u0F35\u0F36\x07\u0323\x02\x02\u0F36\u0F49\x07\u031F\x02" +
		"\x02\u0F37\u0F38\x07\x04\x02\x02\u0F38\u0F39\x07\u01EE\x02\x02\u0F39\u0F40" +
		"\x07&\x02\x02\u0F3A\u0F3B\x07\u0138\x02\x02\u0F3B\u0F3C\x07\xBD\x02\x02" +
		"\u0F3C\u0F41\x07\xAC\x02\x02\u0F3D\u0F3E\x07\xF4\x02\x02\u0F3E\u0F3F\x07" +
		"\u0323\x02\x02\u0F3F\u0F41\x07\u031F\x02\x02\u0F40\u0F3A\x03\x02\x02\x02" +
		"\u0F40\u0F3D\x03\x02\x02\x02\u0F41\u0F49\x03\x02\x02\x02\u0F42\u0F43\x07" +
		"h\x02\x02\u0F43\u0F44\x07\u01EE\x02\x02\u0F44\u0F45\x07&\x02\x02\u0F45" +
		"\u0F46\x07\xF4\x02\x02\u0F46\u0F47\x07\u0323\x02\x02\u0F47\u0F49\x07\u031F" +
		"\x02\x02\u0F48\u0F2E\x03\x02\x02\x02\u0F48\u0F37\x03\x02\x02\x02\u0F48" +
		"\u0F42\x03\x02\x02\x02\u0F49\u014B\x03\x02\x02\x02\u0F4A\u0F4B\x07I\x02" +
		"\x02\u0F4B\u0F4C\x07\xBD\x02\x02\u0F4C\u0F52\x07\xAC\x02\x02\u0F4D\u0F4E" +
		"\x07\u01EE\x02\x02\u0F4E\u0F4F\x07&\x02\x02\u0F4F\u0F50\x07\xF4\x02\x02" +
		"\u0F50\u0F51\x07\u0323\x02\x02\u0F51\u0F53\x07\u031F\x02\x02\u0F52\u0F4D" +
		"\x03\x02\x02\x02\u0F52\u0F53\x03\x02\x02\x02\u0F53\u014D\x03\x02\x02\x02" +
		"\u0F54\u0F55\x07\n\x02\x02\u0F55\u0F56\x07\u0251\x02\x02\u0F56\u0F57\x07" +
		"\u02FB\x02\x02\u0F57\u0F58\x05\u03B6\u01DC\x02\u0F58\u0F59\x07\u0303\x02" +
		"\x02\u0F59\u0F62\x07\u0323\x02\x02\u0F5A\u0F63\x07\xD5\x02\x02\u0F5B\u0F63" +
		"\x07\u01EA\x02\x02\u0F5C\u0F63\x07\u030A\x02\x02\u0F5D\u0F5E\x07\u0302" +
		"\x02\x02\u0F5E\u0F5F\x07\u017C\x02\x02\u0F5F\u0F60\x07\u012E\x02\x02\u0F60" +
		"\u0F61\x07\u01B8\x02\x02\u0F61\u0F63\x05\u03B6\u01DC\x02\u0F62\u0F5A\x03" +
		"\x02\x02\x02\u0F62\u0F5B\x03\x02\x02\x02\u0F62\u0F5C\x03\x02\x02\x02\u0F62" +
		"\u0F5D\x03\x02\x02\x02\u0F63\u014F\x03\x02\x02\x02\u0F64\u0F65\x07\n\x02" +
		"\x02\u0F65\u0F66\x07\u0280\x02\x02\u0F66\u0F67\x07\x8E\x02\x02\u0F67\u0F68" +
		"\x05\u03B6\u01DC\x02\u0F68\u0F69\x07\u0335\x02\x02\u0F69\u0F6A\x07\u0336" +
		"\x02\x02\u0F6A\u0F6B\t$\x02\x02\u0F6B\u0F6C\x07\u0297\x02\x02\u0F6C\u0F6D" +
		"\x07\u0335\x02\x02\u0F6D\u0F6E\x07\u031B\x02\x02\u0F6E\u0F6F\x07\u0336" +
		"\x02\x02\u0F6F\u0151\x03\x02\x02\x02\u0F70\u0F71\x07\n\x02\x02\u0F71\u0F72" +
		"\x07\u0280\x02\x02\u0F72\u0F73\x07\u012F\x02\x02\u0F73\u0F74\x05\u03B6" +
		"\u01DC\x02\u0F74\u0F75\x07\u0263\x02\x02\u0F75\u0F77\x07\u0170\x02\x02" +
		"\u0F76\u0F78\x05\u03B6\u01DC\x02\u0F77\u0F76\x03\x02\x02\x02\u0F77\u0F78" +
		"\x03\x02\x02\x02\u0F78\u0153\x03\x02\x02\x02\u0F79\u0F7A\x07\n\x02\x02" +
		"\u0F7A\u0F7B\x07\u02A7\x02\x02\u0F7B\u0F7C\x07\u0138\x02\x02\u0F7C\u0F7D" +
		"\x07\u01A9\x02\x02\u0F7D\u0F7E\x05\u03B6\u01DC\x02\u0F7E\u0F82\x07\u017C" +
		"\x02\x02\u0F7F\u0F80\x07\u0171\x02\x02\u0F80\u0F81\x07\u0323\x02\x02\u0F81" +
		"\u0F83\x05\u03B6\u01DC\x02\u0F82\u0F7F\x03\x02\x02\x02\u0F82\u0F83\x03" +
		"\x02\x02\x02\u0F83\u0F88\x03\x02\x02\x02\u0F84\u0F85\x07\u0337\x02\x02" +
		"\u0F85\u0F86\x07\f\x02\x02\u0F86\u0F87\x07\u0323\x02\x02\u0F87\u0F89\t" +
		"\t\x02\x02\u0F88\u0F84\x03\x02\x02\x02\u0F88\u0F89\x03\x02\x02\x02\u0F89" +
		"\u0155\x03\x02";
	private static readonly _serializedATNSegment10: string =
		"\x02\x02\u0F8A\u0F8B\x07I\x02\x02\u0F8B\u0F8C\x07\u02A7\x02\x02\u0F8C" +
		"\u0F8D\x07\u0138\x02\x02\u0F8D\u0F8E\x07\u01A9\x02\x02\u0F8E\u0F91\x05" +
		"\u03B6\u01DC\x02\u0F8F\u0F90\x07\x14\x02\x02\u0F90\u0F92\x05\u03B6\u01DC" +
		"\x02\u0F91\u0F8F\x03\x02\x02\x02\u0F91\u0F92\x03\x02\x02\x02\u0F92\u0F93" +
		"\x03\x02\x02\x02\u0F93\u0F94\x07\u015D\x02\x02\u0F94\u0F95\x07\u0138\x02" +
		"\x02\u0F95\u0F96\x07\u031F\x02\x02\u0F96\u0F9A\x07\u017C\x02\x02\u0F97" +
		"\u0F98\x07\u0171\x02\x02\u0F98\u0F99\x07\u0323\x02\x02\u0F99\u0F9B\x05" +
		"\u03B6\u01DC\x02\u0F9A\u0F97\x03\x02\x02\x02\u0F9A\u0F9B\x03\x02\x02\x02" +
		"\u0F9B\u0FA0\x03\x02\x02\x02\u0F9C\u0F9D\x07\u0337\x02\x02\u0F9D\u0F9E" +
		"\x07\f\x02\x02\u0F9E\u0F9F\x07\u0323\x02\x02\u0F9F\u0FA1\t\t\x02\x02\u0FA0" +
		"\u0F9C\x03\x02\x02\x02\u0FA0\u0FA1\x03\x02\x02\x02\u0FA1\u0157\x03\x02" +
		"\x02\x02\u0FA2\u0FA3\x07I\x02\x02\u0FA3\u0FA4\x07\u02B2\x02\x02\u0FA4" +
		"\u0FA5\x07\u0285\x02\x02\u0FA5\u100C\x05\u03B6\u01DC\x02\u0FA6\u0FA7\x07" +
		"\u017C\x02\x02\u0FA7\u0FAE\x07\u0335\x02\x02\u0FA8\u0FAA\x07\u0337\x02" +
		"\x02\u0FA9\u0FA8\x03\x02\x02\x02\u0FA9\u0FAA\x03\x02\x02\x02\u0FAA\u0FAB" +
		"\x03\x02\x02\x02\u0FAB\u0FAC\x07\u0254\x02\x02\u0FAC\u0FAD\x07\u0323\x02" +
		"\x02\u0FAD\u0FAF\x07\u031B\x02\x02\u0FAE\u0FA9\x03\x02\x02\x02\u0FAE\u0FAF" +
		"\x03\x02\x02\x02\u0FAF\u0FB6\x03\x02\x02\x02\u0FB0\u0FB2\x07\u0337\x02" +
		"\x02\u0FB1\u0FB0\x03\x02\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u0FB3" +
		"\x03\x02\x02\x02\u0FB3\u0FB4\x07\u0243\x02\x02\u0FB4\u0FB5\x07\u0323\x02" +
		"\x02\u0FB5\u0FB7\x07\u031B\x02\x02\u0FB6\u0FB1\x03\x02\x02\x02\u0FB6\u0FB7" +
		"\x03\x02\x02\x02\u0FB7\u0FBE\x03\x02\x02\x02\u0FB8\u0FBA\x07\u0337\x02" +
		"\x02\u0FB9\u0FB8\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA\u0FBB" +
		"\x03\x02\x02\x02\u0FBB\u0FBC\x07\u01AF\x02\x02\u0FBC\u0FBD\x07\u0323\x02" +
		"\x02\u0FBD\u0FBF\x07\u031B\x02\x02\u0FBE\u0FB9\x03\x02\x02\x02\u0FBE\u0FBF" +
		"\x03\x02\x02\x02\u0FBF\u0FE9\x03\x02\x02\x02\u0FC0\u0FC2\x07\u0337\x02" +
		"\x02\u0FC1\u0FC0\x03\x02\x02\x02\u0FC1\u0FC2\x03\x02\x02\x02\u0FC2\u0FC3" +
		"\x03\x02\x02\x02\u0FC3\u0FC4\x07\u018A\x02\x02\u0FC4\u0FC5\x07\u012D\x02" +
		"\x02\u0FC5\u0FE7\x07\u0323\x02\x02\u0FC6\u0FE8\x07\u019B\x02\x02\u0FC7" +
		"\u0FD1\x07\u0335\x02\x02\u0FC8\u0FCA\x07\u0337\x02\x02\u0FC9\u0FC8\x03" +
		"\x02\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02\u0FCA\u0FCF\x03\x02\x02\x02\u0FCB" +
		"\u0FD0\x07\u031B\x02\x02\u0FCC\u0FCD\x07\u031B\x02\x02\u0FCD\u0FCE\x07" +
		"\u015D\x02\x02\u0FCE\u0FD0\x07\u031B\x02\x02\u0FCF\u0FCB\x03\x02\x02\x02" +
		"\u0FCF\u0FCC\x03\x02\x02\x02\u0FD0\u0FD2\x03\x02\x02\x02\u0FD1\u0FC9\x03" +
		"\x02\x02\x02\u0FD2\u0FD3\x03\x02\x02\x02\u0FD3\u0FD1\x03\x02\x02\x02\u0FD3" +
		"\u0FD4\x03\x02\x02\x02\u0FD4\u0FD5\x03\x02\x02\x02\u0FD5\u0FE8\x07\u0336" +
		"\x02\x02\u0FD6\u0FD7\x07\u026F\x02\x02\u0FD7\u0FD8\x07\u0323\x02\x02\u0FD8" +
		"\u0FE2\x07\u0335\x02\x02\u0FD9\u0FDB\x07\u0337\x02\x02\u0FDA\u0FD9\x03" +
		"\x02\x02\x02\u0FDA\u0FDB\x03\x02\x02\x02\u0FDB\u0FE0\x03\x02\x02\x02\u0FDC" +
		"\u0FE1\x07\u031B\x02\x02\u0FDD\u0FDE\x07\u031B\x02\x02\u0FDE\u0FDF\x07" +
		"\u015D\x02\x02\u0FDF\u0FE1\x07\u031B\x02\x02\u0FE0\u0FDC\x03\x02\x02\x02" +
		"\u0FE0\u0FDD\x03\x02\x02\x02\u0FE1\u0FE3\x03\x02\x02\x02\u0FE2\u0FDA\x03" +
		"\x02\x02\x02\u0FE3\u0FE4\x03\x02\x02\x02\u0FE4\u0FE2\x03\x02\x02\x02\u0FE4" +
		"\u0FE5\x03\x02\x02\x02\u0FE5\u0FE6\x03\x02\x02\x02\u0FE6\u0FE8\x07\u0336" +
		"\x02\x02\u0FE7\u0FC6\x03\x02\x02\x02\u0FE7\u0FC7\x03\x02\x02\x02\u0FE7" +
		"\u0FD6\x03\x02\x02\x02\u0FE8\u0FEA\x03\x02\x02\x02\u0FE9\u0FC1\x03\x02" +
		"\x02\x02\u0FE9\u0FEA\x03\x02\x02\x02\u0FEA\u0FF1\x03\x02\x02\x02\u0FEB" +
		"\u0FED\x07\u0337\x02\x02\u0FEC\u0FEB\x03\x02\x02\x02\u0FEC\u0FED\x03\x02" +
		"\x02\x02\u0FED\u0FEE\x03\x02\x02\x02\u0FEE\u0FEF\x07\u0256\x02\x02\u0FEF" +
		"\u0FF0\x07\u0323\x02\x02\u0FF0\u0FF2\x07\u031B\x02\x02\u0FF1\u0FEC\x03" +
		"\x02\x02\x02\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2\u0FF9\x03\x02\x02\x02\u0FF3" +
		"\u0FF5\x07\u0337\x02\x02\u0FF4\u0FF3\x03\x02\x02\x02\u0FF4\u0FF5\x03\x02" +
		"\x02\x02\u0FF5\u0FF6\x03\x02\x02\x02\u0FF6\u0FF7\x07\u0247\x02\x02\u0FF7" +
		"\u0FF8\x07\u0323\x02\x02\u0FF8\u0FFA\x07\u031B\x02\x02\u0FF9\u0FF4\x03" +
		"\x02\x02\x02\u0FF9\u0FFA\x03\x02\x02\x02\u0FFA\u1001\x03\x02\x02\x02\u0FFB" +
		"\u0FFD\x07\u0337\x02\x02\u0FFC\u0FFB\x03\x02\x02\x02\u0FFC\u0FFD\x03\x02" +
		"\x02\x02\u0FFD\u0FFE\x03\x02\x02\x02\u0FFE\u0FFF\x07\u0255\x02\x02\u0FFF" +
		"\u1000\x07\u0323\x02\x02\u1000\u1002\x07\u031B\x02\x02\u1001\u0FFC\x03" +
		"\x02\x02\x02\u1001\u1002\x03\x02\x02\x02\u1002\u1009\x03\x02\x02\x02\u1003" +
		"\u1005\x07\u0337\x02\x02\u1004\u1003\x03\x02\x02\x02\u1004\u1005\x03\x02" +
		"\x02\x02\u1005\u1006\x03\x02\x02\x02\u1006\u1007\x07\u0246\x02\x02\u1007" +
		"\u1008\x07\u0323\x02\x02\u1008\u100A\x07\u031B\x02\x02\u1009\u1004\x03" +
		"\x02\x02\x02\u1009\u100A\x03\x02\x02\x02\u100A\u100B\x03\x02\x02\x02\u100B" +
		"\u100D\x07\u0336\x02\x02\u100C\u0FA6\x03\x02\x02\x02\u100C\u100D\x03\x02" +
		"\x02\x02\u100D\u0159\x03\x02\x02\x02\u100E\u100F\x07\n\x02\x02\u100F\u1010" +
		"\x07\u02B2\x02\x02\u1010\u1026\x07\x91\x02\x02\u1011\u1027\t%\x02\x02" +
		"\u1012\u1013\x07\u017C\x02\x02\u1013\u1014\x07\u0335\x02\x02\u1014\u1015" +
		"\x072\x02\x02\u1015\u101B\x07\u0323\x02\x02\u1016\u1017\x05\u03B6\u01DC" +
		"\x02\u1017\u1018\x07\u0330\x02\x02\u1018\u1019\x05\u03B6\u01DC\x02\u1019" +
		"\u101C\x03\x02\x02\x02\u101A\u101C\x07\xDF\x02\x02\u101B\u1016\x03\x02" +
		"\x02\x02\u101B\u101A\x03\x02\x02\x02\u101C\u101D\x03\x02\x02\x02\u101D" +
		"\u1027\x07\u0336\x02\x02\u101E\u101F\x07\u0114\x02\x02\u101F\u1027\x07" +
		"\u014A\x02\x02\u1020\u1021\x07\u017C\x02\x02\u1021\u1022\x07\u0335\x02" +
		"\x02\u1022\u1023\x07\xC4\x02\x02\u1023\u1024\x07\u0323\x02\x02\u1024\u1025" +
		"\x07\u031B\x02\x02\u1025\u1027\x07\u0336\x02\x02\u1026\u1011\x03\x02\x02" +
		"\x02\u1026\u1012\x03\x02\x02\x02\u1026\u101E\x03\x02\x02\x02\u1026\u1020" +
		"\x03\x02\x02\x02\u1027\u015B\x03\x02\x02\x02\u1028\u1029\x07\n\x02\x02" +
		"\u1029\u102A\x07\u0121\x02\x02\u102A\u1032\x05\u03B6\u01DC\x02\u102B\u102C" +
		"\t\x15\x02\x02\u102C\u102D\x07\xC7\x02\x02\u102D\u1033\x05\u03B6\u01DC" +
		"\x02\u102E\u102F\x07\u017C\x02\x02\u102F\u1030\x07\u025E\x02\x02\u1030" +
		"\u1031\x07\u0323\x02\x02\u1031\u1033\x05\u03B6\u01DC\x02\u1032\u102B\x03" +
		"\x02\x02\x02\u1032\u102E\x03\x02\x02\x02\u1033\u015D\x03\x02\x02\x02\u1034" +
		"\u1035\x07I\x02\x02\u1035\u1036\x07\u0121\x02\x02\u1036\u1039\x05\u03B6" +
		"\u01DC\x02\u1037\u1038\x07\x14\x02\x02\u1038\u103A\x05\u03B6\u01DC\x02" +
		"\u1039\u1037\x03\x02\x02\x02\u1039\u103A\x03\x02\x02\x02\u103A\u015F\x03" +
		"\x02\x02\x02\u103B\u103C\x07I\x02\x02\u103C\u103D\x07\u02B8\x02\x02\u103D" +
		"\u1040\x05\u03B6\u01DC\x02\u103E\u103F\x07\x14\x02\x02\u103F\u1041\x05" +
		"\u03B6\u01DC\x02\u1040\u103E\x03\x02\x02\x02\u1040\u1041\x03\x02\x02\x02" +
		"\u1041\u1042\x03\x02\x02\x02\u1042\u1049\x07\u017C\x02\x02\u1043\u1045" +
		"\x07\u0337\x02\x02\u1044\u1043\x03\x02\x02\x02\u1044\u1045\x03\x02\x02" +
		"\x02\u1045\u1046\x03\x02\x02\x02\u1046\u1047\x07\u013A\x02\x02\u1047\u1048" +
		"\x07\u0323\x02\x02\u1048\u104A\x07\u031F\x02\x02\u1049\u1044\x03\x02\x02" +
		"\x02\u1049\u104A\x03\x02\x02\x02\u104A\u1051\x03\x02\x02\x02\u104B\u104D" +
		"\x07\u0337\x02\x02\u104C\u104B\x03\x02\x02\x02\u104C\u104D\x03\x02\x02" +
		"\x02\u104D\u104E\x03\x02\x02\x02\u104E\u104F\x07\u01AC\x02\x02\u104F\u1050" +
		"\x07\u0323\x02\x02\u1050\u1052\x07\u031F\x02\x02\u1051\u104C\x03\x02\x02" +
		"\x02\u1051\u1052\x03\x02\x02\x02\u1052\u1059\x03\x02\x02\x02\u1053\u1055" +
		"\x07\u0337\x02\x02\u1054\u1053\x03\x02\x02\x02\u1054\u1055\x03\x02\x02" +
		"\x02\u1055\u1056\x03\x02\x02\x02\u1056\u1057\x07\xB3\x02\x02\u1057\u1058" +
		"\x07\u0323\x02\x02\u1058\u105A\x07\u031B\x02\x02\u1059\u1054\x03\x02\x02" +
		"\x02\u1059\u105A\x03\x02\x02\x02\u105A\u105C\x03\x02\x02\x02\u105B\u105D" +
		"\x07\u0337\x02\x02\u105C\u105B\x03\x02\x02\x02\u105C\u105D\x03\x02\x02" +
		"\x02\u105D\u105E\x03\x02\x02\x02\u105E\u105F\x07\u0186\x02\x02\u105F\u1060" +
		"\x07\u0323\x02\x02\u1060\u1065\t&\x02\x02\u1061\u1062\x07\u0337\x02\x02" +
		"\u1062\u1063\x07\u0258\x02\x02\u1063\u1064\x07\u0323\x02\x02\u1064\u1066" +
		"\t&\x02\x02\u1065\u1061\x03\x02\x02\x02\u1065\u1066\x03\x02\x02\x02\u1066" +
		"\u0161\x03\x02\x02\x02\u1067\u1068\x07I\x02\x02\u1068\u106C\x07\u012A" +
		"\x02\x02\u1069\u106A\x05\u03B6\u01DC\x02\u106A\u106B\x07\u0330\x02\x02" +
		"\u106B\u106D\x03\x02\x02\x02\u106C\u1069\x03\x02\x02\x02\u106C\u106D\x03" +
		"\x02\x02\x02\u106D\u106E\x03\x02\x02\x02\u106E\u106F\x05\u03B6\u01DC\x02" +
		"\u106F\u1070\x07\x10\x02\x02\u1070\u1071\x05\u02E2\u0172\x02\u1071\u0163" +
		"\x03\x02\x02\x02\u1072\u1073\x07\n\x02\x02\u1073\u1074\x07\u012E\x02\x02" +
		"\u1074\u1075\x05\u03B6\u01DC\x02\u1075\u107F\x07\u0162\x02\x02\u1076\u107C" +
		"\x07\u0272\x02\x02\u1077\u107C\x07\u02FB\x02\x02\u1078\u1079\x07\u030E" +
		"\x02\x02\u1079\u107A\x07\u012E\x02\x02\u107A\u107C\x07\u01B8\x02\x02\u107B" +
		"\u1076\x03\x02\x02\x02\u107B\u1077\x03\x02\x02\x02\u107B\u1078\x03\x02" +
		"\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D\u107E\x07\u0339\x02\x02\u107E" +
		"\u1080\x07\u0339\x02\x02\u107F\u107B\x03\x02\x02\x02\u107F\u1080\x03\x02" +
		"\x02\x02\u1080\u1081\x03\x02\x02\x02\u1081\u1084\x05\u03B6\u01DC\x02\u1082" +
		"\u1083\x07\u0330\x02\x02\u1083\u1085\x05\u03B6\u01DC\x02\u1084\u1082\x03" +
		"\x02\x02\x02\u1084\u1085\x03\x02\x02\x02\u1085\u0165\x03\x02\x02\x02\u1086" +
		"\u1087\x07I\x02\x02\u1087\u108F\x07\u012E\x02\x02\u1088\u1090\x05\u03B6" +
		"\u01DC\x02\u1089\u108A\x07\x14\x02\x02\u108A\u1090\x05\u03B6\u01DC\x02" +
		"\u108B\u108C\x05\u03B6\u01DC\x02\u108C\u108D\x07\x14\x02\x02\u108D\u108E" +
		"\x05\u03B6\u01DC\x02\u108E\u1090\x03\x02\x02\x02\u108F\u1088\x03\x02\x02" +
		"\x02\u108F\u1089\x03\x02\x02\x02\u108F\u108B\x03\x02\x02\x02\u1090\u10AD" +
		"\x03\x02\x02\x02\u1091\u10AC\x05\u01EE\xF8\x02\u1092\u10AC\x05\u01F2\xFA" +
		"\x02\u1093\u1094\t\'\x02\x02\u1094\u1095\t(\x02\x02\u1095\u1099\x07\xE5" +
		"\x02\x02\u1096\u1097\x07\u012E\x02\x02\u1097\u1098\x07\u0339\x02\x02\u1098" +
		"\u109A\x07\u0339\x02\x02\u1099\u1096\x03\x02\x02\x02\u1099\u109A\x03\x02" +
		"\x02\x02\u109A\u109B\x03\x02\x02\x02\u109B\u109C\x05\u03B6\u01DC\x02\u109C" +
		"\u109D\x07\u015D\x02\x02\u109D\u109E\x05\u03B6\u01DC\x02\u109E\u10AC\x03" +
		"\x02\x02\x02\u109F\u10A0\x07\u011D\x02\x02\u10A0\u10A1\t(\x02\x02\u10A1" +
		"\u10A5\x07\xE5\x02\x02\u10A2\u10A3\x07\u012E\x02\x02\u10A3\u10A4\x07\u0339" +
		"\x02\x02\u10A4\u10A6\x07\u0339\x02\x02\u10A5\u10A2\x03\x02\x02\x02\u10A5" +
		"\u10A6\x03\x02\x02\x02\u10A6\u10A7\x03\x02\x02\x02\u10A7\u10A8\x05\u03B6" +
		"\u01DC\x02\u10A8\u10A9\x07\x8C\x02\x02\u10A9\u10AA\x05\u03B6\u01DC\x02" +
		"\u10AA\u10AC\x03\x02\x02\x02\u10AB\u1091\x03\x02\x02\x02\u10AB\u1092\x03" +
		"\x02\x02\x02\u10AB\u1093\x03\x02\x02\x02\u10AB\u109F\x03\x02\x02\x02\u10AC" +
		"\u10AF\x03\x02\x02\x02\u10AD\u10AB\x03\x02\x02\x02\u10AD\u10AE\x03\x02" +
		"\x02\x02\u10AE\u0167\x03\x02\x02\x02\u10AF\u10AD\x03\x02\x02\x02\u10B0" +
		"\u10B1\x07I\x02\x02\u10B1\u10B2\x07\u012E\x02\x02\u10B2\u10B5\x05\u03B6" +
		"\u01DC\x02\u10B3\u10B4\x07\x14\x02\x02\u10B4\u10B6\x05\u03B6\u01DC\x02" +
		"\u10B5\u10B3\x03\x02\x02\x02\u10B5\u10B6\x03\x02\x02\x02\u10B6\u0169\x03" +
		"\x02\x02\x02\u10B7\u10B8\x07\n\x02\x02\u10B8\u10B9\x07\u012E\x02\x02\u10B9" +
		"\u10BA\x05\u03B6\u01DC\x02\u10BA\u10BE\x07\u0162\x02\x02\u10BB\u10BC\x07" +
		"\u0272\x02\x02\u10BC\u10BD\x07\u0339\x02\x02\u10BD\u10BF\x07\u0339\x02" +
		"\x02\u10BE\u10BB\x03\x02\x02\x02\u10BE\u10BF\x03\x02\x02\x02\u10BF\u10C0" +
		"\x03\x02\x02\x02\u10C0\u10C3\x05\u03B6\u01DC\x02\u10C1\u10C2\x07\u0330" +
		"\x02\x02\u10C2\u10C4\x07\u031C\x02\x02\u10C3\u10C1\x03\x02\x02\x02\u10C3" +
		"\u10C4\x03\x02\x02\x02\u10C4\u016B\x03\x02\x02\x02\u10C5\u10C6\x07I\x02" +
		"\x02\u10C6\u10C7\x07\u02C2\x02\x02\u10C7\u10C8\x07\u0290\x02\x02\u10C8" +
		"\u10C9\x07\u0234\x02\x02\u10C9\u10D1\x05\u03B6\u01DC\x02\u10CA\u10CE\x07" +
		"\x8C\x02\x02\u10CB\u10CC\x05\u03B6\u01DC\x02\u10CC\u10CD\x07\u0330\x02" +
		"\x02\u10CD\u10CF\x03\x02\x02\x02\u10CE\u10CB\x03\x02\x02\x02\u10CE\u10CF" +
		"\x03\x02\x02\x02\u10CF\u10D0\x03\x02\x02\x02\u10D0\u10D2\x05\u03B6\u01DC" +
		"\x02\u10D1\u10CA\x03\x02\x02\x02\u10D1\u10D2\x03\x02\x02\x02\u10D2\u10D5" +
		"\x03\x02\x02\x02\u10D3\u10D4\x07\x14\x02\x02\u10D4\u10D6\x05\u03B6\u01DC" +
		"\x02\u10D5\u10D3\x03\x02\x02\x02\u10D5\u10D6\x03\x02\x02\x02\u10D6\u016D" +
		"\x03\x02\x02\x02\u10D7\u10D8\x07I\x02\x02\u10D8\u10D9\x07\u0130\x02\x02" +
		"\u10D9\u10DD\x07\xFD\x02\x02\u10DA\u10DB\x05\u03B6\u01DC\x02\u10DB\u10DC" +
		"\x07\u0330\x02\x02\u10DC\u10DE\x03\x02\x02\x02\u10DD\u10DA\x03\x02\x02" +
		"\x02\u10DD\u10DE\x03\x02\x02\x02\u10DE\u10DF\x03\x02\x02\x02\u10DF\u1108" +
		"\x05\u03B6\u01DC\x02\u10E0\u10E2\x07\u0337\x02\x02\u10E1\u10E0\x03\x02" +
		"\x02\x02\u10E1\u10E2\x03\x02\x02\x02\u10E2\u10E3\x03\x02\x02\x02\u10E3" +
		"\u10E5\x07\x04\x02\x02\u10E4\u10E6\t)\x02\x02\u10E5\u10E4\x03\x02\x02" +
		"\x02\u10E5\u10E6\x03\x02\x02\x02\u10E6\u10E7\x03\x02\x02\x02\u10E7\u10E8" +
		"\x07\xFF\x02\x02\u10E8\u10E9\x05\u03B6\u01DC\x02\u10E9\u10EA\x07\u0330" +
		"\x02\x02\u10EA\u10EB\x05\u03B6\u01DC\x02\u10EB\u10F0\x07\u0335\x02\x02" +
		"\u10EC\u10EE\x07\u0337\x02\x02\u10ED\u10EC\x03\x02\x02\x02\u10ED\u10EE" +
		"\x03\x02\x02\x02\u10EE\u10EF\x03\x02\x02\x02\u10EF\u10F1\x05\u03B6\u01DC" +
		"\x02\u10F0\u10ED\x03\x02\x02\x02\u10F1\u10F2\x03\x02\x02\x02\u10F2\u10F0" +
		"\x03\x02\x02\x02\u10F2\u10F3\x03\x02\x02\x02\u10F3\u10F4\x03\x02\x02\x02" +
		"\u10F4\u10F5\x07\u0336\x02\x02\u10F5\u10F6\x07\xE5\x02\x02\u10F6\u10F7" +
		"\x05\u03B6\u01DC\x02\u10F7\u10F8\x07\u0330\x02\x02\u10F8\u1105\x05\u03B6" +
		"\u01DC\x02\u10F9\u10FB\x07\u0337\x02\x02\u10FA\u10F9\x03\x02\x02\x02\u10FA" +
		"\u10FB\x03\x02\x02\x02\u10FB\u10FC\x03\x02\x02\x02\u10FC\u10FD\x07\u018B" +
		"\x02\x02\u10FD\u1104\t*\x02\x02\u10FE\u1100\x07\u0337\x02\x02\u10FF\u10FE" +
		"\x03\x02\x02\x02\u10FF\u1100\x03\x02\x02\x02\u1100\u1101\x03\x02\x02\x02" +
		"\u1101\u1102\x07\x1B\x02\x02\u1102\u1104\t+\x02\x02\u1103\u10FA\x03\x02" +
		"\x02\x02\u1103\u10FF\x03\x02\x02\x02\u1104\u1107\x03\x02\x02\x02\u1105" +
		"\u1103\x03\x02\x02\x02\u1105\u1106\x03\x02\x02\x02\u1106\u1109\x03\x02" +
		"\x02\x02\u1107\u1105\x03\x02\x02\x02\u1108\u10E1\x03\x02\x02\x02\u1109" +
		"\u110A\x03\x02\x02\x02\u110A\u1108\x03\x02\x02\x02\u110A\u110B\x03\x02" +
		"\x02\x02\u110B\u1116\x03\x02\x02\x02\u110C\u110D\x07\u017C\x02\x02\u110D" +
		"\u110E\x07\u0335\x02\x02\u110E\u110F\x07\u014B\x02\x02\u110F\u1110\x07" +
		"\u0323\x02\x02\u1110\u1113\t\t\x02\x02\u1111\u1112\x07\u02BE\x02\x02\u1112" +
		"\u1114\t\t\x02\x02\u1113\u1111\x03\x02\x02\x02\u1113\u1114\x03\x02\x02" +
		"\x02\u1114\u1115\x03\x02\x02\x02\u1115\u1117\x07\u0336\x02\x02\u1116\u110C" +
		"\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02\u1117\u111B\x03\x02\x02\x02" +
		"\u1118\u1119\x07\xDC\x02\x02\u1119\u111A\x07\x86\x02\x02\u111A\u111C\x07" +
		"\u0112\x02\x02\u111B\u1118\x03\x02\x02\x02\u111B\u111C\x03\x02\x02\x02" +
		"\u111C\u016F\x03\x02\x02\x02\u111D\u111E\x07\n\x02\x02\u111E\u1122\x07" +
		"\u0136\x02\x02\u111F\u1120\x05\u03B6\u01DC\x02\u1120\u1121\x07\u0330\x02" +
		"\x02\u1121\u1123\x03\x02\x02\x02\u1122\u111F\x03\x02\x02\x02\u1122\u1123" +
		"\x03\x02\x02\x02\u1123\u1124\x03\x02\x02\x02\u1124\u112A\x05\u03B6\u01DC" +
		"\x02\u1125\u1128\x07\u0115\x02\x02\u1126\u1127\x07\u017C\x02\x02\u1127" +
		"\u1129\x07\u031B\x02\x02\u1128\u1126\x03\x02\x02\x02\u1128\u1129\x03\x02" +
		"\x02\x02\u1129\u112B\x03\x02\x02\x02\u112A\u1125\x03\x02\x02\x02\u112A" +
		"\u112B\x03\x02\x02\x02\u112B\u112F\x03\x02\x02\x02\u112C\u112D\x07\x9D" +
		"\x02\x02\u112D\u112E\x07&\x02\x02\u112E\u1130\x07\u031B\x02\x02\u112F" +
		"\u112C\x03\x02\x02\x02\u112F\u1130\x03\x02\x02\x02\u1130\u1135\x03\x02" +
		"\x02\x02\u1131\u1132\x07\xCC\x02\x02\u1132\u1136\x07\u031B\x02\x02\u1133" +
		"\u1134\x07\u0264\x02\x02\u1134\u1136\x07\xCC\x02\x02\u1135\u1131\x03\x02" +
		"\x02\x02\u1135\u1133\x03\x02\x02\x02\u1135\u1136\x03\x02\x02\x02\u1136" +
		"\u113B\x03\x02\x02\x02\u1137\u1138\x07\xC0\x02\x02\u1138\u113C\x07\u031B" +
		"\x02\x02\u1139\u113A\x07\u0264\x02\x02\u113A\u113C\x07\xC0\x02\x02\u113B" +
		"\u1137\x03\x02\x02\x02\u113B\u1139\x03\x02\x02\x02\u113B\u113C\x03\x02" +
		"\x02\x02\u113C\u1140\x03\x02\x02\x02\u113D\u1141\x07Q\x02\x02\u113E\u113F" +
		"\x07\u0264\x02\x02\u113F\u1141\x07Q\x02\x02\u1140\u113D\x03\x02\x02\x02" +
		"\u1140\u113E\x03\x02\x02\x02\u1140\u1141\x03\x02\x02\x02\u1141\u1146\x03" +
		"\x02\x02\x02\u1142\u1143\x07\'\x02\x02\u1143\u1147\x07\u031B\x02\x02\u1144" +
		"\u1145\x07\u0264\x02\x02\u1145\u1147\x07\'\x02\x02\u1146\u1142\x03\x02" +
		"\x02\x02\u1146\u1144\x03\x02\x02\x02\u1146\u1147\x03\x02\x02\x02\u1147" +
		"\u0171\x03\x02\x02\x02\u1148\u1149\x07I\x02\x02\u1149\u114D\x07\u0136" +
		"\x02\x02\u114A\u114B\x05\u03B6\u01DC\x02\u114B\u114C\x07\u0330\x02\x02" +
		"\u114C\u114E\x03\x02\x02\x02\u114D\u114A\x03\x02\x02\x02\u114D\u114E\x03" +
		"\x02\x02\x02\u114E\u114F\x03\x02\x02\x02\u114F\u1152\x05\u03B6\u01DC\x02" +
		"\u1150\u1151\x07\x10\x02\x02\u1151\u1153\x05\u03AE\u01D8\x02\u1152\u1150" +
		"\x03\x02\x02\x02\u1152\u1153\x03\x02\x02\x02\u1153\u1157\x03\x02\x02\x02" +
		"\u1154\u1155\x07\u014D\x02\x02\u1155\u1156\x07\u017C\x02\x02\u1156\u1158" +
		"\x07\u031B\x02\x02\u1157\u1154\x03\x02\x02\x02\u1157\u1158\x03\x02\x02" +
		"\x02\u1158\u115F\x03\x02\x02\x02\u1159\u115A\x07\x9D\x02\x02\u115A\u115C" +
		"\x07&\x02\x02\u115B\u115D\x07\u033E\x02\x02\u115C\u115B\x03\x02\x02\x02" +
		"\u115C\u115D\x03\x02\x02\x02\u115D\u115E\x03\x02\x02\x02\u115E\u1160\x07" +
		"\u031B\x02\x02\u115F\u1159\x03\x02\x02\x02\u115F\u1160\x03\x02\x02\x02" +
		"\u1160\u1167\x03\x02\x02\x02\u1161\u1163\x07\xCC\x02\x02\u1162\u1164\x07" +
		"\u031B\x02\x02\u1163\u1162\x03\x02\x02\x02\u1163\u1164\x03\x02\x02\x02" +
		"\u1164\u1168\x03\x02\x02\x02\u1165\u1166\x07\u0264\x02\x02\u1166\u1168" +
		"\x07\xCC\x02\x02\u1167\u1161\x03\x02\x02\x02\u1167\u1165\x03\x02\x02\x02" +
		"\u1167\u1168\x03\x02\x02\x02\u1168\u116F\x03\x02\x02\x02\u1169\u116B\x07" +
		"\xC0\x02\x02\u116A\u116C\x07\u031B\x02\x02\u116B\u116A\x03\x02\x02\x02" +
		"\u116B\u116C\x03\x02\x02\x02\u116C\u1170\x03\x02\x02\x02\u116D\u116E\x07" +
		"\u0264\x02\x02\u116E\u1170\x07\xC0\x02\x02\u116F\u1169\x03\x02\x02\x02" +
		"\u116F\u116D\x03\x02\x02\x02\u116F\u1170\x03\x02\x02\x02\u1170\u1174\x03" +
		"\x02\x02\x02\u1171\u1175\x07Q\x02\x02\u1172\u1173\x07\u0264\x02\x02\u1173" +
		"\u1175\x07Q\x02\x02\u1174\u1171\x03\x02\x02\x02\u1174\u1172\x03\x02\x02" +
		"\x02\u1174\u1175\x03\x02\x02\x02\u1175\u117C\x03\x02\x02\x02\u1176\u1178" +
		"\x07\'\x02\x02\u1177\u1179\x07\u031B\x02\x02\u1178\u1177\x03\x02\x02\x02" +
		"\u1178\u1179\x03\x02\x02\x02\u1179\u117D\x03\x02\x02\x02\u117A\u117B\x07" +
		"\u0264\x02\x02\u117B\u117D\x07\'\x02\x02\u117C\u1176\x03\x02\x02\x02\u117C" +
		"\u117A\x03\x02\x02\x02\u117C\u117D\x03\x02\x02\x02\u117D\u0173\x03\x02" +
		"\x02\x02\u117E\u117F\x07\n\x02\x02\u117F\u1180\x07\u0137\x02\x02\u1180" +
		"\u1181\x07\u0199\x02\x02\u1181\u1205\x05\u03B6\u01DC\x02\u1182\u11AF\x07" +
		"\u015D\x02\x02\u1183\u1184\x07\x82\x02\x02\u1184\u11A9\x07\u0335\x02\x02" +
		"\u1185\u1187\x07\u0337\x02\x02\u1186\u1185\x03\x02\x02\x02\u1186\u1187" +
		"\x03\x02\x02\x02\u1187\u1188\x03\x02\x02\x02\u1188\u1189\x07\u01FF\x02" +
		"\x02\u1189\u118A\x07\u0323\x02\x02\u118A\u11A8\x07\u031F\x02\x02\u118B" +
		"\u118D\x07\u0337\x02\x02\u118C\u118B\x03\x02\x02\x02\u118C\u118D\x03\x02" +
		"\x02\x02\u118D\u118E\x03\x02\x02\x02\u118E\u118F\x07\u024D\x02\x02\u118F" +
		"\u1193\x07\u0323\x02\x02\u1190\u1191\x07\u031B\x02\x02\u1191\u1194\t," +
		"\x02\x02\u1192\u1194\x07\u0300\x02\x02\u1193\u1190\x03\x02\x02\x02\u1193" +
		"\u1192\x03\x02\x02\x02\u1194\u11A8\x03\x02\x02\x02\u1195\u1197\x07\u0337" +
		"\x02\x02\u1196\u1195\x03\x02\x02\x02\u1196\u1197\x03\x02\x02\x02\u1197" +
		"\u1198\x03\x02\x02\x02\u1198\u1199\x07\u024A\x02\x02\u1199\u119A\x07\u0323" +
		"\x02\x02\u119A\u11A8\t-\x02\x02\u119B\u119D\x07\u0337\x02\x02\u119C\u119B" +
		"\x03\x02\x02\x02\u119C\u119D\x03\x02\x02\x02\u119D\u119E\x03\x02\x02\x02" +
		"\u119E\u119F\x07\u0245\x02\x02\u119F\u11A0\x07\u0323\x02\x02\u11A0\u11A8" +
		"\x07\u031B\x02\x02\u11A1\u11A3\x07\u0337\x02\x02\u11A2\u11A1\x03\x02\x02" +
		"\x02\u11A2\u11A3\x03\x02\x02\x02\u11A3\u11A4\x03\x02\x02\x02\u11A4\u11A5" +
		"\x07\u02B1\x02\x02\u11A5\u11A6\x07\u0323\x02\x02\u11A6\u11A8\t\t\x02\x02" +
		"\u11A7\u1186\x03\x02\x02\x02\u11A7\u118C\x03\x02\x02\x02\u11A7\u1196\x03" +
		"\x02\x02\x02\u11A7\u119C\x03\x02\x02\x02\u11A7\u11A2\x03\x02\x02\x02\u11A8" +
		"\u11AB\x03\x02\x02\x02\u11A9\u11A7\x03\x02\x02\x02\u11A9\u11AA\x03\x02" +
		"\x02\x02\u11AA\u11AC\x03\x02\x02\x02\u11AB\u11A9\x03\x02\x02\x02\u11AC" +
		"\u11B0\x07\u0336\x02\x02\u11AD\u11B0\x07\u0195\x02\x02\u11AE\u11B0\x07" +
		"\u02C8\x02\x02\u11AF\u1183\x03\x02\x02\x02\u11AF\u11AD\x03\x02\x02\x02" +
		"\u11AF\u11AE\x03\x02\x02\x02\u11B0\u11B2\x03\x02\x02\x02\u11B1\u1182\x03" +
		"\x02\x02\x02\u11B1\u11B2\x03\x02\x02\x02\u11B2\u11CD\x03\x02\x02\x02\u11B3" +
		"\u11B4\x07\u017C\x02\x02\u11B4\u11C9\x07\u0335\x02\x02\u11B5\u11B7\x07" +
		"\u0337\x02\x02\u11B6\u11B5\x03\x02\x02\x02\u11B6\u11B7\x03\x02\x02\x02" +
		"\u11B7\u11B8\x03\x02\x02\x02\u11B8\u11B9\x07\u0295\x02\x02\u11B9\u11BA" +
		"\x07\u0323\x02\x02\u11BA\u11C8\x07\u031B\x02\x02\u11BB\u11BD\x07\u0337" +
		"\x02\x02\u11BC\u11BB\x03\x02\x02\x02\u11BC\u11BD\x03\x02\x02\x02\u11BD" +
		"\u11BE\x03\x02\x02\x02\u11BE\u11BF\x07\xE6\x02\x02\u11BF\u11C0\x07\u0323" +
		"\x02\x02\u11C0\u11C8\t.\x02\x02\u11C1\u11C3\x07\u0337\x02\x02\u11C2\u11C1" +
		"\x03\x02\x02\x02\u11C2\u11C3\x03\x02\x02\x02\u11C3\u11C4\x03\x02\x02\x02" +
		"\u11C4\u11C5\x07\u014B\x02\x02\u11C5\u11C6\x07\u0323\x02\x02\u11C6\u11C8" +
		"\t\t\x02\x02\u11C7\u11B6\x03\x02\x02\x02\u11C7\u11BC\x03\x02\x02\x02\u11C7" +
		"\u11C2\x03\x02\x02\x02\u11C8\u11CB\x03\x02\x02\x02\u11C9\u11C7\x03\x02" +
		"\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA\u11CC\x03\x02\x02\x02\u11CB" +
		"\u11C9\x03\x02\x02\x02\u11CC\u11CE\x07\u0336\x02\x02\u11CD\u11B3\x03\x02" +
		"\x02\x02\u11CD\u11CE\x03\x02\x02\x02\u11CE\u11FD\x03\x02\x02\x02\u11CF" +
		"\u11FB\x07\u0179\x02\x02\u11D0\u11D2\x07\u0337\x02\x02\u11D1\u11D0\x03" +
		"\x02\x02\x02\u11D1\u11D2\x03\x02\x02\x02\u11D2\u11D4\x03\x02\x02\x02\u11D3" +
		"\u11D5\x07\xDC\x02\x02\u11D4\u11D3\x03\x02\x02\x02\u11D4\u11D5\x03\x02" +
		"\x02\x02\u11D5\u11D6\x03\x02\x02\x02\u11D6\u11E2\x05\u03B6\u01DC\x02\u11D7" +
		"\u11E3\x07\u0323\x02\x02\u11D8\u11D9\x07\u0325\x02\x02\u11D9\u11E3\x07" +
		"\u0324\x02\x02\u11DA\u11DB\x07\u0326\x02\x02\u11DB\u11E3\x07\u0323\x02" +
		"\x02\u11DC\u11E3\x07\u0324\x02\x02\u11DD\u11DE\x07\u0324\x02\x02\u11DE" +
		"\u11E3\x07\u0323\x02\x02\u11DF\u11E3\x07\u0325\x02\x02\u11E0\u11E1\x07" +
		"\u0325\x02\x02\u11E1\u11E3\x07\u0323\x02\x02\u11E2\u11D7\x03\x02\x02\x02" +
		"\u11E2\u11D8\x03\x02\x02\x02\u11E2\u11DA\x03\x02\x02\x02\u11E2\u11DC\x03" +
		"\x02\x02\x02\u11E2\u11DD\x03\x02\x02\x02\u11E2\u11DF\x03\x02\x02\x02\u11E2" +
		"\u11E0\x03\x02\x02\x02\u11E3\u11E4\x03\x02\x02\x02\u11E4\u11E5\t\x18\x02" +
		"\x02\u11E5\u11FC\x03\x02\x02\x02\u11E6\u11E8\x07\u0337\x02\x02\u11E7\u11E6" +
		"\x03\x02\x02\x02\u11E7\u11E8\x03\x02\x02\x02\u11E8\u11E9\x03\x02\x02\x02" +
		"\u11E9\u11EB\t\x1D\x02\x02\u11EA\u11EC\x07\xDC\x02\x02\u11EB\u11EA\x03" +
		"\x02\x02\x02\u11EB\u11EC\x03\x02\x02\x02\u11EC\u11F8\x03\x02\x02\x02\u11ED" +
		"\u11F9\x07\u0323\x02\x02\u11EE\u11EF\x07\u0325\x02\x02\u11EF\u11F9\x07" +
		"\u0324\x02\x02\u11F0\u11F1\x07\u0326\x02\x02\u11F1\u11F9\x07\u0323\x02" +
		"\x02\u11F2\u11F9\x07\u0324\x02\x02\u11F3\u11F4\x07\u0324\x02\x02\u11F4" +
		"\u11F9\x07\u0323\x02\x02\u11F5\u11F9\x07\u0325\x02\x02\u11F6\u11F7\x07" +
		"\u0325\x02\x02\u11F7\u11F9\x07\u0323\x02\x02\u11F8\u11ED\x03\x02\x02\x02" +
		"\u11F8\u11EE\x03\x02\x02\x02\u11F8\u11F0\x03\x02\x02\x02\u11F8\u11F2\x03" +
		"\x02\x02\x02\u11F8\u11F3\x03\x02\x02\x02\u11F8\u11F5\x03\x02\x02\x02\u11F8" +
		"\u11F6\x03\x02\x02\x02\u11F9\u11FA\x03\x02\x02\x02\u11FA\u11FC\t\x18\x02" +
		"\x02\u11FB\u11D1\x03\x02\x02\x02\u11FB\u11E7\x03\x02\x02\x02\u11FC\u11FE" +
		"\x03\x02\x02\x02\u11FD\u11CF\x03\x02\x02\x02\u11FD\u11FE\x03\x02\x02\x02" +
		"\u11FE\u1206\x03\x02\x02\x02\u11FF\u1200\x07\u02A9\x02\x02\u1200\u1206" +
		"\x07\u0179\x02\x02\u1201\u1202\x07\u025B\x02\x02\u1202\u1203\x07\u025E" +
		"\x02\x02\u1203\u1204\x07\u0323\x02\x02\u1204\u1206\x05\u03B6\u01DC\x02" +
		"\u1205\u11B1\x03\x02\x02\x02\u1205\u11FF\x03\x02\x02\x02\u1205\u1201\x03" +
		"\x02\x02\x02\u1206\u0175\x03\x02\x02\x02\u1207\u1208\x07I\x02\x02\u1208" +
		"\u1209\x07\u0137\x02\x02\u1209\u120A\x07\u0199\x02\x02\u120A\u1294\x05" +
		"\u03B6\u01DC\x02\u120B\u1238\x07\u015D\x02\x02\u120C\u120D\x07\x82\x02" +
		"\x02\u120D\u1232\x07\u0335\x02\x02\u120E\u1210\x07\u0337\x02\x02\u120F" +
		"\u120E\x03\x02\x02\x02\u120F\u1210\x03\x02\x02\x02\u1210\u1211\x03\x02" +
		"\x02\x02\u1211\u1212\x07\u01FF\x02\x02\u1212\u1213\x07\u0323\x02\x02\u1213" +
		"\u1231\x07\u031F\x02\x02\u1214\u1216\x07\u0337\x02\x02\u1215\u1214\x03" +
		"\x02\x02\x02\u1215\u1216\x03\x02\x02\x02\u1216\u1217\x03\x02\x02\x02\u1217" +
		"\u1218\x07\u024D\x02\x02\u1218\u121C\x07\u0323\x02\x02\u1219\u121A\x07" +
		"\u031B\x02\x02\u121A\u121D\t,\x02\x02\u121B\u121D\x07\u0300\x02\x02\u121C" +
		"\u1219\x03\x02\x02\x02\u121C\u121B\x03\x02\x02\x02\u121D\u1231\x03\x02" +
		"\x02\x02\u121E\u1220\x07\u0337\x02\x02\u121F\u121E\x03\x02\x02\x02\u121F" +
		"\u1220\x03\x02\x02\x02\u1220\u1221\x03\x02\x02\x02\u1221\u1222\x07\u024A" +
		"\x02\x02\u1222\u1223\x07\u0323\x02\x02\u1223\u1231\t-\x02\x02\u1224\u1226" +
		"\x07\u0337\x02\x02\u1225\u1224\x03\x02\x02\x02\u1225\u1226\x03\x02\x02" +
		"\x02\u1226\u1227\x03\x02\x02\x02\u1227\u1228\x07\u0245\x02\x02\u1228\u1229" +
		"\x07\u0323\x02\x02\u1229\u1231\x07\u031B\x02\x02\u122A\u122C\x07\u0337" +
		"\x02\x02\u122B\u122A\x03\x02\x02\x02\u122B\u122C\x03\x02\x02\x02\u122C" +
		"\u122D\x03\x02\x02\x02\u122D\u122E\x07\u02B1\x02\x02\u122E\u122F\x07\u0323" +
		"\x02\x02\u122F\u1231\t\t\x02\x02\u1230\u120F\x03\x02\x02\x02\u1230\u1215" +
		"\x03\x02\x02\x02\u1230\u121F\x03\x02\x02\x02\u1230\u1225\x03\x02\x02\x02" +
		"\u1230\u122B\x03\x02\x02\x02";
	private static readonly _serializedATNSegment11: string =
		"\u1231\u1234\x03\x02\x02\x02\u1232\u1230\x03\x02\x02\x02\u1232\u1233\x03" +
		"\x02\x02\x02\u1233\u1235\x03\x02\x02\x02\u1234\u1232\x03\x02\x02\x02\u1235" +
		"\u1239\x07\u0336\x02\x02\u1236\u1239\x07\u0195\x02\x02\u1237\u1239\x07" +
		"\u02C8\x02\x02\u1238\u120C\x03\x02\x02\x02\u1238\u1236\x03\x02\x02\x02" +
		"\u1238\u1237\x03\x02\x02\x02\u1239\u123B\x03\x02\x02\x02\u123A\u120B\x03" +
		"\x02\x02\x02\u123A\u123B\x03\x02\x02\x02\u123B\u125C\x03\x02\x02\x02\u123C" +
		"\u123D\x07\u017C\x02\x02\u123D\u1258\x07\u0335\x02\x02\u123E\u1240\x07" +
		"\u0337\x02\x02\u123F\u123E\x03\x02\x02\x02\u123F\u1240\x03\x02\x02\x02" +
		"\u1240\u1241\x03\x02\x02\x02\u1241\u1242\x07\u0295\x02\x02\u1242\u1243" +
		"\x07\u0323\x02\x02\u1243\u1257\x07\u031B\x02\x02\u1244\u1246\x07\u0337" +
		"\x02\x02\u1245\u1244\x03\x02\x02\x02\u1245\u1246\x03\x02\x02\x02\u1246" +
		"\u1247\x03\x02\x02\x02\u1247\u1248\x07\xE6\x02\x02\u1248\u1249\x07\u0323" +
		"\x02\x02\u1249\u1257\t.\x02\x02\u124A\u124C\x07\u0337\x02\x02\u124B\u124A" +
		"\x03\x02\x02\x02\u124B\u124C\x03\x02\x02\x02\u124C\u124D\x03\x02\x02\x02" +
		"\u124D\u124E\x07\u014B\x02\x02\u124E\u124F\x07\u0323\x02\x02\u124F\u1257" +
		"\t\t\x02\x02\u1250\u1252\x07\u0337\x02\x02\u1251\u1250\x03\x02\x02\x02" +
		"\u1251\u1252\x03\x02\x02\x02\u1252\u1253\x03\x02\x02\x02\u1253\u1254\x07" +
		"\u019A\x02\x02\u1254\u1255\x07\u0323\x02\x02\u1255\u1257\x05\u03B6\u01DC" +
		"\x02\u1256\u123F\x03\x02\x02\x02\u1256\u1245\x03\x02\x02\x02\u1256\u124B" +
		"\x03\x02\x02\x02\u1256\u1251\x03\x02\x02\x02\u1257\u125A\x03\x02\x02\x02" +
		"\u1258\u1256\x03\x02\x02\x02\u1258\u1259\x03\x02\x02\x02\u1259\u125B\x03" +
		"\x02\x02\x02\u125A\u1258\x03\x02\x02\x02\u125B\u125D\x07\u0336\x02\x02" +
		"\u125C\u123C\x03\x02\x02\x02\u125C\u125D\x03\x02\x02\x02\u125D\u128C\x03" +
		"\x02\x02\x02\u125E\u128A\x07\u0179\x02\x02\u125F\u1261\x07\u0337\x02\x02" +
		"\u1260\u125F\x03\x02\x02\x02\u1260\u1261\x03\x02\x02\x02\u1261\u1263\x03" +
		"\x02\x02\x02\u1262\u1264\x07\xDC\x02\x02\u1263\u1262\x03\x02\x02\x02\u1263" +
		"\u1264\x03\x02\x02\x02\u1264\u1265\x03\x02\x02\x02\u1265\u1271\x05\u03B6" +
		"\u01DC\x02\u1266\u1272\x07\u0323\x02\x02\u1267\u1268\x07\u0325\x02\x02" +
		"\u1268\u1272\x07\u0324\x02\x02\u1269\u126A\x07\u0326\x02\x02\u126A\u1272" +
		"\x07\u0323\x02\x02\u126B\u1272\x07\u0324\x02\x02\u126C\u126D\x07\u0324" +
		"\x02\x02\u126D\u1272\x07\u0323\x02\x02\u126E\u1272\x07\u0325\x02\x02\u126F" +
		"\u1270\x07\u0325\x02\x02\u1270\u1272\x07\u0323\x02\x02\u1271\u1266\x03" +
		"\x02\x02\x02\u1271\u1267\x03\x02\x02\x02\u1271\u1269\x03\x02\x02\x02\u1271" +
		"\u126B\x03\x02\x02\x02\u1271\u126C\x03\x02\x02\x02\u1271\u126E\x03\x02" +
		"\x02\x02\u1271\u126F\x03\x02\x02\x02\u1272\u1273\x03\x02\x02\x02\u1273" +
		"\u1274\t\x18\x02\x02\u1274\u128B\x03\x02\x02\x02\u1275\u1277\x07\u0337" +
		"\x02\x02\u1276\u1275\x03\x02\x02\x02\u1276\u1277\x03\x02\x02\x02\u1277" +
		"\u1278\x03\x02\x02\x02\u1278\u127A\t\x1D\x02\x02\u1279\u127B\x07\xDC\x02" +
		"\x02\u127A\u1279\x03\x02\x02\x02\u127A\u127B\x03\x02\x02\x02\u127B\u1287" +
		"\x03\x02\x02\x02\u127C\u1288\x07\u0323\x02\x02\u127D\u127E\x07\u0325\x02" +
		"\x02\u127E\u1288\x07\u0324\x02\x02\u127F\u1280\x07\u0326\x02\x02\u1280" +
		"\u1288\x07\u0323\x02\x02\u1281\u1288\x07\u0324\x02\x02\u1282\u1283\x07" +
		"\u0324\x02\x02\u1283\u1288\x07\u0323\x02\x02\u1284\u1288\x07\u0325\x02" +
		"\x02\u1285\u1286\x07\u0325\x02\x02\u1286\u1288\x07\u0323\x02\x02\u1287" +
		"\u127C\x03\x02\x02\x02\u1287\u127D\x03\x02\x02\x02\u1287\u127F\x03\x02" +
		"\x02\x02\u1287\u1281\x03\x02\x02\x02\u1287\u1282\x03\x02\x02\x02\u1287" +
		"\u1284\x03\x02\x02\x02\u1287\u1285\x03\x02\x02\x02\u1288\u1289\x03\x02" +
		"\x02\x02\u1289\u128B\t\x18\x02\x02\u128A\u1260\x03\x02\x02\x02\u128A\u1276" +
		"\x03\x02\x02\x02\u128B\u128D\x03\x02\x02\x02\u128C\u125E\x03\x02\x02\x02" +
		"\u128C\u128D\x03\x02\x02\x02\u128D\u1295\x03\x02\x02\x02\u128E\u128F\x07" +
		"\u02A9\x02\x02\u128F\u1295\x07\u0179\x02\x02\u1290\u1291\x07\u025B\x02" +
		"\x02\u1291\u1292\x07\u025E\x02\x02\u1292\u1293\x07\u0323\x02\x02\u1293" +
		"\u1295\x05\u03B6\u01DC\x02\u1294\u123A\x03\x02\x02\x02\u1294\u128E\x03" +
		"\x02\x02\x02\u1294\u1290\x03\x02\x02\x02\u1295\u0177\x03\x02\x02\x02\u1296" +
		"\u1297\x07\n\x02\x02\u1297\u1298\x07\u0137\x02\x02\u1298\u1299\x07\u0199" +
		"\x02\x02\u1299\u129A\x07\u0145\x02\x02\u129A\u129F\x05\u03B6\u01DC\x02" +
		"\u129B\u129C\x07\x86\x02\x02\u129C\u129D\x07\u0137\x02\x02\u129D\u129E" +
		"\x07\u0199\x02\x02\u129E\u12A0\x05\u03B6\u01DC\x02\u129F\u129B\x03\x02" +
		"\x02\x02\u129F\u12A0\x03\x02\x02\x02\u12A0\u12A8\x03\x02\x02\x02\u12A1" +
		"\u12A2\t\x15\x02\x02\u12A2\u12A3\x07\u0335\x02\x02\u12A3\u12A4\x05\u03B6" +
		"\u01DC\x02\u12A4\u12A5\x07\u0336\x02\x02\u12A5\u12A7\x03\x02\x02\x02\u12A6" +
		"\u12A1\x03\x02\x02\x02\u12A7\u12AA\x03\x02\x02\x02\u12A8\u12A6\x03\x02" +
		"\x02\x02\u12A8\u12A9\x03\x02\x02\x02\u12A9\u12B1\x03\x02\x02\x02\u12AA" +
		"\u12A8\x03\x02\x02\x02\u12AB\u12AC\x07\u017C\x02\x02\u12AC\u12AD\x07\u0335" +
		"\x02\x02\u12AD\u12AE\x07\u014B\x02\x02\u12AE\u12AF\x07\u0323\x02\x02\u12AF" +
		"\u12B0\t\t\x02\x02\u12B0\u12B2\x07\u0336\x02\x02\u12B1\u12AB\x03\x02\x02" +
		"\x02\u12B1\u12B2\x03\x02\x02\x02\u12B2\u0179\x03\x02\x02\x02\u12B3\u12B4" +
		"\x07I\x02\x02\u12B4\u12B5\x07\u0137\x02\x02\u12B5\u12B6\x07\u0199\x02" +
		"\x02\u12B6\u12B7\x07\u0145\x02\x02\u12B7\u12BC\x05\u03B6\u01DC\x02\u12B8" +
		"\u12B9\x07\x86\x02\x02\u12B9\u12BA\x07\u0137\x02\x02\u12BA\u12BB\x07\u0199" +
		"\x02\x02\u12BB\u12BD\x05\u03B6\u01DC\x02\u12BC\u12B8\x03\x02\x02\x02\u12BC" +
		"\u12BD\x03\x02\x02\x02\u12BD\u12C5\x03\x02\x02\x02\u12BE\u12BF\x07\x04" +
		"\x02\x02\u12BF\u12C0\x07\u0335\x02\x02\u12C0\u12C1\x05\u03B6\u01DC\x02" +
		"\u12C1\u12C2\x07\u0336\x02\x02\u12C2\u12C4\x03\x02\x02\x02\u12C3\u12BE" +
		"\x03\x02\x02\x02\u12C4\u12C7\x03\x02\x02\x02\u12C5\u12C3\x03\x02\x02\x02" +
		"\u12C5\u12C6\x03\x02\x02\x02\u12C6\u12CE\x03\x02\x02\x02\u12C7\u12C5\x03" +
		"\x02\x02\x02\u12C8\u12C9\x07\u017C\x02\x02\u12C9\u12CA\x07\u0335\x02\x02" +
		"\u12CA\u12CB\x07\u014B\x02\x02\u12CB\u12CC\x07\u0323\x02\x02\u12CC\u12CD" +
		"\t\t\x02\x02\u12CD\u12CF\x07\u0336\x02\x02\u12CE\u12C8\x03\x02\x02\x02" +
		"\u12CE\u12CF\x03\x02\x02\x02\u12CF\u017B\x03\x02\x02\x02\u12D0\u12D1\x07" +
		"\n\x02\x02\u12D1\u12D2\x07\u0137\x02\x02\u12D2\u12D3\x07<\x02\x02\u12D3" +
		"\u133D\x07\u013D\x02\x02\u12D4\u12D5\x07\u0104\x02\x02\u12D5\u12F9\x07" +
		"\u018A\x02\x02\u12D6\u12D7\x07\u01C4\x02\x02\u12D7\u12E7\x07\u0323\x02" +
		"\x02\u12D8\u12E8\x07\u019B\x02\x02\u12D9\u12DB\x07\u0337\x02\x02\u12DA" +
		"\u12D9\x03\x02\x02\x02\u12DA\u12DB\x03\x02\x02\x02\u12DB\u12DC\x03\x02" +
		"\x02\x02\u12DC\u12E4\x07\u031B\x02\x02\u12DD\u12DF\x07\u0337\x02\x02\u12DE" +
		"\u12DD\x03\x02\x02\x02\u12DE\u12DF\x03\x02\x02\x02\u12DF\u12E0\x03\x02" +
		"\x02\x02\u12E0\u12E1\x07\u031B\x02\x02\u12E1\u12E2\x07\u015D\x02\x02\u12E2" +
		"\u12E4\x07\u031B\x02\x02\u12E3\u12DA\x03\x02\x02\x02\u12E3\u12DE\x03\x02" +
		"\x02\x02\u12E4\u12E5\x03\x02\x02\x02\u12E5\u12E3\x03\x02\x02\x02\u12E5" +
		"\u12E6\x03\x02\x02\x02\u12E6\u12E8\x03\x02\x02\x02\u12E7\u12D8\x03\x02" +
		"\x02\x02\u12E7\u12E3\x03\x02\x02\x02\u12E8\u12FA\x03\x02\x02\x02\u12E9" +
		"\u12EA\x07\u026F\x02\x02\u12EA\u12F5\x07\u0323\x02\x02\u12EB\u12ED\x07" +
		"\u0337\x02\x02\u12EC\u12EB\x03\x02\x02\x02\u12EC\u12ED\x03\x02\x02\x02" +
		"\u12ED\u12EE\x03\x02\x02\x02\u12EE\u12F6\x07\u031B\x02\x02\u12EF\u12F1" +
		"\x07\u0337\x02\x02\u12F0\u12EF\x03\x02\x02\x02\u12F0\u12F1\x03\x02\x02" +
		"\x02\u12F1\u12F2\x03\x02\x02\x02\u12F2\u12F3\x07\u031B\x02\x02\u12F3\u12F4" +
		"\x07\u015D\x02\x02\u12F4\u12F6\x07\u031B\x02\x02\u12F5\u12EC\x03\x02\x02" +
		"\x02\u12F5\u12F0\x03\x02\x02\x02\u12F6\u12F7\x03\x02\x02\x02\u12F7\u12F5" +
		"\x03\x02\x02\x02\u12F7\u12F8\x03\x02\x02\x02\u12F8\u12FA\x03\x02\x02\x02" +
		"\u12F9\u12D6\x03\x02\x02\x02\u12F9\u12E9\x03\x02\x02\x02\u12FA\u133E\x03" +
		"\x02\x02\x02\u12FB\u12FC\x07`\x02\x02\u12FC\u130C\x07\xBB\x02\x02\u12FD" +
		"\u130D\x07\xE5\x02\x02\u12FE\u130D\x07\xE2\x02\x02\u12FF\u1300\x07\u0283" +
		"\x02\x02\u1300\u1301\x07\u0323\x02\x02\u1301\u130D\t/\x02\x02\u1302\u1303" +
		"\x07\xC3\x02\x02\u1303\u1307\x07\u0323\x02\x02\u1304\u1305\x07\u031B\x02" +
		"\x02\u1305\u1308\x07\u024E\x02\x02\u1306\u1308\x07Z\x02\x02\u1307\u1304" +
		"\x03\x02\x02\x02\u1307\u1306\x03\x02\x02\x02\u1308\u130D\x03\x02\x02\x02" +
		"\u1309\u130A\x07\u0245\x02\x02\u130A\u130B\x07\u0323\x02\x02\u130B\u130D" +
		"\t0\x02\x02\u130C\u12FD\x03\x02\x02\x02\u130C\u12FE\x03\x02\x02\x02\u130C" +
		"\u12FF\x03\x02\x02\x02\u130C\u1302\x03\x02\x02\x02\u130C\u1309\x03\x02" +
		"\x02\x02\u130D\u133E\x03\x02\x02\x02\u130E\u130F\x07~\x02\x02\u130F\u1310" +
		"\x074\x02\x02\u1310\u1322\x07\u0290\x02\x02\u1311\u1312\x07\u0174\x02" +
		"\x02\u1312\u1313\x07\u0323\x02\x02\u1313\u1323\t/\x02\x02\u1314\u1315" +
		"\x07\u0147\x02\x02\u1315\u1316\x07\u0323\x02\x02\u1316\u1323\t/\x02\x02" +
		"\u1317\u1318\x07\u0148\x02\x02\u1318\u1319\x07\u0323\x02\x02\u1319\u1323" +
		"\t/\x02\x02\u131A\u131B\x07\u0149\x02\x02\u131B\u1323\t/\x02\x02\u131C" +
		"\u131D\x07\x7F\x02\x02\u131D\u131E\x07\u0323\x02\x02\u131E\u1323\t/\x02" +
		"\x02\u131F\u1320\x07\x96\x02\x02\u1320\u1321\x07\u0323\x02\x02\u1321\u1323" +
		"\t0\x02\x02\u1322\u1311\x03\x02\x02\x02\u1322\u1314\x03\x02\x02\x02\u1322" +
		"\u1317\x03\x02\x02\x02\u1322\u131A\x03\x02\x02\x02\u1322\u131C\x03\x02" +
		"\x02\x02\u1322\u131F\x03\x02\x02\x02\u1323\u133E\x03\x02\x02\x02\u1324" +
		"\u1325\x07\u0214\x02\x02\u1325\u1326\x074\x02\x02\u1326\u1327\x07A\x02" +
		"\x02\u1327\u1328\x07\u0323\x02\x02\u1328\u133E\t1\x02\x02\u1329\u132A" +
		"\x07#\x02\x02\u132A\u132B\x07\u0285\x02\x02\u132B\u1338\x07{\x02\x02\u132C" +
		"\u132D\x07\xE5\x02\x02\u132D\u132E\x07\u0335\x02\x02\u132E\u132F\x07\x83" +
		"\x02\x02\u132F\u1330\x07\u0323\x02\x02\u1330\u1331\x07\u031F\x02\x02\u1331" +
		"\u1332\x07\u0337\x02\x02\u1332\u1333\x07\u02D6\x02\x02\u1333\u1334\x07" +
		"\u0323\x02\x02\u1334\u1335\x07\u031B\x02\x02\u1335\u1336\t2\x02\x02\u1336" +
		"\u1339\x07\u0336\x02\x02\u1337\u1339\x07\xE2\x02\x02\u1338\u132C\x03\x02" +
		"\x02\x02\u1338\u1337\x03\x02\x02\x02\u1339\u133E\x03\x02\x02\x02\u133A" +
		"\u133B\x07\u013D\x02\x02\u133B\u133C\x07\u0142\x02\x02\u133C\u133E\t\t" +
		"\x02\x02\u133D\u12D4\x03\x02\x02\x02\u133D\u12FB\x03\x02\x02\x02\u133D" +
		"\u130E\x03\x02\x02\x02\u133D\u1324\x03\x02\x02\x02\u133D\u1329\x03\x02" +
		"\x02\x02\u133D\u133A\x03\x02\x02\x02\u133E\u017D\x03\x02\x02\x02\u133F" +
		"\u1340\x07\n\x02\x02\u1340\u1341\x07\u0137\x02\x02\u1341\u1342\x07\u0121" +
		"\x02\x02\u1342\u134A\x05\u03B6\u01DC\x02\u1343\u1344\t\x15\x02\x02\u1344" +
		"\u1345\x07\xC7\x02\x02\u1345\u134B\x05\u03B6\u01DC\x02\u1346\u1347\x07" +
		"\u017C\x02\x02\u1347\u1348\x07\u025E\x02\x02\u1348\u1349\x07\u0323\x02" +
		"\x02\u1349\u134B\x05\u03B6\u01DC\x02\u134A\u1343\x03\x02\x02\x02\u134A" +
		"\u1346\x03\x02\x02\x02\u134B\u017F\x03\x02\x02\x02\u134C\u134D\x07I\x02" +
		"\x02\u134D\u134E\x07\u0137\x02\x02\u134E\u134F\x07\u0121\x02\x02\u134F" +
		"\u1352\x05\u03B6\u01DC\x02\u1350\u1351\x07\x14\x02\x02\u1351\u1353\x05" +
		"\u03B6\u01DC\x02\u1352\u1350\x03\x02\x02\x02\u1352\u1353\x03\x02\x02\x02" +
		"\u1353\u0181\x03\x02\x02\x02\u1354\u1355\x07\n\x02\x02\u1355\u1356\x07" +
		"\u0137\x02\x02\u1356\u1357\x07\u0121\x02\x02\u1357\u1358\x05\u03B6\u01DC" +
		"\x02\u1358\u1359\t\x15\x02\x02\u1359\u135A\x07\xC7\x02\x02\u135A\u135B" +
		"\x05\u03B6\u01DC\x02\u135B\u0183\x03\x02\x02\x02\u135C\u135D\x07\n\x02" +
		"\x02\u135D\u135E\x07\u0138\x02\x02\u135E\u1366\x05\u03B6\u01DC\x02\u135F" +
		"\u1360\x07\xE5\x02\x02\u1360\u1361\x07\u0294\x02\x02\u1361\u1362\x05\u03B6" +
		"\u01DC\x02\u1362\u1363\x07\u0330\x02\x02\u1363\u1364\x03\x02\x02\x02\u1364" +
		"\u1365\x05\u03B6\u01DC\x02\u1365\u1367\x03\x02\x02\x02\u1366\u135F\x03" +
		"\x02\x02\x02\u1366\u1367\x03\x02\x02\x02\u1367\u136F\x03\x02\x02\x02\u1368" +
		"\u136A\x07\u0337\x02\x02\u1369\u1368\x03\x02\x02\x02\u1369\u136A\x03\x02" +
		"\x02\x02\u136A\u136B\x03\x02\x02\x02\u136B\u136C\t\x15\x02\x02\u136C\u136E" +
		"\x05\u03B6\u01DC\x02\u136D\u1369\x03\x02\x02\x02\u136E\u1371\x03\x02\x02" +
		"\x02\u136F\u136D\x03\x02\x02\x02\u136F\u1370\x03\x02\x02\x02\u1370\u0185" +
		"\x03\x02\x02\x02\u1371\u136F\x03\x02\x02\x02\u1372\u1373\x07I\x02\x02" +
		"\u1373\u1374\x07\u0138\x02\x02\u1374\u1377\x05\u03B6\u01DC\x02\u1375\u1376" +
		"\x07\x14\x02\x02\u1376\u1378\x05\u03B6\u01DC\x02\u1377\u1375\x03\x02\x02" +
		"\x02\u1377\u1378\x03\x02\x02\x02\u1378\u1379\x03\x02\x02\x02\u1379\u137A" +
		"\x07\xE5\x02\x02\u137A\u137E\x07\u0294\x02\x02\u137B\u137C\x05\u03B6\u01DC" +
		"\x02\u137C\u137D\x07\u0330\x02\x02\u137D\u137F\x03\x02\x02\x02\u137E\u137B" +
		"\x03\x02\x02\x02\u137E\u137F\x03\x02\x02\x02\u137F\u1380\x03\x02\x02\x02" +
		"\u1380\u138E\x05\u03B6\u01DC\x02\u1381\u1389\x07\u0335\x02\x02\u1382\u1384" +
		"\x07\u0337\x02\x02\u1383\u1382\x03\x02\x02\x02\u1383\u1384\x03\x02\x02" +
		"\x02\u1384\u1387\x03\x02\x02\x02\u1385\u1388\x05\u03B6\u01DC\x02\u1386" +
		"\u1388\x07Z\x02\x02\u1387\u1385\x03\x02\x02\x02\u1387\u1386\x03\x02\x02" +
		"\x02\u1388\u138A\x03\x02\x02\x02\u1389\u1383\x03\x02\x02\x02\u138A\u138B" +
		"\x03\x02\x02\x02\u138B\u1389\x03\x02\x02\x02\u138B\u138C\x03\x02\x02\x02" +
		"\u138C\u138D\x03\x02\x02\x02\u138D\u138F\x07\u0336\x02\x02\u138E\u1381" +
		"\x03\x02\x02\x02\u138E\u138F\x03\x02\x02\x02\u138F\u0187\x03\x02\x02\x02" +
		"\u1390\u1391\x07\n\x02\x02\u1391\u1392\x07\u0138\x02\x02\u1392\u1393\x07" +
		"\xBD\x02\x02\u1393\u13A9\x07\xAC\x02\x02\u1394\u1396\x07\u0205\x02\x02" +
		"\u1395\u1394\x03\x02\x02\x02\u1395\u1396\x03\x02\x02\x02\u1396\u1397\x03" +
		"\x02\x02\x02\u1397\u13AA\x07\u010F\x02\x02\u1398\u13A7\x07\u017C\x02\x02" +
		"\u1399\u139A\x07\u0275\x02\x02\u139A\u139B\x07\u0323\x02\x02\u139B\u139C" +
		"\x07\u031F\x02\x02\u139C\u139D\x07\u0337\x02\x02\u139D\u139E\x07\xE4\x02" +
		"\x02\u139E\u139F\x07\u0323\x02\x02\u139F\u13A8\x07\u031F\x02\x02\u13A0" +
		"\u13A1\x07\u0260\x02\x02\u13A1\u13A2\x07\u0323\x02\x02\u13A2\u13A3\x07" +
		"\u031F\x02\x02\u13A3\u13A4\x07\u0337\x02\x02\u13A4\u13A5\x07\u0262\x02" +
		"\x02\u13A5\u13A6\x07\u0323\x02\x02\u13A6\u13A8\x07\u031F\x02\x02\u13A7" +
		"\u1399\x03\x02\x02\x02\u13A7\u13A0\x03\x02\x02\x02\u13A7\u13A8\x03\x02" +
		"\x02\x02\u13A8\u13AA\x03\x02\x02\x02\u13A9\u1395\x03\x02\x02\x02\u13A9" +
		"\u1398\x03\x02\x02\x02\u13AA\u0189\x03\x02\x02\x02\u13AB\u13AC\x07\n\x02" +
		"\x02\u13AC\u13AD\x07\u02E6\x02\x02\u13AD\u13AE\x07\xAC\x02\x02\u13AE\u13AF" +
		"\x05\u03B6\u01DC\x02\u13AF\u13B0\t\x15\x02\x02\u13B0\u13B1\x07\u01EE\x02" +
		"\x02\u13B1\u13BD\x07&\x02\x02\u13B2\u13B3\x07+\x02\x02\u13B3\u13BE\x05" +
		"\u03B6\u01DC\x02\u13B4\u13B5\x07\xF4\x02\x02\u13B5\u13B6\x07\u0323\x02" +
		"\x02\u13B6\u13BE\x07\u031F\x02\x02\u13B7\u13B8\x07\u02E6\x02\x02\u13B8" +
		"\u13B9\x07\xAC\x02\x02\u13B9\u13BE\x05\u03B6\u01DC\x02\u13BA\u13BB\x07" +
		"\x12\x02\x02\u13BB\u13BC\x07\xAC\x02\x02\u13BC\u13BE\x05\u03B6\u01DC\x02" +
		"\u13BD\u13B2\x03\x02\x02\x02\u13BD\u13B4\x03\x02\x02\x02\u13BD\u13B7\x03" +
		"\x02\x02\x02\u13BD\u13BA\x03\x02\x02\x02\u13BE\u018B\x03\x02\x02\x02\u13BF" +
		"\u13C0\x07\n\x02\x02\u13C0\u13C1\x07\u02E6\x02\x02\u13C1\u13C2\x07\xAC" +
		"\x02\x02\u13C2\u13C5\x05\u03B6\u01DC\x02\u13C3\u13C4\x07\x14\x02\x02\u13C4" +
		"\u13C6\x05\u03B6\u01DC\x02\u13C5\u13C3\x03\x02\x02\x02\u13C5\u13C6\x03" +
		"\x02\x02\x02\u13C6\u13CA\x03\x02\x02\x02\u13C7\u13C8\x07\x8C\x02\x02\u13C8" +
		"\u13C9\x07\u0291\x02\x02\u13C9\u13CB\x05\u03B6\u01DC\x02\u13CA\u13C7\x03" +
		"\x02\x02\x02\u13CA\u13CB\x03\x02\x02\x02\u13CB\u13CC\x03\x02\x02\x02\u13CC" +
		"\u13ED\x07\u017C\x02\x02\u13CD\u13CE\x07\u022C\x02\x02\u13CE\u13CF\x07" +
		"\u0323\x02\x02\u13CF\u13DD\x07\u031F\x02\x02\u13D0\u13D1\x07\u018D\x02" +
		"\x02\u13D1\u13D2\x07\u0323\x02\x02\u13D2\u13DD\t3\x02\x02\u13D3\u13D4" +
		"\x07\u021A\x02\x02\u13D4\u13D5\x07\u0323\x02\x02\u13D5\u13DD\x07\u031F" +
		"\x02\x02\u13D6\u13D7\x07\u0292\x02\x02\u13D7\u13D8\x07\u0323\x02\x02\u13D8" +
		"\u13DD\x07\u031F\x02\x02\u13D9\u13DA\x07\u01C6\x02\x02\u13DA\u13DB\x07" +
		"\u0323\x02\x02\u13DB\u13DD\t\f\x02\x02\u13DC\u13CD\x03\x02\x02\x02\u13DC" +
		"\u13D0\x03\x02\x02\x02\u13DC\u13D3\x03\x02\x02\x02\u13DC\u13D6\x03\x02" +
		"\x02\x02\u13DC\u13D9\x03\x02\x02\x02\u13DD\u13EE\x03\x02\x02\x02\u13DE" +
		"\u13DF\x07\u01EE\x02\x02\u13DF\u13EB\x07&\x02\x02\u13E0\u13E1\x07+\x02" +
		"\x02\u13E1\u13EC\x05\u03B6\u01DC\x02\u13E2\u13E3\x07\xF4\x02\x02\u13E3" +
		"\u13E4\x07\u0323\x02\x02\u13E4\u13EC\x07\u031F\x02\x02\u13E5\u13E6\x07" +
		"\u02E6\x02\x02\u13E6\u13E7\x07\xAC\x02\x02\u13E7\u13EC\x05\u03B6\u01DC" +
		"\x02\u13E8\u13E9\x07\x12\x02\x02\u13E9\u13EA\x07\xAC\x02\x02\u13EA\u13EC" +
		"\x05\u03B6\u01DC\x02\u13EB\u13E0\x03\x02\x02\x02\u13EB\u13E2\x03\x02\x02" +
		"\x02\u13EB\u13E5\x03\x02\x02\x02\u13EB\u13E8\x03\x02\x02\x02\u13EC\u13EE" +
		"\x03\x02\x02\x02\u13ED\u13DC\x03\x02\x02\x02\u13ED\u13DE\x03\x02\x02\x02" +
		"\u13EE\u018D\x03\x02\x02\x02\u13EF\u13F0\x07I\x02\x02\u13F0\u13F4\x07" +
		"\u02E8\x02\x02\u13F1\u13F2\x05\u03B6\u01DC\x02\u13F2\u13F3\x07\u0330\x02" +
		"\x02\u13F3\u13F5\x03\x02\x02\x02\u13F4\u13F1\x03\x02\x02\x02\u13F4\u13F5" +
		"\x03\x02\x02\x02\u13F5\u13F6\x03\x02\x02\x02\u13F6\u13F7\x05\u03B6\u01DC" +
		"\x02\u13F7\u1412\x07\x86\x02\x02\u13F8\u13F9\x05\u03B6\u01DC\x02\u13F9" +
		"\u13FA\x07\u0330\x02\x02\u13FA\u13FC\x03\x02\x02\x02\u13FB\u13F8\x03\x02" +
		"\x02\x02\u13FB\u13FC\x03\x02\x02\x02\u13FC\u1400\x03\x02\x02\x02\u13FD" +
		"\u13FE\x05\u03B6\u01DC\x02\u13FE\u13FF\x07\u0330\x02\x02\u13FF\u1401\x03" +
		"\x02\x02\x02\u1400\u13FD\x03\x02\x02\x02\u1400\u1401\x03\x02\x02\x02\u1401" +
		"\u1405\x03\x02\x02\x02\u1402\u1403\x05\u03B6\u01DC\x02\u1403\u1404\x07" +
		"\u0330\x02\x02\u1404\u1406\x03\x02\x02\x02\u1405\u1402\x03\x02\x02\x02" +
		"\u1405\u1406\x03\x02\x02\x02\u1406\u1407\x03\x02\x02\x02\u1407\u1413\x05" +
		"\u03B6\u01DC\x02\u1408\u1409\x05\u03B6\u01DC\x02\u1409\u140A\x07\u0330" +
		"\x02\x02\u140A\u140C\x03\x02\x02\x02\u140B\u1408\x03\x02\x02\x02\u140B" +
		"\u140C\x03\x02\x02\x02\u140C\u1410\x03\x02\x02\x02\u140D\u140E\x05\u03B6" +
		"\u01DC\x02\u140E\u140F\x07\u0330\x02\x02\u140F\u1411\x03\x02\x02\x02\u1410" +
		"\u140D\x03\x02\x02\x02\u1410\u1411\x03\x02\x02\x02\u1411\u1413\x03\x02" +
		"\x02\x02\u1412\u13FB\x03\x02\x02\x02\u1412\u140B\x03\x02\x02\x02\u1413" +
		"\u018F\x03\x02\x02\x02\u1414\u1415\x07\n\x02\x02\u1415\u1416\x07\u0171" +
		"\x02\x02\u1416\u1417\x05\u03B6\u01DC\x02\u1417\u144A\x07\u017C\x02\x02" +
		"\u1418\u141A\x07\u0337\x02\x02\u1419\u1418\x03\x02\x02\x02\u1419\u141A" +
		"\x03\x02\x02\x02\u141A\u141B\x03\x02\x02\x02\u141B\u141C\x07\u025E\x02" +
		"\x02\u141C\u141D\x07\u0323\x02\x02\u141D\u144B\x05\u03B6\u01DC\x02\u141E" +
		"\u1420\x07\u0337\x02\x02\u141F\u141E\x03\x02\x02\x02\u141F\u1420\x03\x02" +
		"\x02\x02\u1420\u1421\x03\x02\x02\x02\u1421\u1422\x07\\\x02\x02\u1422\u1425" +
		"\x07\u0323\x02\x02\u1423\u1426\x05\u03B6\u01DC\x02\u1424\u1426\x07\xDF" +
		"\x02\x02\u1425\u1423\x03\x02\x02\x02\u1425\u1424\x03\x02\x02\x02\u1426" +
		"\u144B\x03\x02\x02\x02\u1427\u1429\x07\u0337\x02\x02\u1428\u1427\x03\x02" +
		"\x02\x02\u1428\u1429\x03\x02\x02\x02\u1429\u142A\x03\x02\x02\x02\u142A" +
		"\u142B\x07\u023C\x02\x02\u142B\u142C\x07\u0323\x02\x02\u142C\u144B\x05" +
		"\u03B6\u01DC\x02\u142D\u142F\x07\u0337\x02\x02\u142E\u142D\x03\x02\x02" +
		"\x02\u142E\u142F\x03\x02\x02\x02\u142F\u1430\x03\x02\x02\x02\u1430\u1431" +
		"\x07\xF4\x02\x02\u1431\u1432\x07\u0323\x02\x02\u1432\u1436\x07\u031F\x02" +
		"\x02\u1433\u1434\x07\xE4\x02\x02\u1434\u1435\x07\u0323\x02\x02\u1435\u1437" +
		"\x07\u031F\x02\x02\u1436\u1433\x03\x02\x02\x02\u1437\u1438\x03\x02\x02" +
		"\x02\u1438\u1436\x03\x02\x02\x02\u1438\u1439\x03\x02\x02\x02\u1439\u144B" +
		"\x03\x02\x02\x02\u143A\u143C\x07\u0337\x02\x02\u143B\u143A\x03\x02\x02" +
		"\x02\u143B\u143C\x03\x02\x02\x02\u143C\u143D\x03\x02\x02\x02\u143D\u143E" +
		"\x07\u01D6\x02\x02\u143E\u1442\x07\u0323\x02\x02\u143F\u1443\x07\xD5\x02" +
		"\x02\u1440\u1443\x07\u031B\x02\x02\u1441\u1443\x05\u03B6\u01DC\x02\u1442" +
		"\u143F\x03\x02\x02\x02\u1442\u1440\x03\x02\x02\x02\u1442\u1441\x03\x02" +
		"\x02\x02\u1443\u144B\x03\x02\x02\x02\u1444\u1446\x07\u0337\x02\x02\u1445" +
		"\u1444\x03\x02\x02\x02\u1445\u1446\x03\x02\x02\x02\u1446\u1447\x03\x02" +
		"\x02\x02\u1447\u1448\x07\u018E\x02\x02\u1448\u1449\x07\u0323\x02\x02\u1449" +
		"\u144B\t\t\x02\x02\u144A\u1419\x03\x02\x02\x02\u144A\u141F\x03\x02\x02" +
		"\x02\u144A\u1428\x03\x02\x02\x02\u144A\u142E\x03\x02\x02\x02\u144A\u143B" +
		"\x03\x02\x02\x02\u144A\u1445\x03\x02\x02\x02\u144B\u144C\x03\x02\x02\x02" +
		"\u144C\u144A\x03\x02\x02\x02\u144C\u144D\x03\x02\x02\x02\u144D\u0191\x03" +
		"\x02\x02\x02\u144E\u144F\x07I\x02\x02\u144F\u1450\x07\u0171\x02\x02\u1450" +
		"\u1454\x05\u03B6\u01DC\x02\u1451\u1452\t4\x02\x02\u1452\u1453\x07\u023C" +
		"\x02\x02\u1453\u1455\x05\u03B6\u01DC\x02\u1454\u1451\x03\x02\x02\x02\u1454" +
		"\u1455\x03\x02\x02\x02\u1455\u1468\x03\x02\x02\x02\u1456\u1465\x07\u017C" +
		"\x02\x02\u1457\u1459\x07\u0337\x02\x02\u1458\u1457\x03\x02\x02\x02\u1458" +
		"\u1459\x03\x02\x02\x02\u1459\u145A\x03\x02\x02\x02\u145A\u145B\x07\\\x02" +
		"\x02\u145B\u145C\x07\u0323\x02\x02\u145C\u1464\x05\u03B6\u01DC\x02\u145D" +
		"\u145F\x07\u0337\x02\x02\u145E\u145D\x03\x02\x02\x02\u145E\u145F\x03\x02" +
		"\x02\x02\u145F\u1460\x03\x02\x02\x02\u1460\u1461\x07\u018E\x02\x02\u1461" +
		"\u1462\x07\u0323\x02\x02\u1462\u1464\t\t\x02\x02\u1463\u1458\x03\x02\x02" +
		"\x02\u1463\u145E\x03\x02\x02\x02\u1464\u1467\x03\x02\x02\x02\u1465\u1463" +
		"\x03\x02\x02\x02\u1465\u1466\x03\x02\x02\x02\u1466\u1469\x03\x02\x02\x02" +
		"\u1467\u1465\x03\x02\x02\x02\u1468\u1456\x03\x02\x02\x02\u1468\u1469\x03" +
		"\x02\x02\x02\u1469\u14E1\x03\x02\x02\x02\u146A\u146B\x07I\x02\x02\u146B" +
		"\u14BC\x07\u0171\x02\x02\u146C\u148F\x05\u03B6\u01DC\x02\u146D\u148C\x07" +
		"\u017C\x02\x02\u146E\u1470\x07\u0337\x02\x02\u146F\u146E\x03\x02\x02\x02" +
		"\u146F\u1470\x03\x02\x02\x02\u1470\u1471\x03\x02\x02\x02\u1471\u1472\x07" +
		"\\\x02\x02\u1472\u1473\x07\u0323\x02\x02\u1473\u148B\x05\u03B6\u01DC\x02" +
		"\u1474\u1476\x07\u0337\x02\x02\u1475\u1474\x03\x02\x02\x02\u1475\u1476" +
		"\x03\x02\x02\x02\u1476\u1477\x03\x02\x02\x02\u1477\u1478\x07\u01D6\x02" +
		"\x02\u1478\u147C\x07\u0323\x02\x02\u1479\u147D\x07\xD5\x02\x02\u147A\u147D" +
		"\x07\u031B\x02\x02\u147B\u147D\x05\u03B6\u01DC\x02\u147C\u1479\x03\x02" +
		"\x02\x02\u147C\u147A\x03\x02\x02\x02\u147C\u147B\x03\x02\x02\x02\u147D" +
		"\u148B\x03\x02\x02\x02\u147E\u1480\x07\u0337\x02\x02\u147F\u147E\x03\x02" +
		"\x02\x02\u147F\u1480\x03\x02\x02\x02\u1480\u1481\x03\x02\x02\x02\u1481" +
		"\u1482\x07\u0140\x02\x02\u1482\u1483\x07\u0323\x02\x02\u1483\u148B\x07" +
		"\u0320\x02\x02\u1484\u1486\x07\u0337\x02\x02\u1485\u1484\x03\x02\x02\x02" +
		"\u1485\u1486\x03\x02\x02\x02\u1486\u1487\x03\x02\x02\x02\u1487\u1488\x07" +
		"\u018E\x02\x02\u1488\u1489\x07\u0323\x02\x02\u1489\u148B\t\t\x02\x02\u148A" +
		"\u146F\x03\x02\x02\x02\u148A\u1475\x03\x02\x02\x02\u148A\u147F\x03\x02" +
		"\x02\x02\u148A\u1485\x03\x02\x02\x02\u148B\u148E\x03\x02\x02\x02\u148C" +
		"\u148A\x03\x02\x02\x02\u148C\u148D\x03\x02\x02\x02\u148D\u1490\x03\x02" +
		"\x02\x02\u148E\u148C\x03\x02\x02\x02\u148F\u146D\x03\x02\x02\x02\u148F" +
		"\u1490\x03\x02\x02\x02\u1490\u14BD\x03\x02\x02\x02\u1491\u1492\x05\u03B6" +
		"\u01DC\x02\u1492\u1493\x07\u017C\x02\x02\u1493\u1494\x07\xF4\x02\x02\u1494" +
		"\u1495\x07\u0323\x02\x02\u1495\u14B4\x07\u031F\x02\x02\u1496\u1498\x07" +
		"\u0337\x02\x02\u1497\u1496\x03\x02\x02\x02\u1497\u1498\x03\x02\x02\x02" +
		"\u1498\u1499\x03\x02\x02\x02\u1499\u149A\x07\\\x02\x02\u149A\u149B\x07" +
		"\u0323\x02\x02\u149B\u14B3\x05\u03B6\u01DC\x02\u149C\u149E\x07\u0337\x02" +
		"\x02\u149D\u149C\x03\x02\x02\x02\u149D\u149E\x03\x02\x02\x02\u149E\u149F" +
		"\x03\x02\x02\x02\u149F\u14A0\x07\u01D6\x02\x02\u14A0\u14A4\x07\u0323\x02" +
		"\x02\u14A1\u14A5\x07\xD5\x02\x02\u14A2\u14A5\x07\u031B\x02\x02\u14A3\u14A5" +
		"\x05\u03B6\u01DC\x02\u14A4\u14A1\x03\x02\x02\x02\u14A4\u14A2\x03\x02\x02" +
		"\x02\u14A4\u14A3\x03\x02\x02\x02\u14A5\u14B3\x03\x02\x02\x02\u14A6\u14A8" +
		"\x07\u0337\x02\x02\u14A7\u14A6\x03\x02\x02\x02\u14A7\u14A8\x03\x02\x02" +
		"\x02\u14A8\u14A9\x03\x02\x02\x02\u14A9\u14AA\x07\u0140\x02\x02\u14AA\u14AB" +
		"\x07\u0323\x02\x02\u14AB\u14B3\x07\u0320\x02\x02\u14AC\u14AE\x07\u0337" +
		"\x02\x02\u14AD\u14AC\x03\x02\x02\x02\u14AD\u14AE\x03\x02\x02\x02\u14AE" +
		"\u14AF\x03\x02\x02\x02\u14AF\u14B0\x07\u018E\x02\x02\u14B0\u14B1\x07\u0323" +
		"\x02\x02\u14B1\u14B3\t\t\x02\x02\u14B2\u1497\x03\x02\x02\x02\u14B2\u149D" +
		"\x03\x02\x02\x02\u14B2\u14A7\x03\x02\x02\x02\u14B2\u14AD\x03\x02\x02\x02" +
		"\u14B3\u14B6\x03\x02\x02\x02\u14B4\u14B2\x03\x02\x02\x02\u14B4\u14B5\x03" +
		"\x02\x02\x02\u14B5\u14BD\x03\x02\x02\x02\u14B6\u14B4\x03\x02\x02\x02\u14B7" +
		"\u14B8\x05\u03B6\u01DC\x02\u14B8\u14B9\x07\x8C\x02\x02\u14B9\u14BA\x07" +
		"|\x02\x02\u14BA\u14BB\x07\u0291\x02\x02\u14BB\u14BD\x03\x02\x02\x02\u14BC" +
		"\u146C\x03\x02\x02\x02\u14BC\u1491\x03\x02\x02\x02\u14BC\u14B7\x03\x02" +
		"\x02\x02\u14BD\u14E1\x03\x02\x02\x02\u14BE\u14BF\x07I\x02\x02\u14BF\u14C0" +
		"\x07\u0171\x02\x02\u14C0\u14DB\x05\u03B6\u01DC\x02\u14C1\u14C2\x07\u017E" +
		"\x02\x02\u14C2\u14D1\x07\u023C\x02\x02\u14C3\u14C5\x07\u0337\x02\x02\u14C4" +
		"\u14C3\x03\x02\x02\x02\u14C4\u14C5\x03\x02\x02\x02\u14C5\u14C6\x03\x02" +
		"\x02\x02\u14C6\u14C7\x07\\\x02\x02\u14C7\u14C8\x07\u0323\x02\x02\u14C8" +
		"\u14D0\x05\u03B6\u01DC\x02\u14C9\u14CB\x07\u0337\x02\x02\u14CA\u14C9\x03" +
		"\x02\x02\x02\u14CA\u14CB\x03\x02\x02\x02\u14CB\u14CC\x03\x02\x02\x02\u14CC" +
		"\u14CD\x07\u018E\x02\x02\u14CD\u14CE\x07\u0323\x02\x02\u14CE\u14D0\t\t" +
		"\x02\x02\u14CF\u14C4\x03\x02\x02\x02\u14CF\u14CA\x03\x02\x02\x02\u14D0" +
		"\u14D3\x03\x02\x02\x02\u14D1\u14CF\x03\x02\x02\x02\u14D1\u14D2\x03\x02" +
		"\x02\x02\u14D2\u14DC\x03\x02\x02\x02\u14D3\u14D1\x03\x02\x02\x02\u14D4" +
		"\u14D5\t4\x02\x02\u14D5\u14D6\x07+\x02\x02\u14D6\u14DC\x05\u03B6\u01DC" +
		"\x02\u14D7\u14D8\t4\x02\x02\u14D8\u14D9\x07\x12\x02\x02\u14D9\u14DA\x07" +
		"\xAC\x02\x02\u14DA\u14DC\x05\u03B6\u01DC\x02\u14DB\u14C1\x03\x02\x02\x02" +
		"\u14DB\u14D4\x03\x02\x02\x02\u14DB\u14D7";
	private static readonly _serializedATNSegment12: string =
		"\x03\x02\x02\x02\u14DC\u14E1\x03\x02\x02\x02\u14DD\u14DE\x07I\x02\x02" +
		"\u14DE\u14DF\x07\u0171\x02\x02\u14DF\u14E1\x05\u03B6\u01DC\x02\u14E0\u144E" +
		"\x03\x02\x02\x02\u14E0\u146A\x03\x02\x02\x02\u14E0\u14BE\x03\x02\x02\x02" +
		"\u14E0\u14DD\x03\x02\x02\x02\u14E1\u0193\x03\x02\x02\x02\u14E2\u14E3\x07" +
		"I\x02\x02\u14E3\u14E4\x07\u0171\x02\x02\u14E4\u14EA\x05\u03B6\u01DC\x02" +
		"\u14E5\u14E6\t4\x02\x02\u14E6\u14E7\x07\u023C\x02\x02\u14E7\u14EB\x05" +
		"\u03B6\u01DC\x02\u14E8\u14E9\x07\u017E\x02\x02\u14E9\u14EB\x07\u023C\x02" +
		"\x02\u14EA\u14E5\x03\x02\x02\x02\u14EA\u14E8\x03\x02\x02\x02\u14EA\u14EB" +
		"\x03\x02\x02\x02\u14EB\u14F0\x03\x02\x02\x02\u14EC\u14ED\x07\u017C\x02" +
		"\x02\u14ED\u14EE\x07\\\x02\x02\u14EE\u14EF\x07\u0323\x02\x02\u14EF\u14F1" +
		"\x05\u03B6\u01DC\x02\u14F0\u14EC\x03\x02\x02\x02\u14F0\u14F1\x03\x02\x02" +
		"\x02\u14F1\u14FF\x03\x02\x02\x02\u14F2\u14F3\x07I\x02\x02\u14F3\u14F4" +
		"\x07\u0171\x02\x02\u14F4\u14F5\x05\u03B6\u01DC\x02\u14F5\u14F6\x07\x8C" +
		"\x02\x02\u14F6\u14F7\x07|\x02\x02\u14F7\u14FC\x07\u0291\x02\x02\u14F8" +
		"\u14F9\x07\u017C\x02\x02\u14F9\u14FA\x07\\\x02\x02\u14FA\u14FB\x07\u0323" +
		"\x02\x02\u14FB\u14FD\x05\u03B6\u01DC\x02\u14FC\u14F8\x03\x02\x02\x02\u14FC" +
		"\u14FD\x03\x02\x02\x02\u14FD\u14FF\x03\x02\x02\x02\u14FE\u14E2\x03\x02" +
		"\x02\x02\u14FE\u14F2\x03\x02\x02\x02\u14FF\u0195\x03\x02\x02\x02\u1500" +
		"\u1501\x07\n\x02\x02\u1501\u1502\x07\u0171\x02\x02\u1502\u1503\x05\u03B6" +
		"\u01DC\x02\u1503\u151C\x07\u017C\x02\x02\u1504\u1506\x07\u0337\x02\x02" +
		"\u1505\u1504\x03\x02\x02\x02\u1505\u1506\x03\x02\x02\x02\u1506\u1507\x03" +
		"\x02\x02\x02\u1507\u1508\x07\u025E\x02\x02\u1508\u1509\x07\u0323\x02\x02" +
		"\u1509\u151D\x05\u03B6\u01DC\x02\u150A\u150C\x07\u0337\x02\x02\u150B\u150A" +
		"\x03\x02\x02\x02\u150B\u150C\x03\x02\x02\x02\u150C\u150D\x03\x02\x02\x02" +
		"\u150D\u150E\x07\\\x02\x02\u150E\u150F\x07\u0323\x02\x02\u150F\u151D\x05" +
		"\u03B6\u01DC\x02\u1510\u1512\x07\u0337\x02\x02\u1511\u1510\x03\x02\x02" +
		"\x02\u1511\u1512\x03\x02\x02\x02\u1512\u1513\x03\x02\x02\x02\u1513\u1514" +
		"\x07\u023C\x02\x02\u1514\u1515\x07\u0323\x02\x02\u1515\u151D\x05\u03B6" +
		"\u01DC\x02\u1516\u1518\x07\u0337\x02\x02\u1517\u1516\x03\x02\x02\x02\u1517" +
		"\u1518\x03\x02\x02\x02\u1518\u1519\x03\x02\x02\x02\u1519\u151A\x07\u018E" +
		"\x02\x02\u151A\u151B\x07\u0323\x02\x02\u151B\u151D\t\t\x02\x02\u151C\u1505" +
		"\x03\x02\x02\x02\u151C\u150B\x03\x02\x02\x02\u151C\u1511\x03\x02\x02\x02" +
		"\u151C\u1517\x03\x02\x02\x02\u151D\u151E\x03\x02\x02\x02\u151E\u151C\x03" +
		"\x02\x02\x02\u151E\u151F\x03\x02\x02\x02\u151F\u0197\x03\x02\x02\x02\u1520" +
		"\u1521\x07\n\x02\x02\u1521\u1522\x07\u030D\x02\x02\u1522\u1525\x07\x93" +
		"\x02\x02\u1523\u1526\x05\u03B6\u01DC\x02\u1524\u1526\x07\u01D4\x02\x02" +
		"\u1525\u1523\x03\x02\x02\x02\u1525\u1524\x03\x02\x02\x02\u1526\u1546\x03" +
		"\x02\x02\x02\u1527\u1528\x07\u017C\x02\x02\u1528\u1541\x07\u0335\x02\x02" +
		"\u1529\u152A\x07\u021E\x02\x02\u152A\u152B\x07\u0323\x02\x02\u152B\u1542" +
		"\t5\x02\x02\u152C\u152E\x07\u0337\x02\x02\u152D\u152C\x03\x02\x02\x02" +
		"\u152D\u152E\x03\x02\x02\x02\u152E\u152F\x03\x02\x02\x02\u152F\u1530\x07" +
		"\u02AE\x02\x02\u1530\u1531\x07\u0323\x02\x02\u1531\u1542\x07\u031B\x02" +
		"\x02\u1532\u1534\x07\u0337\x02\x02\u1533\u1532\x03\x02\x02\x02\u1533\u1534" +
		"\x03\x02\x02\x02\u1534\u1535\x03\x02\x02\x02\u1535\u1536\x07\u02AD\x02" +
		"\x02\u1536\u1537\x07\u0323\x02\x02\u1537\u1542\x07\u031B\x02\x02\u1538" +
		"\u1539\x07\u02AF\x02\x02\u1539\u153A\x07\u0323\x02\x02\u153A\u1542\x07" +
		"\u031B\x02\x02\u153B\u153C\x07\u0244\x02\x02\u153C\u153D\x07\u0323\x02" +
		"\x02\u153D\u1542\x07\u031B\x02\x02\u153E\u153F\x07\u0211\x02\x02\u153F" +
		"\u1540\x07\u0323\x02\x02\u1540\u1542\x07\u031B\x02\x02\u1541\u1529\x03" +
		"\x02\x02\x02\u1541\u152D\x03\x02\x02\x02\u1541\u1533\x03\x02\x02\x02\u1541" +
		"\u1538\x03\x02\x02\x02\u1541\u153B\x03\x02\x02\x02\u1541\u153E\x03\x02" +
		"\x02\x02\u1542\u1543\x03\x02\x02\x02\u1543\u1541\x03\x02\x02\x02\u1543" +
		"\u1544\x03\x02\x02\x02\u1544\u1545\x03\x02\x02\x02\u1545\u1547\x07\u0336" +
		"\x02\x02\u1546\u1527\x03\x02\x02\x02\u1546\u1547\x03\x02\x02\x02\u1547" +
		"\u154D\x03\x02\x02\x02\u1548\u154B\x07\u0301\x02\x02\u1549\u154C\x05\u03B6" +
		"\u01DC\x02\u154A\u154C\x07\u01D4\x02\x02\u154B\u1549\x03\x02\x02\x02\u154B" +
		"\u154A\x03\x02\x02\x02\u154C\u154E\x03\x02\x02\x02\u154D\u1548\x03\x02" +
		"\x02\x02\u154D\u154E\x03\x02\x02\x02\u154E\u0199\x03\x02\x02\x02\u154F" +
		"\u1550\x07I\x02\x02\u1550\u1551\x07\u030D\x02\x02\u1551\u1552\x07\x93" +
		"\x02\x02\u1552\u1572\x05\u03B6\u01DC\x02\u1553\u1554\x07\u017C\x02\x02" +
		"\u1554\u156D\x07\u0335\x02\x02\u1555\u1556\x07\u021E\x02\x02\u1556\u1557" +
		"\x07\u0323\x02\x02\u1557\u156E\t5\x02\x02\u1558\u155A\x07\u0337\x02\x02" +
		"\u1559\u1558\x03\x02\x02\x02\u1559\u155A\x03\x02\x02\x02\u155A\u155B\x03" +
		"\x02\x02\x02\u155B\u155C\x07\u02AE\x02\x02\u155C\u155D\x07\u0323\x02\x02" +
		"\u155D\u156E\x07\u031B\x02\x02\u155E\u1560\x07\u0337\x02\x02\u155F\u155E" +
		"\x03\x02\x02\x02\u155F\u1560\x03\x02\x02\x02\u1560\u1561\x03\x02\x02\x02" +
		"\u1561\u1562\x07\u02AD\x02\x02\u1562\u1563\x07\u0323\x02\x02\u1563\u156E" +
		"\x07\u031B\x02\x02\u1564\u1565\x07\u02AF\x02\x02\u1565\u1566\x07\u0323" +
		"\x02\x02\u1566\u156E\x07\u031B\x02\x02\u1567\u1568\x07\u0244\x02\x02\u1568" +
		"\u1569\x07\u0323\x02\x02\u1569\u156E\x07\u031B\x02\x02\u156A\u156B\x07" +
		"\u0211\x02\x02\u156B\u156C\x07\u0323\x02\x02\u156C\u156E\x07\u031B\x02" +
		"\x02\u156D\u1555\x03\x02\x02\x02\u156D\u1559\x03\x02\x02\x02\u156D\u155F" +
		"\x03\x02\x02\x02\u156D\u1564\x03\x02\x02\x02\u156D\u1567\x03\x02\x02\x02" +
		"\u156D\u156A\x03\x02\x02\x02\u156E\u156F\x03\x02\x02\x02\u156F\u156D\x03" +
		"\x02\x02\x02\u156F\u1570\x03\x02\x02\x02\u1570\u1571\x03\x02\x02\x02\u1571" +
		"\u1573\x07\u0336\x02\x02\u1572\u1553\x03\x02\x02\x02\u1572\u1573\x03\x02" +
		"\x02\x02\u1573\u1581\x03\x02\x02\x02\u1574\u1577\x07\u0301\x02\x02\u1575" +
		"\u1578\x05\u03B6\u01DC\x02\u1576\u1578\x07\u01D4\x02\x02\u1577\u1575\x03" +
		"\x02\x02\x02\u1577\u1576\x03\x02\x02\x02\u1577\u1578\x03\x02\x02\x02\u1578" +
		"\u157F\x03\x02\x02\x02\u1579\u157B\x07\u0337\x02\x02\u157A\u1579\x03\x02" +
		"\x02\x02\u157A\u157B\x03\x02\x02\x02\u157B\u157C\x03\x02\x02\x02\u157C" +
		"\u157D\x07|\x02\x02\u157D\u1580\x05\u03B6\u01DC\x02\u157E\u1580\x07\u01D4" +
		"\x02\x02\u157F\u157A\x03\x02\x02\x02\u157F\u157E\x03\x02\x02\x02\u157F" +
		"\u1580\x03\x02\x02\x02\u1580\u1582\x03\x02\x02\x02\u1581\u1574\x03\x02" +
		"\x02\x02\u1581\u1582\x03\x02\x02\x02\u1582\u019B\x03\x02\x02\x02\u1583" +
		"\u1584\x07I\x02\x02\u1584\u1585\x07\u030E\x02\x02\u1585\u1586\x07\u012E" +
		"\x02\x02\u1586\u158A\x07\u01B8\x02\x02\u1587\u1588\x05\u03B6\u01DC\x02" +
		"\u1588\u1589\x07\u0330\x02\x02\u1589\u158B\x03\x02\x02\x02\u158A\u1587" +
		"\x03\x02\x02\x02\u158A\u158B\x03\x02\x02\x02\u158B\u158C\x03\x02\x02\x02" +
		"\u158C\u158D\x05\u03B6\u01DC\x02\u158D\u1591\x07\x10\x02\x02\u158E\u1592" +
		"\x07\u031F\x02\x02\u158F\u1592\x05\u03B6\u01DC\x02\u1590\u1592\x07\u031A" +
		"\x02\x02\u1591\u158E\x03\x02\x02\x02\u1591\u158F\x03\x02\x02\x02\u1591" +
		"\u1590\x03\x02\x02\x02\u1592\u019D\x03\x02\x02\x02\u1593\u1594\x07I\x02" +
		"\x02\u1594\u1597\x07\u0294\x02\x02\u1595\u1598\x05\u0380\u01C1\x02\u1596" +
		"\u1598\x05\u03B6\u01DC\x02\u1597\u1595\x03\x02\x02\x02\u1597\u1596\x03" +
		"\x02\x02\x02\u1598\u159A\x03\x02\x02\x02\u1599\u159B\x05\u01A0\xD1\x02" +
		"\u159A\u1599\x03\x02\x02\x02\u159A\u159B\x03\x02\x02\x02\u159B\u159F\x03" +
		"\x02\x02\x02\u159C\u159D\x07\xE5\x02\x02\u159D\u15A0\x05\u03B6\u01DC\x02" +
		"\u159E\u15A0\x07Z\x02\x02\u159F\u159C\x03\x02\x02\x02\u159F\u159E\x03" +
		"\x02\x02\x02\u159F\u15A0\x03\x02\x02\x02\u15A0\u019F\x03\x02\x02\x02\u15A1" +
		"\u15A8\x07\u017C\x02\x02\u15A2\u15A3\x07\u02DE\x02\x02\u15A3\u15A4\x07" +
		"\u0323\x02\x02\u15A4\u15A6\t\t\x02\x02\u15A5\u15A7\x07\u0337\x02\x02\u15A6" +
		"\u15A5\x03\x02\x02\x02\u15A6\u15A7\x03\x02\x02\x02\u15A7\u15A9\x03\x02" +
		"\x02\x02\u15A8\u15A2\x03\x02\x02\x02\u15A8\u15A9\x03\x02\x02\x02\u15A9" +
		"\u15B0\x03\x02\x02\x02\u15AA\u15AB\x07\u02B5\x02\x02\u15AB\u15AC\x07\u0323" +
		"\x02\x02\u15AC\u15AE\t\t\x02\x02\u15AD\u15AF\x07\u0337\x02\x02\u15AE\u15AD" +
		"\x03\x02\x02\x02\u15AE\u15AF\x03\x02\x02\x02\u15AF\u15B1\x03\x02\x02\x02" +
		"\u15B0\u15AA\x03\x02\x02\x02\u15B0\u15B1\x03\x02\x02\x02\u15B1\u15DF\x03" +
		"\x02\x02\x02\u15B2\u15B3\x07\u0184\x02\x02\u15B3\u15D9\x07\u0335\x02\x02" +
		"\u15B4\u15B5\x07\u02DE\x02\x02\u15B5\u15B6\x07\u0323\x02\x02\u15B6\u15B8" +
		"\t\t\x02\x02\u15B7\u15B9\x07\u0337\x02\x02\u15B8\u15B7\x03\x02\x02\x02" +
		"\u15B8\u15B9\x03\x02\x02\x02\u15B9\u15BB\x03\x02\x02\x02\u15BA\u15B4\x03" +
		"\x02\x02\x02\u15BA\u15BB\x03\x02\x02\x02\u15BB\u15C2\x03\x02\x02\x02\u15BC" +
		"\u15BD\x07\u028F\x02\x02\u15BD\u15BE\x07\u0323\x02\x02\u15BE\u15C0\x05" +
		"\u0386\u01C4\x02\u15BF\u15C1\x07\u0337\x02\x02\u15C0\u15BF\x03\x02\x02" +
		"\x02\u15C0\u15C1\x03\x02\x02\x02\u15C1\u15C3\x03\x02\x02\x02\u15C2\u15BC" +
		"\x03\x02\x02\x02\u15C2\u15C3\x03\x02\x02\x02\u15C3\u15CA\x03\x02\x02\x02" +
		"\u15C4\u15C5\x07\u0249\x02\x02\u15C5\u15C6\x07\u0323\x02\x02\u15C6\u15C8" +
		"\x07\u031B\x02\x02\u15C7\u15C9\x07\u0337\x02\x02\u15C8\u15C7\x03\x02\x02" +
		"\x02\u15C8\u15C9\x03\x02\x02\x02\u15C9\u15CB\x03\x02\x02\x02\u15CA\u15C4" +
		"\x03\x02\x02\x02\u15CA\u15CB\x03\x02\x02\x02\u15CB\u15D6\x03\x02\x02\x02" +
		"\u15CC\u15CD\x07w\x02\x02\u15CD\u15D1\x07\x10\x02\x02\u15CE\u15D2\x07" +
		"\u02CA\x02\x02\u15CF\u15D2\x07\u031F\x02\x02\u15D0\u15D2\x07\u027D\x02" +
		"\x02\u15D1\u15CE\x03\x02\x02\x02\u15D1\u15CF\x03\x02\x02\x02\u15D1\u15D0" +
		"\x03\x02\x02\x02\u15D2\u15D4\x03\x02\x02\x02\u15D3\u15D5\x07\u0337\x02" +
		"\x02\u15D4\u15D3\x03\x02\x02\x02\u15D4\u15D5\x03\x02\x02\x02\u15D5\u15D7" +
		"\x03\x02\x02\x02\u15D6\u15CC\x03\x02\x02\x02\u15D6\u15D7\x03\x02\x02\x02" +
		"\u15D7\u15DA\x03\x02\x02\x02\u15D8\u15DA\x07h\x02\x02\u15D9\u15BA\x03" +
		"\x02\x02\x02\u15D9\u15D8\x03\x02\x02\x02\u15DA\u15DB\x03\x02\x02\x02\u15DB" +
		"\u15DD\x07\u0336\x02\x02\u15DC\u15DE\x07\u0337\x02\x02\u15DD\u15DC\x03" +
		"\x02\x02\x02\u15DD\u15DE\x03\x02\x02\x02\u15DE\u15E0\x03\x02\x02\x02\u15DF" +
		"\u15B2\x03\x02\x02\x02\u15DF\u15E0\x03\x02\x02\x02\u15E0\u15E8\x03\x02" +
		"\x02\x02\u15E1\u15E2\x07\u0284\x02\x02\u15E2\u15E3\x07\u0335\x02\x02\u15E3" +
		"\u15E4\x07\u02DE\x02\x02\u15E4\u15E5\x07\u0323\x02\x02\u15E5\u15E6\t\t" +
		"\x02\x02\u15E6\u15E7\x03\x02\x02\x02\u15E7\u15E9\x07\u0336\x02\x02\u15E8" +
		"\u15E1\x03\x02\x02\x02\u15E8\u15E9\x03\x02\x02\x02\u15E9\u01A1\x03\x02" +
		"\x02\x02\u15EA\u15EB\x07\n\x02\x02\u15EB\u15EE\x07\u0294\x02\x02\u15EC" +
		"\u15EF\x05\u0380\u01C1\x02\u15ED\u15EF\x05\u03B6\u01DC\x02\u15EE\u15EC" +
		"\x03\x02\x02\x02\u15EE\u15ED\x03\x02\x02\x02\u15EF\u15F2\x03\x02\x02\x02" +
		"\u15F0\u15F3\x05\u01A0\xD1\x02\u15F1\u15F3\x05\u01A4\xD3\x02\u15F2\u15F0" +
		"\x03\x02\x02\x02\u15F2\u15F1\x03\x02\x02\x02\u15F3\u01A3\x03\x02\x02\x02" +
		"\u15F4\u15FA\x07\u02A1\x02\x02\u15F5\u15F6\x07\u017C\x02\x02\u15F6\u15F7" +
		"\x07\u0335\x02\x02\u15F7\u15F8\x05\u01A6\xD4\x02\u15F8\u15F9\x07\u0336" +
		"\x02\x02\u15F9\u15FB\x03\x02\x02\x02\u15FA\u15F5\x03\x02\x02\x02\u15FA" +
		"\u15FB\x03\x02\x02\x02\u15FB\u160A\x03\x02\x02\x02\u15FC\u1601\x07\u02AA" +
		"\x02\x02\u15FD\u15FE\x07\u017C\x02\x02\u15FE\u15FF\x07\u0237\x02\x02\u15FF" +
		"\u1600\x07\u0323\x02\x02\u1600\u1602\t\t\x02\x02\u1601\u15FD\x03\x02\x02" +
		"\x02\u1601\u1602\x03\x02\x02\x02\u1602\u160A\x03\x02\x02\x02\u1603\u1604" +
		"\x07\u025C\x02\x02\u1604\u1607\x07\u015D\x02\x02\u1605\u1608\x05\u03B6" +
		"\u01DC\x02\u1606\u1608\x07Z\x02\x02\u1607\u1605\x03\x02\x02\x02\u1607" +
		"\u1606\x03\x02\x02\x02\u1608\u160A\x03\x02\x02\x02\u1609\u15F4\x03\x02" +
		"\x02\x02\u1609\u15FC\x03\x02\x02\x02\u1609\u1603\x03\x02\x02\x02\u160A" +
		"\u01A5\x03\x02\x02\x02\u160B\u160C\x07\u024B\x02\x02\u160C\u160D\x07\u0323" +
		"\x02\x02\u160D\u160E\x07\u031B\x02\x02\u160E\u01A7\x03\x02\x02\x02\u160F" +
		"\u1610\x07I\x02\x02\u1610\u1611\x07D\x02\x02\u1611\u1614\x05\u03A0\u01D1" +
		"\x02\u1612\u1613\x07\x14\x02\x02\u1613\u1615\x05\u03B6\u01DC\x02\u1614" +
		"\u1612\x03\x02\x02\x02\u1614\u1615\x03\x02\x02\x02\u1615\u1616\x03\x02" +
		"\x02\x02\u1616\u1621\x07\u0335\x02\x02\u1617\u161A\x05\u03B6\u01DC\x02" +
		"\u1618\u161A\x07Z\x02\x02\u1619\u1617\x03\x02\x02\x02\u1619\u1618\x03" +
		"\x02\x02\x02\u161A\u161B\x03\x02\x02\x02\u161B\u161C\x07\u02CD\x02\x02" +
		"\u161C\u161D\x07&\x02\x02\u161D\u161F\t6\x02\x02\u161E\u1620\x07\u0337" +
		"\x02\x02\u161F\u161E\x03\x02\x02\x02\u161F\u1620\x03\x02\x02\x02\u1620" +
		"\u1622\x03\x02\x02\x02\u1621\u1619\x03\x02\x02\x02\u1622\u1623\x03\x02" +
		"\x02\x02\u1623\u1621\x03\x02\x02\x02\u1623\u1624\x03\x02\x02\x02\u1624" +
		"\u1625\x03\x02\x02\x02\u1625\u1626\x07\u0336\x02\x02\u1626\u01A9\x03\x02" +
		"\x02\x02\u1627\u162E\x05\u039C\u01CF\x02\u1628\u162E\x05\u039E\u01D0\x02" +
		"\u1629\u162E\x05\u03A4\u01D3\x02\u162A\u162E\x05\u03A8\u01D5\x02\u162B" +
		"\u162E\x05\u03AC\u01D7\x02\u162C\u162E\x05\u03A6\u01D4\x02\u162D\u1627" +
		"\x03\x02\x02\x02\u162D\u1628\x03\x02\x02\x02\u162D\u1629\x03\x02\x02\x02" +
		"\u162D\u162A\x03\x02\x02\x02\u162D\u162B\x03\x02\x02\x02\u162D\u162C\x03" +
		"\x02\x02\x02\u162E\u01AB\x03\x02\x02\x02\u162F\u1630\x07I\x02\x02\u1630" +
		"\u1631\x07\u0251\x02\x02\u1631\u1632\x07\u02FB\x02\x02\u1632\u1635\x05" +
		"\u03B6\u01DC\x02\u1633\u1634\x07\x14\x02\x02\u1634\u1636\x05\u03B6\u01DC" +
		"\x02\u1635\u1633\x03\x02\x02\x02\u1635\u1636\x03\x02\x02\x02\u1636\u1637" +
		"\x03\x02\x02\x02\u1637\u1638\x07\u0303\x02\x02\u1638\u1641\x07\u0323\x02" +
		"\x02\u1639\u1642\x07\xD5\x02\x02\u163A\u1642\x07\u01EA\x02\x02\u163B\u1642" +
		"\x07\u030A\x02\x02\u163C\u163D\x07\u0302\x02\x02\u163D\u163E\x07\u017C" +
		"\x02\x02\u163E\u163F\x07\u012E\x02\x02\u163F\u1640\x07\u01B8\x02\x02\u1640" +
		"\u1642\x05\u03B6\u01DC\x02\u1641\u1639\x03\x02\x02\x02\u1641\u163A\x03" +
		"\x02\x02\x02\u1641\u163B\x03\x02\x02\x02\u1641\u163C\x03\x02\x02\x02\u1642" +
		"\u01AD\x03\x02\x02\x02\u1643\u1645\x05\u02DA\u016E\x02\u1644\u1643\x03" +
		"\x02\x02\x02\u1644\u1645\x03\x02\x02\x02\u1645\u1646\x03\x02\x02\x02\u1646" +
		"\u164E\x07\xC9\x02\x02\u1647\u1648\x07\u015E\x02\x02\u1648\u1649\x07\u0335" +
		"\x02\x02\u1649\u164A\x05\u02CC\u0167\x02\u164A\u164C\x07\u0336\x02\x02" +
		"\u164B\u164D\x07\xF5\x02\x02\u164C\u164B\x03\x02\x02\x02\u164C\u164D\x03" +
		"\x02\x02\x02\u164D\u164F\x03\x02\x02\x02\u164E\u1647\x03\x02\x02\x02\u164E" +
		"\u164F\x03\x02\x02\x02\u164F\u1651\x03\x02\x02\x02\u1650\u1652\x07\xA5" +
		"\x02\x02\u1651\u1650\x03\x02\x02\x02\u1651\u1652\x03\x02\x02\x02\u1652" +
		"\u1653\x03\x02\x02\x02\u1653\u1655\x05\u0388\u01C5\x02\u1654\u1656\x05" +
		"\u034E\u01A8\x02\u1655\u1654\x03\x02\x02\x02\u1655\u1656\x03\x02\x02\x02" +
		"\u1656\u1658\x03\x02\x02\x02\u1657\u1659\x05\u0348\u01A5\x02\u1658\u1657" +
		"\x03\x02\x02\x02\u1658\u1659\x03\x02\x02\x02\u1659\u165A\x03\x02\x02\x02" +
		"\u165A\u165B\x07\u0301\x02\x02\u165B\u165C\x05\u0314\u018B\x02\u165C\u165D" +
		"\x07\xE5\x02\x02\u165D\u1668\x05\u02E2\u0172\x02\u165E\u165F\x07\u0178" +
		"\x02\x02\u165F\u1662\x07\xBC\x02\x02\u1660\u1661\x07\v\x02\x02\u1661\u1663" +
		"\x05\u02E2\u0172\x02\u1662\u1660\x03\x02\x02\x02\u1662\u1663\x03\x02\x02" +
		"\x02\u1663\u1664\x03\x02\x02\x02\u1664\u1665\x07\u015C\x02\x02\u1665\u1667" +
		"\x05\u01B0\xD9\x02\u1666\u165E\x03\x02\x02\x02\u1667\u166A\x03\x02\x02" +
		"\x02\u1668\u1666\x03\x02\x02\x02\u1668\u1669\x03\x02\x02\x02\u1669\u1678" +
		"\x03\x02\x02\x02\u166A\u1668\x03\x02\x02\x02\u166B\u166C\x07\u0178\x02" +
		"\x02\u166C\u166D\x07\xDC\x02\x02\u166D\u1670\x07\xBC\x02\x02\u166E\u166F" +
		"\x07&\x02\x02\u166F\u1671\x07\u0159\x02\x02\u1670\u166E\x03\x02\x02\x02" +
		"\u1670\u1671\x03\x02\x02\x02\u1671\u1674\x03\x02\x02\x02\u1672\u1673\x07" +
		"\v\x02\x02\u1673\u1675\x05\u02E2\u0172\x02\u1674\u1672\x03\x02\x02\x02" +
		"\u1674\u1675\x03\x02\x02\x02\u1675\u1676\x03\x02\x02\x02\u1676\u1677\x07" +
		"\u015C\x02\x02\u1677\u1679\x05\u01B2\xDA\x02\u1678\u166B\x03\x02\x02\x02" +
		"\u1678\u1679\x03\x02\x02\x02\u1679\u1687\x03\x02\x02\x02\u167A\u167B\x07" +
		"\u0178\x02\x02\u167B\u167C\x07\xDC\x02\x02\u167C\u167D\x07\xBC\x02\x02" +
		"\u167D\u167E\x07&\x02\x02\u167E\u1681\x07\u0144\x02\x02\u167F\u1680\x07" +
		"\v\x02\x02\u1680\u1682\x05\u02E2\u0172\x02\u1681\u167F\x03\x02\x02\x02" +
		"\u1681\u1682\x03\x02\x02\x02\u1682\u1683\x03\x02\x02\x02\u1683\u1684\x07" +
		"\u015C\x02\x02\u1684\u1686\x05\u01B0\xD9\x02\u1685\u167A\x03\x02\x02\x02" +
		"\u1686\u1689\x03\x02\x02\x02\u1687\u1685\x03\x02\x02\x02\u1687\u1688\x03" +
		"\x02\x02\x02\u1688\u168B\x03\x02\x02\x02\u1689\u1687\x03\x02\x02\x02\u168A" +
		"\u168C\x05\u01C4\xE3\x02\u168B\u168A\x03\x02\x02\x02\u168B\u168C\x03\x02" +
		"\x02\x02\u168C\u168E\x03\x02\x02\x02\u168D\u168F\x05\u0300\u0181\x02\u168E" +
		"\u168D\x03\x02\x02\x02\u168E\u168F\x03\x02\x02\x02\u168F\u1690\x03\x02" +
		"\x02\x02\u1690\u1691\x07\u0338\x02\x02\u1691\u01AF\x03\x02\x02\x02\u1692" +
		"\u1693\x07\u016C\x02\x02\u1693\u1694\x07\u013D\x02\x02\u1694\u1699\x05" +
		"\u02DE\u0170\x02\u1695\u1696\x07\u0337\x02\x02\u1696\u1698\x05\u02DE\u0170" +
		"\x02\u1697\u1695\x03\x02\x02\x02\u1698\u169B\x03\x02\x02\x02\u1699\u1697" +
		"\x03\x02\x02\x02\u1699\u169A\x03\x02\x02\x02\u169A\u169E\x03\x02\x02\x02" +
		"\u169B\u1699\x03\x02\x02\x02\u169C\u169E\x07]\x02\x02\u169D\u1692\x03" +
		"\x02\x02\x02\u169D\u169C\x03\x02\x02\x02\u169E\u01B1\x03\x02\x02\x02\u169F" +
		"\u16A4\x07\xA2\x02\x02\u16A0\u16A1\x07\u0335\x02\x02\u16A1\u16A2\x05\u038E" +
		"\u01C8\x02\u16A2\u16A3\x07\u0336\x02\x02\u16A3\u16A5\x03\x02\x02\x02\u16A4" +
		"\u16A0\x03\x02\x02\x02\u16A4\u16A5\x03\x02\x02\x02\u16A5\u16A9\x03\x02" +
		"\x02\x02\u16A6\u16AA\x05\u0358\u01AD\x02\u16A7\u16A8\x07Z\x02\x02\u16A8" +
		"\u16AA\x07\u0172\x02\x02\u16A9\u16A6\x03\x02\x02\x02\u16A9\u16A7\x03\x02" +
		"\x02\x02\u16AA\u01B3\x03\x02\x02\x02\u16AB\u16AD\x05\u02DA\u016E\x02\u16AC" +
		"\u16AB\x03\x02\x02\x02\u16AC\u16AD\x03\x02\x02\x02\u16AD\u16AE\x03\x02" +
		"\x02\x02\u16AE\u16B8\x07]\x02\x02\u16AF\u16B0\x07\u015E\x02\x02\u16B0" +
		"\u16B1\x07\u0335\x02\x02\u16B1\u16B2\x05\u02CC\u0167\x02\u16B2\u16B4\x07" +
		"\u0336\x02\x02\u16B3\u16B5\x07\xF5\x02\x02\u16B4\u16B3\x03\x02\x02\x02" +
		"\u16B4\u16B5\x03\x02\x02\x02\u16B5\u16B9\x03\x02\x02\x02\u16B6\u16B7\x07" +
		"\u015E\x02\x02\u16B7\u16B9\x07\u031B\x02\x02\u16B8\u16AF\x03\x02\x02\x02" +
		"\u16B8\u16B6\x03\x02\x02\x02\u16B8\u16B9\x03\x02\x02\x02\u16B9\u16BB\x03" +
		"\x02\x02\x02\u16BA\u16BC\x07\x8C\x02\x02\u16BB\u16BA\x03\x02\x02\x02\u16BB" +
		"\u16BC\x03\x02\x02\x02\u16BC\u16BD\x03\x02\x02\x02\u16BD\u16BF\x05\u01B6" +
		"\xDC\x02\u16BE\u16C0\x05\u034E\u01A8\x02\u16BF\u16BE\x03\x02\x02\x02\u16BF" +
		"\u16C0\x03\x02\x02\x02\u16C0\u16C2\x03\x02\x02\x02\u16C1\u16C3\x05\u01C4" +
		"\xE3\x02\u16C2\u16C1\x03\x02\x02\x02\u16C2\u16C3\x03\x02\x02\x02\u16C3" +
		"\u16C6\x03\x02\x02\x02\u16C4\u16C5\x07\x8C\x02\x02\u16C5\u16C7\x05\u0314" +
		"\u018B\x02\u16C6\u16C4\x03\x02\x02\x02\u16C6\u16C7\x03\x02\x02\x02\u16C7" +
		"\u16D5\x03\x02\x02\x02\u16C8\u16D3\x07\u0179\x02\x02\u16C9\u16D4\x05\u02E2" +
		"\u0172\x02\u16CA\u16CB\x07K\x02\x02\u16CB\u16D1\x07\xE1\x02\x02\u16CC" +
		"\u16CE\x07\u020F\x02\x02\u16CD\u16CC\x03\x02\x02\x02\u16CD\u16CE\x03\x02" +
		"\x02\x02\u16CE\u16CF\x03\x02\x02\x02\u16CF\u16D2\x05\u0390\u01C9\x02\u16D0" +
		"\u16D2\x07\u031A\x02\x02\u16D1\u16CD\x03\x02\x02\x02\u16D1\u16D0\x03\x02" +
		"\x02\x02\u16D2\u16D4\x03\x02\x02\x02\u16D3\u16C9\x03\x02\x02\x02\u16D3" +
		"\u16CA\x03\x02\x02\x02\u16D4\u16D6\x03\x02\x02\x02\u16D5\u16C8\x03\x02" +
		"\x02\x02\u16D5\u16D6\x03\x02\x02\x02\u16D6\u16D8\x03\x02\x02\x02\u16D7" +
		"\u16D9\x05\u02F8\u017D\x02\u16D8\u16D7\x03\x02\x02\x02\u16D8\u16D9\x03" +
		"\x02\x02\x02\u16D9\u16DB\x03\x02\x02\x02\u16DA\u16DC\x05\u0300\u0181\x02" +
		"\u16DB\u16DA\x03\x02\x02\x02\u16DB\u16DC\x03\x02\x02\x02\u16DC\u16DE\x03" +
		"\x02\x02\x02\u16DD\u16DF\x07\u0338\x02\x02\u16DE\u16DD\x03\x02\x02\x02" +
		"\u16DE\u16DF\x03\x02\x02\x02\u16DF\u01B5\x03\x02\x02\x02\u16E0\u16E5\x05" +
		"\u0388\u01C5\x02\u16E1\u16E5\x05\u034A\u01A6\x02\u16E2\u16E5\x05\u025C" +
		"\u012F\x02\u16E3\u16E5\x07\u031A\x02\x02\u16E4\u16E0\x03\x02\x02\x02\u16E4" +
		"\u16E1\x03\x02\x02\x02\u16E4\u16E2\x03\x02\x02\x02\u16E4\u16E3\x03\x02" +
		"\x02\x02\u16E5\u01B7\x03\x02\x02\x02\u16E6\u16E8\x05\u02DA\u016E\x02\u16E7" +
		"\u16E6\x03\x02\x02\x02\u16E7\u16E8\x03\x02\x02\x02\u16E8\u16E9\x03\x02" +
		"\x02\x02\u16E9\u16F1\x07\xA2\x02\x02\u16EA\u16EB\x07\u015E\x02\x02\u16EB" +
		"\u16EC\x07\u0335\x02\x02\u16EC\u16ED\x05\u02CC\u0167\x02\u16ED\u16EF\x07" +
		"\u0336\x02\x02\u16EE\u16F0\x07\xF5\x02\x02\u16EF\u16EE\x03\x02\x02\x02" +
		"\u16EF\u16F0\x03\x02\x02\x02\u16F0\u16F2\x03\x02\x02\x02\u16F1\u16EA\x03" +
		"\x02\x02\x02\u16F1\u16F2\x03\x02\x02\x02\u16F2\u16F4\x03\x02\x02\x02\u16F3" +
		"\u16F5\x07\xA5\x02\x02\u16F4\u16F3\x03\x02\x02\x02\u16F4\u16F5\x03\x02" +
		"\x02\x02\u16F5\u16F8\x03\x02\x02\x02\u16F6\u16F9\x05\u0388\u01C5\x02\u16F7" +
		"\u16F9\x05\u025C\u012F\x02\u16F8\u16F6\x03\x02\x02\x02\u16F8\u16F7\x03" +
		"\x02\x02\x02\u16F9\u16FB\x03\x02\x02\x02\u16FA\u16FC\x05\u034E\u01A8\x02" +
		"\u16FB\u16FA\x03\x02\x02\x02\u16FB\u16FC\x03\x02\x02\x02\u16FC\u1701\x03" +
		"\x02\x02\x02\u16FD\u16FE\x07\u0335\x02\x02\u16FE\u16FF\x05\u038E\u01C8" +
		"\x02\u16FF\u1700\x07\u0336\x02\x02\u1700\u1702\x03\x02\x02\x02\u1701\u16FD" +
		"\x03\x02\x02\x02\u1701\u1702\x03\x02\x02\x02\u1702\u1704\x03\x02\x02\x02" +
		"\u1703\u1705\x05\u01C4\xE3\x02\u1704\u1703\x03\x02\x02\x02\u1704\u1705" +
		"\x03\x02\x02\x02\u1705\u1706\x03\x02\x02\x02\u1706\u1708\x05\u01BA\xDE" +
		"\x02\u1707\u1709\x05\u02F8\u017D\x02\u1708\u1707\x03\x02\x02\x02\u1708" +
		"\u1709\x03\x02\x02\x02\u1709\u170B\x03\x02\x02\x02\u170A\u170C\x05\u0300" +
		"\u0181\x02\u170B\u170A\x03\x02\x02\x02\u170B\u170C\x03\x02\x02\x02\u170C" +
		"\u170E\x03\x02\x02\x02\u170D\u170F\x07\u0338\x02\x02\u170E\u170D\x03\x02" +
		"\x02\x02\u170E\u170F\x03\x02\x02\x02\u170F\u01B9\x03\x02\x02\x02\u1710" +
		"\u1716\x05\u0358\u01AD\x02\u1711\u1716\x05\u0332\u019A\x02\u1712\u1716" +
		"\x05\u0270\u0139\x02\u1713\u1714\x07Z\x02\x02\u1714\u1716\x07\u0172\x02" +
		"\x02\u1715\u1710\x03\x02\x02\x02\u1715\u1711\x03\x02\x02\x02\u1715\u1712" +
		"\x03\x02\x02\x02\u1715\u1713\x03\x02\x02\x02\u1716\u01BB\x03\x02\x02\x02" +
		"\u1717\u1719\x07\u0335\x02\x02\u1718\u1717\x03\x02\x02\x02\u1718\u1719" +
		"\x03\x02\x02\x02\u1719\u171A\x03\x02\x02\x02\u171A\u171F\x07\u02A2\x02" +
		"\x02\u171B\u1720\x07\x06\x02\x02\u171C\u1720\x07c\x02\x02\u171D\u1720" +
		"\x05\u02F0\u0179\x02\u171E\u1720\x07\u033A\x02\x02\u171F\u171B\x03\x02" +
		"\x02\x02\u171F\u171C\x03\x02\x02\x02\u171F\u171D\x03\x02\x02\x02\u171F" +
		"\u171E\x03\x02\x02\x02\u1720\u1729\x03\x02\x02\x02\u1721\u1722\x07\u031A" +
		"\x02\x02\u1722\u1723\x07\u0323\x02\x02\u1723\u1725\x05\u02CC\u0167\x02" +
		"\u1724\u1726\x07\u0337\x02\x02\u1725\u1724\x03\x02\x02\x02\u1725\u1726" +
		"\x03\x02\x02\x02\u1726\u1728\x03\x02\x02\x02\u1727\u1721\x03\x02\x02\x02" +
		"\u1728\u172B\x03\x02\x02\x02\u1729\u1727\x03\x02\x02\x02\u1729\u172A\x03" +
		"\x02\x02\x02\u172A\u172C\x03\x02\x02\x02\u172B\u1729\x03\x02\x02\x02\u172C" +
		"\u172D\x07\x8C\x02\x02\u172D\u1733\x05\u0380\u01C1\x02\u172E\u172F\x07" +
		"\xA5\x02\x02\u172F\u1730\x05\u03B6\u01DC\x02\u1730\u1731\x07\u0179\x02" +
		"\x02\u1731\u1732\x05\u02E2\u0172\x02\u1732\u1734\x03\x02\x02\x02\u1733" +
		"\u172E\x03\x02\x02\x02\u1733\u1734\x03\x02\x02\x02\u1734\u1736\x03\x02" +
		"\x02\x02\u1735\u1737\x07\u0336\x02\x02\u1736\u1735\x03\x02\x02\x02\u1736" +
		"\u1737\x03\x02\x02\x02\u1737\u01BD\x03\x02\x02\x02\u1738\u173A\x05\u02DA" +
		"\u016E\x02\u1739\u1738\x03\x02\x02\x02\u1739\u173A\x03\x02\x02\x02\u173A" +
		"\u173B\x03\x02\x02\x02\u173B\u173D\x05\u02EA\u0176\x02\u173C\u173E\x05" +
		"\u02F6\u017C\x02\u173D\u173C\x03\x02\x02\x02\u173D\u173E\x03\x02\x02\x02" +
		"\u173E\u1740\x03\x02\x02\x02\u173F\u1741\x05\u02F8\u017D\x02\u1740\u173F" +
		"\x03\x02\x02\x02\u1740\u1741\x03\x02\x02\x02\u1741\u1743\x03\x02\x02\x02" +
		"\u1742\u1744\x05\u0300\u0181\x02\u1743\u1742\x03\x02\x02\x02\u1743\u1744" +
		"\x03\x02\x02\x02\u1744\u1746\x03\x02\x02\x02\u1745\u1747\x07\u0338\x02" +
		"\x02\u1746\u1745\x03\x02\x02\x02\u1746\u1747\x03\x02\x02\x02\u1747\u01BF" +
		"\x03\x02\x02\x02\u1748\u174B\x07\u031A\x02\x02\u1749\u174B\x05\u03B2\u01DA" +
		"\x02\u174A\u1748\x03\x02\x02\x02\u174A\u1749\x03\x02\x02\x02\u174B\u01C1" +
		"\x03\x02\x02\x02\u174C\u174E\x05\u02DA\u016E\x02\u174D\u174C\x03\x02\x02" +
		"\x02\u174D\u174E\x03\x02\x02\x02\u174E\u174F\x03\x02\x02\x02\u174F\u1757" +
		"\x07\u016C\x02\x02\u1750\u1751\x07\u015E\x02\x02\u1751\u1752\x07\u0335" +
		"\x02\x02\u1752\u1753\x05\u02CC\u0167\x02\u1753\u1755\x07\u0336\x02\x02" +
		"\u1754\u1756\x07\xF5\x02\x02\u1755\u1754\x03\x02\x02\x02\u1755\u1756\x03" +
		"\x02\x02\x02\u1756\u1758\x03\x02\x02\x02\u1757\u1750\x03\x02\x02\x02\u1757" +
		"\u1758\x03\x02\x02\x02\u1758\u175B\x03\x02\x02\x02\u1759\u175C\x05\u0388" +
		"\u01C5\x02\u175A\u175C\x05\u025C\u012F\x02\u175B\u1759\x03\x02\x02\x02" +
		"\u175B\u175A\x03\x02\x02\x02\u175C\u175E\x03\x02\x02\x02\u175D\u175F\x05" +
		"\u034C\u01A7\x02\u175E\u175D\x03\x02\x02\x02\u175E\u175F\x03\x02\x02\x02" +
		"\u175F\u1760\x03\x02\x02\x02\u1760\u1761\x07\u013D\x02\x02\u1761\u1766" +
		"\x05\u02DE\u0170\x02\u1762\u1763\x07\u0337\x02\x02\u1763\u1765\x05\u02DE" +
		"\u0170\x02\u1764\u1762\x03\x02\x02\x02\u1765\u1768\x03\x02\x02\x02\u1766" +
		"\u1764\x03\x02\x02\x02\u1766\u1767\x03\x02\x02\x02\u1767\u176A\x03\x02" +
		"\x02\x02\u1768\u1766\x03\x02\x02\x02\u1769\u176B\x05\u01C4\xE3\x02\u176A" +
		"\u1769\x03\x02\x02\x02\u176A\u176B\x03\x02\x02\x02\u176B\u176E\x03\x02" +
		"\x02\x02\u176C\u176D\x07\x8C\x02\x02\u176D\u176F\x05\u0314\u018B\x02\u176E" +
		"\u176C\x03\x02\x02\x02\u176E\u176F\x03\x02\x02\x02\u176F\u177D\x03\x02" +
		"\x02\x02\u1770\u177B\x07\u0179\x02\x02\u1771\u177C\x05\u02E0\u0171\x02" +
		"\u1772\u1773\x07K\x02\x02\u1773\u1779\x07\xE1\x02\x02\u1774\u1776\x07" +
		"\u020F\x02\x02\u1775\u1774\x03\x02\x02\x02\u1775\u1776\x03\x02\x02\x02" +
		"\u1776\u1777\x03\x02\x02\x02\u1777\u177A\x05\u0390\u01C9\x02\u1778\u177A" +
		"\x07\u031A\x02\x02\u1779\u1775\x03\x02\x02\x02\u1779\u1778\x03\x02";
	private static readonly _serializedATNSegment13: string =
		"\x02\x02\u177A\u177C\x03\x02\x02\x02\u177B\u1771\x03\x02\x02\x02\u177B" +
		"\u1772\x03\x02\x02\x02\u177C\u177E\x03\x02\x02\x02\u177D\u1770\x03\x02" +
		"\x02\x02\u177D\u177E\x03\x02\x02\x02\u177E\u1780\x03\x02\x02\x02\u177F" +
		"\u1781\x05\u02F8\u017D\x02\u1780\u177F\x03\x02\x02\x02\u1780\u1781\x03" +
		"\x02\x02\x02\u1781\u1783\x03\x02\x02\x02\u1782\u1784\x05\u0300\u0181\x02" +
		"\u1783\u1782\x03\x02\x02\x02\u1783\u1784\x03\x02\x02\x02\u1784\u1786\x03" +
		"\x02\x02\x02\u1785\u1787\x07\u0338\x02\x02\u1786\u1785\x03\x02\x02\x02" +
		"\u1786\u1787\x03\x02\x02\x02\u1787\u01C3\x03\x02\x02\x02\u1788\u1789\x07" +
		"\u027C\x02\x02\u1789\u178E\x05\u01C6\xE4\x02\u178A\u178B\x07\u0337\x02" +
		"\x02\u178B\u178D\x05\u01C6\xE4\x02\u178C\u178A\x03\x02\x02\x02\u178D\u1790" +
		"\x03\x02\x02\x02\u178E\u178C\x03\x02\x02\x02\u178E\u178F\x03\x02\x02\x02" +
		"\u178F\u179C\x03\x02\x02\x02\u1790\u178E\x03\x02\x02\x02\u1791\u1794\x07" +
		"\xA5\x02\x02\u1792\u1795\x07\u031A\x02\x02\u1793\u1795\x05\u0382\u01C2" +
		"\x02\u1794\u1792\x03\x02\x02\x02\u1794\u1793\x03\x02\x02\x02\u1795\u179A" +
		"\x03\x02\x02\x02\u1796\u1797\x07\u0335\x02\x02\u1797\u1798\x05\u038E\u01C8" +
		"\x02\u1798\u1799\x07\u0336\x02\x02\u1799\u179B\x03\x02\x02\x02\u179A\u1796" +
		"\x03\x02\x02\x02\u179A\u179B\x03\x02\x02\x02\u179B\u179D\x03\x02\x02\x02" +
		"\u179C\u1791\x03\x02\x02\x02\u179C\u179D\x03\x02\x02\x02\u179D\u01C5\x03" +
		"\x02\x02\x02\u179E\u17A1\x05\u01C8\xE5\x02\u179F\u17A1\x05\u02CC\u0167" +
		"\x02\u17A0\u179E\x03\x02\x02\x02\u17A0\u179F\x03\x02\x02\x02\u17A1\u17A3" +
		"\x03\x02\x02\x02\u17A2\u17A4\x05\u0346\u01A4\x02\u17A3\u17A2\x03\x02\x02" +
		"\x02\u17A3\u17A4\x03\x02\x02\x02\u17A4\u01C7\x03\x02\x02\x02\u17A5\u17A9" +
		"\x07\u01D9\x02\x02\u17A6\u17A9\x07\u0224\x02\x02\u17A7\u17A9\x05\u0382" +
		"\u01C2\x02\u17A8\u17A5\x03\x02\x02\x02\u17A8\u17A6\x03\x02\x02\x02\u17A8" +
		"\u17A7\x03\x02\x02\x02\u17A9\u17AA\x03\x02\x02\x02\u17AA\u17AD\x07\u0330" +
		"\x02\x02\u17AB\u17AE\x07\u033A\x02\x02\u17AC\u17AE\x05\u03B6\u01DC\x02" +
		"\u17AD\u17AB\x03\x02\x02\x02\u17AD\u17AC\x03\x02\x02\x02\u17AE\u17B1\x03" +
		"\x02\x02\x02\u17AF\u17B1\x07\u0313\x02\x02\u17B0\u17A8\x03\x02\x02\x02" +
		"\u17B0\u17AF\x03\x02\x02\x02\u17B1\u01C9\x03\x02\x02\x02\u17B2\u17B3\x07" +
		"I\x02\x02\u17B3\u17B4\x07U\x02\x02\u17B4\u17B8\x05\u03B6\u01DC\x02\u17B5" +
		"\u17B6\x07>\x02\x02\u17B6\u17B7\x07\u0323\x02\x02\u17B7\u17B9\t7\x02\x02" +
		"\u17B8\u17B5\x03\x02\x02\x02\u17B8\u17B9\x03\x02\x02\x02\u17B9\u17C6\x03" +
		"\x02\x02\x02\u17BA\u17BC\x07\xE5\x02\x02\u17BB\u17BD\x07\u0100\x02\x02" +
		"\u17BC\u17BB\x03\x02\x02\x02\u17BC\u17BD\x03\x02\x02\x02\u17BD\u17BE\x03" +
		"\x02\x02\x02\u17BE\u17C3\x05\u0374\u01BB\x02\u17BF\u17C0\x07\u0337\x02" +
		"\x02\u17C0\u17C2\x05\u0374\u01BB\x02\u17C1\u17BF\x03\x02\x02\x02\u17C2" +
		"\u17C5\x03\x02\x02\x02\u17C3\u17C1\x03\x02\x02\x02\u17C3\u17C4\x03\x02" +
		"\x02\x02\u17C4\u17C7\x03\x02\x02\x02\u17C5\u17C3\x03\x02\x02\x02\u17C6" +
		"\u17BA\x03\x02\x02\x02\u17C6\u17C7\x03\x02\x02\x02\u17C7\u17D2\x03\x02" +
		"\x02\x02\u17C8\u17C9\x07\xBB\x02\x02\u17C9\u17CA\x07\xE5\x02\x02\u17CA" +
		"\u17CF\x05\u0374\u01BB\x02\u17CB\u17CC\x07\u0337\x02\x02\u17CC\u17CE\x05" +
		"\u0374\u01BB\x02\u17CD\u17CB\x03\x02\x02\x02\u17CE\u17D1\x03\x02\x02\x02" +
		"\u17CF\u17CD\x03\x02\x02\x02\u17CF\u17D0\x03\x02\x02\x02\u17D0\u17D3\x03" +
		"\x02\x02\x02\u17D1\u17CF\x03\x02\x02\x02\u17D2\u17C8\x03\x02\x02\x02\u17D2" +
		"\u17D3\x03\x02\x02\x02\u17D3\u17D6\x03\x02\x02\x02\u17D4\u17D5\x077\x02" +
		"\x02\u17D5\u17D7\x05\u03B6\u01DC\x02\u17D6\u17D4\x03\x02\x02\x02\u17D6" +
		"\u17D7\x03\x02\x02\x02\u17D7\u17E1\x03\x02\x02\x02\u17D8\u17D9\x07\u017C" +
		"\x02\x02\u17D9\u17DE\x05\u0370\u01B9\x02\u17DA\u17DB\x07\u0337\x02\x02" +
		"\u17DB\u17DD\x05\u0370\u01B9\x02\u17DC\u17DA\x03\x02\x02\x02\u17DD\u17E0" +
		"\x03\x02\x02\x02\u17DE\u17DC\x03\x02\x02\x02\u17DE\u17DF\x03\x02\x02\x02" +
		"\u17DF\u17E2\x03\x02\x02\x02\u17E0\u17DE\x03\x02\x02\x02\u17E1\u17D8\x03" +
		"\x02\x02\x02\u17E1\u17E2\x03\x02\x02\x02\u17E2\u01CB\x03\x02\x02\x02\u17E3" +
		"\u17E5\x07I\x02\x02\u17E4\u17E6\x07\u0168\x02\x02\u17E5\u17E4\x03\x02" +
		"\x02\x02\u17E5\u17E6\x03\x02\x02\x02\u17E6\u17E8\x03\x02\x02\x02\u17E7" +
		"\u17E9\x05\u0394\u01CB\x02\u17E8\u17E7\x03\x02\x02\x02\u17E8\u17E9\x03" +
		"\x02\x02\x02\u17E9\u17EA\x03\x02\x02\x02\u17EA\u17EB\x07\x9E\x02\x02\u17EB" +
		"\u17EC\x05\u03B6\u01DC\x02\u17EC\u17ED\x07\xE5\x02\x02\u17ED\u17EE\x05" +
		"\u032C\u0197\x02\u17EE\u17EF\x07\u0335\x02\x02\u17EF\u17F0\x05\u038C\u01C7" +
		"\x02\u17F0\u17F6\x07\u0336\x02\x02\u17F1\u17F2\x07\x9C\x02\x02\u17F2\u17F3" +
		"\x07\u0335\x02\x02\u17F3\u17F4\x05\u038E\u01C8\x02\u17F4\u17F5\x07\u0336" +
		"\x02\x02\u17F5\u17F7\x03\x02\x02\x02\u17F6\u17F1\x03\x02\x02\x02\u17F6" +
		"\u17F7\x03\x02\x02\x02\u17F7\u17FA\x03\x02\x02\x02\u17F8\u17F9\x07\u0179" +
		"\x02\x02\u17F9\u17FB\x05\u02E2\u0172\x02\u17FA\u17F8\x03\x02\x02\x02\u17FA" +
		"\u17FB\x03\x02\x02\x02\u17FB\u17FD\x03\x02\x02\x02\u17FC\u17FE\x05\u02BC" +
		"\u015F\x02\u17FD\u17FC\x03\x02\x02\x02\u17FD\u17FE\x03\x02\x02\x02\u17FE" +
		"\u1801\x03\x02\x02\x02\u17FF\u1800\x07\xE5\x02\x02\u1800\u1802\x05\u03B6" +
		"\u01DC\x02\u1801\u17FF\x03\x02\x02\x02\u1801\u1802\x03\x02\x02\x02\u1802" +
		"\u1804\x03\x02\x02\x02\u1803\u1805\x07\u0338\x02\x02\u1804\u1803\x03\x02" +
		"\x02\x02\u1804\u1805\x03\x02\x02\x02\u1805\u01CD\x03\x02\x02\x02\u1806" +
		"\u1809\x07I\x02\x02\u1807\u1808\x07\xED\x02\x02\u1808\u180A\x07\n\x02" +
		"\x02\u1809\u1807\x03\x02\x02\x02\u1809\u180A\x03\x02\x02\x02\u180A\u180D" +
		"\x03\x02\x02\x02\u180B\u180D\x07\n\x02\x02\u180C\u1806\x03\x02\x02\x02" +
		"\u180C\u180B\x03\x02\x02\x02\u180D\u180E\x03\x02\x02\x02\u180E\u180F\t" +
		"8\x02\x02\u180F\u1812\x05\u0386\u01C4\x02\u1810\u1811\x07\u0338\x02\x02" +
		"\u1811\u1813\x07\u031B\x02\x02\u1812\u1810\x03\x02\x02\x02\u1812\u1813" +
		"\x03\x02\x02\x02\u1813\u1822\x03\x02\x02\x02\u1814\u1816\x07\u0335\x02" +
		"\x02\u1815\u1814\x03\x02\x02\x02\u1815\u1816\x03\x02\x02\x02\u1816\u1817" +
		"\x03\x02\x02\x02\u1817\u181C\x05\u01E4\xF3\x02\u1818\u1819\x07\u0337\x02" +
		"\x02\u1819\u181B\x05\u01E4\xF3\x02\u181A\u1818\x03\x02\x02\x02\u181B\u181E" +
		"\x03\x02\x02\x02\u181C\u181A\x03\x02\x02\x02\u181C\u181D\x03\x02\x02\x02" +
		"\u181D\u1820\x03\x02\x02\x02\u181E\u181C\x03\x02\x02\x02\u181F\u1821\x07" +
		"\u0336\x02\x02\u1820\u181F\x03\x02\x02\x02\u1820\u1821\x03\x02\x02\x02" +
		"\u1821\u1823\x03\x02\x02\x02\u1822\u1815\x03\x02\x02\x02\u1822\u1823\x03" +
		"\x02\x02\x02\u1823\u182D\x03\x02\x02\x02\u1824\u1825\x07\u017C\x02\x02" +
		"\u1825\u182A\x05\u01E6\xF4\x02\u1826\u1827\x07\u0337\x02\x02\u1827\u1829" +
		"\x05\u01E6\xF4\x02\u1828\u1826\x03\x02\x02\x02\u1829\u182C\x03\x02\x02" +
		"\x02\u182A\u1828\x03\x02\x02\x02\u182A\u182B\x03\x02\x02\x02\u182B\u182E" +
		"\x03\x02\x02\x02\u182C\u182A\x03\x02\x02\x02\u182D\u1824\x03\x02\x02\x02" +
		"\u182D\u182E\x03\x02\x02\x02\u182E\u1831\x03\x02\x02\x02\u182F\u1830\x07" +
		"\x86\x02\x02\u1830\u1832\x07\u0112\x02\x02\u1831\u182F\x03\x02\x02\x02" +
		"\u1831\u1832\x03\x02\x02\x02\u1832\u1833\x03\x02\x02\x02\u1833\u1834\x07" +
		"\x10\x02\x02\u1834\u1835\x05\x06\x04\x02\u1835\u01CF\x03\x02\x02\x02\u1836" +
		"\u1839\x05\u01D2\xEA\x02\u1837\u1839\x05\u01D8\xED\x02\u1838\u1836\x03" +
		"\x02\x02\x02\u1838\u1837\x03\x02\x02\x02\u1839\u01D1\x03\x02\x02\x02\u183A" +
		"\u183D\x07I\x02\x02\u183B\u183C\x07\xED\x02\x02\u183C\u183E\x07\n\x02" +
		"\x02\u183D\u183B\x03\x02\x02\x02\u183D\u183E\x03\x02\x02\x02\u183E\u1841" +
		"\x03\x02\x02\x02\u183F\u1841\x07\n\x02\x02\u1840\u183A\x03\x02\x02\x02" +
		"\u1840\u183F\x03\x02\x02\x02\u1841\u1842\x03\x02\x02\x02\u1842\u1843\x07" +
		"\u0163\x02\x02\u1843\u1844\x05\u0384\u01C3\x02\u1844\u1845\x07\xE5\x02" +
		"\x02\u1845\u184F\x05\u0382\u01C2\x02\u1846\u1847\x07\u017C\x02\x02\u1847" +
		"\u184C\x05\u01D4\xEB\x02\u1848\u1849\x07\u0337\x02\x02\u1849\u184B\x05" +
		"\u01D4\xEB\x02\u184A\u1848\x03\x02\x02\x02\u184B\u184E\x03\x02\x02\x02" +
		"\u184C\u184A\x03\x02\x02\x02\u184C\u184D\x03\x02\x02\x02\u184D\u1850\x03" +
		"\x02\x02\x02\u184E\u184C\x03\x02\x02\x02\u184F\u1846\x03\x02\x02\x02\u184F" +
		"\u1850\x03\x02\x02\x02\u1850\u1855\x03\x02\x02\x02\u1851\u1856\x07\x86" +
		"\x02\x02\u1852\u1856\x07\u018B\x02\x02\u1853\u1854\x07\xA3\x02\x02\u1854" +
		"\u1856\x07\xE1\x02\x02\u1855\u1851\x03\x02\x02\x02\u1855\u1852\x03\x02" +
		"\x02\x02\u1855\u1853\x03\x02\x02\x02\u1856\u1857\x03\x02\x02\x02\u1857" +
		"\u185C\x05\u01D6\xEC\x02\u1858\u1859\x07\u0337\x02\x02\u1859\u185B\x05" +
		"\u01D6\xEC\x02\u185A\u1858\x03\x02\x02\x02\u185B\u185E\x03\x02\x02\x02" +
		"\u185C\u185A\x03\x02\x02\x02\u185C\u185D\x03\x02\x02\x02\u185D\u1861\x03" +
		"\x02\x02\x02\u185E\u185C\x03\x02\x02\x02\u185F\u1860\x07\u017C\x02\x02" +
		"\u1860\u1862\x07\x0E\x02\x02\u1861\u185F\x03\x02\x02\x02\u1861\u1862\x03" +
		"\x02\x02\x02\u1862\u1866\x03\x02\x02\x02\u1863\u1864\x07\xDC\x02\x02\u1864" +
		"\u1865\x07\x86\x02\x02\u1865\u1867\x07\u0112\x02\x02\u1866\u1863\x03\x02" +
		"\x02\x02\u1866\u1867\x03\x02\x02\x02\u1867\u1868\x03\x02\x02\x02\u1868" +
		"\u1869\x07\x10\x02\x02\u1869\u186A\x05\x06\x04\x02\u186A\u01D3\x03\x02" +
		"\x02\x02\u186B\u186E\x07\u01EE\x02\x02\u186C\u186E\x05\u02A2\u0152\x02" +
		"\u186D\u186B\x03\x02\x02\x02\u186D\u186C\x03\x02\x02\x02\u186E\u01D5\x03" +
		"\x02\x02\x02\u186F\u1870\t9\x02\x02\u1870\u01D7\x03\x02\x02\x02\u1871" +
		"\u1874\x07I\x02\x02\u1872\u1873\x07\xED\x02\x02\u1873\u1875\x07\n\x02" +
		"\x02\u1874\u1872\x03\x02\x02\x02\u1874\u1875\x03\x02\x02\x02\u1875\u1878" +
		"\x03\x02\x02\x02\u1876\u1878\x07\n\x02\x02\u1877\u1871\x03\x02\x02\x02" +
		"\u1877\u1876\x03\x02\x02\x02\u1878\u1879\x03\x02\x02\x02\u1879\u187A\x07" +
		"\u0163\x02\x02\u187A\u187B\x05\u0384\u01C3\x02\u187B\u187F\x07\xE5\x02" +
		"\x02\u187C\u187D\x07\x06\x02\x02\u187D\u1880\x07\u0137\x02\x02\u187E\u1880" +
		"\x07U\x02\x02\u187F\u187C\x03\x02\x02\x02\u187F\u187E\x03\x02\x02\x02" +
		"\u1880\u188A\x03\x02\x02\x02\u1881\u1882\x07\u017C\x02\x02\u1882\u1887" +
		"\x05\u01D4\xEB\x02\u1883\u1884\x07\u0337\x02\x02\u1884\u1886\x05\u01D4" +
		"\xEB\x02\u1885\u1883\x03\x02\x02\x02\u1886\u1889\x03\x02\x02\x02\u1887" +
		"\u1885\x03\x02\x02\x02\u1887\u1888\x03\x02\x02\x02\u1888\u188B\x03\x02" +
		"\x02\x02\u1889\u1887\x03\x02\x02\x02\u188A\u1881\x03\x02\x02\x02\u188A" +
		"\u188B\x03\x02\x02\x02\u188B\u188C\x03\x02\x02\x02\u188C\u188D\t:\x02" +
		"\x02\u188D\u1892\x05\u01DA\xEE\x02\u188E\u188F\x07\u0337\x02\x02\u188F" +
		"\u1891\x05\u01D6\xEC\x02\u1890\u188E\x03\x02\x02\x02\u1891\u1894\x03\x02" +
		"\x02\x02\u1892\u1890\x03\x02\x02\x02\u1892\u1893\x03\x02\x02\x02\u1893" +
		"\u1895\x03\x02\x02\x02\u1894\u1892\x03\x02\x02\x02\u1895\u1896\x07\x10" +
		"\x02\x02\u1896\u1897\x05\x06\x04\x02\u1897\u01D9\x03\x02\x02\x02\u1898" +
		"\u1899\x05\u03B8\u01DD\x02\u1899\u01DB\x03\x02\x02\x02\u189A\u189D\x07" +
		"I\x02\x02\u189B\u189C\x07\xED\x02\x02\u189C\u189E\x07\n\x02\x02\u189D" +
		"\u189B\x03\x02\x02\x02\u189D\u189E\x03\x02\x02\x02\u189E\u18A1\x03\x02" +
		"\x02\x02\u189F\u18A1\x07\n\x02\x02\u18A0\u189A\x03\x02\x02\x02\u18A0\u189F" +
		"\x03\x02\x02\x02\u18A1\u18A2\x03\x02\x02\x02\u18A2\u18A3\x07\x8E\x02\x02" +
		"\u18A3\u18B1\x05\u0386\u01C4\x02\u18A4\u18A5\x07\u0335\x02\x02\u18A5\u18AA" +
		"\x05\u01E4\xF3\x02\u18A6\u18A7\x07\u0337\x02\x02\u18A7\u18A9\x05\u01E4" +
		"\xF3\x02\u18A8\u18A6\x03\x02\x02\x02\u18A9\u18AC\x03\x02\x02\x02\u18AA" +
		"\u18A8\x03\x02\x02\x02\u18AA\u18AB\x03\x02\x02\x02\u18AB\u18AD\x03\x02" +
		"\x02\x02\u18AC\u18AA\x03\x02\x02\x02\u18AD\u18AE\x07\u0336\x02\x02\u18AE" +
		"\u18B2\x03\x02\x02\x02\u18AF\u18B0\x07\u0335\x02\x02\u18B0\u18B2\x07\u0336" +
		"\x02\x02\u18B1\u18A4\x03\x02\x02\x02\u18B1\u18AF\x03\x02\x02\x02\u18B2" +
		"\u18B6\x03\x02\x02\x02\u18B3\u18B7\x05\u01DE\xF0\x02\u18B4\u18B7\x05\u01E0" +
		"\xF1\x02\u18B5\u18B7\x05\u01E2\xF2\x02\u18B6\u18B3\x03\x02\x02\x02\u18B6" +
		"\u18B4\x03\x02\x02\x02\u18B6\u18B5\x03\x02\x02\x02\u18B7\u18B9\x03\x02" +
		"\x02\x02\u18B8\u18BA\x07\u0338\x02\x02\u18B9\u18B8\x03\x02\x02\x02\u18B9" +
		"\u18BA\x03\x02\x02\x02\u18BA\u01DD\x03\x02\x02\x02\u18BB\u18BC\x07\u011B" +
		"\x02\x02\u18BC\u18C6\x07\u0156\x02\x02\u18BD\u18BE\x07\u017C\x02\x02\u18BE" +
		"\u18C3\x05\u01E8\xF5\x02\u18BF\u18C0\x07\u0337\x02\x02\u18C0\u18C2\x05" +
		"\u01E8\xF5\x02\u18C1\u18BF\x03\x02\x02\x02\u18C2\u18C5\x03\x02\x02\x02" +
		"\u18C3\u18C1\x03\x02\x02\x02\u18C3\u18C4\x03\x02\x02\x02\u18C4\u18C7\x03" +
		"\x02\x02\x02\u18C5\u18C3\x03\x02\x02\x02\u18C6\u18BD\x03\x02\x02\x02\u18C6" +
		"\u18C7\x03\x02\x02\x02\u18C7\u18C9\x03\x02\x02\x02\u18C8\u18CA\x07\x10" +
		"\x02\x02\u18C9\u18C8\x03\x02\x02\x02\u18C9\u18CA\x03\x02\x02\x02\u18CA" +
		"\u18CB\x03\x02\x02\x02\u18CB\u18D1\x07\u011A\x02\x02\u18CC\u18CD\x07\u0335" +
		"\x02\x02\u18CD\u18CE\x05\u01BE\xE0\x02\u18CE\u18CF\x07\u0336\x02\x02\u18CF" +
		"\u18D2\x03\x02\x02\x02\u18D0\u18D2\x05\u01BE\xE0\x02\u18D1\u18CC\x03\x02" +
		"\x02\x02\u18D1\u18D0\x03\x02\x02\x02\u18D2\u01DF\x03\x02\x02\x02\u18D3" +
		"\u18D4\x07\u011B\x02\x02\u18D4\u18D5\x07\u031A\x02\x02\u18D5\u18DF\x05" +
		"\u02A6\u0154\x02\u18D6\u18D7\x07\u017C\x02\x02\u18D7\u18DC\x05\u01E8\xF5" +
		"\x02\u18D8\u18D9\x07\u0337\x02\x02\u18D9\u18DB\x05\u01E8\xF5\x02\u18DA" +
		"\u18D8\x03\x02\x02\x02\u18DB\u18DE\x03\x02\x02\x02\u18DC\u18DA\x03\x02" +
		"\x02\x02\u18DC\u18DD\x03\x02\x02\x02\u18DD\u18E0\x03\x02\x02\x02\u18DE" +
		"\u18DC\x03\x02\x02\x02\u18DF\u18D6\x03\x02\x02\x02\u18DF\u18E0\x03\x02" +
		"\x02\x02\u18E0\u18E2\x03\x02\x02\x02\u18E1\u18E3\x07\x10\x02\x02\u18E2" +
		"\u18E1\x03\x02\x02\x02\u18E2\u18E3\x03\x02\x02\x02\u18E3\u18E4\x03\x02" +
		"\x02\x02\u18E4\u18E8\x07\x1C\x02\x02\u18E5\u18E7\x05\b\x05\x02\u18E6\u18E5" +
		"\x03\x02\x02\x02\u18E7\u18EA\x03\x02\x02\x02\u18E8\u18E6\x03\x02\x02\x02" +
		"\u18E8\u18E9\x03\x02\x02\x02\u18E9\u18EB\x03\x02\x02\x02\u18EA\u18E8\x03" +
		"\x02\x02\x02\u18EB\u18ED\x07\u011A\x02\x02\u18EC\u18EE\x07\u0338\x02\x02" +
		"\u18ED\u18EC\x03\x02\x02\x02\u18ED\u18EE\x03\x02\x02\x02\u18EE\u18EF\x03" +
		"\x02\x02\x02\u18EF\u18F1\x07m\x02\x02\u18F0\u18F2\x07\u0338\x02\x02\u18F1" +
		"\u18F0\x03\x02\x02\x02\u18F1\u18F2\x03\x02\x02\x02\u18F2\u01E1\x03\x02" +
		"\x02\x02\u18F3\u18F4\x07\u011B\x02\x02\u18F4\u18FE\x05\u03AE\u01D8\x02" +
		"\u18F5\u18F6\x07\u017C\x02\x02\u18F6\u18FB\x05\u01E8\xF5\x02\u18F7\u18F8" +
		"\x07\u0337\x02\x02\u18F8\u18FA\x05\u01E8\xF5\x02\u18F9\u18F7\x03\x02\x02" +
		"\x02\u18FA\u18FD\x03\x02\x02\x02\u18FB\u18F9\x03\x02\x02\x02\u18FB\u18FC" +
		"\x03\x02\x02\x02\u18FC\u18FF\x03\x02\x02\x02\u18FD\u18FB\x03\x02\x02\x02" +
		"\u18FE\u18F5\x03\x02\x02\x02\u18FE\u18FF\x03\x02\x02\x02\u18FF\u1901\x03" +
		"\x02\x02\x02\u1900\u1902\x07\x10\x02\x02\u1901\u1900\x03\x02\x02\x02\u1901" +
		"\u1902\x03\x02\x02\x02\u1902\u1903\x03\x02\x02\x02\u1903\u1907\x07\x1C" +
		"\x02\x02\u1904\u1906\x05\b\x05\x02\u1905\u1904\x03\x02\x02\x02\u1906\u1909" +
		"\x03\x02\x02\x02\u1907\u1905\x03\x02\x02\x02\u1907\u1908\x03\x02\x02\x02" +
		"\u1908\u190A\x03\x02\x02\x02\u1909\u1907\x03\x02\x02\x02\u190A\u190B\x07" +
		"\u011A\x02\x02\u190B\u190D\x05\u02CC\u0167\x02\u190C\u190E\x07\u0338\x02" +
		"\x02\u190D\u190C\x03\x02\x02\x02\u190D\u190E\x03\x02\x02\x02\u190E\u190F" +
		"\x03\x02\x02\x02\u190F\u1910\x07m\x02\x02\u1910\u01E3\x03\x02\x02\x02" +
		"\u1911\u1915\x07\u031A\x02\x02\u1912\u1913\x05\u03B6\u01DC\x02\u1913\u1914" +
		"\x07\u0330\x02\x02\u1914\u1916\x03\x02\x02\x02\u1915\u1912\x03\x02\x02" +
		"\x02\u1915\u1916\x03\x02\x02\x02\u1916\u1918\x03\x02\x02\x02\u1917\u1919" +
		"\x07\x10\x02\x02\u1918\u1917\x03\x02\x02\x02\u1918\u1919\x03\x02\x02\x02" +
		"\u1919\u191A\x03\x02\x02\x02\u191A\u191C\x05\u03AE\u01D8\x02\u191B\u191D" +
		"\x07\u0173\x02\x02\u191C\u191B\x03\x02\x02\x02\u191C\u191D\x03\x02\x02" +
		"\x02\u191D\u1920\x03\x02\x02\x02\u191E\u191F\x07\u0323\x02\x02\u191F\u1921" +
		"\x05\u03B0\u01D9\x02\u1920\u191E\x03\x02\x02\x02\u1920\u1921\x03\x02\x02" +
		"\x02\u1921\u1923\x03\x02\x02\x02\u1922\u1924\t;\x02\x02\u1923\u1922\x03" +
		"\x02\x02\x02\u1923\u1924\x03\x02\x02\x02\u1924\u01E5\x03\x02\x02\x02\u1925" +
		"\u1929\x07\u01EE\x02\x02\u1926\u1929\x07\u02A3\x02\x02\u1927\u1929\x05" +
		"\u02A2\u0152\x02\u1928\u1925\x03\x02\x02\x02\u1928\u1926\x03\x02\x02\x02" +
		"\u1928\u1927\x03\x02\x02\x02\u1929\u01E7\x03\x02\x02\x02\u192A\u1937\x07" +
		"\u01EE\x02\x02\u192B\u1937\x07\u02BE\x02\x02\u192C\u192D\x07\u011B\x02" +
		"\x02\u192D\u192E\x07\xDF\x02\x02\u192E\u192F\x07\xE5\x02\x02\u192F\u1930" +
		"\x07\xDF\x02\x02\u1930\u1937\x07\u0222\x02\x02\u1931\u1932\x07(\x02\x02" +
		"\u1932\u1933\x07\xE5\x02\x02\u1933\u1934\x07\xDF\x02\x02\u1934\u1937\x07" +
		"\u0222\x02\x02\u1935\u1937\x05\u02A2\u0152\x02\u1936\u192A\x03\x02\x02" +
		"\x02\u1936\u192B\x03\x02\x02\x02\u1936\u192C\x03\x02\x02\x02\u1936\u1931" +
		"\x03\x02\x02\x02\u1936\u1935\x03\x02\x02\x02\u1937\u01E9\x03\x02\x02\x02" +
		"\u1938\u1939\x07I\x02\x02\u1939\u193A\x07\u014A\x02\x02\u193A\u193B\x05" +
		"\u03B6\u01DC\x02\u193B\u193C\x07\xE5\x02\x02\u193C\u193D\x05\u032C\u0197" +
		"\x02\u193D\u193E\x07\u0335\x02\x02\u193E\u193F\x05\u038E\u01C8\x02\u193F" +
		"\u1952\x07\u0336\x02\x02\u1940\u1946\x07\u017C\x02\x02\u1941\u1947\x07" +
		"\u020A\x02\x02\u1942\u1943\x07\u02BD\x02\x02\u1943\u1944\x07\u031B\x02" +
		"\x02\u1944\u1947\t<\x02\x02\u1945\u1947\x07\u02DD\x02\x02\u1946\u1941" +
		"\x03\x02\x02\x02\u1946\u1942\x03\x02\x02\x02\u1946\u1945\x03\x02\x02\x02" +
		"\u1947\u194A\x03\x02\x02\x02\u1948\u1949\x07\u0337\x02\x02\u1949\u194B" +
		"\x07\u026B\x02\x02\u194A\u1948\x03\x02\x02\x02\u194A\u194B\x03\x02\x02" +
		"\x02\u194B\u1950\x03\x02\x02\x02\u194C\u194D\x07\u0337\x02\x02\u194D\u194E" +
		"\x07\u0220\x02\x02\u194E\u194F\x07\u0323\x02\x02\u194F\u1951\x05\u0392" +
		"\u01CA\x02\u1950\u194C\x03\x02\x02\x02\u1950\u1951\x03\x02\x02\x02\u1951" +
		"\u1953\x03\x02\x02\x02\u1952\u1940\x03\x02\x02\x02\u1952\u1953\x03\x02" +
		"\x02\x02\u1953\u1955\x03\x02\x02\x02\u1954\u1956\x07\u0338\x02\x02\u1955" +
		"\u1954\x03\x02\x02\x02\u1955\u1956\x03\x02\x02\x02\u1956\u01EB\x03\x02" +
		"\x02\x02\u1957\u1959\x07\u016C\x02\x02\u1958\u195A\t=\x02\x02\u1959\u1958" +
		"\x03\x02\x02\x02\u1959\u195A\x03\x02\x02\x02\u195A\u195B\x03\x02\x02\x02" +
		"\u195B\u195C\x07\u014A\x02\x02\u195C\u195E\x05\u0380\u01C1\x02\u195D\u195F" +
		"\x05\u03B6\u01DC\x02\u195E\u195D\x03\x02\x02\x02\u195E\u195F\x03\x02\x02" +
		"\x02\u195F\u1963\x03\x02\x02\x02\u1960\u1961\x07\u0301\x02\x02\u1961\u1962" +
		"\x07\u031B\x02\x02\u1962\u1964\x07\u0172\x02\x02\u1963\u1960\x03\x02\x02" +
		"\x02\u1963\u1964\x03\x02\x02\x02\u1964\u01ED\x03\x02\x02\x02\u1965\u1966" +
		"\x07I\x02\x02\u1966\u1967\x07\u0156\x02\x02\u1967\u1968\x05\u0382\u01C2" +
		"\x02\u1968\u1969\x07\u0335\x02\x02\u1969\u196B\x05\u02AC\u0157\x02\u196A" +
		"\u196C\x07\u0337\x02\x02\u196B\u196A\x03\x02\x02\x02\u196B\u196C\x03\x02" +
		"\x02\x02\u196C\u196D\x03\x02\x02\x02\u196D\u1970\x07\u0336\x02\x02\u196E" +
		"\u196F\x07\u023A\x02\x02\u196F\u1971\x05\u03B8\u01DD\x02\u1970\u196E\x03" +
		"\x02\x02\x02\u1970\u1971\x03\x02\x02\x02\u1971\u1975\x03\x02\x02\x02\u1972" +
		"\u1974\x05\u01F0\xF9\x02\u1973\u1972\x03\x02\x02\x02\u1974\u1977\x03\x02" +
		"\x02\x02\u1975\u1973\x03\x02\x02\x02\u1975\u1976\x03\x02\x02\x02\u1976" +
		"\u197B\x03\x02\x02\x02\u1977\u1975\x03\x02\x02\x02\u1978\u1979\x07\xE5" +
		"\x02\x02\u1979\u197C\x05\u03B6\u01DC\x02\u197A\u197C\x07Z\x02\x02\u197B" +
		"\u1978\x03\x02\x02\x02\u197B\u197A\x03\x02\x02\x02\u197B\u197C\x03\x02" +
		"\x02\x02\u197C\u1980\x03\x02\x02\x02\u197D\u197E\x07\u02EC\x02\x02\u197E" +
		"\u1981\x05\u03B6\u01DC\x02\u197F\u1981\x07Z\x02\x02\u1980\u197D\x03\x02" +
		"\x02\x02\u1980\u197F\x03\x02\x02\x02\u1980\u1981\x03\x02\x02\x02\u1981" +
		"\u1983\x03\x02\x02\x02\u1982\u1984\x07\u0338\x02\x02\u1983\u1982\x03\x02" +
		"\x02\x02\u1983\u1984\x03\x02\x02\x02\u1984\u01EF\x03\x02\x02\x02\u1985" +
		"\u1999\x07\u017C\x02\x02\u1986\u1987\x07\u0335\x02\x02\u1987\u198C\x05" +
		"\u02BE\u0160\x02\u1988\u1989\x07\u0337\x02\x02\u1989\u198B\x05\u02BE\u0160" +
		"\x02\u198A\u1988\x03\x02\x02\x02\u198B\u198E\x03\x02\x02\x02\u198C\u198A" +
		"\x03\x02\x02\x02\u198C\u198D\x03\x02\x02\x02\u198D\u198F\x03\x02\x02\x02" +
		"\u198E\u198C\x03\x02\x02\x02\u198F\u1990\x07\u0336\x02\x02\u1990\u199A" +
		"\x03\x02\x02\x02\u1991\u1996\x05\u02BE\u0160\x02\u1992\u1993\x07\u0337" +
		"\x02\x02\u1993\u1995\x05\u02BE\u0160\x02\u1994\u1992\x03\x02\x02\x02\u1995" +
		"\u1998\x03\x02\x02\x02\u1996\u1994\x03\x02\x02\x02\u1996\u1997\x03\x02" +
		"\x02\x02\u1997\u199A\x03\x02\x02\x02\u1998\u1996\x03\x02\x02\x02\u1999" +
		"\u1986\x03\x02\x02\x02\u1999\u1991\x03\x02\x02\x02\u199A\u01F1\x03\x02" +
		"\x02\x02\u199B\u199C\x07I\x02\x02\u199C\u199D\x07\u0175\x02\x02\u199D" +
		"\u19A2\x05\u0384\u01C3\x02\u199E\u199F\x07\u0335\x02\x02\u199F\u19A0\x05" +
		"\u038E\u01C8\x02\u19A0\u19A1\x07\u0336\x02\x02\u19A1\u19A3\x03\x02\x02" +
		"\x02\u19A2\u199E\x03\x02\x02\x02\u19A2\u19A3\x03\x02\x02\x02\u19A3\u19AD" +
		"\x03\x02\x02\x02\u19A4\u19A5\x07\u017C\x02\x02\u19A5\u19AA\x05\u01F4\xFB" +
		"\x02\u19A6\u19A7\x07\u0337\x02\x02\u19A7\u19A9\x05\u01F4\xFB\x02\u19A8" +
		"\u19A6\x03\x02\x02\x02\u19A9\u19AC\x03\x02\x02\x02\u19AA\u19A8\x03\x02" +
		"\x02\x02\u19AA\u19AB\x03\x02\x02\x02\u19AB\u19AE\x03\x02\x02\x02\u19AC" +
		"\u19AA\x03\x02\x02\x02\u19AD\u19A4\x03\x02\x02\x02\u19AD\u19AE\x03\x02" +
		"\x02\x02\u19AE\u19AF\x03\x02\x02\x02\u19AF\u19B0\x07\x10\x02\x02\u19B0" +
		"\u19B4\x05\u01BE\xE0\x02\u19B1\u19B2\x07\u017C\x02\x02\u19B2\u19B3\x07" +
		".\x02\x02\u19B3\u19B5\x07\xEC\x02\x02\u19B4\u19B1\x03\x02\x02\x02\u19B4" +
		"\u19B5\x03\x02\x02\x02\u19B5\u19B7\x03\x02\x02\x02\u19B6\u19B8\x07\u0338" +
		"\x02\x02\u19B7\u19B6\x03\x02\x02\x02\u19B7\u19B8\x03\x02\x02\x02\u19B8" +
		"\u01F3\x03\x02\x02\x02\u19B9\u19BA\t>\x02\x02\u19BA\u01F5\x03\x02\x02" +
		"\x02\u19BB\u19BC\x07\n\x02\x02\u19BC\u19BD\x07\u0156\x02\x02\u19BD\u19E9" +
		"\x05\u0382\u01C2\x02\u19BE\u19BF\x07\u013D\x02\x02\u19BF\u19C0\x07\u0335" +
		"\x02\x02\u19C0\u19C1\x07\u023B\x02\x02\u19C1\u19C2\x07\u0323\x02\x02\u19C2" +
		"\u19C3\t?\x02\x02\u19C3\u19EA\x07\u0336\x02\x02\u19C4\u19C5\x07\x04\x02" +
		"\x02\u19C5\u19EA\x05\u02AE\u0158\x02\u19C6\u19C7\x07\n\x02\x02\u19C7\u19C8" +
		"\x078\x02\x02\u19C8\u19EA\x05\u02B0\u0159\x02\u19C9\u19CA\x07h\x02\x02" +
		"\u19CA\u19CB\x078\x02\x02\u19CB\u19EA\x05\u03B6\u01DC\x02\u19CC\u19CD" +
		"\x07h\x02\x02\u19CD\u19CE\x07=\x02\x02\u19CE\u19EA\x05\u03B6\u01DC\x02" +
		"\u19CF\u19D0\x07\u017C\x02\x02\u19D0\u19D1\x07.\x02\x02\u19D1\u19D2\x07" +
		"\x04\x02\x02\u19D2\u19D3\x07=\x02\x02\u19D3\u19D4\x05\u03B6\u01DC\x02" +
		"\u19D4\u19D5\x07\x89\x02\x02\u19D5\u19D6\x07\xAC\x02\x02\u19D6\u19D7\x07" +
		"\u0335\x02\x02\u19D7\u19D8\x05\u038E\u01C8\x02\u19D8\u19D9\x07\u0336\x02" +
		"\x02\u19D9\u19DA\x07\u010E\x02\x02\u19DA\u19DB\x05\u0382\u01C2\x02\u19DB" +
		"\u19DC\x07\u0335\x02\x02\u19DC\u19DD\x05\u038E\u01C8\x02\u19DD\u19DE\x07" +
		"\u0336\x02\x02\u19DE\u19EA\x03\x02\x02\x02\u19DF\u19E0\x07.\x02\x02\u19E0" +
		"\u19E1\x07=\x02\x02\u19E1\u19EA\x05\u03B6\u01DC\x02\u19E2\u19E3\t\x17" +
		"\x02\x02\u19E3\u19E5\x07\u0163\x02\x02\u19E4\u19E6\x05\u03B6\u01DC\x02" +
		"\u19E5\u19E4\x03\x02\x02\x02\u19E5\u19E6\x03\x02\x02\x02\u19E6\u19EA\x03" +
		"\x02\x02\x02\u19E7\u19E8\x07\u02A1\x02\x02\u19E8\u19EA\x05\u01F0\xF9\x02" +
		"\u19E9\u19BE\x03\x02\x02\x02\u19E9\u19C4\x03\x02\x02\x02\u19E9\u19C6\x03" +
		"\x02\x02\x02\u19E9\u19C9\x03\x02\x02\x02\u19E9\u19CC\x03\x02\x02\x02\u19E9" +
		"\u19CF\x03\x02\x02\x02\u19E9\u19DF\x03\x02\x02\x02\u19E9\u19E2\x03\x02" +
		"\x02\x02\u19E9\u19E7\x03\x02\x02\x02\u19EA\u19EC\x03\x02\x02\x02\u19EB" +
		"\u19ED\x07\u0338\x02\x02\u19EC\u19EB\x03\x02\x02\x02\u19EC\u19ED\x03\x02" +
		"\x02\x02\u19ED\u01F7\x03\x02\x02\x02\u19EE\u19EF\x07\n\x02\x02\u19EF\u19F2" +
		"\x07U\x02\x02\u19F0\u19F3\x05\u03B6\u01DC\x02\u19F1\u19F3\x07K\x02\x02" +
		"\u19F2\u19F0\x03\x02\x02\x02\u19F2\u19F1\x03\x02\x02\x02\u19F3\u1A00\x03" +
		"\x02\x02\x02\u19F4\u19F5\x07\u025B\x02\x02\u19F5\u19F6\x07\u025E\x02\x02" +
		"\u19F6\u19F7\x07\u0323\x02\x02\u19F7\u1A01\x05\u03B6\u01DC\x02\u19F8\u19F9" +
		"\x077\x02\x02\u19F9\u1A01\x05\u03B6\u01DC\x02\u19FA\u19FB\x07\u013D\x02" +
		"\x02\u19FB\u19FE\x05\u01FA\xFE\x02\u19FC\u19FD\x07\u017C\x02\x02\u19FD" +
		"\u19FF\x05\u0240\u0121\x02\u19FE\u19FC\x03\x02\x02\x02\u19FE\u19FF\x03" +
		"\x02\x02\x02\u19FF\u1A01\x03\x02\x02\x02\u1A00\u19F4\x03\x02\x02\x02\u1A00" +
		"\u19F8\x03\x02\x02\x02\u1A00\u19FA\x03\x02\x02\x02\u1A01\u1A03\x03\x02" +
		"\x02\x02\u1A02\u1A04\x07\u0338\x02\x02\u1A03\u1A02\x03\x02\x02\x02\u1A03" +
		"\u1A04\x03\x02\x02\x02\u1A04\u01F9\x03\x02\x02\x02\u1A05\u1A1D\x05\u01FC" +
		"\xFF\x02\u1A06\u1A1D\x05\u01FE\u0100\x02\u1A07\u1A1D\x05\u0202\u0102\x02" +
		"\u1A08\u1A1D\x05\u0204\u0103\x02\u1A09\u1A1D\x05\u0208\u0105\x02\u1A0A" +
		"\u1A1D\x05\u0222\u0112\x02\u1A0B\u1A1D\x05\u0224\u0113\x02\u1A0C\u1A1D" +
		"\x05\u0226\u0114\x02\u1A0D\u1A1D\x05\u0228\u0115\x02\u1A0E\u1A1D\x05\u022A" +
		"\u0116\x02\u1A0F\u1A1D\x05\u022C\u0117\x02\u1A10\u1A1D\x05\u022E\u0118" +
		"\x02\u1A11\u1A12\x07\u0200\x02\x02\u1A12\u1A1D\x05\u0372\u01BA\x02\u1A13" +
		"\u1A1D\x05\u0230\u0119\x02\u1A14\u1A1D\x05\u0232\u011A\x02\u1A15\u1A1D" +
		"\x05\u0234\u011B\x02\u1A16\u1A1D\x05\u0236\u011C\x02\u1A17\u1A1D\x05\u0238" +
		"\u011D\x02\u1A18\u1A1D\x05\u023A\u011E\x02\u1A19\u1A1D\x05\u023C\u011F" +
		"\x02\u1A1A\u1A1D\x05\u023E\u0120\x02\u1A1B\u1A1D\x05\u0240\u0121\x02\u1A1C" +
		"\u1A05\x03\x02\x02\x02\u1A1C\u1A06\x03\x02\x02\x02\u1A1C\u1A07\x03\x02" +
		"\x02\x02\u1A1C\u1A08\x03\x02\x02\x02\u1A1C\u1A09\x03\x02\x02\x02\u1A1C" +
		"\u1A0A\x03\x02\x02\x02\u1A1C\u1A0B\x03\x02\x02\x02\u1A1C\u1A0C\x03\x02" +
		"\x02\x02\u1A1C\u1A0D\x03\x02\x02\x02\u1A1C\u1A0E\x03\x02\x02\x02\u1A1C" +
		"\u1A0F\x03\x02\x02\x02\u1A1C\u1A10\x03\x02\x02\x02\u1A1C\u1A11\x03\x02" +
		"\x02\x02\u1A1C\u1A13\x03\x02\x02\x02\u1A1C\u1A14\x03\x02\x02\x02\u1A1C" +
		"\u1A15\x03\x02\x02\x02\u1A1C\u1A16\x03\x02\x02\x02\u1A1C\u1A17\x03\x02" +
		"\x02\x02\u1A1C\u1A18\x03\x02\x02\x02\u1A1C\u1A19\x03\x02\x02\x02\u1A1C" +
		"\u1A1A\x03\x02\x02\x02\u1A1C\u1A1B\x03\x02\x02\x02\u1A1D\u01FB\x03\x02" +
		"\x02\x02\u1A1E\u1A1F\x07\u019D\x02\x02\u1A1F\u1A30\x05\u0392\u01CA\x02" +
		"\u1A20\u1A21\x07\u019E\x02\x02\u1A21\u1A30\x07\xE2\x02\x02\u1A22\u1A27" +
		"\x07\xE5\x02\x02";
	private static readonly _serializedATNSegment14: string =
		"\u1A23\u1A24\x07\u0220\x02\x02\u1A24\u1A25\x07\u0323\x02\x02\u1A25\u1A28" +
		"\x07\xE5\x02\x02\u1A26\u1A28\x07\xE2\x02\x02\u1A27\u1A23\x03\x02\x02\x02" +
		"\u1A27\u1A26\x03\x02\x02\x02\u1A28\u1A30\x03\x02\x02\x02\u1A29\u1A2A\x07" +
		"\u019F\x02\x02\u1A2A\u1A30\x05\u0392\u01CA\x02\u1A2B\u1A2C\x07\u01A0\x02" +
		"\x02\u1A2C\u1A30\x05\u0392\u01CA\x02\u1A2D\u1A2E\x07\u01A1\x02\x02\u1A2E" +
		"\u1A30\t\t\x02\x02\u1A2F\u1A1E\x03\x02\x02\x02\u1A2F\u1A20\x03\x02\x02" +
		"\x02\u1A2F\u1A22\x03\x02\x02\x02\u1A2F\u1A29\x03\x02\x02\x02\u1A2F\u1A2B" +
		"\x03\x02\x02\x02\u1A2F\u1A2D\x03\x02\x02\x02\u1A30\u01FD\x03\x02\x02\x02" +
		"\u1A31\u1A32\x07\u01B4\x02\x02\u1A32\u1A42\x07\u0323\x02\x02\u1A33\u1A43" +
		"\x07\xE2\x02\x02\u1A34\u1A3F\x07\xE5\x02\x02\u1A35\u1A3A\x05\u0200\u0101" +
		"\x02\u1A36\u1A37\x07\u0337\x02\x02\u1A37\u1A39\x05\u0200\u0101\x02\u1A38" +
		"\u1A36\x03\x02\x02\x02\u1A39\u1A3C\x03\x02\x02\x02\u1A3A\u1A38\x03\x02" +
		"\x02\x02\u1A3A\u1A3B\x03\x02\x02\x02\u1A3B\u1A3E\x03\x02\x02\x02\u1A3C" +
		"\u1A3A\x03\x02\x02\x02\u1A3D\u1A35\x03\x02\x02\x02\u1A3E\u1A41\x03\x02" +
		"\x02\x02\u1A3F\u1A3D\x03\x02\x02\x02\u1A3F\u1A40\x03\x02\x02\x02\u1A40" +
		"\u1A43\x03\x02\x02\x02\u1A41\u1A3F\x03\x02\x02\x02\u1A42\u1A33\x03\x02" +
		"\x02\x02\u1A42\u1A34\x03\x02\x02\x02\u1A43\u01FF\x03\x02\x02\x02\u1A44" +
		"\u1A45\x07\u019C\x02\x02\u1A45\u1A46\x07\u0323\x02\x02\u1A46\u1A4B\x05" +
		"\u0392\u01CA\x02\u1A47\u1A48\x07\u01B3\x02\x02\u1A48\u1A49\x07\u0323\x02" +
		"\x02\u1A49\u1A4B\t@\x02\x02\u1A4A\u1A44\x03\x02\x02\x02\u1A4A\u1A47\x03" +
		"\x02\x02\x02\u1A4B\u0201\x03\x02\x02\x02\u1A4C\u1A4D\x07>\x02\x02\u1A4D" +
		"\u1A4E\x07\u0323\x02\x02\u1A4E\u1A4F\t7\x02\x02\u1A4F\u0203\x03\x02\x02" +
		"\x02\u1A50\u1A51\x07\u01C9\x02\x02\u1A51\u1A55\x05\u0392\u01CA\x02\u1A52" +
		"\u1A53\x07\u01CA\x02\x02\u1A53\u1A55\tA\x02\x02\u1A54\u1A50\x03\x02\x02" +
		"\x02\u1A54\u1A52\x03\x02\x02\x02\u1A55\u0205\x03\x02\x02\x02\u1A56\u1A57" +
		"\x07\n\x02\x02\u1A57\u1A58\x07n\x02\x02\u1A58\u1A5B\x05\u03B6\u01DC\x02" +
		"\u1A59\u1A5A\x07\x14\x02\x02\u1A5A\u1A5C\x05\u03B6\u01DC\x02\u1A5B\u1A59" +
		"\x03\x02\x02\x02\u1A5B\u1A5C\x03\x02\x02\x02\u1A5C\u1A64\x03\x02\x02\x02" +
		"\u1A5D\u1A5E\x07\u014B\x02\x02\u1A5E\u1A62\x07\u0323\x02\x02\u1A5F\u1A63" +
		"\x07\u014E\x02\x02\u1A60\u1A63\x07\u0151\x02\x02\u1A61\u1A63\x07\u01E4" +
		"\x02\x02\u1A62\u1A5F\x03\x02\x02\x02\u1A62\u1A60\x03\x02\x02\x02\u1A62" +
		"\u1A61\x03\x02\x02\x02\u1A63\u1A65\x03\x02\x02\x02\u1A64\u1A5D\x03\x02" +
		"\x02\x02\u1A64\u1A65\x03\x02\x02\x02\u1A65\u1A66\x03\x02\x02\x02\u1A66" +
		"\u1A67\x07\x10\x02\x02\u1A67\u1A68\x07\u015A\x02\x02\u1A68\u1A69\x07\u0335" +
		"\x02\x02\u1A69\u1A6A\x07\xB8\x02\x02\u1A6A\u1A6B\x07\u0323\x02\x02\u1A6B" +
		"\u1A70\x07\u031B\x02\x02\u1A6C\u1A6D\x07\u0337\x02\x02\u1A6D\u1A6E\x07" +
		"\xB7\x02\x02\u1A6E\u1A6F\x07\u0323\x02\x02\u1A6F\u1A71\tB\x02\x02\u1A70" +
		"\u1A6C\x03\x02\x02\x02\u1A70\u1A71\x03\x02\x02\x02\u1A71\u1A72\x03\x02" +
		"\x02\x02\u1A72\u1AE0\x07\u0336\x02\x02\u1A73\u1AE1\x07\u02F9\x02\x02\u1A74" +
		"\u1A75\x07\x86\x02\x02\u1A75\u1A76\x07\u0139\x02\x02\u1A76\u1A77\x07\u0335" +
		"\x02\x02\u1A77\u1A78\x07\x15\x02\x02\u1A78\u1A89\x07\u0323\x02\x02\u1A79" +
		"\u1A7B\x07\u017B\x02\x02\u1A7A\u1A7C\tC\x02\x02\u1A7B\u1A7A\x03\x02\x02" +
		"\x02\u1A7B\u1A7C\x03\x02\x02\x02\u1A7C\u1A7F\x03\x02\x02\x02\u1A7D\u1A7E" +
		"\x07+\x02\x02\u1A7E\u1A80\x05\u03B6\u01DC\x02\u1A7F\u1A7D\x03\x02\x02" +
		"\x02\u1A7F\u1A80\x03\x02\x02\x02\u1A80\u1A8A\x03\x02\x02\x02\u1A81\u1A82" +
		"\x07+\x02\x02\u1A82\u1A84\x05\u03B6\u01DC\x02\u1A83\u1A85\x07\u017B\x02" +
		"\x02\u1A84\u1A83\x03\x02\x02\x02\u1A84\u1A85\x03\x02\x02\x02\u1A85\u1A87" +
		"\x03\x02\x02\x02\u1A86\u1A88\tC\x02\x02\u1A87\u1A86\x03\x02\x02\x02\u1A87" +
		"\u1A88\x03\x02\x02\x02\u1A88\u1A8A\x03\x02\x02\x02\u1A89\u1A79\x03\x02" +
		"\x02\x02\u1A89\u1A81\x03\x02\x02\x02\u1A8A\u1A9C\x03\x02\x02\x02\u1A8B" +
		"\u1A8D\x07\u0337\x02\x02\u1A8C\u1A8B\x03\x02\x02\x02\u1A8C\u1A8D\x03\x02" +
		"\x02\x02\u1A8D\u1A8E\x03\x02\x02\x02\u1A8E\u1A8F\x07\u01EE\x02\x02\u1A8F" +
		"\u1A90\x07\u0323\x02\x02\u1A90\u1A9A\tD\x02\x02\u1A91\u1A98\x07\u018D" +
		"\x02\x02\u1A92\u1A99\x07\x05\x02\x02\u1A93\u1A99\x07\u029A\x02\x02\u1A94" +
		"\u1A95\x07\x05\x02\x02\u1A95\u1A99\x07\u029A\x02\x02\u1A96\u1A97\x07\u029A" +
		"\x02\x02\u1A97\u1A99\x07\x05\x02\x02\u1A98\u1A92\x03\x02\x02\x02\u1A98" +
		"\u1A93\x03\x02\x02\x02\u1A98\u1A94\x03\x02\x02\x02\u1A98\u1A96\x03\x02" +
		"\x02\x02\u1A99\u1A9B\x03\x02\x02\x02\u1A9A\u1A91\x03\x02\x02\x02\u1A9A" +
		"\u1A9B\x03\x02\x02\x02\u1A9B\u1A9D\x03\x02\x02\x02\u1A9C\u1A8C\x03\x02" +
		"\x02\x02\u1A9C\u1A9D\x03\x02\x02\x02\u1A9D\u1AA4\x03\x02\x02\x02\u1A9E" +
		"\u1AA0\x07\u0337\x02\x02\u1A9F\u1A9E\x03\x02\x02\x02\u1A9F\u1AA0\x03\x02" +
		"\x02\x02\u1AA0\u1AA1\x03\x02\x02\x02\u1AA1\u1AA2\x07\xCA\x02\x02\u1AA2" +
		"\u1AA3\x07\u0323\x02\x02\u1AA3\u1AA5\tE\x02\x02\u1AA4\u1A9F\x03\x02\x02" +
		"\x02\u1AA4\u1AA5\x03\x02\x02\x02\u1AA5\u1AAC\x03\x02\x02\x02\u1AA6\u1AA8" +
		"\x07\u0337\x02\x02\u1AA7\u1AA6\x03\x02\x02\x02\u1AA7\u1AA8\x03\x02\x02" +
		"\x02\u1AA8\u1AA9\x03\x02\x02\x02\u1AA9\u1AAA\x07\xCB\x02\x02\u1AAA\u1AAB" +
		"\x07\u0323\x02\x02\u1AAB\u1AAD\x07\u031B\x02\x02\u1AAC\u1AA7\x03\x02\x02" +
		"\x02\u1AAC\u1AAD\x03\x02\x02\x02\u1AAD\u1AAE\x03\x02\x02\x02\u1AAE\u1AE1" +
		"\x07\u0336\x02\x02\u1AAF\u1AB0\x07\x86\x02\x02\u1AB0\u1AB1\x07V\x02\x02" +
		"\u1AB1\u1AB2\x07\u0335\x02\x02\u1AB2\u1AB3\x07\x15\x02\x02\u1AB3\u1AC4" +
		"\x07\u0323\x02\x02\u1AB4\u1AB6\x07\u017B\x02\x02\u1AB5\u1AB7\tC\x02\x02" +
		"\u1AB6\u1AB5\x03\x02\x02\x02\u1AB6\u1AB7\x03\x02\x02\x02\u1AB7\u1ABA\x03" +
		"\x02\x02\x02\u1AB8\u1AB9\x07+\x02\x02\u1AB9\u1ABB\x05\u03B6\u01DC\x02" +
		"\u1ABA\u1AB8\x03\x02\x02\x02\u1ABA\u1ABB\x03\x02\x02\x02\u1ABB\u1AC5\x03" +
		"\x02\x02\x02\u1ABC\u1ABD\x07+\x02\x02\u1ABD\u1ABF\x05\u03B6\u01DC\x02" +
		"\u1ABE\u1AC0\x07\u017B\x02\x02\u1ABF\u1ABE\x03\x02\x02\x02\u1ABF\u1AC0" +
		"\x03\x02\x02\x02\u1AC0\u1AC2\x03\x02\x02\x02\u1AC1\u1AC3\tC\x02\x02\u1AC2" +
		"\u1AC1\x03\x02\x02\x02\u1AC2\u1AC3\x03\x02\x02\x02\u1AC3\u1AC5\x03\x02" +
		"\x02\x02\u1AC4\u1AB4\x03\x02\x02\x02\u1AC4\u1ABC\x03\x02\x02\x02\u1AC5" +
		"\u1AD7\x03\x02\x02\x02\u1AC6\u1AC8\x07\u0337\x02\x02\u1AC7\u1AC6\x03\x02" +
		"\x02\x02\u1AC7\u1AC8\x03\x02\x02\x02\u1AC8\u1AC9\x03\x02\x02\x02\u1AC9" +
		"\u1ACA\x07\u01EE\x02\x02\u1ACA\u1ACB\x07\u0323\x02\x02\u1ACB\u1AD5\tD" +
		"\x02\x02\u1ACC\u1AD3\x07\u018D\x02\x02\u1ACD\u1AD4\x07\x05\x02\x02\u1ACE" +
		"\u1AD4\x07\u029A\x02\x02\u1ACF\u1AD0\x07\x05\x02\x02\u1AD0\u1AD4\x07\u029A" +
		"\x02\x02\u1AD1\u1AD2\x07\u029A\x02\x02\u1AD2\u1AD4\x07\x05\x02\x02\u1AD3" +
		"\u1ACD\x03\x02\x02\x02\u1AD3\u1ACE\x03\x02\x02\x02\u1AD3\u1ACF\x03\x02" +
		"\x02\x02\u1AD3\u1AD1\x03\x02\x02\x02\u1AD4\u1AD6\x03\x02\x02\x02\u1AD5" +
		"\u1ACC\x03\x02\x02\x02\u1AD5\u1AD6\x03\x02\x02\x02\u1AD6\u1AD8\x03\x02" +
		"\x02\x02\u1AD7\u1AC7\x03\x02\x02\x02\u1AD7\u1AD8\x03\x02\x02\x02\u1AD8" +
		"\u1ADA\x03\x02\x02\x02\u1AD9\u1ADB\x07\u0337\x02\x02\u1ADA\u1AD9\x03\x02" +
		"\x02\x02\u1ADA\u1ADB\x03\x02\x02\x02\u1ADB\u1ADC\x03\x02\x02\x02\u1ADC" +
		"\u1ADD\x07\u0121\x02\x02\u1ADD\u1ADE\x07\u0323\x02\x02\u1ADE\u1ADF\tF" +
		"\x02\x02\u1ADF\u1AE1\x07\u0336\x02\x02\u1AE0\u1A73\x03\x02\x02\x02\u1AE0" +
		"\u1A74\x03\x02\x02\x02\u1AE0\u1AAF\x03\x02\x02\x02\u1AE1\u0207\x03\x02" +
		"\x02\x02\u1AE2\u1AE3\x05\u020A\u0106\x02\u1AE3\u0209\x03\x02\x02\x02\u1AE4" +
		"\u1AE5\x05\u020C\u0107\x02\u1AE5\u1AE6\x05\u0212\u010A\x02\u1AE6\u1AEB" +
		"\x03\x02\x02\x02\u1AE7\u1AE8\x05\u020E\u0108\x02\u1AE8\u1AE9\x05\u0214" +
		"\u010B\x02\u1AE9\u1AEB\x03\x02\x02\x02\u1AEA\u1AE4\x03\x02\x02\x02\u1AEA" +
		"\u1AE7\x03\x02\x02\x02\u1AEB\u020B\x03\x02\x02\x02\u1AEC\u1AED\x07\u0282" +
		"\x02\x02\u1AED\u020D\x03\x02\x02\x02\u1AEE\u1AEF\x07\u017F\x02\x02\u1AEF" +
		"\u020F\x03\x02\x02\x02\u1AF0\u1AF1\x07\u0323\x02\x02\u1AF1\u0211\x03\x02" +
		"\x02\x02\u1AF2\u1AF3\x05\u0210\u0109\x02\u1AF3\u1AF4\x05\u0218\u010D\x02" +
		"\u1AF4\u1AFF\x03\x02\x02\x02\u1AF5\u1AFF\x07~\x02\x02\u1AF6\u1AFF\x07" +
		"\x88\x02\x02\u1AF7\u1AFF\x07\xE2\x02\x02\u1AF8\u1AFF\x07\u0118\x02\x02" +
		"\u1AF9\u1AFA\x07\u0129\x02\x02\u1AFA\u1AFF\tG\x02\x02\u1AFB\u1AFF\x07" +
		"\u02E5\x02\x02\u1AFC\u1AFD\x07\u02F0\x02\x02\u1AFD\u1AFF\x07\u031B\x02" +
		"\x02\u1AFE\u1AF2\x03\x02\x02\x02\u1AFE\u1AF5\x03\x02\x02\x02\u1AFE\u1AF6" +
		"\x03\x02\x02\x02\u1AFE\u1AF7\x03\x02\x02\x02\u1AFE\u1AF8\x03\x02\x02\x02" +
		"\u1AFE\u1AF9\x03\x02\x02\x02\u1AFE\u1AFB\x03\x02\x02\x02\u1AFE\u1AFC\x03" +
		"\x02\x02\x02\u1AFF\u0213\x03\x02\x02\x02\u1B00\u1B01\x05\u0210\u0109\x02" +
		"\u1B01\u1B02\x05\u0216\u010C\x02\u1B02\u1B05\x03\x02\x02\x02\u1B03\u1B05" +
		"\x07\xE2\x02\x02\u1B04\u1B00\x03\x02\x02\x02\u1B04\u1B03\x03\x02\x02\x02" +
		"\u1B05\u0215\x03\x02\x02\x02\u1B06\u1B07\x05\u0218\u010D\x02\u1B07\u0217" +
		"\x03\x02\x02\x02\u1B08\u1B09\x05\u021C\u010F\x02\u1B09\u1B0A\x05\u0220" +
		"\u0111\x02\u1B0A\u1B0B\x05\u021A\u010E\x02\u1B0B\u1B0C\x05\u021E\u0110" +
		"\x02\u1B0C\u0219\x03\x02\x02\x02\u1B0D\u1B0E\x07\u0339\x02\x02\u1B0E\u021B" +
		"\x03\x02\x02\x02\u1B0F\u1B10\x07\u015A\x02\x02\u1B10\u1B11\x07\u0339\x02" +
		"\x02\u1B11\u1B12\x07g\x02\x02\u1B12\u021D\x03\x02\x02\x02\u1B13\u1B14" +
		"\x07\u031B\x02\x02\u1B14\u021F\x03\x02\x02\x02\u1B15\u1B16\x05\u03B6\u01DC" +
		"\x02\u1B16\u1B17\x07\u0330\x02\x02\u1B17\u1B18\x05\u0220\u0111\x02\u1B18" +
		"\u1B20\x03\x02\x02\x02\u1B19\u1B1A\x05\u03B6\u01DC\x02\u1B1A\u1B1B\x07" +
		"\u0330\x02\x02\u1B1B\u1B1E\x03\x02\x02\x02\u1B1C\u1B1E\x05\u03B6\u01DC" +
		"\x02\u1B1D\u1B19\x03\x02\x02\x02\u1B1D\u1B1C\x03\x02\x02\x02\u1B1E\u1B20" +
		"\x03\x02\x02\x02\u1B1F\u1B15\x03\x02\x02\x02\u1B1F\u1B1D\x03\x02\x02\x02" +
		"\u1B20\u0221\x03\x02\x02\x02\u1B21\u1B22\x07\u01CB\x02\x02\u1B22\u1B23" +
		"\x05\u0392\u01CA\x02\u1B23\u0223\x03\x02\x02\x02\u1B24\u1B25\x07\u01EE" +
		"\x02\x02\u1B25\u1B26\x05\u0392\u01CA\x02\u1B26\u0225\x03\x02\x02\x02\u1B27" +
		"\u1B28\tH\x02\x02\u1B28\u0227\x03\x02\x02\x02\u1B29\u1B2A\tI\x02\x02\u1B2A" +
		"\u0229\x03\x02\x02\x02\u1B2B\u1B2C\tJ\x02\x02\u1B2C\u022B\x03\x02\x02" +
		"\x02\u1B2D\u1B2E\x07\u01D8\x02\x02\u1B2E\u1B2F\x07\u0323\x02\x02\u1B2F" +
		"\u1B30\tK\x02\x02\u1B30\u022D\x03\x02\x02\x02\u1B31\u1B32\x07\u01D1\x02" +
		"\x02\u1B32\u1B4B\x05\u0392\u01CA\x02\u1B33\u1B34\x07\u02F7\x02\x02\u1B34" +
		"\u1B4B\x05\u0392\u01CA\x02\u1B35\u1B36\x07\u01D6\x02\x02\u1B36\u1B39\x07" +
		"\u0323\x02\x02\u1B37\u1B3A\x05\u03B6\u01DC\x02\u1B38\u1B3A\x07\u031F\x02" +
		"\x02\u1B39\u1B37\x03\x02\x02\x02\u1B39\u1B38\x03\x02\x02\x02\u1B3A\u1B4B" +
		"\x03\x02\x02\x02\u1B3B\u1B3C\x07\u01D5\x02\x02\u1B3C\u1B3F\x07\u0323\x02" +
		"\x02\u1B3D\u1B40\x05\u03B6\u01DC\x02\u1B3E\u1B40\x07\u031F\x02\x02\u1B3F" +
		"\u1B3D\x03\x02\x02\x02\u1B3F\u1B3E\x03\x02\x02\x02\u1B40\u1B4B\x03\x02" +
		"\x02\x02\u1B41\u1B42\x07\u025F\x02\x02\u1B42\u1B43\x07\u0323\x02\x02\u1B43" +
		"\u1B4B\t\t\x02\x02\u1B44\u1B45\x07\u02F4\x02\x02\u1B45\u1B46\x07\u0323" +
		"\x02\x02\u1B46\u1B4B\t\t\x02\x02\u1B47\u1B48\x07\u02FA\x02\x02\u1B48\u1B49" +
		"\x07\u0323\x02\x02\u1B49\u1B4B\x07\u031B\x02\x02\u1B4A\u1B31\x03\x02\x02" +
		"\x02\u1B4A\u1B33\x03\x02\x02\x02\u1B4A\u1B35\x03\x02\x02\x02\u1B4A\u1B3B" +
		"\x03\x02\x02\x02\u1B4A\u1B41\x03\x02\x02\x02\u1B4A\u1B44\x03\x02\x02\x02" +
		"\u1B4A\u1B47\x03\x02\x02\x02\u1B4B\u022F\x03\x02\x02\x02\u1B4C\u1B55\x07" +
		"\u0214\x02\x02\u1B4D\u1B4E\x07\u01A2\x02\x02\u1B4E\u1B4F\x07\x93\x02\x02" +
		"\u1B4F\u1B50\x07\u0323\x02\x02\u1B50\u1B53\x05\u03B6\u01DC\x02\u1B51\u1B53" +
		"\x07\xE2\x02\x02\u1B52\u1B4D\x03\x02\x02\x02\u1B52\u1B51\x03\x02\x02\x02" +
		"\u1B53\u1B56\x03\x02\x02\x02\u1B54\u1B56\tL\x02\x02\u1B55\u1B52\x03\x02" +
		"\x02\x02\u1B55\u1B54\x03\x02\x02\x02\u1B56\u0231\x03\x02\x02\x02\u1B57" +
		"\u1B58\x07\u0259\x02\x02\u1B58\u1B59\t\t\x02\x02\u1B59\u0233\x03\x02\x02" +
		"\x02\u1B5A\u1B5B\x07\u027F\x02\x02\u1B5B\u1B5C\tM\x02\x02\u1B5C\u0235" +
		"\x03\x02\x02\x02\u1B5D\u1B5E\x07\u02A4\x02\x02\u1B5E\u1B64\tN\x02\x02" +
		"\u1B5F\u1B60\x07\u02F3\x02\x02\u1B60\u1B64\x05\u0392\u01CA\x02\u1B61\u1B62" +
		"\x07\u027E\x02\x02\u1B62\u1B64\tO\x02\x02\u1B63\u1B5D\x03\x02\x02\x02" +
		"\u1B63\u1B5F\x03\x02\x02\x02\u1B63\u1B61\x03\x02\x02\x02\u1B64\u0237\x03" +
		"\x02\x02\x02\u1B65\u1B6C\x07\u01EC\x02\x02\u1B66\u1B6C\x07\u01E3\x02\x02" +
		"\u1B67\u1B6C\x07\u0261\x02\x02\u1B68\u1B6C\x07\u01F0\x02\x02\u1B69\u1B6A" +
		"\x07\u0218\x02\x02\u1B6A\u1B6C\x05\u0392\u01CA\x02\u1B6B\u1B65\x03\x02" +
		"\x02\x02\u1B6B\u1B66\x03\x02\x02\x02\u1B6B\u1B67\x03\x02\x02\x02\u1B6B" +
		"\u1B68\x03\x02\x02\x02\u1B6B\u1B69\x03\x02\x02\x02\u1B6C\u0239\x03\x02" +
		"\x02\x02\u1B6D\u1B6E\x07\u018F\x02\x02\u1B6E\u1B73\x05\u0392\u01CA\x02" +
		"\u1B6F\u1B70\x07\u029C\x02\x02\u1B70\u1B73\t\t\x02\x02\u1B71\u1B73\t\t" +
		"\x02\x02\u1B72\u1B6D\x03\x02\x02\x02\u1B72\u1B6F\x03\x02\x02\x02\u1B72" +
		"\u1B71\x03\x02\x02\x02\u1B73\u023B\x03\x02\x02\x02\u1B74\u1B75\x07\u0191" +
		"\x02\x02\u1B75\u1B8A\x05\u0392\u01CA\x02\u1B76\u1B77\x07\u0192\x02\x02" +
		"\u1B77\u1B8A\x05\u0392\u01CA\x02\u1B78\u1B79\x07\u0193\x02\x02\u1B79\u1B8A" +
		"\x05\u0392\u01CA\x02\u1B7A\u1B7B\x07\u0194\x02\x02\u1B7B\u1B8A\x05\u0392" +
		"\u01CA\x02\u1B7C\u1B7D\x07\u0197\x02\x02\u1B7D\u1B8A\x05\u0392\u01CA\x02" +
		"\u1B7E\u1B7F\x07\u01BB\x02\x02\u1B7F\u1B80\x07\u0323\x02\x02\u1B80\u1B8A" +
		"\x07\u031B\x02\x02\u1B81\u1B82\x07\u01BD\x02\x02\u1B82\u1B8A\x05\u0392" +
		"\u01CA\x02\u1B83\u1B84\x07\u0271\x02\x02\u1B84\u1B8A\x05\u0392\u01CA\x02" +
		"\u1B85\u1B86\x07\u0296\x02\x02\u1B86\u1B8A\x05\u0392\u01CA\x02\u1B87\u1B88" +
		"\x07\u02A5\x02\x02\u1B88\u1B8A\x05\u0392\u01CA\x02\u1B89\u1B74\x03\x02" +
		"\x02\x02\u1B89\u1B76\x03\x02\x02\x02\u1B89\u1B78\x03\x02\x02\x02\u1B89" +
		"\u1B7A\x03\x02\x02\x02\u1B89\u1B7C\x03\x02\x02\x02\u1B89\u1B7E\x03\x02" +
		"\x02\x02\u1B89\u1B81\x03\x02\x02\x02\u1B89\u1B83\x03\x02\x02\x02\u1B89" +
		"\u1B85\x03\x02\x02\x02\u1B89\u1B87\x03\x02\x02\x02\u1B8A\u023D\x03\x02" +
		"\x02\x02\u1B8B\u1B8C\x07\u02EA\x02\x02\u1B8C\u1B8D\x07\u0323\x02\x02\u1B8D" +
		"\u1B8E\x07\u031B\x02\x02\u1B8E\u1B8F\tP\x02\x02\u1B8F\u023F\x03\x02\x02" +
		"\x02\u1B90\u1B91\x07\u0120\x02\x02\u1B91\u1B92\x07\u018B\x02\x02\u1B92" +
		"\u1B97\x07\u031B\x02\x02\u1B93\u1B94\x07\u0120\x02\x02\u1B94\u1B97\x07" +
		"\u021C\x02\x02\u1B95\u1B97\x07\u0266\x02\x02\u1B96\u1B90\x03\x02\x02\x02" +
		"\u1B96\u1B93\x03\x02\x02\x02\u1B96\u1B95\x03\x02\x02\x02\u1B97\u0241\x03" +
		"\x02\x02\x02\u1B98\u1B99\x07h\x02\x02\u1B99\u1B9C\x07\x9E\x02\x02\u1B9A" +
		"\u1B9B\x07\x9A\x02\x02\u1B9B\u1B9D\x07x\x02\x02\u1B9C\u1B9A\x03\x02\x02" +
		"\x02\u1B9C\u1B9D\x03\x02\x02\x02\u1B9D\u1BAE\x03\x02\x02\x02\u1B9E\u1BA3" +
		"\x05\u0244\u0123\x02\u1B9F\u1BA0\x07\u0337\x02\x02\u1BA0\u1BA2\x05\u0244" +
		"\u0123\x02\u1BA1\u1B9F\x03\x02\x02\x02\u1BA2\u1BA5\x03\x02\x02\x02\u1BA3" +
		"\u1BA1\x03\x02\x02\x02\u1BA3\u1BA4\x03\x02\x02\x02\u1BA4\u1BAF\x03\x02" +
		"\x02\x02\u1BA5\u1BA3\x03\x02\x02\x02\u1BA6\u1BAB\x05\u0246\u0124\x02\u1BA7" +
		"\u1BA8\x07\u0337\x02\x02\u1BA8\u1BAA\x05\u0246\u0124\x02\u1BA9\u1BA7\x03" +
		"\x02\x02\x02\u1BAA\u1BAD\x03\x02\x02\x02\u1BAB\u1BA9\x03\x02\x02\x02\u1BAB" +
		"\u1BAC\x03\x02\x02\x02\u1BAC\u1BAF\x03\x02\x02\x02\u1BAD\u1BAB\x03\x02" +
		"\x02\x02\u1BAE\u1B9E\x03\x02\x02\x02\u1BAE\u1BA6\x03\x02\x02\x02\u1BAF" +
		"\u1BB1\x03\x02\x02\x02\u1BB0\u1BB2\x07\u0338\x02\x02\u1BB1\u1BB0\x03\x02" +
		"\x02\x02\u1BB1\u1BB2\x03\x02\x02\x02\u1BB2\u0243\x03\x02\x02\x02\u1BB3" +
		"\u1BB4\x05\u03B6\u01DC\x02\u1BB4\u1BB5\x07\xE5\x02\x02\u1BB5\u1BB6\x05" +
		"\u0380\u01C1\x02\u1BB6\u0245\x03\x02\x02\x02\u1BB7\u1BB8\x05\u03B6\u01DC" +
		"\x02\u1BB8\u1BB9\x07\u0330\x02\x02\u1BB9\u1BBB\x03\x02\x02\x02\u1BBA\u1BB7" +
		"\x03\x02\x02\x02\u1BBA\u1BBB\x03\x02\x02\x02\u1BBB\u1BBC\x03\x02\x02\x02" +
		"\u1BBC\u1BBD\x05\u03B6\u01DC\x02\u1BBD\u1BBE\x07\u0330\x02\x02\u1BBE\u1BBF" +
		"\x05\u03B6\u01DC\x02\u1BBF\u0247\x03\x02\x02\x02\u1BC0\u1BC1\x07h\x02" +
		"\x02\u1BC1\u1BC4\t8\x02\x02\u1BC2\u1BC3\x07\x9A\x02\x02\u1BC3\u1BC5\x07" +
		"x\x02\x02\u1BC4\u1BC2\x03\x02\x02\x02\u1BC4\u1BC5\x03\x02\x02\x02\u1BC5" +
		"\u1BC6\x03\x02\x02\x02\u1BC6\u1BCB\x05\u0386\u01C4\x02\u1BC7\u1BC8\x07" +
		"\u0337\x02\x02\u1BC8\u1BCA\x05\u0386\u01C4\x02\u1BC9\u1BC7\x03\x02\x02" +
		"\x02\u1BCA\u1BCD\x03\x02\x02\x02\u1BCB\u1BC9\x03\x02\x02\x02\u1BCB\u1BCC" +
		"\x03\x02\x02\x02\u1BCC\u1BCF\x03\x02\x02\x02\u1BCD\u1BCB\x03\x02\x02\x02" +
		"\u1BCE\u1BD0\x07\u0338\x02\x02\u1BCF\u1BCE\x03\x02\x02\x02\u1BCF\u1BD0" +
		"\x03\x02\x02\x02\u1BD0\u0249\x03\x02\x02\x02\u1BD1\u1BD4\x05\u024C\u0127" +
		"\x02\u1BD2\u1BD4\x05\u024E\u0128\x02\u1BD3\u1BD1\x03\x02\x02\x02\u1BD3" +
		"\u1BD2\x03\x02\x02\x02\u1BD4\u024B\x03\x02\x02\x02\u1BD5\u1BD6\x07h\x02" +
		"\x02\u1BD6\u1BD9\x07\u0163\x02\x02\u1BD7\u1BD8\x07\x9A\x02\x02\u1BD8\u1BDA" +
		"\x07x\x02\x02\u1BD9\u1BD7\x03\x02\x02\x02\u1BD9\u1BDA\x03\x02\x02\x02" +
		"\u1BDA\u1BDB\x03\x02\x02\x02\u1BDB\u1BE0\x05\u0384\u01C3\x02\u1BDC\u1BDD" +
		"\x07\u0337\x02\x02\u1BDD\u1BDF\x05\u0384\u01C3\x02\u1BDE\u1BDC\x03\x02" +
		"\x02\x02\u1BDF\u1BE2\x03\x02\x02\x02\u1BE0\u1BDE\x03\x02\x02\x02\u1BE0" +
		"\u1BE1\x03\x02\x02\x02\u1BE1\u1BE4\x03\x02\x02\x02\u1BE2\u1BE0\x03\x02" +
		"\x02\x02\u1BE3\u1BE5\x07\u0338\x02\x02\u1BE4\u1BE3\x03\x02\x02\x02\u1BE4" +
		"\u1BE5\x03\x02\x02\x02\u1BE5\u024D\x03\x02\x02\x02\u1BE6\u1BE7\x07h\x02" +
		"\x02\u1BE7\u1BEA\x07\u0163\x02\x02\u1BE8\u1BE9\x07\x9A\x02\x02\u1BE9\u1BEB" +
		"\x07x\x02\x02\u1BEA\u1BE8\x03\x02\x02\x02\u1BEA\u1BEB\x03\x02\x02\x02" +
		"\u1BEB\u1BEC\x03\x02\x02\x02\u1BEC\u1BF1\x05\u0384\u01C3\x02\u1BED\u1BEE" +
		"\x07\u0337\x02\x02\u1BEE\u1BF0\x05\u0384\u01C3\x02\u1BEF\u1BED\x03\x02" +
		"\x02\x02\u1BF0\u1BF3\x03\x02\x02\x02\u1BF1\u1BEF\x03\x02\x02\x02\u1BF1" +
		"\u1BF2\x03\x02\x02\x02\u1BF2\u1BF4\x03\x02\x02\x02\u1BF3\u1BF1\x03\x02" +
		"\x02\x02\u1BF4\u1BF8\x07\xE5\x02\x02\u1BF5\u1BF9\x07U\x02\x02\u1BF6\u1BF7" +
		"\x07\x06\x02\x02\u1BF7\u1BF9\x07\u0137\x02\x02\u1BF8\u1BF5\x03\x02\x02" +
		"\x02\u1BF8\u1BF6\x03\x02\x02\x02\u1BF9\u1BFB\x03\x02\x02\x02\u1BFA\u1BFC" +
		"\x07\u0338\x02\x02\u1BFB\u1BFA\x03\x02\x02\x02\u1BFB\u1BFC\x03\x02\x02" +
		"\x02\u1BFC\u024F\x03\x02\x02\x02\u1BFD\u1BFE\x07h\x02\x02\u1BFE\u1C01" +
		"\x07\x8E\x02\x02\u1BFF\u1C00\x07\x9A\x02\x02\u1C00\u1C02\x07x\x02\x02" +
		"\u1C01\u1BFF\x03\x02\x02\x02\u1C01\u1C02\x03\x02\x02\x02\u1C02\u1C03\x03" +
		"\x02\x02\x02\u1C03\u1C08\x05\u0386\u01C4\x02\u1C04\u1C05\x07\u0337\x02" +
		"\x02\u1C05\u1C07\x05\u0386\u01C4\x02\u1C06\u1C04\x03\x02\x02\x02\u1C07" +
		"\u1C0A\x03\x02\x02\x02\u1C08\u1C06\x03\x02\x02\x02\u1C08\u1C09\x03\x02" +
		"\x02\x02\u1C09\u1C0C\x03\x02\x02\x02\u1C0A\u1C08\x03\x02\x02\x02\u1C0B" +
		"\u1C0D\x07\u0338\x02\x02\u1C0C\u1C0B\x03\x02\x02\x02\u1C0C\u1C0D\x03\x02" +
		"\x02\x02\u1C0D\u0251\x03\x02\x02\x02\u1C0E\u1C0F\x07h\x02\x02\u1C0F\u1C19" +
		"\x07\u014A\x02\x02\u1C10\u1C12\x07\u0337\x02\x02\u1C11\u1C10\x03\x02\x02" +
		"\x02\u1C11\u1C12\x03\x02\x02\x02\u1C12\u1C16\x03\x02\x02\x02\u1C13\u1C14" +
		"\x05\u0382\u01C2\x02\u1C14\u1C15\x07\u0330\x02\x02\u1C15\u1C17\x03\x02" +
		"\x02\x02\u1C16\u1C13\x03\x02\x02\x02\u1C16\u1C17\x03\x02\x02\x02\u1C17" +
		"\u1C18\x03\x02\x02\x02\u1C18\u1C1A\x05\u03B6\u01DC\x02\u1C19\u1C11\x03" +
		"\x02\x02\x02\u1C1A\u1C1B\x03\x02\x02\x02\u1C1B\u1C19\x03\x02\x02\x02\u1C1B" +
		"\u1C1C\x03\x02\x02\x02\u1C1C\u1C1D\x03\x02\x02\x02\u1C1D\u1C1E\x07\u0338" +
		"\x02\x02\u1C1E\u0253\x03\x02\x02\x02\u1C1F\u1C20\x07h\x02\x02\u1C20\u1C23" +
		"\x07\u0156\x02\x02\u1C21\u1C22\x07\x9A\x02\x02\u1C22\u1C24\x07x\x02\x02" +
		"\u1C23\u1C21\x03\x02\x02\x02\u1C23\u1C24\x03\x02\x02\x02\u1C24\u1C25\x03" +
		"\x02\x02\x02\u1C25\u1C27\x05\u0382\u01C2\x02\u1C26\u1C28\x07\u0338\x02" +
		"\x02\u1C27\u1C26\x03\x02\x02\x02\u1C27\u1C28\x03\x02\x02\x02\u1C28\u0255" +
		"\x03\x02\x02\x02\u1C29\u1C2A\x07h\x02\x02\u1C2A\u1C2D\x07\u0175\x02\x02" +
		"\u1C2B\u1C2C\x07\x9A\x02\x02\u1C2C\u1C2E\x07x\x02\x02\u1C2D\u1C2B\x03" +
		"\x02\x02\x02\u1C2D\u1C2E\x03\x02\x02\x02\u1C2E\u1C2F\x03\x02\x02\x02\u1C2F" +
		"\u1C34\x05\u0384\u01C3\x02\u1C30\u1C31\x07\u0337\x02\x02\u1C31\u1C33\x05" +
		"\u0384\u01C3\x02\u1C32\u1C30\x03\x02\x02\x02\u1C33\u1C36\x03\x02\x02\x02" +
		"\u1C34\u1C32\x03\x02\x02\x02\u1C34\u1C35\x03\x02\x02\x02\u1C35\u1C38\x03" +
		"\x02\x02\x02\u1C36\u1C34\x03\x02\x02\x02\u1C37\u1C39\x07\u0338\x02\x02" +
		"\u1C38\u1C37\x03\x02\x02\x02\u1C38\u1C39\x03\x02\x02\x02\u1C39\u0257\x03" +
		"\x02\x02\x02\u1C3A\u1C3B\x07I\x02\x02\u1C3B\u1C3C\x07\u02FB\x02\x02\u1C3C" +
		"\u1C41\x05\u0384\u01C3\x02\u1C3D\u1C3E\x07\x8C\x02\x02\u1C3E\u1C3F\x05" +
		"\u03AE\u01D8\x02\u1C3F\u1C40\x05\u03B0\u01D9\x02\u1C40\u1C42\x03\x02\x02" +
		"\x02\u1C41\u1C3D\x03\x02\x02\x02\u1C41\u1C42\x03\x02\x02\x02\u1C42\u1C49" +
		"\x03\x02\x02\x02\u1C43\u1C44\x07\x10\x02\x02\u1C44\u1C45\x07\u0156\x02" +
		"\x02\u1C45\u1C46\x07\u0335\x02\x02\u1C46\u1C47\x05\u02AC\u0157\x02\u1C47" +
		"\u1C48\x07\u0336\x02\x02\u1C48\u1C4A\x03\x02\x02\x02\u1C49\u1C43\x03\x02" +
		"\x02\x02\u1C49\u1C4A\x03\x02\x02\x02\u1C4A\u0259\x03\x02\x02\x02\u1C4B" +
		"\u1C4C\x07h\x02\x02\u1C4C\u1C4F\x07\u02FB\x02\x02\u1C4D\u1C4E\x07\x9A" +
		"\x02\x02\u1C4E\u1C50\x07x\x02\x02\u1C4F\u1C4D\x03\x02\x02\x02\u1C4F\u1C50" +
		"\x03\x02\x02\x02\u1C50\u1C51\x03\x02\x02\x02\u1C51\u1C52\x05\u0384\u01C3" +
		"\x02\u1C52\u025B\x03\x02\x02\x02\u1C53\u1C56\x05\u025E\u0130\x02\u1C54" +
		"\u1C56\x05\u0260\u0131\x02\u1C55\u1C53\x03\x02\x02\x02\u1C55\u1C54\x03" +
		"\x02\x02\x02\u1C56\u025D\x03\x02\x02\x02\u1C57\u1C58\x07\xE9\x02\x02\u1C58" +
		"\u1C59\x07\u0335\x02\x02\u1C59\u1C5A\x05\u03B6\u01DC\x02\u1C5A\u1C5B\x07" +
		"\u0337\x02\x02\u1C5B\u1C5C\x07\u031F\x02\x02\u1C5C\u1C5D\x07\u0336\x02" +
		"\x02\u1C5D\u025F\x03\x02\x02\x02\u1C5E\u1C5F\x07\xE8\x02\x02\u1C5F\u1C60" +
		"\x07\u0335\x02\x02\u1C60\u1C61\x07\u031F\x02\x02\u1C61\u1C62\x07\u0337" +
		"\x02\x02\u1C62\u1C63\x07\u031F\x02\x02\u1C63\u1C64\x07\u0336\x02\x02\u1C64" +
		"\u1C66\x07\u0330\x02\x02\u1C65\u1C67\x05\u03B6\u01DC\x02\u1C66\u1C65\x03" +
		"\x02\x02\x02\u1C66\u1C67\x03\x02\x02\x02\u1C67\u1C68\x03\x02\x02\x02\u1C68" +
		"\u1C6A\x07\u0330\x02\x02\u1C69\u1C6B\x05\u03B6\u01DC\x02\u1C6A\u1C69\x03" +
		"\x02\x02\x02\u1C6A\u1C6B\x03\x02\x02\x02\u1C6B\u1C6C\x03\x02\x02\x02\u1C6C" +
		"\u1C6D\x07\u0330\x02\x02\u1C6D\u1C6E\x05\u03B6\u01DC\x02\u1C6E\u0261\x03" +
		"\x02\x02\x02\u1C6F\u1C70\x07Y\x02\x02\u1C70\u1C72\x07\u031A\x02\x02\u1C71" +
		"\u1C73\x07\x10\x02\x02\u1C72\u1C71\x03\x02\x02\x02\u1C72\u1C73\x03\x02" +
		"\x02\x02\u1C73\u1C74\x03\x02\x02\x02\u1C74\u1C76\x05\u02A6\u0154\x02\u1C75" +
		"\u1C77\x07\u0338\x02\x02\u1C76\u1C75\x03\x02\x02\x02\u1C76\u1C77\x03\x02" +
		"\x02\x02\u1C77\u1C9B\x03\x02\x02\x02\u1C78\u1C79\x07Y\x02\x02\u1C79\u1C7E" +
		"\x05\u02A4\u0153\x02\u1C7A\u1C7B\x07\u0337\x02\x02\u1C7B\u1C7D\x05\u02A4" +
		"\u0153\x02\u1C7C\u1C7A\x03\x02\x02\x02\u1C7D\u1C80\x03\x02\x02\x02\u1C7E" +
		"\u1C7C\x03\x02\x02\x02\u1C7E\u1C7F\x03\x02\x02\x02\u1C7F\u1C82\x03\x02" +
		"\x02\x02\u1C80\u1C7E\x03\x02\x02\x02\u1C81\u1C83\x07\u0338\x02\x02\u1C82" +
		"\u1C81\x03\x02\x02\x02\u1C82\u1C83\x03\x02\x02\x02\u1C83\u1C9B\x03\x02" +
		"\x02\x02\u1C84\u1C85\x07Y\x02\x02\u1C85\u1C87\x07\u031A\x02\x02\u1C86" +
		"\u1C88\x07\x10\x02\x02\u1C87\u1C86\x03\x02\x02\x02\u1C87\u1C88\x03\x02" +
		"\x02\x02\u1C88\u1C89\x03\x02\x02\x02\u1C89\u1C8B\x05\u02A8\u0155\x02\u1C8A" +
		"\u1C8C\x07\u0338\x02\x02\u1C8B\u1C8A\x03\x02\x02\x02\u1C8B\u1C8C\x03\x02" +
		"\x02\x02\u1C8C\u1C9B\x03\x02\x02\x02\u1C8D\u1C8E\x07\u017C\x02\x02\u1C8E" +
		"\u1C8F\x07\u0310\x02\x02\u1C8F\u1C90\x07\u0335\x02\x02\u1C90\u1C92\x07" +
		"\u031F\x02\x02\u1C91\u1C93\x07\u0337\x02\x02\u1C92\u1C91\x03\x02\x02\x02" +
		"\u1C92\u1C93\x03\x02\x02\x02\u1C93\u1C94\x03\x02\x02\x02\u1C94\u1C95\x07" +
		"\x10\x02\x02\u1C95\u1C96\x05\u03B6\u01DC\x02\u1C96\u1C98\x07\u0336\x02" +
		"\x02\u1C97\u1C99\x07\u0338\x02\x02\u1C98\u1C97\x03\x02\x02\x02\u1C98\u1C99" +
		"\x03\x02\x02\x02\u1C99\u1C9B\x03\x02\x02\x02\u1C9A\u1C6F\x03\x02\x02\x02" +
		"\u1C9A\u1C78\x03\x02\x02\x02\u1C9A\u1C84\x03\x02\x02\x02\u1C9A\u1C8D\x03" +
		"\x02\x02\x02\u1C9B\u0263\x03\x02\x02\x02\u1C9C\u1C9E\x073\x02\x02\u1C9D" +
		"\u1C9F\x07\u020F\x02\x02\u1C9E\u1C9D\x03\x02\x02\x02\u1C9E\u1C9F\x03\x02" +
		"\x02\x02\u1C9F\u1CA0\x03\x02\x02\x02\u1CA0\u1CA2\x05\u0390\u01C9\x02\u1CA1" +
		"\u1CA3\x07\u0338\x02\x02\u1CA2\u1CA1\x03\x02\x02\x02\u1CA2\u1CA3\x03\x02" +
		"\x02\x02\u1CA3\u1CBA\x03\x02\x02\x02\u1CA4\u1CA6\x07X\x02\x02\u1CA5\u1CA7" +
		"\x07\u020F\x02\x02\u1CA6\u1CA5\x03\x02\x02\x02\u1CA6\u1CA7\x03\x02\x02" +
		"\x02\u1CA7\u1CA9\x03\x02\x02\x02\u1CA8\u1CAA\x07P\x02\x02\u1CA9\u1CA8" +
		"\x03\x02\x02\x02\u1CA9\u1CAA\x03\x02\x02\x02\u1CAA\u1CAB\x03\x02\x02\x02" +
		"\u1CAB\u1CAD\x05\u0390\u01C9\x02\u1CAC\u1CAE\x07\u0338\x02\x02\u1CAD\u1CAC" +
		"\x03\x02\x02\x02\u1CAD\u1CAE\x03\x02\x02\x02\u1CAE\u1CBA\x03\x02\x02\x02" +
		"\u1CAF\u1CBA\x05\u02C0\u0161\x02\u1CB0\u1CBA\x05\u02C6\u0164\x02\u1CB1" +
		"\u1CB3\x07\xE7\x02\x02\u1CB2\u1CB4\x07\u020F\x02\x02\u1CB3\u1CB2\x03\x02" +
		"\x02\x02\u1CB3\u1CB4\x03\x02\x02\x02\u1CB4\u1CB5\x03\x02\x02\x02\u1CB5" +
		"\u1CB7\x05\u0390\u01C9\x02\u1CB6\u1CB8\x07\u0338\x02\x02\u1CB7\u1CB6\x03" +
		"\x02\x02\x02\u1CB7\u1CB8\x03\x02\x02\x02\u1CB8\u1CBA\x03\x02\x02\x02\u1CB9" +
		"\u1C9C\x03\x02\x02\x02\u1CB9\u1CA4\x03\x02\x02\x02\u1CB9\u1CAF\x03\x02" +
		"\x02\x02\u1CB9\u1CB0\x03\x02\x02\x02\u1CB9\u1CB1\x03\x02\x02\x02\u1CBA" +
		"\u0265\x03\x02\x02\x02\u1CBB\u1CBC\x07\x1A\x02\x02\u1CBC\u1CBD\x07U\x02" +
		"\x02\u1CBD\u1CCA\x05\u03B6\u01DC\x02\u1CBE\u1CC7\x07\u010C\x02\x02\u1CBF" +
		"\u1CC1\x07\u0337\x02\x02\u1CC0\u1CBF\x03\x02\x02\x02\u1CC0\u1CC1\x03\x02" +
		"\x02\x02\u1CC1\u1CC2\x03\x02\x02\x02\u1CC2\u1CC3\tQ\x02\x02\u1CC3\u1CC4" +
		"\x07\u0323\x02\x02\u1CC4\u1CC6\x07\u031F\x02\x02\u1CC5\u1CC0\x03\x02\x02" +
		"\x02\u1CC6\u1CC9\x03\x02\x02\x02\u1CC7\u1CC5\x03\x02\x02\x02\u1CC7\u1CC8" +
		"\x03\x02\x02\x02\u1CC8\u1CCB\x03\x02\x02\x02\u1CC9\u1CC7\x03\x02\x02\x02" +
		"\u1CCA\u1CBE\x03\x02\x02\x02\u1CCA\u1CCB\x03\x02\x02\x02\u1CCB\u1CD4\x03" +
		"\x02\x02\x02\u1CCC\u1CCE\x07\u0337\x02\x02\u1CCD\u1CCC\x03\x02\x02\x02" +
		"\u1CCD\u1CCE\x03\x02\x02\x02\u1CCE\u1CCF\x03\x02\x02\x02\u1CCF\u1CD0\t" +
		"Q\x02\x02\u1CD0\u1CD1\x07\u0323\x02\x02\u1CD1\u1CD3\x07\u031F\x02\x02" +
		"\u1CD2\u1CCD\x03\x02\x02\x02\u1CD3\u1CD6";
	private static readonly _serializedATNSegment15: string =
		"\x03\x02\x02\x02\u1CD4\u1CD2\x03\x02\x02\x02\u1CD4\u1CD5\x03\x02\x02\x02" +
		"\u1CD5\u1CEE\x03\x02\x02\x02\u1CD6\u1CD4\x03\x02\x02\x02\u1CD7\u1CDC\x07" +
		"\u015D\x02\x02\u1CD8\u1CDA\x07\u0337\x02\x02\u1CD9\u1CD8\x03\x02\x02\x02" +
		"\u1CD9\u1CDA\x03\x02\x02\x02\u1CDA\u1CDB\x03\x02\x02\x02\u1CDB\u1CDD\x05" +
		"\u03B6\u01DC\x02\u1CDC\u1CD9\x03\x02\x02\x02\u1CDD\u1CDE\x03\x02\x02\x02" +
		"\u1CDE\u1CDC\x03\x02\x02\x02\u1CDE\u1CDF\x03\x02\x02\x02\u1CDF\u1CEF\x03" +
		"\x02\x02\x02\u1CE0\u1CEA\x07\u015D\x02\x02\u1CE1\u1CE3\x07\u0337\x02\x02" +
		"\u1CE2\u1CE1\x03\x02\x02\x02\u1CE2\u1CE3\x03\x02\x02\x02\u1CE3\u1CE4\x03" +
		"\x02\x02\x02\u1CE4\u1CE5\tR\x02\x02\u1CE5\u1CE8\x07\u0323\x02\x02\u1CE6" +
		"\u1CE9\x07\u031F\x02\x02\u1CE7\u1CE9\x05\u03B6\u01DC\x02\u1CE8\u1CE6\x03" +
		"\x02\x02\x02\u1CE8\u1CE7\x03\x02\x02\x02\u1CE9\u1CEB\x03\x02\x02\x02\u1CEA" +
		"\u1CE2\x03\x02\x02\x02\u1CEB\u1CEC\x03\x02\x02\x02\u1CEC\u1CEA\x03\x02" +
		"\x02\x02\u1CEC\u1CED\x03\x02\x02\x02\u1CED\u1CEF\x03\x02\x02\x02\u1CEE" +
		"\u1CD7\x03\x02\x02\x02\u1CEE\u1CE0\x03\x02\x02\x02\u1CEF\u1D11\x03\x02" +
		"\x02\x02\u1CF0\u1CF1\x07\xCD\x02\x02\u1CF1\u1CF6\x07\u015D\x02\x02\u1CF2" +
		"\u1CF4\x07\u0337\x02\x02\u1CF3\u1CF2\x03\x02\x02\x02\u1CF3\u1CF4\x03\x02" +
		"\x02\x02\u1CF4\u1CF5\x03\x02\x02\x02\u1CF5\u1CF7\x05\u03B6\u01DC\x02\u1CF6" +
		"\u1CF3\x03\x02\x02\x02\u1CF7\u1CF8\x03\x02\x02\x02\u1CF8\u1CF6\x03\x02" +
		"\x02\x02\u1CF8\u1CF9\x03\x02\x02\x02\u1CF9\u1CFB\x03\x02\x02\x02\u1CFA" +
		"\u1CF0\x03\x02\x02\x02\u1CFB\u1CFC\x03\x02\x02\x02\u1CFC\u1CFA\x03\x02" +
		"\x02\x02\u1CFC\u1CFD\x03\x02\x02\x02\u1CFD\u1D12\x03\x02\x02\x02\u1CFE" +
		"\u1CFF\x07\xCD\x02\x02\u1CFF\u1D09\x07\u015D\x02\x02\u1D00\u1D02\x07\u0337" +
		"\x02\x02\u1D01\u1D00\x03\x02\x02\x02\u1D01\u1D02\x03\x02\x02\x02\u1D02" +
		"\u1D03\x03\x02\x02\x02\u1D03\u1D04\tR\x02\x02\u1D04\u1D07\x07\u0323\x02" +
		"\x02\u1D05\u1D08\x07\u031F\x02\x02\u1D06\u1D08\x05\u03B6\u01DC\x02\u1D07" +
		"\u1D05\x03\x02\x02\x02\u1D07\u1D06\x03\x02\x02\x02\u1D08\u1D0A\x03\x02" +
		"\x02\x02\u1D09\u1D01\x03\x02\x02\x02\u1D0A\u1D0B\x03\x02\x02\x02\u1D0B" +
		"\u1D09\x03\x02\x02\x02\u1D0B\u1D0C\x03\x02\x02\x02\u1D0C\u1D0E\x03\x02" +
		"\x02\x02\u1D0D\u1CFE\x03\x02\x02\x02\u1D0E\u1D0F\x03\x02\x02\x02\u1D0F" +
		"\u1D0D\x03\x02\x02\x02\u1D0F\u1D10\x03\x02\x02\x02\u1D10\u1D12\x03\x02" +
		"\x02\x02\u1D11\u1CFA\x03\x02\x02\x02\u1D11\u1D0D\x03\x02\x02\x02\u1D11" +
		"\u1D12\x03\x02\x02\x02\u1D12\u1DB3\x03\x02\x02\x02\u1D13\u1DB0\x07\u017C" +
		"\x02\x02\u1D14\u1D16\x07\u0337\x02\x02\u1D15\u1D14\x03\x02\x02\x02\u1D15" +
		"\u1D16\x03\x02\x02\x02\u1D16\u1D17\x03\x02\x02\x02\u1D17\u1DAF\x07a\x02" +
		"\x02\u1D18\u1D1A\x07\u0337\x02\x02\u1D19\u1D18\x03\x02\x02\x02\u1D19\u1D1A" +
		"\x03\x02\x02\x02\u1D1A\u1D1B\x03\x02\x02\x02\u1D1B\u1DAF\x07H\x02\x02" +
		"\u1D1C\u1D1E\x07\u0337\x02\x02\u1D1D\u1D1C\x03\x02\x02\x02\u1D1D\u1D1E" +
		"\x03\x02\x02\x02\u1D1E\u1D1F\x03\x02\x02\x02\u1D1F\u1DAF\tS\x02\x02\u1D20" +
		"\u1D22\x07\u0337\x02\x02\u1D21\u1D20\x03\x02\x02\x02\u1D21\u1D22\x03\x02" +
		"\x02\x02\u1D22\u1D23\x03\x02\x02\x02\u1D23\u1D24\x07\u01DD\x02\x02\u1D24" +
		"\u1D27\x07\u0323\x02\x02\u1D25\u1D28\x07\u031F\x02\x02\u1D26\u1D28\x05" +
		"\u03B6\u01DC\x02\u1D27\u1D25\x03\x02\x02\x02\u1D27\u1D26\x03\x02\x02\x02" +
		"\u1D28\u1DAF\x03\x02\x02\x02\u1D29\u1D2B\x07\u0337\x02\x02\u1D2A\u1D29" +
		"\x03\x02\x02\x02\u1D2A\u1D2B\x03\x02\x02\x02\u1D2B\u1D2C\x03\x02\x02\x02" +
		"\u1D2C\u1D2D\x07\u025E\x02\x02\u1D2D\u1D2E\x07\u0323\x02\x02\u1D2E\u1DAF" +
		"\x05\u03B6\u01DC\x02\u1D2F\u1D31\x07\u0337\x02\x02\u1D30\u1D2F\x03\x02" +
		"\x02\x02\u1D30\u1D31\x03\x02\x02\x02\u1D31\u1D32\x03\x02\x02\x02\u1D32" +
		"\u1DAF\x07\u01C7\x02\x02\u1D33\u1D35\x07\u0337\x02\x02\u1D34\u1D33\x03" +
		"\x02\x02\x02\u1D34\u1D35\x03\x02\x02\x02\u1D35\u1D36\x03\x02\x02\x02\u1D36" +
		"\u1DAF\x07\x85\x02\x02\u1D37\u1D39\x07\u0337\x02\x02\u1D38\u1D37\x03\x02" +
		"\x02\x02\u1D38\u1D39\x03\x02\x02\x02\u1D39\u1D46\x03\x02\x02\x02\u1D3A" +
		"\u1D3B\x07y\x02\x02\u1D3B\u1D3E\x07\u0323\x02\x02\u1D3C\u1D3F\x07\u031F" +
		"\x02\x02\u1D3D\u1D3F\x05\u03B6\u01DC\x02\u1D3E\u1D3C\x03\x02\x02\x02\u1D3E" +
		"\u1D3D\x03\x02\x02\x02\u1D3F\u1D47\x03\x02\x02\x02\u1D40\u1D41\x07\u0119" +
		"\x02\x02\u1D41\u1D44\x07\u0323\x02\x02\u1D42\u1D45\x07\u031B\x02\x02\u1D43" +
		"\u1D45\x05\u03B6\u01DC\x02\u1D44\u1D42\x03\x02\x02\x02\u1D44\u1D43\x03" +
		"\x02\x02\x02\u1D45\u1D47\x03\x02\x02\x02\u1D46\u1D3A\x03\x02\x02\x02\u1D46" +
		"\u1D40\x03\x02\x02\x02\u1D47\u1DAF\x03\x02\x02\x02\u1D48\u1D4A\x07\u0337" +
		"\x02\x02\u1D49\u1D48\x03\x02\x02\x02\u1D49\u1D4A\x03\x02\x02\x02\u1D4A" +
		"\u1D4B\x03\x02\x02\x02\u1D4B\u1DAF\tT\x02\x02\u1D4C\u1D4E\x07\u0337\x02" +
		"\x02\u1D4D\u1D4C\x03\x02\x02\x02\u1D4D\u1D4E\x03\x02\x02\x02\u1D4E\u1D4F" +
		"\x03\x02\x02\x02\u1D4F\u1DAF\tU\x02\x02\u1D50\u1D52\x07\u0337\x02\x02" +
		"\u1D51\u1D50\x03\x02\x02\x02\u1D51\u1D52\x03\x02\x02\x02\u1D52\u1D53\x03" +
		"\x02\x02\x02\u1D53\u1DAF\tV\x02\x02\u1D54\u1D56\x07\u0337\x02\x02\u1D55" +
		"\u1D54\x03\x02\x02\x02\u1D55\u1D56\x03\x02\x02\x02\u1D56\u1D57\x03\x02" +
		"\x02\x02\u1D57\u1D58\x07\xC5\x02\x02\u1D58\u1D5B\x07\u0323\x02\x02\u1D59" +
		"\u1D5C\x07\u031F\x02\x02\u1D5A\u1D5C\x05\u03B6\u01DC\x02\u1D5B\u1D59\x03" +
		"\x02\x02\x02\u1D5B\u1D5A\x03\x02\x02\x02\u1D5C\u1DAF\x03\x02\x02\x02\u1D5D" +
		"\u1D5F\x07\u0337\x02\x02\u1D5E\u1D5D\x03\x02\x02\x02\u1D5E\u1D5F\x03\x02" +
		"\x02\x02\u1D5F\u1D60\x03\x02\x02\x02\u1D60\u1D61\x07\xC6\x02\x02\u1D61" +
		"\u1D62\x07\u0323\x02\x02\u1D62\u1DAF\x07\u031F\x02\x02\u1D63\u1D65\x07" +
		"\u0337\x02\x02\u1D64\u1D63\x03\x02\x02\x02\u1D64\u1D65\x03\x02\x02\x02" +
		"\u1D65\u1D66\x03\x02\x02\x02\u1D66\u1D67\x07\x1F\x02\x02\u1D67\u1D6A\x07" +
		"\u0323\x02\x02\u1D68\u1D6B\x07\u031B\x02\x02\u1D69\u1D6B\x05\u03B6\u01DC" +
		"\x02\u1D6A\u1D68\x03\x02\x02\x02\u1D6A\u1D69\x03\x02\x02\x02\u1D6B\u1DAF" +
		"\x03\x02\x02\x02\u1D6C\u1D6E\x07\u0337\x02\x02\u1D6D\u1D6C\x03\x02\x02" +
		"\x02\u1D6D\u1D6E\x03\x02\x02\x02\u1D6E\u1D6F\x03\x02\x02\x02\u1D6F\u1D70" +
		"\x07$\x02\x02\u1D70\u1D73\x07\u0323\x02\x02\u1D71\u1D74\x07\u031B\x02" +
		"\x02\u1D72\u1D74\x05\u03B6\u01DC\x02\u1D73\u1D71\x03\x02\x02\x02\u1D73" +
		"\u1D72\x03\x02\x02\x02\u1D74\u1DAF\x03\x02\x02\x02\u1D75\u1D77\x07\u0337" +
		"\x02\x02\u1D76\u1D75\x03\x02\x02\x02\u1D76\u1D77\x03\x02\x02\x02\u1D77" +
		"\u1D78\x03\x02\x02\x02\u1D78\u1D79\x07\xBF\x02\x02\u1D79\u1D7C\x07\u0323" +
		"\x02\x02\u1D7A\u1D7D\x07\u031B\x02\x02\u1D7B\u1D7D\x05\u03B6\u01DC\x02" +
		"\u1D7C\u1D7A\x03\x02\x02\x02\u1D7C\u1D7B\x03\x02\x02\x02\u1D7D\u1DAF\x03" +
		"\x02\x02\x02\u1D7E\u1D80\x07\u0337\x02\x02\u1D7F\u1D7E\x03\x02\x02\x02" +
		"\u1D7F\u1D80\x03\x02\x02\x02\u1D80\u1D81\x03\x02\x02\x02\u1D81\u1DAF\t" +
		"W\x02\x02\u1D82\u1D84\x07\u0337\x02\x02\u1D83\u1D82\x03\x02\x02\x02\u1D83" +
		"\u1D84\x03\x02\x02\x02\u1D84\u1D85\x03\x02\x02\x02\u1D85\u1DAF\tX\x02" +
		"\x02\u1D86\u1D88\x07\u0337\x02\x02\u1D87\u1D86\x03\x02\x02\x02\u1D87\u1D88" +
		"\x03\x02\x02\x02\u1D88\u1D89\x03\x02\x02\x02\u1D89\u1DAF\x07\u0115\x02" +
		"\x02\u1D8A\u1D8C\x07\u0337\x02\x02\u1D8B\u1D8A\x03\x02\x02\x02\u1D8B\u1D8C" +
		"\x03\x02\x02\x02\u1D8C\u1D8D\x03\x02\x02\x02\u1D8D\u1D90\x07\u014C\x02" +
		"\x02\u1D8E\u1D8F\x07\u0323\x02\x02\u1D8F\u1D91\x07\u031B\x02\x02\u1D90" +
		"\u1D8E\x03\x02\x02\x02\u1D90\u1D91\x03\x02\x02\x02\u1D91\u1DAF\x03\x02" +
		"\x02\x02\u1D92\u1D94\x07\u0337\x02\x02\u1D93\u1D92\x03\x02\x02\x02\u1D93" +
		"\u1D94\x03\x02\x02\x02\u1D94\u1D95\x03\x02\x02\x02\u1D95\u1DAF\tY\x02" +
		"\x02\u1D96\u1D98\x07\u0337\x02\x02\u1D97\u1D96\x03\x02\x02\x02\u1D97\u1D98" +
		"\x03\x02\x02\x02\u1D98\u1D99\x03\x02\x02\x02\u1D99\u1DAF\tZ\x02\x02\u1D9A" +
		"\u1D9C\x07\u0337\x02\x02\u1D9B\u1D9A\x03\x02\x02\x02\u1D9B\u1D9C\x03\x02" +
		"\x02\x02\u1D9C\u1D9D\x03\x02\x02\x02\u1D9D\u1D9E\x07\u01EE\x02\x02\u1D9E" +
		"\u1D9F\x07\u0335\x02\x02\u1D9F\u1DA0\x07\u018D\x02\x02\u1DA0\u1DA1\x07" +
		"\u0323\x02\x02\u1DA1\u1DA2\t[\x02\x02\u1DA2\u1DA3\x07\u0337\x02\x02\u1DA3" +
		"\u1DA4\x07\u0137\x02\x02\u1DA4\u1DA5\x07+\x02\x02\u1DA5\u1DAC\x07\u0323" +
		"\x02\x02\u1DA6\u1DAD\x05\u03B6\u01DC\x02\u1DA7\u1DA8\x07\u0137\x02\x02" +
		"\u1DA8\u1DA9\x07\x12\x02\x02\u1DA9\u1DAA\x07\xAC\x02\x02\u1DAA\u1DAB\x07" +
		"\u0323\x02\x02\u1DAB\u1DAD\x05\u03B6\u01DC\x02\u1DAC\u1DA6\x03\x02\x02" +
		"\x02\u1DAC\u1DA7\x03\x02\x02\x02\u1DAD\u1DAF\x03\x02\x02\x02\u1DAE\u1D15" +
		"\x03\x02\x02\x02\u1DAE\u1D19\x03\x02\x02\x02\u1DAE\u1D1D\x03\x02\x02\x02" +
		"\u1DAE\u1D21\x03\x02\x02\x02\u1DAE\u1D2A\x03\x02\x02\x02\u1DAE\u1D30\x03" +
		"\x02\x02\x02\u1DAE\u1D34\x03\x02\x02\x02\u1DAE\u1D38\x03\x02\x02\x02\u1DAE" +
		"\u1D49\x03\x02\x02\x02\u1DAE\u1D4D\x03\x02\x02\x02\u1DAE\u1D51\x03\x02" +
		"\x02\x02\u1DAE\u1D55\x03\x02\x02\x02\u1DAE\u1D5E\x03\x02\x02\x02\u1DAE" +
		"\u1D64\x03\x02\x02\x02\u1DAE\u1D6D\x03\x02\x02\x02\u1DAE\u1D76\x03\x02" +
		"\x02\x02\u1DAE\u1D7F\x03\x02\x02\x02\u1DAE\u1D83\x03\x02\x02\x02\u1DAE" +
		"\u1D87\x03\x02\x02\x02\u1DAE\u1D8B\x03\x02\x02\x02\u1DAE\u1D93\x03\x02" +
		"\x02\x02\u1DAE\u1D97\x03\x02\x02\x02\u1DAE\u1D9B\x03\x02\x02\x02\u1DAF" +
		"\u1DB2\x03\x02\x02\x02\u1DB0\u1DAE\x03\x02\x02\x02\u1DB0\u1DB1\x03\x02" +
		"\x02\x02\u1DB1\u1DB4\x03\x02\x02\x02\u1DB2\u1DB0\x03\x02\x02\x02\u1DB3" +
		"\u1D13\x03\x02\x02\x02\u1DB3\u1DB4\x03\x02\x02\x02\u1DB4\u0267\x03\x02" +
		"\x02\x02\u1DB5\u1DB6\x07\x1A\x02\x02\u1DB6\u1DB7\x07\xBB\x02\x02\u1DB7" +
		"\u1DCF\x05\u03B6\u01DC\x02\u1DB8\u1DBD\x07\u015D\x02\x02\u1DB9\u1DBB\x07" +
		"\u0337\x02\x02\u1DBA\u1DB9\x03\x02\x02\x02\u1DBA\u1DBB\x03\x02\x02\x02" +
		"\u1DBB\u1DBC\x03\x02\x02\x02\u1DBC\u1DBE\x05\u03B6\u01DC\x02\u1DBD\u1DBA" +
		"\x03\x02\x02\x02\u1DBE\u1DBF\x03\x02\x02\x02\u1DBF\u1DBD\x03\x02\x02\x02" +
		"\u1DBF\u1DC0\x03\x02\x02\x02\u1DC0\u1DD0\x03\x02\x02\x02\u1DC1\u1DCB\x07" +
		"\u015D\x02\x02\u1DC2\u1DC4\x07\u0337\x02\x02\u1DC3\u1DC2\x03\x02\x02\x02" +
		"\u1DC3\u1DC4\x03\x02\x02\x02\u1DC4\u1DC5\x03\x02\x02\x02\u1DC5\u1DC6\t" +
		"R\x02\x02\u1DC6\u1DC9\x07\u0323\x02\x02\u1DC7\u1DCA\x07\u031F\x02\x02" +
		"\u1DC8\u1DCA\x05\u03B6\u01DC\x02\u1DC9\u1DC7\x03\x02\x02\x02\u1DC9\u1DC8" +
		"\x03\x02\x02\x02\u1DCA\u1DCC\x03\x02\x02\x02\u1DCB\u1DC3\x03\x02\x02\x02" +
		"\u1DCC\u1DCD\x03\x02\x02\x02\u1DCD\u1DCB\x03\x02\x02\x02\u1DCD\u1DCE\x03" +
		"\x02\x02\x02\u1DCE\u1DD0\x03\x02\x02\x02\u1DCF\u1DB8\x03\x02\x02\x02\u1DCF" +
		"\u1DC1\x03\x02\x02\x02\u1DD0\u1DF2\x03\x02\x02\x02\u1DD1\u1DD2\x07\xCD" +
		"\x02\x02\u1DD2\u1DD7\x07\u015D\x02\x02\u1DD3\u1DD5\x07\u0337\x02\x02\u1DD4" +
		"\u1DD3\x03\x02\x02\x02\u1DD4\u1DD5\x03\x02\x02\x02\u1DD5\u1DD6\x03\x02" +
		"\x02\x02\u1DD6\u1DD8\x05\u03B6\u01DC\x02\u1DD7\u1DD4\x03\x02\x02\x02\u1DD8" +
		"\u1DD9\x03\x02\x02\x02\u1DD9\u1DD7\x03\x02\x02\x02\u1DD9\u1DDA\x03\x02" +
		"\x02\x02\u1DDA\u1DDC\x03\x02\x02\x02\u1DDB\u1DD1\x03\x02\x02\x02\u1DDC" +
		"\u1DDD\x03\x02\x02\x02\u1DDD\u1DDB\x03\x02\x02\x02\u1DDD\u1DDE\x03\x02" +
		"\x02\x02\u1DDE\u1DF3\x03\x02\x02\x02\u1DDF\u1DE0\x07\xCD\x02\x02\u1DE0" +
		"\u1DEA\x07\u015D\x02\x02\u1DE1\u1DE3\x07\u0337\x02\x02\u1DE2\u1DE1\x03" +
		"\x02\x02\x02\u1DE2\u1DE3\x03\x02\x02\x02\u1DE3\u1DE4\x03\x02\x02\x02\u1DE4" +
		"\u1DE5\tR\x02\x02\u1DE5\u1DE8\x07\u0323\x02\x02\u1DE6\u1DE9\x07\u031F" +
		"\x02\x02\u1DE7\u1DE9\x05\u03B6\u01DC\x02\u1DE8\u1DE6\x03\x02\x02\x02\u1DE8" +
		"\u1DE7\x03\x02\x02\x02\u1DE9\u1DEB\x03\x02\x02\x02\u1DEA\u1DE2\x03\x02" +
		"\x02\x02\u1DEB\u1DEC\x03\x02\x02\x02\u1DEC\u1DEA\x03\x02\x02\x02\u1DEC" +
		"\u1DED\x03\x02\x02\x02\u1DED\u1DEF\x03\x02\x02\x02\u1DEE\u1DDF\x03\x02" +
		"\x02\x02\u1DEF\u1DF0\x03\x02\x02\x02\u1DF0\u1DEE\x03\x02\x02\x02\u1DF0" +
		"\u1DF1\x03\x02\x02\x02\u1DF1\u1DF3\x03\x02\x02\x02\u1DF2\u1DDB\x03\x02" +
		"\x02\x02\u1DF2\u1DEE\x03\x02\x02\x02\u1DF2\u1DF3\x03\x02\x02\x02\u1DF3" +
		"\u1EA1\x03\x02\x02\x02\u1DF4\u1E9E\x07\u017C\x02\x02\u1DF5\u1DF7\x07\u0337" +
		"\x02\x02\u1DF6\u1DF5\x03\x02\x02\x02\u1DF6\u1DF7\x03\x02\x02\x02\u1DF7" +
		"\u1DF8\x03\x02\x02\x02\u1DF8\u1E9D\x07a\x02\x02\u1DF9\u1DFB\x07\u0337" +
		"\x02\x02\u1DFA\u1DF9\x03\x02\x02\x02\u1DFA\u1DFB\x03\x02\x02\x02\u1DFB" +
		"\u1DFC\x03\x02\x02\x02\u1DFC\u1E9D\x07H\x02\x02\u1DFD\u1DFF\x07\u0337" +
		"\x02\x02\u1DFE\u1DFD\x03\x02\x02\x02\u1DFE\u1DFF\x03\x02\x02\x02\u1DFF" +
		"\u1E00\x03\x02\x02\x02\u1E00\u1E9D\tS\x02\x02\u1E01\u1E03\x07\u0337\x02" +
		"\x02\u1E02\u1E01\x03\x02\x02\x02\u1E02\u1E03\x03\x02\x02\x02\u1E03\u1E04" +
		"\x03\x02\x02\x02\u1E04\u1E05\x07\u01DD\x02\x02\u1E05\u1E08\x07\u0323\x02" +
		"\x02\u1E06\u1E09\x07\u031F\x02\x02\u1E07\u1E09\x05\u03B6\u01DC\x02\u1E08" +
		"\u1E06\x03\x02\x02\x02\u1E08\u1E07\x03\x02\x02\x02\u1E09\u1E9D\x03\x02" +
		"\x02\x02\u1E0A\u1E0C\x07\u0337\x02\x02\u1E0B\u1E0A\x03\x02\x02\x02\u1E0B" +
		"\u1E0C\x03\x02\x02\x02\u1E0C\u1E0D\x03\x02\x02\x02\u1E0D\u1E0E\x07\u025E" +
		"\x02\x02\u1E0E\u1E0F\x07\u0323\x02\x02\u1E0F\u1E9D\x05\u03B6\u01DC\x02" +
		"\u1E10\u1E12\x07\u0337\x02\x02\u1E11\u1E10\x03\x02\x02\x02\u1E11\u1E12" +
		"\x03\x02\x02\x02\u1E12\u1E13\x03\x02\x02\x02\u1E13\u1E9D\x07\u01C7\x02" +
		"\x02\u1E14\u1E16\x07\u0337\x02\x02\u1E15\u1E14\x03\x02\x02\x02\u1E15\u1E16" +
		"\x03\x02\x02\x02\u1E16\u1E17\x03\x02\x02\x02\u1E17\u1E9D\x07\x85\x02\x02" +
		"\u1E18\u1E1A\x07\u0337\x02\x02\u1E19\u1E18\x03\x02\x02\x02\u1E19\u1E1A" +
		"\x03\x02\x02\x02\u1E1A\u1E27\x03\x02\x02\x02\u1E1B\u1E1C\x07y\x02\x02" +
		"\u1E1C\u1E1F\x07\u0323\x02\x02\u1E1D\u1E20\x07\u031F\x02\x02\u1E1E\u1E20" +
		"\x05\u03B6\u01DC\x02\u1E1F\u1E1D\x03\x02\x02\x02\u1E1F\u1E1E\x03\x02\x02" +
		"\x02\u1E20\u1E28\x03\x02\x02\x02\u1E21\u1E22\x07\u0119\x02\x02\u1E22\u1E25" +
		"\x07\u0323\x02\x02\u1E23\u1E26\x07\u031B\x02\x02\u1E24\u1E26\x05\u03B6" +
		"\u01DC\x02\u1E25\u1E23\x03\x02\x02\x02\u1E25\u1E24\x03\x02\x02\x02\u1E26" +
		"\u1E28\x03\x02\x02\x02\u1E27\u1E1B\x03\x02\x02\x02\u1E27\u1E21\x03\x02" +
		"\x02\x02\u1E28\u1E9D\x03\x02\x02\x02\u1E29\u1E2B\x07\u0337\x02\x02\u1E2A" +
		"\u1E29\x03\x02\x02\x02\u1E2A\u1E2B\x03\x02\x02\x02\u1E2B\u1E2C\x03\x02" +
		"\x02\x02\u1E2C\u1E9D\tT\x02\x02\u1E2D\u1E2F\x07\u0337\x02\x02\u1E2E\u1E2D" +
		"\x03\x02\x02\x02\u1E2E\u1E2F\x03\x02\x02\x02\u1E2F\u1E30\x03\x02\x02\x02" +
		"\u1E30\u1E9D\tU\x02\x02\u1E31\u1E33\x07\u0337\x02\x02\u1E32\u1E31\x03" +
		"\x02\x02\x02\u1E32\u1E33\x03\x02\x02\x02\u1E33\u1E34\x03\x02\x02\x02\u1E34" +
		"\u1E9D\tV\x02\x02\u1E35\u1E37\x07\u0337\x02\x02\u1E36\u1E35\x03\x02\x02" +
		"\x02\u1E36\u1E37\x03\x02\x02\x02\u1E37\u1E38\x03\x02\x02\x02\u1E38\u1E39" +
		"\x07\xC5\x02\x02\u1E39\u1E3C\x07\u0323\x02\x02\u1E3A\u1E3D\x07\u031F\x02" +
		"\x02\u1E3B\u1E3D\x05\u03B6\u01DC\x02\u1E3C\u1E3A\x03\x02\x02\x02\u1E3C" +
		"\u1E3B\x03\x02\x02\x02\u1E3D\u1E9D\x03\x02\x02\x02\u1E3E\u1E40\x07\u0337" +
		"\x02\x02\u1E3F\u1E3E\x03\x02\x02\x02\u1E3F\u1E40\x03\x02\x02\x02\u1E40" +
		"\u1E41\x03\x02\x02\x02\u1E41\u1E42\x07\xC6\x02\x02\u1E42\u1E43\x07\u0323" +
		"\x02\x02\u1E43\u1E9D\x07\u031F\x02\x02\u1E44\u1E46\x07\u0337\x02\x02\u1E45" +
		"\u1E44\x03\x02\x02\x02\u1E45\u1E46\x03\x02\x02\x02\u1E46\u1E47\x03\x02" +
		"\x02\x02\u1E47\u1E48\x07\x1F\x02\x02\u1E48\u1E4B\x07\u0323\x02\x02\u1E49" +
		"\u1E4C\x07\u031B\x02\x02\u1E4A\u1E4C\x05\u03B6\u01DC\x02\u1E4B\u1E49\x03" +
		"\x02\x02\x02\u1E4B\u1E4A\x03\x02\x02\x02\u1E4C\u1E9D\x03\x02\x02\x02\u1E4D" +
		"\u1E4F\x07\u0337\x02\x02\u1E4E\u1E4D\x03\x02\x02\x02\u1E4E\u1E4F\x03\x02" +
		"\x02\x02\u1E4F\u1E50\x03\x02\x02\x02\u1E50\u1E51\x07$\x02\x02\u1E51\u1E54" +
		"\x07\u0323\x02\x02\u1E52\u1E55\x07\u031B\x02\x02\u1E53\u1E55\x05\u03B6" +
		"\u01DC\x02\u1E54\u1E52\x03\x02\x02\x02\u1E54\u1E53\x03\x02\x02\x02\u1E55" +
		"\u1E9D\x03\x02\x02\x02\u1E56\u1E58\x07\u0337\x02\x02\u1E57\u1E56\x03\x02" +
		"\x02\x02\u1E57\u1E58\x03\x02\x02\x02\u1E58\u1E59\x03\x02\x02\x02\u1E59" +
		"\u1E5A\x07\xBF\x02\x02\u1E5A\u1E5D\x07\u0323\x02\x02\u1E5B\u1E5E\x07\u031B" +
		"\x02\x02\u1E5C\u1E5E\x05\u03B6\u01DC\x02\u1E5D\u1E5B\x03\x02\x02\x02\u1E5D" +
		"\u1E5C\x03\x02\x02\x02\u1E5E\u1E9D\x03\x02\x02\x02\u1E5F\u1E61\x07\u0337" +
		"\x02\x02\u1E60\u1E5F\x03\x02\x02\x02\u1E60\u1E61\x03\x02\x02\x02\u1E61" +
		"\u1E62\x03\x02\x02\x02\u1E62\u1E9D\tW\x02\x02\u1E63\u1E65\x07\u0337\x02" +
		"\x02\u1E64\u1E63\x03\x02\x02\x02\u1E64\u1E65\x03\x02\x02\x02\u1E65\u1E66" +
		"\x03\x02\x02\x02\u1E66\u1E9D\tX\x02\x02\u1E67\u1E69\x07\u0337\x02\x02" +
		"\u1E68\u1E67\x03\x02\x02\x02\u1E68\u1E69\x03\x02\x02\x02\u1E69\u1E6A\x03" +
		"\x02\x02\x02\u1E6A\u1E9D\x07\u0115\x02\x02\u1E6B\u1E6D\x07\u0337\x02\x02" +
		"\u1E6C\u1E6B\x03\x02\x02\x02\u1E6C\u1E6D\x03\x02\x02\x02\u1E6D\u1E6E\x03" +
		"\x02\x02\x02\u1E6E\u1E71\x07\u014C\x02\x02\u1E6F\u1E70\x07\u0323\x02\x02" +
		"\u1E70\u1E72\x07\u031B\x02\x02\u1E71\u1E6F\x03\x02\x02\x02\u1E71\u1E72" +
		"\x03\x02\x02\x02\u1E72\u1E9D\x03\x02\x02\x02\u1E73\u1E75\x07\u0337\x02" +
		"\x02\u1E74\u1E73\x03\x02\x02\x02\u1E74\u1E75\x03\x02\x02\x02\u1E75\u1E76" +
		"\x03\x02\x02\x02\u1E76\u1E9D\tY\x02\x02\u1E77\u1E79\x07\u0337\x02\x02" +
		"\u1E78\u1E77\x03\x02\x02\x02\u1E78\u1E79\x03\x02\x02\x02\u1E79\u1E7A\x03" +
		"\x02\x02\x02\u1E7A\u1E9D\tZ\x02\x02\u1E7B\u1E7D\x07\u0337\x02\x02\u1E7C" +
		"\u1E7B\x03\x02\x02\x02\u1E7C\u1E7D\x03\x02\x02\x02\u1E7D\u1E82\x03\x02" +
		"\x02\x02\u1E7E\u1E83\x07\u026C\x02\x02\u1E7F\u1E80\x07\u02DA\x02\x02\u1E80" +
		"\u1E81\x07\u0323\x02\x02\u1E81\u1E83\x07\u031F\x02\x02\u1E82\u1E7E\x03" +
		"\x02\x02\x02\u1E82\u1E7F\x03\x02\x02\x02\u1E83\u1E9D\x03\x02\x02\x02\u1E84" +
		"\u1E86\x07\u0337\x02\x02\u1E85\u1E84\x03\x02\x02\x02\u1E85\u1E86\x03\x02" +
		"\x02\x02\u1E86\u1E87\x03\x02\x02\x02\u1E87\u1E9D\x07\u0265\x02\x02\u1E88" +
		"\u1E8A\x07\u0337\x02\x02\u1E89\u1E88\x03\x02\x02\x02\u1E89\u1E8A\x03\x02" +
		"\x02\x02\u1E8A\u1E8B\x03\x02\x02\x02\u1E8B\u1E8C\x07\u01EE\x02\x02\u1E8C" +
		"\u1E8D\x07\u0335\x02\x02\u1E8D\u1E8E\x07\u018D\x02\x02\u1E8E\u1E8F\x07" +
		"\u0323\x02\x02\u1E8F\u1E90\t[\x02\x02\u1E90\u1E91\x07\u0337\x02\x02\u1E91" +
		"\u1E92\x07\u0137\x02\x02\u1E92\u1E93\x07+\x02\x02\u1E93\u1E9A\x07\u0323" +
		"\x02\x02\u1E94\u1E9B\x05\u03B6\u01DC\x02\u1E95\u1E96\x07\u0137\x02\x02" +
		"\u1E96\u1E97\x07\x12\x02\x02\u1E97\u1E98\x07\xAC\x02\x02\u1E98\u1E99\x07" +
		"\u0323\x02\x02\u1E99\u1E9B\x05\u03B6\u01DC\x02\u1E9A\u1E94\x03\x02\x02" +
		"\x02\u1E9A\u1E95\x03\x02\x02\x02\u1E9B\u1E9D\x03\x02\x02\x02\u1E9C\u1DF6" +
		"\x03\x02\x02\x02\u1E9C\u1DFA\x03\x02\x02\x02\u1E9C\u1DFE\x03\x02\x02\x02" +
		"\u1E9C\u1E02\x03\x02\x02\x02\u1E9C\u1E0B\x03\x02\x02\x02\u1E9C\u1E11\x03" +
		"\x02\x02\x02\u1E9C\u1E15\x03\x02\x02\x02\u1E9C\u1E19\x03\x02\x02\x02\u1E9C" +
		"\u1E2A\x03\x02\x02\x02\u1E9C\u1E2E\x03\x02\x02\x02\u1E9C\u1E32\x03\x02" +
		"\x02\x02\u1E9C\u1E36\x03\x02\x02\x02\u1E9C\u1E3F\x03\x02\x02\x02\u1E9C" +
		"\u1E45\x03\x02\x02\x02\u1E9C\u1E4E\x03\x02\x02\x02\u1E9C\u1E57\x03\x02" +
		"\x02\x02\u1E9C\u1E60\x03\x02\x02\x02\u1E9C\u1E64\x03\x02\x02\x02\u1E9C" +
		"\u1E68\x03\x02\x02\x02\u1E9C\u1E6C\x03\x02\x02\x02\u1E9C\u1E74\x03\x02" +
		"\x02\x02\u1E9C\u1E78\x03\x02\x02\x02\u1E9C\u1E7C\x03\x02\x02\x02\u1E9C" +
		"\u1E85\x03\x02\x02\x02\u1E9C\u1E89\x03\x02\x02\x02\u1E9D\u1EA0\x03\x02" +
		"\x02\x02\u1E9E\u1E9C\x03\x02\x02\x02\u1E9E\u1E9F\x03\x02\x02\x02\u1E9F" +
		"\u1EA2\x03\x02\x02\x02\u1EA0\u1E9E\x03\x02\x02\x02\u1EA1\u1DF4\x03\x02" +
		"\x02\x02\u1EA1\u1EA2\x03\x02\x02\x02\u1EA2\u0269\x03\x02\x02\x02\u1EA3" +
		"\u1EA4\x07\x1A\x02\x02\u1EA4\u1EA5\x07+\x02\x02\u1EA5\u1EA6\x05\u03B6" +
		"\u01DC\x02\u1EA6\u1EA7\x07\u015D\x02\x02\u1EA7\u1EA8\x07\x82\x02\x02\u1EA8" +
		"\u1EA9\x07\u0323\x02\x02\u1EA9\u1EC9\x07\u031F\x02\x02\u1EAA\u1EAB\x07" +
		"\u017C\x02\x02\u1EAB\u1EAC\x07\u028C\x02\x02\u1EAC\u1EAD\x07\xAC\x02\x02" +
		"\u1EAD\u1EC4\x07\u0335\x02\x02\u1EAE\u1EB0\x07\u0337\x02\x02\u1EAF\u1EAE" +
		"\x03\x02\x02\x02\u1EAF\u1EB0\x03\x02\x02\x02\u1EB0\u1EB1\x03\x02\x02\x02" +
		"\u1EB1\u1EB2\x07\x82\x02\x02\u1EB2\u1EB3\x07\u0323\x02\x02\u1EB3\u1EC5" +
		"\x07\u031F\x02\x02\u1EB4\u1EB6\x07\u0337\x02\x02\u1EB5\u1EB4\x03\x02\x02" +
		"\x02\u1EB5\u1EB6\x03\x02\x02\x02\u1EB6\u1EB7\x03\x02\x02\x02\u1EB7\u1EB8" +
		"\x07\u01EE\x02\x02\u1EB8\u1EB9\x07&\x02\x02\u1EB9\u1EBA\x07\xF4\x02\x02" +
		"\u1EBA\u1EBB\x07\u0323\x02\x02\u1EBB\u1EC5\x07\u031F\x02\x02\u1EBC\u1EBE" +
		"\x07\u0337\x02\x02\u1EBD\u1EBC\x03\x02\x02\x02\u1EBD\u1EBE\x03\x02\x02" +
		"\x02\u1EBE\u1EBF\x03\x02\x02\x02\u1EBF\u1EC0\x07\u01D3\x02\x02\u1EC0\u1EC1" +
		"\x07&\x02\x02\u1EC1\u1EC2\x07\xF4\x02\x02\u1EC2\u1EC3\x07\u0323\x02\x02" +
		"\u1EC3\u1EC5\x07\u031F\x02\x02\u1EC4\u1EAF\x03\x02\x02\x02\u1EC4\u1EB5" +
		"\x03\x02\x02\x02\u1EC4\u1EBD\x03\x02\x02\x02\u1EC5\u1EC6\x03\x02\x02\x02" +
		"\u1EC6\u1EC4\x03\x02\x02\x02\u1EC6\u1EC7\x03\x02\x02\x02\u1EC7\u1EC8\x03" +
		"\x02\x02\x02\u1EC8\u1ECA\x07\u0336\x02\x02\u1EC9\u1EAA\x03\x02\x02\x02" +
		"\u1EC9\u1ECA\x03\x02\x02\x02\u1ECA\u026B\x03\x02\x02\x02\u1ECB\u1ECC\x07" +
		"\x1A\x02\x02\u1ECC\u1ECD\x07\xBD\x02\x02\u1ECD\u1ECE\x07\xAC\x02\x02\u1ECE" +
		"\u1ECF\x07\u015D\x02\x02\u1ECF\u1ED0\x07\x82\x02\x02\u1ED0\u1ED1\x07\u0323" +
		"\x02\x02\u1ED1\u1ED2\x07\u031F\x02\x02\u1ED2\u1ED3\x07\u01EE\x02\x02\u1ED3" +
		"\u1ED4\x07&\x02\x02\u1ED4\u1ED5\x07\xF4\x02\x02\u1ED5\u1ED6\x07\u0323" +
		"\x02\x02\u1ED6\u1ED7\x07\u031F\x02\x02\u1ED7\u026D\x03\x02\x02\x02\u1ED8" +
		"\u1ED9\x07\x1A\x02\x02\u1ED9\u1EDA\x07\u0138\x02\x02\u1EDA\u1EDB\x07\xBD" +
		"\x02\x02\u1EDB\u1EDC\x07\xAC\x02\x02\u1EDC\u1EDD\x07\u015D\x02\x02\u1EDD" +
		"\u1EDE\x07\x82\x02\x02\u1EDE\u1EDF\x07\u0323\x02\x02\u1EDF\u1EE0\x07\u031F" +
		"\x02\x02\u1EE0\u1EE1\x07\u01EE\x02\x02\u1EE1\u1EE2\x07&\x02\x02\u1EE2" +
		"\u1EE3\x07\xF4\x02\x02\u1EE3\u1EE4\x07\u0323\x02\x02\u1EE4\u1EE5\x07\u031F" +
		"\x02\x02\u1EE5\u026F\x03\x02\x02\x02\u1EE6\u1EE7\x07w\x02\x02\u1EE7\u1EE8" +
		"\x05\u0272\u013A\x02\u1EE8\u0271\x03\x02\x02\x02\u1EE9\u1EEA\x07\u031A" +
		"\x02\x02\u1EEA\u1EEC\x07\u0323\x02\x02\u1EEB\u1EE9\x03\x02\x02\x02\u1EEB" +
		"\u1EEC\x03\x02\x02\x02\u1EEC\u1EEF\x03\x02\x02\x02\u1EED\u1EF0\x05\u0386" +
		"\u01C4\x02\u1EEE\u1EF0\x05\u02CC\u0167\x02\u1EEF\u1EED\x03\x02\x02\x02" +
		"\u1EEF\u1EEE\x03\x02\x02\x02\u1EF0\u1EF9\x03\x02\x02\x02\u1EF1\u1EF6\x05" +
		"\u0274\u013B\x02\u1EF2\u1EF3\x07\u0337\x02\x02\u1EF3\u1EF5\x05\u0274\u013B" +
		"\x02\u1EF4\u1EF2\x03\x02\x02\x02\u1EF5\u1EF8\x03\x02\x02\x02\u1EF6\u1EF4" +
		"\x03\x02\x02\x02\u1EF6\u1EF7\x03\x02\x02\x02\u1EF7\u1EFA\x03\x02\x02\x02" +
		"\u1EF8\u1EF6\x03\x02\x02\x02\u1EF9\u1EF1\x03\x02\x02\x02\u1EF9\u1EFA\x03" +
		"\x02\x02\x02\u1EFA\u1EFC\x03\x02\x02\x02\u1EFB\u1EFD\x07\u0338\x02\x02" +
		"\u1EFC\u1EFB\x03\x02\x02\x02\u1EFC\u1EFD\x03\x02\x02\x02\u1EFD\u1F14\x03" +
		"\x02\x02\x02\u1EFE\u1EFF\x07\u0335\x02\x02\u1EFF\u1F04\x05\u0276\u013C" +
		"\x02\u1F00\u1F01\x07\u033D\x02\x02\u1F01\u1F03\x05\u0276\u013C\x02\u1F02" +
		"\u1F00\x03\x02\x02\x02\u1F03\u1F06\x03\x02\x02\x02\u1F04\u1F02\x03\x02" +
		"\x02\x02\u1F04\u1F05\x03\x02\x02\x02\u1F05\u1F07\x03\x02\x02\x02\u1F06" +
		"\u1F04\x03\x02\x02\x02\u1F07\u1F0E\x07\u0336\x02\x02\u1F08\u1F0A\x07\x10" +
		"\x02\x02\u1F09\u1F08\x03\x02\x02\x02\u1F09\u1F0A\x03\x02\x02\x02\u1F0A" +
		"\u1F0B\x03\x02\x02\x02\u1F0B\u1F0C\t\\\x02\x02\u1F0C\u1F0D\x07\u0323\x02" +
		"\x02\u1F0D\u1F0F\x07\u031F\x02\x02\u1F0E\u1F09\x03\x02\x02\x02\u1F0E\u1F0F" +
		"\x03\x02\x02\x02\u1F0F\u1F11\x03\x02\x02\x02\u1F10\u1F12\x07\u0338\x02" +
		"\x02\u1F11\u1F10\x03\x02\x02\x02\u1F11\u1F12\x03\x02\x02\x02\u1F12\u1F14" +
		"\x03\x02\x02\x02\u1F13\u1EEB\x03\x02\x02\x02\u1F13\u1EFE\x03\x02\x02\x02" +
		"\u1F14\u0273\x03\x02\x02\x02\u1F15\u1F16\x07\u031A\x02\x02\u1F16\u1F18" +
		"\x07\u0323\x02\x02\u1F17\u1F15\x03\x02\x02\x02\u1F17\u1F18\x03\x02\x02" +
		"\x02\u1F18\u1F22\x03\x02\x02\x02\u1F19\u1F1C\x05\u02CA\u0166\x02\u1F1A" +
		"\u1F1C\x05\u03B6\u01DC\x02\u1F1B\u1F19\x03\x02\x02\x02\u1F1B\u1F1A\x03" +
		"\x02\x02\x02\u1F1C\u1F1E\x03\x02\x02\x02\u1F1D\u1F1F\t]\x02\x02\u1F1E" +
		"\u1F1D\x03\x02\x02\x02\u1F1E\u1F1F\x03\x02\x02\x02\u1F1F\u1F23\x03\x02" +
		"\x02\x02\u1F20\u1F23\x07Z\x02\x02\u1F21\u1F23\x07\xDF\x02\x02\u1F22\u1F1B" +
		"\x03\x02\x02\x02\u1F22\u1F20\x03\x02\x02\x02\u1F22\u1F21\x03\x02\x02\x02" +
		"\u1F23\u0275\x03\x02\x02\x02\u1F24\u1F25\t\x03\x02\x02\u1F25\u0277\x03" +
		"\x02\x02\x02\u1F26\u1F28\x05\u02A2\u0152\x02\u1F27\u1F29\x07\u0338\x02" +
		"\x02\u1F28\u1F27\x03\x02\x02\x02\u1F28\u1F29\x03\x02\x02\x02\u1F29\u1F62" +
		"\x03\x02\x02\x02\u1F2A\u1F36\x07\x92\x02\x02\u1F2B\u1F2D\x07\x06\x02\x02" +
		"\u1F2C\u1F2E\x07\u028E\x02\x02\u1F2D\u1F2C\x03\x02\x02\x02\u1F2D\u1F2E" +
		"\x03\x02\x02\x02\u1F2E\u1F37\x03\x02\x02\x02\u1F2F\u1F34\x05\u0292\u014A" +
		"\x02\u1F30\u1F31\x07\u0335\x02\x02\u1F31\u1F32\x05\u038E\u01C8\x02\u1F32" +
		"\u1F33\x07\u0336\x02\x02\u1F33\u1F35\x03\x02\x02\x02\u1F34\u1F30\x03\x02" +
		"\x02\x02\u1F34\u1F35\x03\x02\x02\x02\u1F35\u1F37\x03\x02\x02\x02\u1F36" +
		"\u1F2B\x03\x02\x02\x02\u1F36\u1F2F\x03\x02\x02\x02\u1F37\u1F3A\x03\x02" +
		"\x02\x02\u1F38\u1F39\x07\xE5\x02\x02\u1F39\u1F3B\x05\u0382\u01C2\x02\u1F3A" +
		"\u1F38\x03\x02\x02\x02\u1F3A\u1F3B\x03\x02\x02\x02\u1F3B\u1F3C\x03\x02" +
		"\x02\x02\u1F3C\u1F3D\x07\u015D\x02\x02\u1F3D\u1F42\x05\u03B6\u01DC\x02" +
		"\u1F3E\u1F3F\x07\u0337\x02\x02\u1F3F\u1F41\x05\u03B6\u01DC\x02\u1F40\u1F3E" +
		"\x03\x02\x02\x02\u1F41\u1F44\x03\x02\x02\x02\u1F42\u1F40\x03\x02\x02\x02" +
		"\u1F42\u1F43\x03\x02\x02\x02\u1F43\u1F48\x03\x02\x02\x02\u1F44\u1F42\x03" +
		"\x02\x02\x02\u1F45\u1F46\x07\u017C\x02\x02\u1F46\u1F47\x07\x92\x02\x02" +
		"\u1F47\u1F49\x07\xEC\x02\x02\u1F48\u1F45\x03\x02\x02\x02\u1F48\u1F49\x03" +
		"\x02\x02\x02\u1F49\u1F4C\x03\x02\x02\x02\u1F4A\u1F4B\x07\x10\x02\x02\u1F4B" +
		"\u1F4D\x05\u03B6\u01DC\x02\u1F4C\u1F4A\x03\x02\x02\x02\u1F4C\u1F4D\x03" +
		"\x02\x02\x02\u1F4D\u1F4F\x03\x02\x02\x02\u1F4E\u1F50\x07\u0338\x02\x02" +
		"\u1F4F\u1F4E\x03\x02\x02\x02\u1F4F\u1F50\x03\x02\x02\x02\u1F50\u1F62\x03" +
		"\x02\x02\x02\u1F51\u1F58\x07\u011C\x02\x02\u1F52\u1F53\x07\u0335\x02\x02" +
		"\u1F53\u1F54\x07\u017C\x02\x02\u1F54\u1F55\x07\u01C0\x02\x02\u1F55\u1F56" +
		"\x07\u0323\x02\x02\u1F56\u1F57\x07\u031A\x02\x02\u1F57\u1F59\x07\u0336" +
		"\x02\x02\u1F58\u1F52\x03\x02\x02\x02\u1F58\u1F59\x03\x02\x02\x02\u1F59" +
		"\u1F5B\x03\x02\x02\x02\u1F5A\u1F5C\x07\u0338\x02\x02\u1F5B\u1F5A\x03\x02" +
		"\x02\x02\u1F5B\u1F5C\x03\x02\x02\x02\u1F5C\u1F62\x03\x02\x02\x02\u1F5D" +
		"\u1F62\x05\u0284";
	private static readonly _serializedATNSegment16: string =
		"\u0143\x02\u1F5E\u1F62\x05\u0286\u0144\x02\u1F5F\u1F62\x05\u0288\u0145" +
		"\x02\u1F60\u1F62\x05\u027A\u013E\x02\u1F61\u1F26\x03\x02\x02\x02\u1F61" +
		"\u1F2A\x03\x02\x02\x02\u1F61\u1F51\x03\x02\x02\x02\u1F61\u1F5D\x03\x02" +
		"\x02\x02\u1F61\u1F5E\x03\x02\x02\x02\u1F61\u1F5F\x03\x02\x02\x02\u1F61" +
		"\u1F60\x03\x02\x02\x02\u1F62\u0279\x03\x02\x02\x02\u1F63\u1F64\x07I\x02" +
		"\x02\u1F64\u1F65\x07+\x02\x02\u1F65\u1F68\x05\u03B6\u01DC\x02\u1F66\u1F67" +
		"\x07\x14\x02\x02\u1F67\u1F69\x05\u03B6\u01DC\x02\u1F68\u1F66\x03\x02\x02" +
		"\x02\u1F68\u1F69\x03\x02\x02\x02\u1F69\u1F6D\x03\x02\x02\x02\u1F6A\u1F6B" +
		"\x07\x8C\x02\x02\u1F6B\u1F6E\x05\u027C\u013F\x02\u1F6C\u1F6E\x05\u0280" +
		"\u0141\x02\u1F6D\u1F6A\x03\x02\x02\x02\u1F6D\u1F6C\x03\x02\x02\x02\u1F6E" +
		"\u1F75\x03\x02\x02\x02\u1F6F\u1F70\x07\u0185\x02\x02\u1F70\u1F71\x07\x86" +
		"\x02\x02\u1F71\u1F72\x07\x1C\x02\x02\u1F72\u1F73\x07\u01E0\x02\x02\u1F73" +
		"\u1F74\x07\u0323\x02\x02\u1F74\u1F76\t\t\x02\x02\u1F75\u1F6F\x03\x02\x02" +
		"\x02\u1F75\u1F76\x03\x02\x02\x02\u1F76\u027B\x03\x02\x02\x02\u1F77\u1F78" +
		"\x07\u0198\x02\x02\u1F78\u1F89\x05\u03B6\u01DC\x02\u1F79\u1F7B\x07\u01F2" +
		"\x02\x02\u1F7A\u1F79\x03\x02\x02\x02\u1F7A\u1F7B\x03\x02\x02\x02\u1F7B" +
		"\u1F7C\x03\x02\x02\x02\u1F7C\u1F7D\x07\x82\x02\x02\u1F7D\u1F7E\x07\u0323" +
		"\x02\x02\u1F7E\u1F86\x07\u031F\x02\x02\u1F7F\u1F80\x07\u017C\x02\x02\u1F80" +
		"\u1F81\x07\u028C\x02\x02\u1F81\u1F82\x07\xAC\x02\x02\u1F82\u1F83\x07\u0335" +
		"\x02\x02\u1F83\u1F84\x05\u027E\u0140\x02\u1F84\u1F85\x07\u0336\x02\x02" +
		"\u1F85\u1F87\x03\x02\x02\x02\u1F86\u1F7F\x03\x02\x02\x02\u1F86\u1F87\x03" +
		"\x02\x02\x02\u1F87\u1F89\x03\x02\x02\x02\u1F88\u1F77\x03\x02\x02\x02\u1F88" +
		"\u1F7A\x03\x02\x02\x02\u1F89\u027D\x03\x02\x02\x02\u1F8A\u1F8B\t^\x02" +
		"\x02\u1F8B\u1F8C\x07\u0323\x02\x02\u1F8C\u1F93\x07\u031F\x02\x02\u1F8D" +
		"\u1F8E\x07\u0337\x02\x02\u1F8E\u1F8F\t_\x02\x02\u1F8F\u1F90\x07&\x02\x02" +
		"\u1F90\u1F91\x07\xF4\x02\x02\u1F91\u1F92\x07\u0323\x02\x02\u1F92\u1F94" +
		"\x07\u031F\x02\x02\u1F93\u1F8D\x03\x02\x02\x02\u1F93\u1F94\x03\x02\x02" +
		"\x02\u1F94\u027F\x03\x02\x02\x02\u1F95\u1F96\x07\u01EE\x02\x02\u1F96\u1F97" +
		"\x07&\x02\x02\u1F97\u1F98\x07\xF4\x02\x02\u1F98\u1F99\x07\u0323\x02\x02" +
		"\u1F99\u1F9B\x07\u031F\x02\x02\u1F9A\u1F95\x03\x02\x02\x02\u1F9A\u1F9B" +
		"\x03\x02\x02\x02\u1F9B\u1F9C\x03\x02\x02\x02\u1F9C\u1F9D\x07\u017C\x02" +
		"\x02\u1F9D\u1F9E\x07\u02E3\x02\x02\u1F9E\u1F9F\x07\u0323\x02\x02\u1F9F" +
		"\u1FA4\x07\u031F\x02\x02\u1FA0\u1FA1\x07\u0337\x02\x02\u1FA1\u1FA3\x05" +
		"\u0282\u0142\x02\u1FA2\u1FA0\x03\x02\x02\x02\u1FA3\u1FA6\x03\x02\x02\x02" +
		"\u1FA4\u1FA2\x03\x02\x02\x02\u1FA4\u1FA5\x03\x02\x02\x02\u1FA5\u0281\x03" +
		"\x02\x02\x02\u1FA6\u1FA4\x03\x02\x02\x02\u1FA7\u1FA8\t`\x02\x02\u1FA8" +
		"\u1FA9\x07\u0323\x02\x02\u1FA9\u1FAA\x07\u031F\x02\x02\u1FAA\u0283\x03" +
		"\x02\x02\x02\u1FAB\u1FAC\x07\xE7\x02\x02\u1FAC\u1FAD\x07\u02E6\x02\x02" +
		"\u1FAD\u1FAE\x07\xAC\x02\x02\u1FAE\u1FAF\x05\u03B6\u01DC\x02\u1FAF\u1FB0" +
		"\x07\u01D3\x02\x02\u1FB0\u1FB1\x07&\x02\x02\u1FB1\u1FB2\x05\u0290\u0149" +
		"\x02\u1FB2\u1FBC\x03\x02\x02\x02\u1FB3\u1FB4\x07\xE7\x02\x02\u1FB4\u1FB5" +
		"\x07\xBD\x02\x02\u1FB5\u1FB6\x07\xAC\x02\x02\u1FB6\u1FB7\x07\u01D3\x02" +
		"\x02\u1FB7\u1FB8\x07&\x02\x02\u1FB8\u1FB9\x07\xF4\x02\x02\u1FB9\u1FBA" +
		"\x07\u0323\x02\x02\u1FBA\u1FBC\x07\u031F\x02\x02\u1FBB\u1FAB\x03\x02\x02" +
		"\x02\u1FBB\u1FB3\x03\x02\x02\x02\u1FBC\u0285\x03\x02\x02\x02\u1FBD\u1FBE" +
		"\x073\x02\x02\u1FBE\u1FBF\x07\u02E6\x02\x02\u1FBF\u1FC0\x07\xAC\x02\x02" +
		"\u1FC0\u1FC9\x05\u03B6\u01DC\x02\u1FC1\u1FC2\x073\x02\x02\u1FC2\u1FC3" +
		"\x07\x06\x02\x02\u1FC3\u1FC4\x07\u02E6\x02\x02\u1FC4\u1FC9\x07\u022D\x02" +
		"\x02\u1FC5\u1FC6\x073\x02\x02\u1FC6\u1FC7\x07\xBD\x02\x02\u1FC7\u1FC9" +
		"\x07\xAC\x02\x02\u1FC8\u1FBD\x03\x02\x02\x02\u1FC8\u1FC1\x03\x02\x02\x02" +
		"\u1FC8\u1FC5\x03\x02\x02\x02\u1FC9\u0287\x03\x02\x02\x02\u1FCA\u1FCB\x07" +
		"I\x02\x02\u1FCB\u1FCC\x07\xBD\x02\x02\u1FCC\u1FCD\x07\xAC\x02\x02\u1FCD" +
		"\u1FCE\x07\u01EE\x02\x02\u1FCE\u1FCF\x07&\x02\x02\u1FCF\u1FD0\x07\xF4" +
		"\x02\x02\u1FD0\u1FD1\x07\u0323\x02\x02\u1FD1\u1FEE\x07\u031F\x02\x02\u1FD2" +
		"\u1FD3\x07I\x02\x02\u1FD3\u1FD4\x07\u02E6\x02\x02\u1FD4\u1FD5\x07\xAC" +
		"\x02\x02\u1FD5\u1FD8\x05\u03B6\u01DC\x02\u1FD6\u1FD7\x07\x14\x02\x02\u1FD7" +
		"\u1FD9\x05\u03B6\u01DC\x02\u1FD8\u1FD6\x03\x02\x02\x02\u1FD8\u1FD9\x03" +
		"\x02\x02\x02\u1FD9\u1FDD\x03\x02\x02\x02\u1FDA\u1FDB\x07\x8C\x02\x02\u1FDB" +
		"\u1FDC\x07\u0291\x02\x02\u1FDC\u1FDE\x05\u03B6\u01DC\x02\u1FDD\u1FDA\x03" +
		"\x02\x02\x02\u1FDD\u1FDE\x03\x02\x02\x02\u1FDE\u1FDF\x03\x02\x02\x02\u1FDF" +
		"\u1FE9\x07\u017C\x02\x02\u1FE0\u1FE5\x05\u028A\u0146\x02\u1FE1\u1FE2\x07" +
		"\u01EE\x02\x02\u1FE2\u1FE3\x07&\x02\x02\u1FE3\u1FE5\x05\u028E\u0148\x02" +
		"\u1FE4\u1FE0\x03\x02\x02\x02\u1FE4\u1FE1\x03\x02\x02\x02\u1FE5\u1FE7\x03" +
		"\x02\x02\x02\u1FE6\u1FE8\x07\u0337\x02\x02\u1FE7\u1FE6\x03\x02\x02\x02" +
		"\u1FE7\u1FE8\x03\x02\x02\x02\u1FE8\u1FEA\x03\x02\x02\x02\u1FE9\u1FE4\x03" +
		"\x02\x02\x02\u1FEA\u1FEB\x03\x02\x02\x02\u1FEB\u1FE9\x03\x02\x02\x02\u1FEB" +
		"\u1FEC\x03\x02\x02\x02\u1FEC\u1FEE\x03\x02\x02\x02\u1FED\u1FCA\x03\x02" +
		"\x02\x02\u1FED\u1FD2\x03\x02\x02\x02\u1FEE\u0289\x03\x02\x02\x02\u1FEF" +
		"\u1FF0\x07\u022C\x02\x02\u1FF0\u1FF1\x07\u0323\x02\x02\u1FF1\u1FFF\x07" +
		"\u031F\x02\x02\u1FF2\u1FF3\x07\u018D\x02\x02\u1FF3\u1FF4\x07\u0323\x02" +
		"\x02\u1FF4\u1FFF\x05\u028C\u0147\x02\u1FF5\u1FF6\x07\u021A\x02\x02\u1FF6" +
		"\u1FF7\x07\u0323\x02\x02\u1FF7\u1FFF\x07\u031F\x02\x02\u1FF8\u1FF9\x07" +
		"\u0292\x02\x02\u1FF9\u1FFA\x07\u0323\x02\x02\u1FFA\u1FFF\x07\u031F\x02" +
		"\x02\u1FFB\u1FFC\x07\u01C6\x02\x02\u1FFC\u1FFD\x07\u0323\x02\x02\u1FFD" +
		"\u1FFF\t\f\x02\x02\u1FFE\u1FEF\x03\x02\x02\x02\u1FFE\u1FF2\x03\x02\x02" +
		"\x02\u1FFE\u1FF5\x03\x02\x02\x02\u1FFE\u1FF8\x03\x02\x02\x02\u1FFE\u1FFB" +
		"\x03\x02\x02\x02\u1FFF\u028B\x03\x02\x02\x02\u2000\u2001\t3\x02\x02\u2001" +
		"\u028D\x03\x02\x02\x02\u2002\u2003\x07+\x02\x02\u2003\u200E\x05\u03B6" +
		"\u01DC\x02\u2004\u2005\x07\x12\x02\x02\u2005\u2006\x07\xAC\x02\x02\u2006" +
		"\u200E\x05\u03B6\u01DC\x02\u2007\u2008\x07\u02E6\x02\x02\u2008\u2009\x07" +
		"\xAC\x02\x02\u2009\u200E\x05\u03B6\u01DC\x02\u200A\u200B\x07\xF4\x02\x02" +
		"\u200B\u200C\x07\u0323\x02\x02\u200C\u200E\x07\u031F\x02\x02\u200D\u2002" +
		"\x03\x02\x02\x02\u200D\u2004\x03\x02\x02\x02\u200D\u2007\x03\x02\x02\x02" +
		"\u200D\u200A\x03\x02\x02\x02\u200E\u028F\x03\x02\x02\x02\u200F\u2010\x07" +
		"+\x02\x02\u2010\u2015\x05\u03B6\u01DC\x02\u2011\u2012\x07\u017C\x02\x02" +
		"\u2012\u2013\x07\xF4\x02\x02\u2013\u2014\x07\u0323\x02\x02\u2014\u2016" +
		"\x07\u031F\x02\x02\u2015\u2011\x03\x02\x02\x02\u2015\u2016\x03\x02\x02" +
		"\x02\u2016\u2027\x03\x02\x02\x02\u2017\u2018\x07\x12\x02\x02\u2018\u2019" +
		"\x07\xAC\x02\x02\u2019\u201E\x05\u03B6\u01DC\x02\u201A\u201B\x07\u017C" +
		"\x02\x02\u201B\u201C\x07\xF4\x02\x02\u201C\u201D\x07\u0323\x02\x02\u201D" +
		"\u201F\x07\u031F\x02\x02\u201E\u201A\x03\x02\x02\x02\u201E\u201F\x03\x02" +
		"\x02\x02\u201F\u2027\x03\x02\x02\x02\u2020\u2021\x07\u02E6\x02\x02\u2021" +
		"\u2022\x07\xAC\x02\x02\u2022\u2027\x05\u03B6\u01DC\x02\u2023\u2024\x07" +
		"\xF4\x02\x02\u2024\u2025\x07\u0323\x02\x02\u2025\u2027\x07\u031F\x02\x02" +
		"\u2026\u200F\x03\x02\x02\x02\u2026\u2017\x03\x02\x02\x02\u2026\u2020\x03" +
		"\x02\x02\x02\u2026\u2023\x03\x02\x02\x02\u2027\u0291\x03\x02\x02\x02\u2028" +
		"\u2043\x07w\x02\x02\u2029\u202A\x07\u0175\x02\x02\u202A\u2043\x05\u03B6" +
		"\u01DC\x02\u202B\u202C\x07\u02E9\x02\x02\u202C\u2043\x05\u03B6\u01DC\x02" +
		"\u202D\u202F\x07\u01BF\x02\x02\u202E\u2030\x05\u03B6\u01DC\x02\u202F\u202E" +
		"\x03\x02\x02\x02\u202F\u2030\x03\x02\x02\x02\u2030\u2043\x03\x02\x02\x02" +
		"\u2031\u2032\x07I\x02\x02\u2032\u2043\ta\x02\x02\u2033\u2043\x07\u02D2" +
		"\x02\x02\u2034\u2043\x07\u021D\x02\x02\u2035\u2043\x07\u0132\x02\x02\u2036" +
		"\u2043\x07\u010E\x02\x02\u2037\u2043\x07\xA2\x02\x02\u2038\u2040\x07\n" +
		"\x02\x02\u2039\u203B\x07\r\x02\x02\u203A\u2039\x03\x02\x02\x02\u203A\u203B" +
		"\x03\x02\x02\x02\u203B\u203E\x03\x02\x02\x02\u203C\u203F\x05\u03B6\u01DC" +
		"\x02\u203D\u203F\x07U\x02\x02\u203E\u203C\x03\x02\x02\x02\u203E\u203D" +
		"\x03\x02\x02\x02\u203F\u2041\x03\x02\x02\x02\u2040\u203A\x03\x02\x02\x02" +
		"\u2040\u2041\x03\x02\x02\x02\u2041\u2043\x03\x02\x02\x02\u2042\u2028\x03" +
		"\x02\x02\x02\u2042\u2029\x03\x02\x02\x02\u2042\u202B\x03\x02\x02\x02\u2042" +
		"\u202D\x03\x02\x02\x02\u2042\u2031\x03\x02\x02\x02\u2042\u2033\x03\x02" +
		"\x02\x02\u2042\u2034\x03\x02\x02\x02\u2042\u2035\x03\x02\x02\x02\u2042" +
		"\u2036\x03\x02\x02\x02\u2042\u2037\x03\x02\x02\x02\u2042\u2038\x03\x02" +
		"\x02\x02\u2043\u0293\x03\x02\x02\x02\u2044\u2045\x07\u013D\x02\x02\u2045" +
		"\u2048\x07\u031A\x02\x02\u2046\u2047\x07\u0330\x02\x02\u2047\u2049\x05" +
		"\u03B6\u01DC\x02\u2048\u2046\x03\x02\x02\x02\u2048\u2049\x03\x02\x02\x02" +
		"\u2049\u204A\x03\x02\x02\x02\u204A\u204B\x07\u0323\x02\x02\u204B\u204D" +
		"\x05\u02CC\u0167\x02\u204C\u204E\x07\u0338\x02\x02\u204D\u204C\x03\x02" +
		"\x02\x02\u204D\u204E\x03\x02\x02\x02\u204E\u206C\x03\x02\x02\x02\u204F" +
		"\u2050\x07\u013D\x02\x02\u2050\u2051\x07\u031A\x02\x02\u2051\u2052\x05" +
		"\u03BC\u01DF\x02\u2052\u2054\x05\u02CC\u0167\x02\u2053\u2055\x07\u0338" +
		"\x02\x02\u2054\u2053\x03\x02\x02\x02\u2054\u2055\x03\x02\x02\x02\u2055" +
		"\u206C\x03\x02\x02\x02\u2056\u2057\x07\u013D\x02\x02\u2057\u2058\x07\u031A" +
		"\x02\x02\u2058\u2059\x07\u0323\x02\x02\u2059\u205A\x07P\x02\x02\u205A" +
		"\u2065\x05\u02C2\u0162\x02\u205B\u2063\x07\x86\x02\x02\u205C\u205D\x07" +
		"\u010A\x02\x02\u205D\u2064\x07\u0277\x02\x02\u205E\u2061\x07\u016C\x02" +
		"\x02\u205F\u2060\x07\xE1\x02\x02\u2060\u2062\x05\u038E\u01C8\x02\u2061" +
		"\u205F\x03\x02\x02\x02\u2061\u2062\x03\x02\x02\x02\u2062\u2064\x03\x02" +
		"\x02\x02\u2063\u205C\x03\x02\x02\x02\u2063\u205E\x03\x02\x02\x02\u2064" +
		"\u2066\x03\x02\x02\x02\u2065\u205B\x03\x02\x02\x02\u2065\u2066\x03\x02" +
		"\x02\x02\u2066\u2068\x03\x02\x02\x02\u2067\u2069\x07\u0338\x02\x02\u2068" +
		"\u2067\x03\x02\x02\x02\u2068\u2069\x03\x02\x02\x02\u2069\u206C\x03\x02" +
		"\x02\x02\u206A\u206C\x05\u02C8\u0165\x02\u206B\u2044\x03\x02\x02\x02\u206B" +
		"\u204F\x03\x02\x02\x02\u206B\u2056\x03\x02\x02\x02\u206B\u206A\x03\x02" +
		"\x02\x02\u206C\u0295\x03\x02\x02\x02\u206D\u206E\x07\x1C\x02\x02\u206E" +
		"\u206F\x07d\x02\x02\u206F\u2072\tb\x02\x02\u2070\u2073\x05\u03B6\u01DC" +
		"\x02\u2071\u2073\x07\u031A\x02\x02\u2072\u2070\x03\x02\x02\x02\u2072\u2071" +
		"\x03\x02\x02\x02\u2072\u2073\x03\x02\x02\x02\u2073\u2075\x03\x02\x02\x02" +
		"\u2074\u2076\x07\u0338\x02\x02\u2075\u2074\x03\x02\x02\x02\u2075\u2076" +
		"\x03\x02\x02\x02\u2076\u20BF\x03\x02\x02\x02\u2077\u2078\x07\x1C\x02\x02" +
		"\u2078\u2082\tb\x02\x02\u2079\u207C\x05\u03B6\u01DC\x02\u207A\u207C\x07" +
		"\u031A\x02\x02\u207B\u2079\x03\x02\x02\x02\u207B\u207A\x03\x02\x02\x02" +
		"\u207C\u2080\x03\x02\x02\x02\u207D\u207E\x07\u017C\x02\x02\u207E\u207F" +
		"\x07\u0240\x02\x02\u207F\u2081\x07\u031F\x02\x02\u2080\u207D\x03\x02\x02" +
		"\x02\u2080\u2081\x03\x02\x02\x02\u2081\u2083\x03\x02\x02\x02\u2082\u207B" +
		"\x03\x02\x02\x02\u2082\u2083\x03\x02\x02\x02\u2083\u2085\x03\x02\x02\x02" +
		"\u2084\u2086\x07\u0338\x02\x02\u2085\u2084\x03\x02\x02\x02\u2085\u2086" +
		"\x03\x02\x02\x02\u2086\u20BF\x03\x02\x02\x02\u2087\u2088\x07:\x02\x02" +
		"\u2088\u2095\tb\x02\x02\u2089\u208C\x05\u03B6\u01DC\x02\u208A\u208C\x07" +
		"\u031A\x02\x02\u208B\u2089\x03\x02\x02\x02\u208B\u208A\x03\x02\x02\x02" +
		"\u208C\u2093\x03\x02\x02\x02\u208D\u208E\x07\u017C\x02\x02\u208E\u208F" +
		"\x07\u0335\x02\x02\u208F\u2090\x07\u01D8\x02\x02\u2090\u2091\x07\u0323" +
		"\x02\x02\u2091\u2092\t\t\x02\x02\u2092\u2094\x07\u0336\x02\x02\u2093\u208D" +
		"\x03\x02\x02\x02\u2093\u2094\x03\x02\x02\x02\u2094\u2096\x03\x02\x02\x02" +
		"\u2095\u208B\x03\x02\x02\x02\u2095\u2096\x03\x02\x02\x02\u2096\u2098\x03" +
		"\x02\x02\x02\u2097\u2099\x07\u0338\x02\x02\u2098\u2097\x03\x02\x02\x02" +
		"\u2098\u2099\x03\x02\x02\x02\u2099\u20BF\x03\x02\x02\x02\u209A\u209C\x07" +
		":\x02\x02\u209B\u209D\x07\u030C\x02\x02\u209C\u209B\x03\x02\x02\x02\u209C" +
		"\u209D\x03\x02\x02\x02\u209D\u209F\x03\x02\x02\x02\u209E\u20A0\x07\u0338" +
		"\x02\x02\u209F\u209E\x03\x02\x02\x02\u209F\u20A0\x03\x02\x02\x02\u20A0" +
		"\u20BF\x03\x02\x02\x02\u20A1\u20A2\x07:\x02\x02\u20A2\u20BF\x05\u03B6" +
		"\u01DC\x02\u20A3\u20A4\x07\u0120\x02\x02\u20A4\u20BF\x05\u03B6\u01DC\x02" +
		"\u20A5\u20A6\x07\u0120\x02\x02\u20A6\u20A9\tb\x02\x02\u20A7\u20AA\x05" +
		"\u03B6\u01DC\x02\u20A8\u20AA\x07\u031A\x02\x02\u20A9\u20A7\x03\x02\x02" +
		"\x02\u20A9\u20A8\x03\x02\x02\x02\u20A9\u20AA\x03\x02\x02\x02\u20AA\u20AC" +
		"\x03\x02\x02\x02\u20AB\u20AD\x07\u0338\x02\x02\u20AC\u20AB\x03\x02\x02" +
		"\x02\u20AC\u20AD\x03\x02\x02\x02\u20AD\u20BF\x03\x02\x02\x02\u20AE\u20B0" +
		"\x07\u0120\x02\x02\u20AF\u20B1\x07\u030C\x02\x02\u20B0\u20AF\x03\x02\x02" +
		"\x02\u20B0\u20B1\x03\x02\x02\x02\u20B1\u20B3\x03\x02\x02\x02\u20B2\u20B4" +
		"\x07\u0338\x02\x02\u20B3\u20B2\x03\x02\x02\x02\u20B3\u20B4\x03\x02\x02" +
		"\x02\u20B4\u20BF\x03\x02\x02\x02\u20B5\u20B6\x07\u012C\x02\x02\u20B6\u20B9" +
		"\tb\x02\x02\u20B7\u20BA\x05\u03B6\u01DC\x02\u20B8\u20BA\x07\u031A\x02" +
		"\x02\u20B9\u20B7\x03\x02\x02\x02\u20B9\u20B8\x03\x02\x02\x02\u20B9\u20BA" +
		"\x03\x02\x02\x02\u20BA\u20BC\x03\x02\x02\x02\u20BB\u20BD\x07\u0338\x02" +
		"\x02\u20BC\u20BB\x03\x02\x02\x02\u20BC\u20BD\x03\x02\x02\x02\u20BD\u20BF" +
		"\x03\x02\x02\x02\u20BE\u206D\x03\x02\x02\x02\u20BE\u2077\x03\x02\x02\x02" +
		"\u20BE\u2087\x03\x02\x02\x02\u20BE\u209A\x03\x02\x02\x02\u20BE\u20A1\x03" +
		"\x02\x02\x02\u20BE\u20A3\x03\x02\x02\x02\u20BE\u20A5\x03\x02\x02\x02\u20BE" +
		"\u20AE\x03\x02\x02\x02\u20BE\u20B5\x03\x02\x02\x02\u20BF\u0297\x03\x02" +
		"\x02\x02\u20C0\u20C2\x07\u0210\x02\x02\u20C1\u20C3\x07\u031B\x02\x02\u20C2" +
		"\u20C1\x03\x02\x02\x02\u20C2\u20C3\x03\x02\x02\x02\u20C3\u0299\x03\x02" +
		"\x02\x02\u20C4\u20C5\x07\u016F\x02\x02\u20C5\u20C7\x05\u03B6\u01DC\x02" +
		"\u20C6\u20C8\x07\u0338\x02\x02\u20C7\u20C6\x03\x02\x02\x02\u20C7\u20C8" +
		"\x03\x02\x02\x02\u20C8\u029B\x03\x02\x02\x02\u20C9\u20CB\x07\u013E\x02" +
		"\x02\u20CA\u20CC\x07\u031F\x02\x02\u20CB\u20CA\x03\x02\x02\x02\u20CB\u20CC" +
		"\x03\x02\x02\x02\u20CC\u029D\x03\x02\x02\x02\u20CD\u20CE\x07W\x02\x02" +
		"\u20CE\u20D3\x05\u03B8\u01DD\x02\u20CF\u20D0\x07\u0335\x02\x02\u20D0\u20D1" +
		"\x05\u035A\u01AE\x02\u20D1\u20D2\x07\u0336\x02\x02\u20D2\u20D4\x03\x02" +
		"\x02\x02\u20D3\u20CF\x03\x02\x02\x02\u20D3\u20D4\x03\x02\x02\x02\u20D4" +
		"\u20D7\x03\x02\x02\x02\u20D5\u20D6\x07\u017C\x02\x02\u20D6\u20D8\x05\u02A0" +
		"\u0151\x02\u20D7\u20D5\x03\x02\x02\x02\u20D7\u20D8\x03\x02\x02\x02\u20D8" +
		"\u20DA\x03\x02\x02\x02\u20D9\u20DB\x07\u0338\x02\x02\u20DA\u20D9\x03\x02" +
		"\x02\x02\u20DA\u20DB\x03\x02\x02\x02\u20DB\u029F\x03\x02\x02\x02\u20DC" +
		"\u20DF\x05\u03B8\u01DD\x02\u20DD\u20DE\x07\u0337\x02\x02\u20DE\u20E0\x05" +
		"\u03B8\u01DD\x02\u20DF\u20DD\x03\x02\x02\x02\u20DF\u20E0\x03\x02\x02\x02" +
		"\u20E0\u02A1\x03\x02\x02\x02\u20E1\u20E2\x07w\x02\x02\u20E2\u20E3\x07" +
		"\x10\x02\x02\u20E3\u20E4\tc\x02\x02\u20E4\u02A3\x03\x02\x02\x02\u20E5" +
		"\u20E7\x07\u031A\x02\x02\u20E6\u20E8\x07\x10\x02\x02\u20E7\u20E6\x03\x02" +
		"\x02\x02\u20E7\u20E8\x03\x02\x02\x02\u20E8\u20E9\x03\x02\x02\x02\u20E9" +
		"\u20EC\x05\u03AE\u01D8\x02\u20EA\u20EB\x07\u0323\x02\x02\u20EB\u20ED\x05" +
		"\u02CC\u0167\x02\u20EC\u20EA\x03\x02\x02\x02\u20EC\u20ED\x03\x02\x02\x02" +
		"\u20ED\u02A5\x03\x02\x02\x02\u20EE\u20EF\x07\u0156\x02\x02\u20EF\u20F0" +
		"\x07\u0335\x02\x02\u20F0\u20F1\x05\u02AC\u0157\x02\u20F1\u20F2\x07\u0336" +
		"\x02\x02\u20F2\u02A7\x03\x02\x02\x02\u20F3\u20F4\x07\u030E\x02\x02\u20F4" +
		"\u20F6\x07\u0335\x02\x02\u20F5\u20F7\td\x02\x02\u20F6\u20F5\x03\x02\x02" +
		"\x02\u20F6\u20F7\x03\x02\x02\x02\u20F7\u20F8\x03\x02\x02\x02\u20F8\u20F9" +
		"\x05\u02AA\u0156\x02\u20F9\u20FA\x07\u0336\x02\x02\u20FA\u02A9\x03\x02" +
		"\x02\x02\u20FB\u20FC\x07\u031C\x02\x02\u20FC\u20FD\x07\u0330\x02\x02\u20FD" +
		"\u20FE\x07\u031C\x02\x02\u20FE\u02AB\x03\x02\x02\x02\u20FF\u2106\x05\u02AE" +
		"\u0158\x02\u2100\u2102\x07\u0337\x02\x02\u2101\u2100\x03\x02\x02\x02\u2101" +
		"\u2102\x03\x02\x02\x02\u2102\u2103\x03\x02\x02\x02\u2103\u2105\x05\u02AE" +
		"\u0158\x02\u2104\u2101\x03\x02\x02\x02\u2105\u2108\x03\x02\x02\x02\u2106" +
		"\u2104\x03\x02\x02\x02\u2106\u2107\x03\x02\x02\x02\u2107\u02AD\x03\x02" +
		"\x02\x02\u2108\u2106\x03\x02\x02\x02\u2109\u210D\x05\u02B0\u0159\x02\u210A" +
		"\u210D\x05\u02B2\u015A\x02\u210B\u210D\x05\u02B6\u015C\x02\u210C\u2109" +
		"\x03\x02\x02\x02\u210C\u210A\x03\x02\x02\x02\u210C\u210B\x03\x02\x02\x02" +
		"\u210D\u02AF\x03\x02\x02\x02\u210E\u2112\x05\u03B6\u01DC\x02\u210F\u2113" +
		"\x05\u03AE\u01D8\x02\u2110\u2111\x07\x10\x02\x02\u2111\u2113\x05\u02CC" +
		"\u0167\x02\u2112\u210F\x03\x02\x02\x02\u2112\u2110\x03\x02\x02\x02\u2113" +
		"\u2116\x03\x02\x02\x02\u2114\u2115\x077\x02\x02\u2115\u2117\x05\u03B6" +
		"\u01DC\x02\u2116\u2114\x03\x02\x02\x02\u2116\u2117\x03\x02\x02\x02\u2117" +
		"\u2119\x03\x02\x02\x02\u2118\u211A\x05\u0396\u01CC\x02\u2119\u2118\x03" +
		"\x02\x02\x02\u2119\u211A\x03\x02\x02\x02\u211A\u2130\x03\x02\x02\x02\u211B" +
		"\u211C\x07=\x02\x02\u211C\u211E\x05\u03B6\u01DC\x02\u211D\u211B\x03\x02" +
		"\x02\x02\u211D\u211E\x03\x02\x02\x02\u211E\u211F\x03\x02\x02\x02\u211F" +
		"\u2121\x05\u0398\u01CD\x02\u2120\u2122\x05\u0398\u01CD\x02\u2121\u2120" +
		"\x03\x02\x02\x02\u2121\u2122\x03\x02\x02\x02\u2122\u2131\x03\x02\x02\x02" +
		"\u2123\u2129\x07\x97\x02\x02\u2124\u2125\x07\u0335\x02\x02\u2125\u2126" +
		"\x07\u031B\x02\x02\u2126\u2127\x07\u0337\x02\x02\u2127\u2128\x07\u031B" +
		"\x02\x02\u2128\u212A\x07\u0336\x02\x02\u2129\u2124\x03\x02\x02\x02\u2129" +
		"\u212A\x03\x02\x02\x02\u212A\u212E\x03\x02\x02\x02\u212B\u212C\x07\xDC" +
		"\x02\x02\u212C\u212D\x07\x86\x02\x02\u212D\u212F\x07\u0112\x02\x02\u212E" +
		"\u212B\x03\x02\x02\x02\u212E\u212F\x03\x02\x02\x02\u212F\u2131\x03\x02" +
		"\x02\x02\u2130\u211D\x03\x02\x02\x02\u2130\u2123\x03\x02\x02\x02\u2130" +
		"\u2131\x03\x02\x02\x02\u2131\u2133\x03\x02\x02\x02\u2132\u2134\x07\u0123" +
		"\x02\x02\u2133\u2132\x03\x02\x02\x02\u2133\u2134\x03\x02\x02\x02\u2134" +
		"\u2138\x03\x02\x02\x02\u2135\u2137\x05\u02B4\u015B\x02\u2136\u2135\x03" +
		"\x02\x02\x02\u2137\u213A\x03\x02\x02\x02\u2138\u2136\x03\x02\x02\x02\u2138" +
		"\u2139\x03\x02\x02\x02\u2139\u02B1\x03\x02\x02\x02\u213A\u2138\x03\x02" +
		"\x02\x02\u213B\u213C\x05\u03B6\u01DC\x02\u213C\u213D\te\x02\x02\u213D" +
		"\u2141\x05\u02CC\u0167\x02\u213E\u2142\x07\u0241\x02\x02\u213F\u2140\x07" +
		"\xDC\x02\x02\u2140\u2142\x07\u0241\x02\x02\u2141\u213E\x03\x02\x02\x02" +
		"\u2141\u213F\x03\x02\x02\x02\u2141\u2142\x03\x02\x02\x02\u2142\u02B3\x03" +
		"\x02\x02\x02\u2143\u2144\x07=\x02\x02\u2144\u2146\x05\u03B6\u01DC\x02" +
		"\u2145\u2143\x03\x02\x02\x02\u2145\u2146\x03\x02\x02\x02\u2146\u216C\x03" +
		"\x02\x02\x02\u2147\u2148\x07\u0100\x02\x02\u2148\u214B\x07\xAC\x02\x02" +
		"\u2149\u214B\x07\u0168\x02\x02\u214A\u2147\x03\x02\x02\x02\u214A\u2149" +
		"\x03\x02\x02\x02\u214B\u214D\x03\x02\x02\x02\u214C\u214E\x05\u0394\u01CB" +
		"\x02\u214D\u214C\x03\x02\x02\x02\u214D\u214E\x03\x02\x02\x02\u214E\u2150" +
		"\x03\x02\x02\x02\u214F\u2151\x05\u02BC\u015F\x02\u2150\u214F\x03\x02\x02" +
		"\x02\u2150\u2151\x03\x02\x02\x02\u2151\u216D\x03\x02\x02\x02\u2152\u2156" +
		"\x07.\x02\x02\u2153\u2154\x07\xDC\x02\x02\u2154\u2155\x07\x86\x02\x02" +
		"\u2155\u2157\x07\u0112\x02\x02\u2156\u2153\x03\x02\x02\x02\u2156\u2157" +
		"\x03\x02\x02\x02\u2157\u2158\x03\x02\x02\x02\u2158\u2159\x07\u0335\x02" +
		"\x02\u2159\u215A\x05\u02E2\u0172\x02\u215A\u215B\x07\u0336\x02\x02\u215B" +
		"\u216D\x03\x02\x02\x02\u215C\u215D\x07\x89\x02\x02\u215D\u215F\x07\xAC" +
		"\x02\x02\u215E\u215C\x03\x02\x02\x02\u215E\u215F\x03\x02\x02\x02\u215F" +
		"\u2160\x03\x02\x02\x02\u2160\u2161\x07\u010E\x02\x02\u2161\u2162\x05\u0382" +
		"\u01C2\x02\u2162\u2163\x07\u0335\x02\x02\u2163\u2164\x05\u038E\u01C8\x02" +
		"\u2164\u2166\x07\u0336\x02\x02\u2165\u2167\x05\u02B8\u015D\x02\u2166\u2165" +
		"\x03\x02\x02\x02\u2166\u2167\x03\x02\x02\x02\u2167\u2169\x03\x02\x02\x02" +
		"\u2168\u216A\x05\u02BA\u015E\x02\u2169\u2168\x03\x02\x02\x02\u2169\u216A" +
		"\x03\x02\x02\x02\u216A\u216D\x03\x02\x02\x02\u216B\u216D\x05\u0396\u01CC" +
		"\x02\u216C\u214A\x03\x02\x02\x02\u216C\u2152\x03\x02\x02\x02\u216C\u215E" +
		"\x03\x02\x02\x02\u216C\u216B\x03\x02\x02\x02\u216D\u02B5\x03\x02\x02\x02" +
		"\u216E\u216F\x07=\x02\x02\u216F\u2171\x05\u03B6\u01DC\x02\u2170\u216E" +
		"\x03\x02\x02\x02\u2170\u2171\x03\x02\x02\x02\u2171\u21B2\x03\x02\x02\x02" +
		"\u2172\u2173\x07\u0100\x02\x02\u2173\u2176\x07\xAC\x02\x02\u2174\u2176" +
		"\x07\u0168\x02\x02\u2175\u2172\x03\x02\x02\x02\u2175\u2174\x03\x02\x02" +
		"\x02\u2176\u2178\x03\x02\x02\x02\u2177\u2179\x05\u0394\u01CB\x02\u2178" +
		"\u2177\x03\x02\x02\x02\u2178\u2179\x03\x02\x02\x02\u2179\u217A\x03\x02" +
		"\x02\x02\u217A\u217B\x07\u0335\x02\x02\u217B\u217C\x05\u038C\u01C7\x02" +
		"\u217C\u217E\x07\u0336\x02\x02\u217D\u217F\x05\u02BC\u015F\x02\u217E\u217D" +
		"\x03\x02\x02\x02\u217E\u217F\x03\x02\x02\x02\u217F\u2182\x03\x02\x02\x02" +
		"\u2180\u2181\x07\xE5\x02\x02\u2181\u2183\x05\u03B6\u01DC\x02\u2182\u2180" +
		"\x03\x02\x02\x02\u2182\u2183\x03\x02\x02\x02\u2183\u21B3\x03\x02\x02\x02" +
		"\u2184\u2188\x07.\x02\x02\u2185\u2186\x07\xDC\x02\x02\u2186\u2187\x07" +
		"\x86\x02\x02\u2187\u2189\x07\u0112\x02\x02\u2188\u2185\x03\x02\x02\x02" +
		"\u2188\u2189\x03\x02\x02\x02\u2189\u218A\x03\x02\x02\x02\u218A\u218B\x07" +
		"\u0335\x02\x02\u218B\u218C\x05\u02E2\u0172\x02\u218C\u218D\x07\u0336\x02" +
		"\x02\u218D\u21B3\x03\x02\x02\x02\u218E\u2190\x07Z\x02\x02\u218F\u2191" +
		"\x07\u0335\x02\x02\u2190\u218F\x03\x02\x02\x02\u2190\u2191\x03\x02\x02" +
		"\x02\u2191\u2196\x03\x02\x02\x02\u2192\u2197\x07\u031F\x02\x02\u2193\u2197" +
		"\x07\u033D\x02\x02\u2194\u2197\x05\u0334\u019B\x02\u2195\u2197\x07\u031B" +
		"\x02\x02\u2196\u2192\x03\x02\x02\x02\u2196\u2193\x03\x02\x02\x02\u2196" +
		"\u2194\x03\x02\x02\x02\u2196\u2195\x03\x02\x02\x02\u2197\u2198\x03\x02" +
		"\x02\x02\u2198\u2196\x03\x02\x02\x02\u2198\u2199\x03\x02\x02\x02\u2199" +
		"\u219B\x03\x02\x02\x02\u219A\u219C\x07\u0336\x02\x02\u219B\u219A\x03\x02" +
		"\x02\x02\u219B\u219C\x03\x02\x02\x02\u219C\u219D\x03\x02\x02\x02\u219D" +
		"\u219E\x07\x86\x02\x02\u219E\u21B3\x05\u03B6\u01DC\x02\u219F\u21A0\x07" +
		"\x89\x02\x02\u21A0\u21A1\x07\xAC\x02\x02\u21A1\u21A2\x07\u0335\x02\x02" +
		"\u21A2\u21A3\x05\u038E\u01C8\x02\u21A3\u21A4\x07\u0336\x02\x02\u21A4\u21A5" +
		"\x07\u010E\x02\x02\u21A5\u21AA\x05\u0382\u01C2\x02\u21A6\u21A7\x07\u0335" +
		"\x02\x02\u21A7\u21A8\x05\u038E\u01C8\x02\u21A8\u21A9\x07\u0336\x02\x02" +
		"\u21A9\u21AB\x03\x02\x02\x02\u21AA\u21A6\x03\x02\x02\x02\u21AA\u21AB\x03" +
		"\x02\x02\x02\u21AB\u21AD\x03\x02\x02\x02\u21AC\u21AE\x05\u02B8\u015D\x02" +
		"\u21AD\u21AC\x03\x02\x02\x02\u21AD\u21AE\x03\x02\x02\x02\u21AE\u21B0\x03" +
		"\x02\x02\x02\u21AF\u21B1\x05\u02BA\u015E\x02\u21B0\u21AF\x03\x02\x02\x02" +
		"\u21B0\u21B1\x03\x02\x02\x02\u21B1\u21B3\x03\x02\x02\x02\u21B2\u2175\x03" +
		"\x02\x02\x02\u21B2\u2184\x03\x02\x02\x02\u21B2\u218E\x03\x02\x02\x02\u21B2" +
		"\u219F\x03\x02\x02\x02\u21B3\u02B7\x03\x02\x02\x02\u21B4\u21B5\x07\xE5" +
		"\x02\x02\u21B5\u21BD\x07]\x02\x02\u21B6\u21B7\x07\u0264\x02\x02\u21B7" +
		"\u21BE\x07\u0183\x02\x02\u21B8\u21BE\x07)\x02\x02\u21B9\u21BA\x07\u013D" +
		"\x02\x02\u21BA\u21BE\x07\xDF\x02\x02\u21BB\u21BC\x07\u013D\x02\x02\u21BC" +
		"\u21BE\x07Z\x02\x02\u21BD\u21B6\x03\x02\x02\x02\u21BD\u21B8\x03\x02\x02" +
		"\x02\u21BD\u21B9\x03\x02\x02\x02\u21BD\u21BB\x03\x02\x02\x02\u21BE\u02B9" +
		"\x03\x02\x02\x02\u21BF\u21C0\x07\xE5\x02\x02\u21C0\u21C8\x07\u016C\x02" +
		"\x02\u21C1\u21C2\x07\u0264\x02\x02\u21C2\u21C9\x07\u0183\x02\x02\u21C3" +
		"\u21C9\x07)\x02\x02\u21C4\u21C5\x07\u013D\x02\x02\u21C5\u21C9\x07\xDF" +
		"\x02\x02\u21C6\u21C7\x07\u013D\x02\x02\u21C7\u21C9\x07Z\x02\x02\u21C8" +
		"\u21C1\x03\x02\x02\x02\u21C8\u21C3\x03\x02\x02\x02\u21C8\u21C4\x03\x02" +
		"\x02\x02\u21C8\u21C6\x03\x02\x02\x02\u21C9\u02BB\x03\x02\x02\x02\u21CA" +
		"\u21CB\x07\u017C\x02\x02\u21CB\u21CC\x07\u0335\x02\x02\u21CC\u21D1\x05" +
		"\u02BE\u0160\x02\u21CD\u21CE\x07\u0337\x02\x02\u21CE\u21D0\x05\u02BE\u0160" +
		"\x02\u21CF\u21CD\x03\x02\x02\x02\u21D0\u21D3\x03\x02\x02\x02\u21D1\u21CF" +
		"\x03\x02\x02\x02\u21D1\u21D2\x03\x02\x02\x02\u21D2\u21D4\x03\x02\x02\x02" +
		"\u21D3\u21D1\x03\x02\x02\x02\u21D4\u21D5\x07\u0336\x02\x02\u21D5\u02BD" +
		"\x03\x02\x02\x02\u21D6\u21D7\x05\u03B8\u01DD\x02\u21D7\u21DB\x07\u0323" +
		"\x02\x02\u21D8\u21DC\x05\u03B8\u01DD\x02\u21D9\u21DC\x05\u0392\u01CA\x02" +
		"\u21DA\u21DC\x07\u031B\x02\x02\u21DB\u21D8\x03\x02\x02\x02\u21DB\u21D9" +
		"\x03\x02\x02\x02\u21DB\u21DA\x03\x02\x02\x02\u21DC\u02BF\x03\x02\x02\x02" +
		"\u21DD\u21DE\x07Y\x02\x02\u21DE\u21FE\x05\u0390\u01C9\x02\u21DF\u21E9" +
		"\x07P\x02\x02\u21E0\u21E7\x05\u02C2\u0162\x02\u21E1\u21E2\x07\x86\x02" +
		"\x02\u21E2\u21E5\x07\u016C\x02\x02\u21E3\u21E4\x07\xE1\x02\x02\u21E4\u21E6" +
		"\x05\u038E\u01C8\x02\u21E5\u21E3\x03\x02\x02\x02\u21E5\u21E6\x03\x02\x02" +
		"\x02\u21E6\u21E8\x03\x02\x02\x02\u21E7\u21E1\x03\x02\x02\x02\u21E7\u21E8" +
		"\x03\x02\x02\x02\u21E8\u21EA\x03\x02\x02\x02\u21E9\u21E0\x03\x02\x02\x02" +
		"\u21E9\u21EA\x03\x02\x02\x02\u21EA\u21FF\x03\x02\x02\x02\u21EB\u21ED\t" +
		"f\x02\x02\u21EC\u21EB\x03\x02\x02\x02\u21EC\u21ED\x03\x02\x02\x02\u21ED" +
		"\u21EF\x03\x02\x02\x02\u21EE\u21F0\x07\u02C0\x02\x02\u21EF\u21EE\x03\x02" +
		"\x02\x02\u21EF\u21F0\x03\x02\x02\x02\u21F0\u21F1\x03\x02\x02\x02\u21F1" +
		"\u21F2\x07P\x02\x02\u21F2\u21F3\x07\x86\x02\x02\u21F3\u21FC\x05\u01BE" +
		"\xE0\x02\u21F4\u21FA\x07\x86\x02\x02\u21F5\u21F6\x07\u010A\x02\x02\u21F6" +
		"\u21FB\x07\u0277\x02\x02\u21F7\u21FB\x07\u016C\x02\x02\u21F8\u21F9\x07" +
		"\xE1\x02\x02\u21F9\u21FB\x05\u038E\u01C8\x02\u21FA\u21F5\x03\x02\x02\x02" +
		"\u21FA\u21F7\x03\x02\x02\x02\u21FA\u21F8\x03\x02\x02\x02\u21FB\u21FD\x03" +
		"\x02\x02\x02\u21FC\u21F4\x03\x02\x02\x02\u21FC\u21FD\x03\x02\x02\x02";
	private static readonly _serializedATNSegment17: string =
		"\u21FD\u21FF\x03\x02\x02\x02\u21FE\u21DF\x03\x02\x02\x02\u21FE\u21EC\x03" +
		"\x02\x02\x02\u21FF\u2201\x03\x02\x02\x02\u2200\u2202\x07\u0338\x02\x02" +
		"\u2201\u2200\x03\x02\x02\x02\u2201\u2202\x03\x02\x02\x02\u2202\u02C1\x03" +
		"\x02\x02\x02\u2203\u2205\x05\u02C4\u0163\x02\u2204\u2203\x03\x02\x02\x02" +
		"\u2205\u2208\x03\x02\x02\x02\u2206\u2204\x03\x02\x02\x02\u2206\u2207\x03" +
		"\x02\x02\x02\u2207\u2209\x03\x02\x02\x02\u2208\u2206\x03\x02\x02\x02\u2209" +
		"\u220A\x07\x86\x02\x02\u220A\u220B\x05\u01BE\xE0\x02\u220B\u02C3\x03\x02" +
		"\x02\x02\u220C\u2212\tA\x02\x02\u220D\u2212\tg\x02\x02\u220E\u2212\th" +
		"\x02\x02\u220F\u2212\ti\x02\x02\u2210\u2212\x07\u02FC\x02\x02\u2211\u220C" +
		"\x03\x02\x02\x02\u2211\u220D\x03\x02\x02\x02\u2211\u220E\x03\x02\x02\x02" +
		"\u2211\u220F\x03\x02\x02\x02\u2211\u2210\x03\x02\x02\x02\u2212\u02C5\x03" +
		"\x02\x02\x02\u2213\u221D\x07\x81\x02\x02\u2214\u221B\x07\u0263\x02\x02" +
		"\u2215\u221B\x07\u0289\x02\x02\u2216\u221B\x07\u0202\x02\x02\u2217\u221B" +
		"\x07\u0230\x02\x02\u2218\u2219\tj\x02\x02\u2219\u221B\x05\u02CC\u0167" +
		"\x02\u221A\u2214\x03\x02\x02\x02\u221A\u2215\x03\x02\x02\x02\u221A\u2216" +
		"\x03\x02\x02\x02\u221A\u2217\x03\x02\x02\x02\u221A\u2218\x03\x02\x02\x02" +
		"\u221A\u221B\x03\x02\x02\x02\u221B\u221C\x03\x02\x02\x02\u221C\u221E\x07" +
		"\x8C\x02\x02\u221D\u221A\x03\x02\x02\x02\u221D\u221E\x03\x02\x02\x02\u221E" +
		"\u2220\x03\x02\x02\x02\u221F\u2221\x07\u020F\x02\x02\u2220\u221F\x03\x02" +
		"\x02\x02\u2220\u2221\x03\x02\x02\x02\u2221\u2222\x03\x02\x02\x02\u2222" +
		"\u222C\x05\u0390\u01C9\x02\u2223\u2224\x07\xA5\x02\x02\u2224\u2229\x07" +
		"\u031A\x02\x02\u2225\u2226\x07\u0337\x02\x02\u2226\u2228\x07\u031A\x02" +
		"\x02\u2227\u2225\x03\x02\x02\x02\u2228\u222B\x03\x02\x02\x02\u2229\u2227" +
		"\x03\x02\x02\x02\u2229\u222A\x03\x02\x02\x02\u222A\u222D\x03\x02\x02\x02" +
		"\u222B\u2229\x03\x02\x02\x02\u222C\u2223\x03\x02\x02\x02\u222C\u222D\x03" +
		"\x02\x02\x02\u222D\u222F\x03\x02\x02\x02\u222E\u2230\x07\u0338\x02\x02" +
		"\u222F\u222E\x03\x02\x02\x02\u222F\u2230\x03\x02\x02\x02\u2230\u02C7\x03" +
		"\x02\x02\x02\u2231\u2232\x07\u013D\x02\x02\u2232\u2236\x05\u03B6\u01DC" +
		"\x02\u2233\u2237\x05\u03B6\u01DC\x02\u2234\u2237\x05\u02CA\u0166\x02\u2235" +
		"\u2237\x05\u0392\u01CA\x02\u2236\u2233\x03\x02\x02\x02\u2236\u2234\x03" +
		"\x02\x02\x02\u2236\u2235\x03\x02\x02\x02\u2237\u2239\x03\x02\x02\x02\u2238" +
		"\u223A\x07\u0338\x02\x02\u2239\u2238\x03\x02\x02\x02\u2239\u223A\x03\x02" +
		"\x02\x02\u223A\u2263\x03\x02\x02\x02\u223B\u223C\x07\u013D\x02\x02\u223C" +
		"\u223D\x07\u0161\x02\x02\u223D\u223E\x07\u0227\x02\x02\u223E\u2248\x07" +
		"\u0233\x02\x02\u223F\u2240\x07\u010A\x02\x02\u2240\u2249\x07\u02FE\x02" +
		"\x02\u2241\u2242\x07\u010A\x02\x02\u2242\u2249\x07\u01BA\x02\x02\u2243" +
		"\u2244\x07\u02AB\x02\x02\u2244\u2249\x07\u010A\x02\x02\u2245\u2249\x07" +
		"\u02D8\x02\x02\u2246\u2249\x07\u02CE\x02\x02\u2247\u2249\x07\u031B\x02" +
		"\x02\u2248\u223F\x03\x02\x02\x02\u2248\u2241\x03\x02\x02\x02\u2248\u2243" +
		"\x03\x02\x02\x02\u2248\u2245\x03\x02\x02\x02\u2248\u2246\x03\x02\x02\x02" +
		"\u2248\u2247\x03\x02\x02\x02\u2249\u224B\x03\x02\x02\x02\u224A\u224C\x07" +
		"\u0338\x02\x02\u224B\u224A\x03\x02\x02\x02\u224B\u224C\x03\x02\x02\x02" +
		"\u224C\u2263\x03\x02\x02\x02\u224D\u224E\x07\u013D\x02\x02\u224E\u224F" +
		"\x07\x99\x02\x02\u224F\u2250\x05\u0382\u01C2\x02\u2250\u2252\x05\u0392" +
		"\u01CA\x02\u2251\u2253\x07\u0338\x02\x02\u2252\u2251\x03\x02\x02\x02\u2252" +
		"\u2253\x03\x02\x02\x02\u2253\u2263\x03\x02\x02\x02\u2254\u2255\x07\u013D" +
		"\x02\x02\u2255\u2256\x07\u0192\x02\x02\u2256\u2263\x05\u0392\u01CA\x02" +
		"\u2257\u2258\x07\u013D\x02\x02\u2258\u2259\x07\u0296\x02\x02\u2259\u2263" +
		"\x05\u0392\u01CA\x02\u225A\u225B\x07\u013D\x02\x02\u225B\u225C\x07\u0193" +
		"\x02\x02\u225C\u2263\x05\u0392\u01CA\x02\u225D\u225E\x07\u013D\x02\x02" +
		"\u225E\u225F\x07\u0194\x02\x02\u225F\u2263\x05\u0392\u01CA\x02\u2260\u2261" +
		"\x07\u013D\x02\x02\u2261\u2263\x05\u033E\u01A0\x02\u2262\u2231\x03\x02" +
		"\x02\x02\u2262\u223B\x03\x02\x02\x02\u2262\u224D\x03\x02\x02\x02\u2262" +
		"\u2254\x03\x02\x02\x02\u2262\u2257\x03\x02\x02\x02\u2262\u225A\x03\x02" +
		"\x02\x02\u2262\u225D\x03\x02\x02\x02\u2262\u2260\x03\x02\x02\x02\u2263" +
		"\u02C9\x03\x02\x02\x02\u2264\u2267\x05\u03B2\u01DA\x02\u2265\u2267\x07" +
		"\u031A\x02\x02\u2266\u2264\x03\x02\x02\x02\u2266\u2265\x03\x02\x02\x02" +
		"\u2267\u02CB\x03\x02\x02\x02\u2268\u2269\b\u0167\x01\x02\u2269\u2271\x05" +
		"\u02CE\u0168\x02\u226A\u2271\x05\u0334\u019B\x02\u226B\u2271\x05\u02D0" +
		"\u0169\x02\u226C\u2271\x05\u038A\u01C6\x02\u226D\u2271\x05\u02D4\u016B" +
		"\x02\u226E\u2271\x05\u02D2\u016A\x02\u226F\u2271\x05\u0364\u01B3\x02\u2270" +
		"\u2268\x03\x02\x02\x02\u2270\u226A\x03\x02\x02\x02\u2270\u226B\x03\x02" +
		"\x02\x02\u2270\u226C\x03\x02\x02\x02\u2270\u226D\x03\x02\x02\x02\u2270" +
		"\u226E\x03\x02\x02\x02\u2270\u226F\x03\x02\x02\x02\u2271\u2285\x03\x02" +
		"\x02\x02\u2272\u2273\f\x07\x02\x02\u2273\u2274\tk\x02\x02\u2274\u2284" +
		"\x05\u02CC\u0167\b\u2275\u2276\f\x06\x02\x02\u2276\u2277\tl\x02\x02\u2277" +
		"\u2284\x05\u02CC\u0167\x07\u2278\u2279\f\x05\x02\x02\u2279\u227A\x05\u03BA" +
		"\u01DE\x02\u227A\u227B\x05\u02CC\u0167\x06\u227B\u2284\x03\x02\x02\x02" +
		"\u227C\u227D\f\x04\x02\x02\u227D\u227E\x05\u03BC\u01DF\x02\u227E\u227F" +
		"\x05\u02CC\u0167\x05\u227F\u2284\x03\x02\x02\x02\u2280\u2281\f\f\x02\x02" +
		"\u2281\u2282\x077\x02\x02\u2282\u2284\x05\u03B6\u01DC\x02\u2283\u2272" +
		"\x03\x02\x02\x02\u2283\u2275\x03\x02\x02\x02\u2283\u2278\x03\x02\x02\x02" +
		"\u2283\u227C\x03\x02\x02\x02\u2283\u2280\x03\x02\x02\x02\u2284\u2287\x03" +
		"\x02\x02\x02\u2285\u2283\x03\x02\x02\x02\u2285\u2286\x03\x02\x02\x02\u2286" +
		"\u02CD\x03\x02\x02\x02\u2287\u2285\x03\x02\x02\x02\u2288\u228D\x07Z\x02" +
		"\x02\u2289\u228D\x07\xDF\x02\x02\u228A\u228D\x07\u031A\x02\x02\u228B\u228D" +
		"\x05\u03B2\u01DA\x02\u228C\u2288\x03\x02\x02\x02\u228C\u2289\x03\x02\x02" +
		"\x02\u228C\u228A\x03\x02\x02\x02\u228C\u228B\x03\x02\x02\x02\u228D\u02CF" +
		"\x03\x02\x02\x02\u228E\u228F\x07*\x02\x02\u228F\u2291\x05\u02CC\u0167" +
		"\x02\u2290\u2292\x05\u0342\u01A2\x02\u2291\u2290\x03\x02\x02\x02\u2292" +
		"\u2293\x03\x02\x02\x02\u2293\u2291\x03\x02\x02\x02\u2293\u2294\x03\x02" +
		"\x02\x02\u2294\u2297\x03\x02\x02\x02\u2295\u2296\x07k\x02\x02\u2296\u2298" +
		"\x05\u02CC\u0167\x02\u2297\u2295\x03\x02\x02\x02\u2297\u2298\x03\x02\x02" +
		"\x02\u2298\u2299\x03\x02\x02\x02\u2299\u229A\x07m\x02\x02\u229A\u22A8" +
		"\x03\x02\x02\x02\u229B\u229D\x07*\x02\x02\u229C\u229E\x05\u0344\u01A3" +
		"\x02\u229D\u229C\x03\x02\x02\x02\u229E\u229F\x03\x02\x02\x02\u229F\u229D" +
		"\x03\x02\x02\x02\u229F\u22A0\x03\x02\x02\x02\u22A0\u22A3\x03\x02\x02\x02" +
		"\u22A1\u22A2\x07k\x02\x02\u22A2\u22A4\x05\u02CC\u0167\x02\u22A3\u22A1" +
		"\x03\x02\x02\x02\u22A3\u22A4\x03\x02\x02\x02\u22A4\u22A5\x03\x02\x02\x02" +
		"\u22A5\u22A6\x07m\x02\x02\u22A6\u22A8\x03\x02\x02\x02\u22A7\u228E\x03" +
		"\x02\x02\x02\u22A7\u229B\x03\x02\x02\x02\u22A8\u02D1\x03\x02\x02\x02\u22A9" +
		"\u22AA\x07\u033F\x02\x02\u22AA\u22AE\x05\u02CC\u0167\x02\u22AB\u22AC\t" +
		"m\x02\x02\u22AC\u22AE\x05\u02CC\u0167\x02\u22AD\u22A9\x03\x02\x02\x02" +
		"\u22AD\u22AB\x03\x02\x02\x02\u22AE\u02D3\x03\x02\x02\x02\u22AF\u22B0\x07" +
		"\u0335\x02\x02\u22B0\u22B1\x05\u02CC\u0167\x02\u22B1\u22B2\x07\u0336\x02" +
		"\x02\u22B2\u22B8\x03\x02\x02\x02\u22B3\u22B4\x07\u0335\x02\x02\u22B4\u22B5" +
		"\x05\u02D8\u016D\x02\u22B5\u22B6\x07\u0336\x02\x02\u22B6\u22B8\x03\x02" +
		"\x02\x02\u22B7\u22AF\x03\x02\x02\x02\u22B7\u22B3\x03\x02\x02\x02\u22B8" +
		"\u02D5\x03\x02\x02\x02\u22B9\u22C2\x07\xDF\x02\x02\u22BA\u22C2\x05\u03B2" +
		"\u01DA\x02\u22BB\u22C2\x05\u0334\u019B\x02\u22BC\u22C2\x07\u031A\x02\x02" +
		"\u22BD\u22BE\x07\u0335\x02\x02\u22BE\u22BF\x05\u02D6\u016C\x02\u22BF\u22C0" +
		"\x07\u0336\x02\x02\u22C0\u22C2\x03\x02\x02\x02\u22C1\u22B9\x03\x02\x02" +
		"\x02\u22C1\u22BA\x03\x02\x02\x02\u22C1\u22BB\x03\x02\x02\x02\u22C1\u22BC" +
		"\x03\x02\x02\x02\u22C1\u22BD\x03\x02\x02\x02\u22C2\u02D7\x03\x02\x02\x02" +
		"\u22C3\u22C4\x05\u01BE\xE0\x02\u22C4\u02D9\x03\x02\x02\x02\u22C5\u22C8" +
		"\x07\u017C\x02\x02\u22C6\u22C7\x07\u0310\x02\x02\u22C7\u22C9\x07\u0337" +
		"\x02\x02\u22C8\u22C6\x03\x02\x02\x02\u22C8\u22C9\x03\x02\x02\x02\u22C9" +
		"\u22CA\x03\x02\x02\x02\u22CA\u22CF\x05\u02DC\u016F\x02\u22CB\u22CC\x07" +
		"\u0337\x02\x02\u22CC\u22CE\x05\u02DC\u016F\x02\u22CD\u22CB\x03\x02\x02" +
		"\x02\u22CE\u22D1\x03\x02\x02\x02\u22CF\u22CD\x03\x02\x02\x02\u22CF\u22D0" +
		"\x03\x02\x02\x02\u22D0\u22E0\x03\x02\x02\x02\u22D1\u22CF\x03\x02\x02\x02" +
		"\u22D2\u22D3\x07\u017C\x02\x02\u22D3\u22D8\x07 \x02\x02\u22D4\u22D5\x07" +
		"\u0335\x02\x02\u22D5\u22D6\x05\u032A\u0196\x02\u22D6\u22D7\x07\u0336\x02" +
		"\x02\u22D7\u22D9\x03\x02\x02\x02\u22D8\u22D4\x03\x02\x02\x02\u22D8\u22D9" +
		"\x03\x02\x02\x02\u22D9\u22DA\x03\x02\x02\x02\u22DA\u22DB\x07\x10\x02\x02" +
		"\u22DB\u22DC\x07\u0335\x02\x02\u22DC\u22DD\x05\u01BE\xE0\x02\u22DD\u22DE" +
		"\x07\u0336\x02\x02\u22DE\u22E0\x03\x02\x02\x02\u22DF\u22C5\x03\x02\x02" +
		"\x02\u22DF\u22D2\x03\x02\x02\x02\u22E0\u02DB\x03\x02\x02\x02\u22E1\u22E6" +
		"\x05\u03B6\u01DC\x02\u22E2\u22E3\x07\u0335\x02\x02\u22E3\u22E4\x05\u038E" +
		"\u01C8\x02\u22E4\u22E5\x07\u0336\x02\x02\u22E5\u22E7\x03\x02\x02\x02\u22E6" +
		"\u22E2\x03\x02\x02\x02\u22E6\u22E7\x03\x02\x02\x02\u22E7\u22E8\x03\x02" +
		"\x02\x02\u22E8\u22E9\x07\x10\x02\x02\u22E9\u22EA\x07\u0335\x02\x02\u22EA" +
		"\u22EB\x05\u01BE\xE0\x02\u22EB\u22EC\x07\u0336\x02\x02\u22EC\u02DD\x03" +
		"\x02\x02\x02\u22ED\u22F0\x05\u038A\u01C6\x02\u22EE\u22F0\x07\u031A\x02" +
		"\x02\u22EF\u22ED\x03\x02\x02\x02\u22EF\u22EE\x03\x02\x02\x02\u22F0\u22F3" +
		"\x03\x02\x02\x02\u22F1\u22F4\x07\u0323\x02\x02\u22F2\u22F4\x05\u03BC\u01DF" +
		"\x02\u22F3\u22F1\x03\x02\x02\x02\u22F3\u22F2\x03\x02\x02\x02\u22F4\u22F5" +
		"\x03\x02\x02\x02\u22F5\u22FE\x05\u02CC\u0167\x02\u22F6\u22F7\x05\u03B6" +
		"\u01DC\x02\u22F7\u22F8\x07\u0330\x02\x02\u22F8\u22F9\x05\u03B6\u01DC\x02" +
		"\u22F9\u22FA\x07\u0335\x02\x02\u22FA\u22FB\x05\u035A\u01AE\x02\u22FB\u22FC" +
		"\x07\u0336\x02\x02\u22FC\u22FE\x03\x02\x02\x02\u22FD\u22EF\x03\x02\x02" +
		"\x02\u22FD\u22F6\x03\x02\x02\x02\u22FE\u02DF\x03\x02\x02\x02\u22FF\u2304" +
		"\x05\u02E2\u0172\x02\u2300\u2301\x07\u0337\x02\x02\u2301\u2303\x05\u02E2" +
		"\u0172\x02\u2302\u2300\x03\x02\x02\x02\u2303\u2306\x03\x02\x02\x02\u2304" +
		"\u2302\x03\x02\x02\x02\u2304\u2305\x03\x02\x02\x02\u2305\u02E1\x03\x02" +
		"\x02\x02\u2306\u2304\x03\x02\x02\x02\u2307\u230C\x05\u02E4\u0173\x02\u2308" +
		"\u2309\x07\xED\x02\x02\u2309\u230B\x05\u02E4\u0173\x02\u230A\u2308\x03" +
		"\x02\x02\x02\u230B\u230E\x03\x02\x02\x02\u230C\u230A\x03\x02\x02\x02\u230C" +
		"\u230D\x03\x02\x02\x02\u230D\u02E3\x03\x02\x02\x02\u230E\u230C\x03\x02" +
		"\x02\x02\u230F\u2314\x05\u02E6\u0174\x02\u2310\u2311\x07\v\x02\x02\u2311" +
		"\u2313\x05\u02E6\u0174\x02\u2312\u2310\x03\x02\x02\x02\u2313\u2316\x03" +
		"\x02\x02\x02\u2314\u2312\x03\x02\x02\x02\u2314\u2315\x03\x02\x02\x02\u2315" +
		"\u02E5\x03\x02\x02\x02\u2316\u2314\x03\x02\x02\x02\u2317\u2319\x07\xDC" +
		"\x02\x02\u2318\u2317\x03\x02\x02\x02\u2318\u2319\x03\x02\x02\x02\u2319" +
		"\u231A\x03\x02\x02\x02\u231A\u231B\x05\u02E8\u0175\x02\u231B\u02E7\x03" +
		"\x02\x02\x02\u231C\u231D\x07x\x02\x02\u231D\u231E\x07\u0335\x02\x02\u231E" +
		"\u231F\x05\u02D8\u016D\x02\u231F\u2320\x07\u0336\x02\x02\u2320\u2354\x03" +
		"\x02\x02\x02\u2321\u2322\x05\u02CC\u0167\x02\u2322\u2323\x05\u03BA\u01DE" +
		"\x02\u2323\u2324\x05\u02CC\u0167\x02\u2324\u2354\x03\x02\x02\x02\u2325" +
		"\u2326\x05\u02CC\u0167\x02\u2326\u2327\x05\u03BA\u01DE\x02\u2327\u2328" +
		"\tn\x02\x02\u2328\u2329\x07\u0335\x02\x02\u2329\u232A\x05\u02D8\u016D" +
		"\x02\u232A\u232B\x07\u0336\x02\x02\u232B\u2354\x03\x02\x02\x02\u232C\u232E" +
		"\x05\u02CC\u0167\x02\u232D\u232F\x07\xDC\x02\x02\u232E\u232D\x03\x02\x02" +
		"\x02\u232E\u232F\x03\x02\x02\x02\u232F\u2330\x03\x02\x02\x02\u2330\u2331" +
		"\x07\x1D\x02\x02\u2331\u2332\x05\u02CC\u0167\x02\u2332\u2333\x07\v\x02" +
		"\x02\u2333\u2334\x05\u02CC\u0167\x02\u2334\u2354\x03\x02\x02\x02\u2335" +
		"\u2337\x05\u02CC\u0167\x02\u2336\u2338\x07\xDC\x02\x02\u2337\u2336\x03" +
		"\x02\x02\x02\u2337\u2338\x03\x02\x02\x02\u2338\u2339\x03\x02\x02\x02\u2339" +
		"\u233A\x07\x9B\x02\x02\u233A\u233D\x07\u0335\x02\x02\u233B\u233E\x05\u02D8" +
		"\u016D\x02\u233C\u233E\x05\u035A\u01AE\x02\u233D\u233B\x03\x02\x02\x02" +
		"\u233D\u233C\x03\x02\x02\x02\u233E\u233F\x03\x02\x02\x02\u233F\u2340\x07" +
		"\u0336\x02\x02\u2340\u2354\x03\x02\x02\x02\u2341\u2343\x05\u02CC\u0167" +
		"\x02\u2342\u2344\x07\xDC\x02\x02\u2343\u2342\x03\x02\x02\x02\u2343\u2344" +
		"\x03\x02\x02\x02\u2344\u2345\x03\x02\x02\x02\u2345\u2346\x07\xB4\x02\x02" +
		"\u2346\u2349\x05\u02CC\u0167\x02\u2347\u2348\x07p\x02\x02\u2348\u234A" +
		"\x05\u02CC\u0167\x02\u2349\u2347\x03\x02\x02\x02\u2349\u234A\x03\x02\x02" +
		"\x02\u234A\u2354\x03\x02\x02\x02\u234B\u234C\x05\u02CC\u0167\x02\u234C" +
		"\u234D\x07\xA8\x02\x02\u234D\u234E\x05\u0396\u01CC\x02\u234E\u2354\x03" +
		"\x02\x02\x02\u234F\u2350\x07\u0335\x02\x02\u2350\u2351\x05\u02E2\u0172" +
		"\x02\u2351\u2352\x07\u0336\x02\x02\u2352\u2354\x03\x02\x02\x02\u2353\u231C" +
		"\x03\x02\x02\x02\u2353\u2321\x03\x02\x02\x02\u2353\u2325\x03\x02\x02\x02" +
		"\u2353\u232C\x03\x02\x02\x02\u2353\u2335\x03\x02\x02\x02\u2353\u2341\x03" +
		"\x02\x02\x02\u2353\u234B\x03\x02\x02\x02\u2353\u234F\x03\x02\x02\x02\u2354" +
		"\u02E9\x03\x02\x02\x02\u2355\u235B\x05\u02EE\u0178\x02\u2356\u2357\x07" +
		"\u0335\x02\x02\u2357\u2358\x05\u02EA\u0176\x02\u2358\u2359\x07\u0336\x02" +
		"\x02\u2359\u235B\x03\x02\x02\x02\u235A\u2355\x03\x02\x02\x02\u235A\u2356" +
		"\x03\x02\x02\x02\u235B\u235F\x03\x02\x02\x02\u235C\u235E\x05\u02EC\u0177" +
		"\x02\u235D\u235C\x03\x02\x02\x02\u235E\u2361\x03\x02\x02\x02\u235F\u235D" +
		"\x03\x02\x02\x02\u235F\u2360\x03\x02\x02\x02\u2360\u02EB\x03\x02\x02\x02" +
		"\u2361\u235F\x03\x02\x02\x02\u2362\u2364\x07\u0167\x02\x02\u2363\u2365" +
		"\x07\x06\x02\x02\u2364\u2363\x03\x02\x02\x02\u2364\u2365\x03\x02\x02\x02" +
		"\u2365\u2369\x03\x02\x02\x02\u2366\u2369\x07u\x02\x02\u2367\u2369\x07" +
		"\xA4\x02\x02\u2368\u2362\x03\x02\x02\x02\u2368\u2366\x03\x02\x02\x02\u2368" +
		"\u2367\x03\x02\x02\x02\u2369\u236F\x03\x02\x02\x02\u236A\u2370\x05\u02EE" +
		"\u0178\x02\u236B\u236C\x07\u0335\x02\x02\u236C\u236D\x05\u02EA\u0176\x02" +
		"\u236D\u236E\x07\u0336\x02\x02\u236E\u2370\x03\x02\x02\x02\u236F\u236A" +
		"\x03\x02\x02\x02\u236F\u236B\x03\x02\x02\x02\u2370\u02ED\x03\x02\x02\x02" +
		"\u2371\u2373\x07\u0132\x02\x02\u2372\u2374\to\x02\x02\u2373\u2372\x03" +
		"\x02\x02\x02\u2373\u2374\x03\x02\x02\x02\u2374\u2376\x03\x02\x02\x02\u2375" +
		"\u2377\x05\u02F0\u0179\x02\u2376\u2375\x03\x02\x02\x02\u2376\u2377\x03" +
		"\x02\x02\x02\u2377\u2378\x03\x02\x02\x02\u2378\u237B\x05\u0306\u0184\x02" +
		"\u2379\u237A\x07\xA5\x02\x02\u237A\u237C\x05\u0382\u01C2\x02\u237B\u2379" +
		"\x03\x02\x02\x02\u237B\u237C\x03\x02\x02\x02\u237C\u237F\x03\x02\x02\x02" +
		"\u237D\u237E\x07\x8C\x02\x02\u237E\u2380\x05\u0314\u018B\x02\u237F\u237D" +
		"\x03\x02\x02\x02\u237F\u2380\x03\x02\x02\x02\u2380\u2383\x03\x02\x02\x02" +
		"\u2381\u2382\x07\u0179\x02\x02\u2382\u2384\x05\u02E2\u0172\x02\u2383\u2381" +
		"\x03\x02\x02\x02\u2383\u2384\x03\x02\x02\x02\u2384\u2392\x03\x02\x02\x02" +
		"\u2385\u2386\x07\x93\x02\x02\u2386\u2388\x07&\x02\x02\u2387\u2389\x07" +
		"\x06\x02\x02\u2388\u2387\x03\x02\x02\x02\u2388\u2389\x03\x02\x02\x02\u2389" +
		"\u238A\x03\x02\x02\x02\u238A\u238F\x05\u02FE\u0180\x02\u238B\u238C\x07" +
		"\u0337\x02\x02\u238C\u238E\x05\u02FE\u0180\x02\u238D\u238B\x03\x02\x02" +
		"\x02\u238E\u2391\x03\x02\x02\x02\u238F\u238D\x03\x02\x02\x02\u238F\u2390" +
		"\x03\x02\x02\x02\u2390\u2393\x03\x02\x02\x02\u2391\u238F\x03\x02\x02\x02" +
		"\u2392\u2385\x03\x02\x02\x02\u2392\u2393\x03\x02\x02\x02\u2393\u2396\x03" +
		"\x02\x02\x02\u2394\u2395\x07\x94\x02\x02\u2395\u2397\x05\u02E2\u0172\x02" +
		"\u2396\u2394\x03\x02\x02\x02\u2396\u2397\x03\x02\x02\x02\u2397\u02EF\x03" +
		"\x02\x02\x02\u2398\u239B\x07\u015E\x02\x02\u2399\u239C\x05\u02F2\u017A" +
		"\x02\u239A\u239C\x05\u02F4\u017B\x02\u239B\u2399\x03\x02\x02\x02\u239B" +
		"\u239A\x03\x02\x02\x02\u239C\u239F\x03\x02\x02\x02\u239D\u239E\x07\u017C" +
		"\x02\x02\u239E\u23A0\x07\u02EE\x02\x02\u239F\u239D\x03\x02\x02\x02\u239F" +
		"\u23A0\x03\x02\x02\x02\u23A0\u02F1\x03\x02\x02\x02\u23A1\u23A2\tp\x02" +
		"\x02\u23A2\u23A9\x07\xF5\x02\x02\u23A3\u23A4\x07\u0335\x02\x02\u23A4\u23A5" +
		"\x05\u02CC\u0167\x02\u23A5\u23A6\x07\u0336\x02\x02\u23A6\u23A7\x07\xF5" +
		"\x02\x02\u23A7\u23A9\x03\x02\x02\x02\u23A8\u23A1\x03\x02\x02\x02\u23A8" +
		"\u23A3\x03\x02\x02\x02\u23A9\u02F3\x03\x02\x02\x02\u23AA\u23B0\x07\u031B" +
		"\x02\x02\u23AB\u23AC\x07\u0335\x02\x02\u23AC\u23AD\x05\u02CC\u0167\x02" +
		"\u23AD\u23AE\x07\u0336\x02\x02\u23AE\u23B0\x03\x02\x02\x02\u23AF\u23AA" +
		"\x03\x02\x02\x02\u23AF\u23AB\x03\x02\x02\x02\u23B0\u02F5\x03\x02\x02\x02" +
		"\u23B1\u23B2\x07\xEE\x02\x02\u23B2\u23B3\x07&\x02\x02\u23B3\u23B8\x05" +
		"\u02FC\u017F\x02\u23B4\u23B5\x07\u0337\x02\x02\u23B5\u23B7\x05\u02FC\u017F" +
		"\x02\u23B6\u23B4\x03\x02\x02\x02\u23B7\u23BA\x03\x02\x02\x02\u23B8\u23B6" +
		"\x03\x02\x02\x02\u23B8\u23B9\x03\x02\x02\x02\u23B9\u23C6\x03\x02\x02\x02" +
		"\u23BA\u23B8\x03\x02\x02\x02\u23BB\u23BC\x07\u0274\x02\x02\u23BC\u23BD" +
		"\x05\u02CC\u0167\x02\u23BD\u23C4\tq\x02\x02\u23BE\u23BF\x07\x81\x02\x02" +
		"\u23BF\u23C0\tr\x02\x02\u23C0\u23C1\x05\u02CC\u0167\x02\u23C1\u23C2\t" +
		"q\x02\x02\u23C2\u23C3\x07\u0277\x02\x02\u23C3\u23C5\x03\x02\x02\x02\u23C4" +
		"\u23BE\x03\x02\x02\x02\u23C4\u23C5\x03\x02\x02\x02\u23C5\u23C7\x03\x02" +
		"\x02\x02\u23C6\u23BB\x03\x02\x02\x02\u23C6\u23C7\x03\x02\x02\x02\u23C7" +
		"\u02F7\x03\x02\x02\x02\u23C8\u23C9\x07\x86\x02\x02\u23C9\u2421\x07\"\x02" +
		"\x02\u23CA\u23CB\x07\x86\x02\x02\u23CB\u23D3\x07\u030E\x02\x02\u23CC\u23D0" +
		"\x07\u0109\x02\x02\u23CD\u23CE\x07\u0335\x02\x02\u23CE\u23CF\x07\u031F" +
		"\x02\x02\u23CF\u23D1\x07\u0336\x02\x02\u23D0\u23CD\x03\x02\x02\x02\u23D0" +
		"\u23D1\x03\x02\x02\x02\u23D1\u23D4\x03\x02\x02\x02\u23D2\u23D4\x07\u019B" +
		"\x02\x02\u23D3\u23CC\x03\x02\x02\x02\u23D3\u23D2\x03\x02\x02\x02\u23D4" +
		"\u23D8\x03\x02\x02\x02\u23D5\u23D7\x05\u02FA\u017E\x02\u23D6\u23D5\x03" +
		"\x02\x02\x02\u23D7\u23DA\x03\x02\x02\x02\u23D8\u23D6\x03\x02\x02\x02\u23D8" +
		"\u23D9\x03\x02\x02\x02\u23D9\u23E5\x03\x02\x02\x02\u23DA\u23D8\x03\x02" +
		"\x02\x02\u23DB\u23E3\x07\u0337\x02\x02\u23DC\u23E4\x07\u030F\x02\x02\u23DD" +
		"\u23E1\x07\u0311\x02\x02\u23DE\u23DF\x07\u0335\x02\x02\u23DF\u23E0\x07" +
		"\u031F\x02\x02\u23E0\u23E2\x07\u0336\x02\x02\u23E1\u23DE\x03\x02\x02\x02" +
		"\u23E1\u23E2\x03\x02\x02\x02\u23E2\u23E4\x03\x02\x02\x02\u23E3\u23DC\x03" +
		"\x02\x02\x02\u23E3\u23DD\x03\x02\x02\x02\u23E4\u23E6\x03\x02\x02\x02\u23E5" +
		"\u23DB\x03\x02\x02\x02\u23E5\u23E6\x03\x02\x02\x02\u23E6\u23EA\x03\x02" +
		"\x02\x02\u23E7\u23E8\x07\u0337\x02\x02\u23E8\u23E9\x07\u01E8\x02\x02\u23E9" +
		"\u23EB\ts\x02\x02\u23EA\u23E7\x03\x02\x02\x02\u23EA\u23EB\x03\x02\x02" +
		"\x02\u23EB\u2421\x03\x02\x02\x02\u23EC\u23ED\x07\x86\x02\x02\u23ED\u23EE" +
		"\x07\u030E\x02\x02\u23EE\u23F2\x07\u01F6\x02\x02\u23EF\u23F1\x05\u02FA" +
		"\u017E\x02\u23F0\u23EF\x03\x02\x02\x02\u23F1\u23F4\x03\x02\x02\x02\u23F2" +
		"\u23F0\x03\x02\x02\x02\u23F2\u23F3\x03\x02\x02\x02\u23F3\u23F7\x03\x02" +
		"\x02\x02\u23F4\u23F2\x03\x02\x02\x02\u23F5\u23F6\x07\u0337\x02\x02\u23F6" +
		"\u23F8\x07\u030F\x02\x02\u23F7\u23F5\x03\x02\x02\x02\u23F7\u23F8\x03\x02" +
		"\x02\x02\u23F8\u2421\x03\x02\x02\x02\u23F9\u23FA\x07\x86\x02\x02\u23FA" +
		"\u23FB\x07\u030E\x02\x02\u23FB\u23FF\x07\u0283\x02\x02\u23FC\u23FD\x07" +
		"\u0335\x02\x02\u23FD\u23FE\x07\u031F\x02\x02\u23FE\u2400\x07\u0336\x02" +
		"\x02\u23FF\u23FC\x03\x02\x02\x02\u23FF\u2400\x03\x02\x02\x02\u2400\u2404" +
		"\x03\x02\x02\x02\u2401\u2403\x05\u02FA\u017E\x02\u2402\u2401\x03\x02\x02" +
		"\x02\u2403\u2406\x03\x02\x02\x02\u2404\u2402\x03\x02\x02\x02\u2404\u2405" +
		"\x03\x02\x02\x02\u2405\u240A\x03\x02\x02\x02\u2406\u2404\x03\x02\x02\x02" +
		"\u2407\u2408\x07\u0337\x02\x02\u2408\u2409\x07\u01E8\x02\x02\u2409\u240B" +
		"\ts\x02\x02\u240A\u2407\x03\x02\x02\x02\u240A\u240B\x03\x02\x02\x02\u240B" +
		"\u2421\x03\x02\x02\x02\u240C\u240D\x07\x86\x02\x02\u240D\u240E\x07\u0228" +
		"\x02\x02\u240E\u2416\tt\x02\x02\u240F\u2410\x07\u0337\x02\x02\u2410\u2414" +
		"\x07\u02B7\x02\x02\u2411\u2412\x07\u0335\x02\x02\u2412\u2413\x07\u031F" +
		"\x02\x02\u2413\u2415\x07\u0336\x02\x02\u2414\u2411\x03\x02\x02\x02\u2414" +
		"\u2415\x03\x02\x02\x02\u2415\u2417\x03\x02\x02\x02\u2416\u240F\x03\x02" +
		"\x02\x02\u2416\u2417\x03\x02\x02\x02\u2417\u241A\x03\x02\x02\x02\u2418" +
		"\u2419\x07\u0337\x02\x02\u2419\u241B\x07\u021F\x02\x02\u241A\u2418\x03" +
		"\x02\x02\x02\u241A\u241B\x03\x02\x02\x02\u241B\u241E\x03\x02\x02\x02\u241C" +
		"\u241D\x07\u0337\x02\x02\u241D\u241F\x07\u030B\x02\x02\u241E\u241C\x03" +
		"\x02\x02\x02\u241E\u241F\x03\x02\x02\x02\u241F\u2421\x03\x02\x02\x02\u2420" +
		"\u23C8\x03\x02\x02\x02\u2420\u23CA\x03\x02\x02\x02\u2420\u23EC\x03\x02" +
		"\x02\x02\u2420\u23F9\x03\x02\x02\x02\u2420\u240C\x03\x02\x02\x02\u2421" +
		"\u02F9\x03\x02\x02\x02\u2422\u2423\x07\u0337\x02\x02\u2423\u2424\tu\x02" +
		"\x02\u2424\u02FB\x03\x02\x02\x02\u2425\u2427\x05\u02CC\u0167\x02\u2426" +
		"\u2428\tv\x02\x02\u2427\u2426\x03\x02\x02\x02\u2427\u2428\x03\x02\x02" +
		"\x02\u2428\u02FD\x03\x02\x02\x02\u2429\u242A\x05\u02CC\u0167\x02\u242A" +
		"\u02FF\x03\x02\x02\x02\u242B\u242C\x07\xEC\x02\x02\u242C\u242D\x07\u0335" +
		"\x02\x02\u242D\u2432\x05\u0302\u0182\x02\u242E\u242F\x07\u0337\x02\x02" +
		"\u242F\u2431\x05\u0302\u0182\x02\u2430\u242E\x03\x02\x02\x02\u2431\u2434" +
		"\x03\x02\x02\x02\u2432\u2430\x03\x02\x02\x02\u2432\u2433\x03\x02\x02\x02" +
		"\u2433\u2435\x03\x02\x02\x02\u2434\u2432\x03\x02\x02\x02\u2435\u2436\x07" +
		"\u0336\x02\x02\u2436\u0301\x03\x02\x02\x02\u2437\u2438\x07\u01FB\x02\x02" +
		"\u2438\u2465\x07\u031B\x02\x02\u2439\u243A\tw\x02\x02\u243A\u2465\x07" +
		"\x93\x02\x02\u243B\u243C\tx\x02\x02\u243C\u2465\x07\u0167\x02\x02\u243D" +
		"\u243E\ty\x02\x02\u243E\u2465\x07\xAA\x02\x02\u243F\u2440\x07\u01F4\x02" +
		"\x02\u2440\u2465\x07\u0308\x02\x02\u2441\u2442\x07\u0205\x02\x02\u2442" +
		"\u2465\x07\xEE\x02\x02\u2443\u2465\x07\u021B\x02\x02\u2444\u2445\x07\u022A" +
		"\x02\x02\u2445\u2465\x07\xFB\x02\x02\u2446\u2447\x07\u022B\x02\x02\u2447" +
		"\u2465\x07\xFB\x02\x02\u2448\u2449\x07\u024B\x02\x02\u2449\u2465\x07\u031B" +
		"\x02\x02\u244A\u244B\x07\u024C\x02\x02\u244B\u2465\x07\u031B\x02\x02\u244C" +
		"\u244D\x07\u027A\x02\x02\u244D\u244E\x07\x86\x02\x02\u244E\u244F\x07\u0335" +
		"\x02\x02\u244F\u2454\x05\u0304\u0183\x02\u2450\u2451\x07\u0337\x02\x02" +
		"\u2451\u2453\x05\u0304\u0183\x02\u2452\u2450\x03\x02\x02\x02\u2453\u2456" +
		"\x03\x02\x02\x02\u2454\u2452\x03\x02\x02\x02\u2454\u2455\x03\x02\x02\x02" +
		"\u2455\u2457\x03\x02\x02\x02\u2456\u2454\x03\x02\x02\x02\u2457\u2458\x07" +
		"\u0336\x02\x02\u2458\u2465\x03\x02\x02\x02\u2459\u245A\x07\u027A\x02\x02" +
		"\u245A\u245B\x07\x86\x02\x02\u245B\u2465\x07\u02FF\x02\x02\u245C\u245D" +
		"\x07\u027F\x02\x02\u245D\u2465\tM\x02\x02\u245E\u2465\x07\u02A3\x02\x02" +
		"\u245F\u2460\x07\u02B6\x02\x02\u2460\u2465\x07\xFB\x02\x02\u2461\u2462" +
		"\x07\u016F\x02\x02\u2462\u2463\x07\xFB\x02\x02\u2463\u2465\x07\u031F\x02" +
		"\x02\u2464\u2437\x03\x02\x02\x02\u2464\u2439\x03\x02\x02\x02\u2464\u243B" +
		"\x03\x02\x02\x02\u2464\u243D\x03\x02\x02\x02\u2464\u243F\x03\x02\x02\x02" +
		"\u2464\u2441\x03\x02\x02\x02\u2464\u2443\x03\x02\x02\x02\u2464\u2444\x03" +
		"\x02\x02\x02\u2464\u2446\x03\x02\x02\x02\u2464\u2448\x03\x02\x02\x02\u2464" +
		"\u244A\x03\x02\x02\x02\u2464\u244C\x03\x02\x02\x02\u2464\u2459\x03\x02" +
		"\x02\x02\u2464\u245C\x03\x02\x02\x02\u2464\u245E\x03\x02\x02\x02\u2464" +
		"\u245F\x03\x02\x02\x02\u2464\u2461\x03\x02\x02\x02\u2465\u0303\x03\x02" +
		"\x02\x02\u2466\u246D\x07\u031A\x02\x02\u2467\u246E\x07\u02FF\x02\x02\u2468" +
		"\u246B\x07\u0323\x02\x02\u2469\u246C\x05\u03B2\u01DA\x02\u246A\u246C\x07" +
		"\xDF\x02\x02\u246B\u2469\x03\x02\x02\x02\u246B\u246A\x03\x02\x02\x02\u246C" +
		"\u246E\x03\x02\x02\x02\u246D\u2467\x03\x02\x02\x02\u246D\u2468\x03\x02" +
		"\x02\x02\u246E\u0305\x03\x02\x02\x02\u246F\u2474\x05\u0312\u018A\x02\u2470" +
		"\u2471\x07\u0337\x02\x02\u2471\u2473\x05\u0312\u018A\x02\u2472\u2470\x03" +
		"\x02\x02\x02\u2473\u2476\x03\x02\x02\x02\u2474\u2472\x03\x02\x02\x02\u2474" +
		"\u2475\x03\x02\x02\x02\u2475\u0307\x03\x02\x02\x02\u2476\u2474\x03\x02" +
		"\x02\x02\u2477\u2478\x07\u0335\x02\x02\u2478\u247D\x05\u0276\u013C\x02" +
		"\u2479\u247A\x07\u0337\x02\x02\u247A\u247C\x05\u0276\u013C\x02\u247B\u2479" +
		"\x03\x02\x02\x02\u247C\u247F\x03\x02\x02\x02\u247D\u247B\x03\x02\x02\x02" +
		"\u247D\u247E\x03\x02\x02\x02\u247E\u2480\x03\x02\x02\x02\u247F\u247D\x03" +
		"\x02\x02\x02\u2480\u2481\x07\u0336\x02\x02\u2481\u0309\x03\x02\x02\x02" +
		"\u2482\u2488\x07\u033A\x02\x02\u2483\u2484\x05\u0382\u01C2\x02\u2484\u2485" +
		"\x07\u0330\x02\x02\u2485\u2486\x05\u030A\u0186\x02\u2486\u2488\x03\x02" +
		"\x02\x02\u2487\u2482\x03\x02\x02\x02\u2487\u2483\x03\x02\x02\x02\u2488" +
		"\u030B\x03\x02\x02\x02\u2489\u248A\x05\u0382\u01C2\x02\u248A\u248B\x07" +
		"\u0330\x02\x02\u248B\u248D\x03\x02\x02\x02\u248C\u2489\x03\x02\x02\x02" +
		"\u248C\u248D\x03\x02\x02\x02\u248D\u2493\x03\x02\x02\x02\u248E\u2494\x05" +
		"\u03B6\u01DC\x02\u248F\u2490\x07\u0334\x02\x02\u2490\u2494\x07\x97\x02" +
		"\x02\u2491\u2492\x07\u0334\x02\x02\u2492\u2494\x07\u02BB\x02\x02\u2493" +
		"\u248E\x03\x02\x02\x02\u2493\u248F\x03\x02\x02\x02\u2493\u2491\x03\x02" +
		"\x02\x02\u2494\u2496\x03\x02\x02\x02\u2495\u2497\x05\u0346\u01A4\x02\u2496" +
		"\u2495\x03\x02\x02\x02\u2496\u2497\x03\x02\x02\x02\u2497\u030D\x03\x02" +
		"\x02\x02\u2498\u2499\x05\u03B6\u01DC\x02\u2499\u249A\x07\u0330\x02\x02" +
		"\u249A\u249B\x05\u03B6\u01DC\x02\u249B\u249D\x05\u0308\u0185\x02\u249C" +
		"\u249E\x05\u0346\u01A4\x02\u249D\u249C\x03\x02\x02\x02\u249D\u249E\x03" +
		"\x02\x02\x02\u249E\u24AA\x03\x02\x02\x02\u249F\u24A0\x05\u03B6\u01DC\x02" +
		"\u24A0\u24A1\x07\u0339\x02\x02\u24A1\u24A2\x07\u0339\x02\x02\u24A2\u24A4" +
		"\x05\u03B6\u01DC\x02\u24A3\u24A5";
	private static readonly _serializedATNSegment18: string =
		"\x05\u0308\u0185\x02\u24A4\u24A3\x03\x02\x02\x02\u24A4\u24A5\x03\x02\x02" +
		"\x02\u24A5\u24A7\x03\x02\x02\x02\u24A6\u24A8\x05\u0346\u01A4\x02\u24A7" +
		"\u24A6\x03\x02\x02\x02\u24A7\u24A8\x03\x02\x02\x02\u24A8\u24AA\x03\x02" +
		"\x02\x02\u24A9\u2498\x03\x02\x02\x02\u24A9\u249F\x03\x02\x02\x02\u24AA" +
		"\u030F\x03\x02\x02\x02\u24AB\u24AC\x05\u0356\u01AC\x02\u24AC\u24AD\x07" +
		"\u0323\x02\x02\u24AD\u24AE\x05\u02CC\u0167\x02\u24AE\u24B4\x03\x02\x02" +
		"\x02\u24AF\u24B1\x05\u02CC\u0167\x02\u24B0\u24B2\x05\u0346\u01A4\x02\u24B1" +
		"\u24B0\x03\x02\x02\x02\u24B1\u24B2\x03\x02\x02\x02\u24B2\u24B4\x03\x02" +
		"\x02\x02\u24B3\u24AB\x03\x02\x02\x02\u24B3\u24AF\x03\x02\x02\x02\u24B4" +
		"\u0311\x03\x02\x02\x02\u24B5\u24BA\x05\u030A\u0186\x02\u24B6\u24BA\x05" +
		"\u030C\u0187\x02\u24B7\u24BA\x05\u030E\u0188\x02\u24B8\u24BA\x05\u0310" +
		"\u0189\x02\u24B9\u24B5\x03\x02\x02\x02\u24B9\u24B6\x03\x02\x02\x02\u24B9" +
		"\u24B7\x03\x02\x02\x02\u24B9\u24B8\x03\x02\x02\x02\u24BA\u0313\x03\x02" +
		"\x02\x02\u24BB\u24C0\x05\u0316\u018C\x02\u24BC\u24BD\x07\u0337\x02\x02" +
		"\u24BD\u24BF\x05\u0316\u018C\x02\u24BE\u24BC\x03\x02\x02\x02\u24BF\u24C2" +
		"\x03\x02\x02\x02\u24C0\u24BE\x03\x02\x02\x02\u24C0\u24C1\x03\x02\x02\x02" +
		"\u24C1\u0315\x03\x02\x02\x02\u24C2\u24C0\x03\x02\x02\x02\u24C3\u24C9\x05" +
		"\u0318\u018D\x02\u24C4\u24C5\x07\u0335\x02\x02\u24C5\u24C6\x05\u0318\u018D" +
		"\x02\u24C6\u24C7\x07\u0336\x02\x02\u24C7\u24C9\x03\x02\x02\x02\u24C8\u24C3" +
		"\x03\x02\x02\x02\u24C8\u24C4\x03\x02\x02\x02\u24C9\u0317\x03\x02\x02\x02" +
		"\u24CA\u24CE\x05\u031A\u018E\x02\u24CB\u24CD\x05\u0324\u0193\x02\u24CC" +
		"\u24CB\x03\x02\x02\x02\u24CD\u24D0\x03\x02\x02\x02\u24CE\u24CC\x03\x02" +
		"\x02\x02\u24CE\u24CF\x03\x02\x02\x02\u24CF\u0319\x03\x02\x02\x02\u24D0" +
		"\u24CE\x03\x02\x02\x02\u24D1\u24D3\x05\u032C\u0197\x02\u24D2\u24D4\x05" +
		"\u0348\u01A5\x02\u24D3\u24D2\x03\x02\x02\x02\u24D3\u24D4\x03\x02\x02\x02" +
		"\u24D4\u2500\x03\x02\x02\x02\u24D5\u24D7\x05\u0380\u01C1\x02\u24D6\u24D8" +
		"\x05\u0348\u01A5\x02\u24D7\u24D6\x03\x02\x02\x02\u24D7\u24D8\x03\x02\x02" +
		"\x02\u24D8\u2500\x03\x02\x02\x02\u24D9\u24DB\x05\u032E\u0198\x02\u24DA" +
		"\u24DC\x05\u0348\u01A5\x02\u24DB\u24DA\x03\x02\x02\x02\u24DB\u24DC\x03" +
		"\x02\x02\x02\u24DC\u2500\x03\x02\x02\x02\u24DD\u24E2\x05\u0332\u019A\x02" +
		"\u24DE\u24E0\x05\u0348\u01A5\x02\u24DF\u24E1\x05\u0354\u01AB\x02\u24E0" +
		"\u24DF\x03\x02\x02\x02\u24E0\u24E1\x03\x02\x02\x02\u24E1\u24E3\x03\x02" +
		"\x02\x02\u24E2\u24DE\x03\x02\x02\x02\u24E2\u24E3\x03\x02\x02\x02\u24E3" +
		"\u2500\x03\x02\x02\x02\u24E4\u24E5\x05\u0322\u0192\x02\u24E5\u24E6\x05" +
		"\u0348\u01A5\x02\u24E6\u2500\x03\x02\x02\x02\u24E7\u24E9\x05\u0334\u019B" +
		"\x02\u24E8\u24EA\x05\u0348\u01A5\x02\u24E9\u24E8\x03\x02\x02\x02\u24E9" +
		"\u24EA\x03\x02\x02\x02\u24EA\u2500\x03\x02\x02\x02\u24EB\u24ED\x07\u031A" +
		"\x02\x02\u24EC\u24EE\x05\u0348\u01A5\x02\u24ED\u24EC\x03\x02\x02\x02\u24ED" +
		"\u24EE\x03\x02\x02\x02\u24EE\u2500\x03\x02\x02\x02\u24EF\u24F0\x07\u031A" +
		"\x02\x02\u24F0\u24F1\x07\u0330\x02\x02\u24F1\u24F6\x05\u0334\u019B\x02" +
		"\u24F2\u24F4\x05\u0348\u01A5\x02\u24F3\u24F5\x05\u0354\u01AB\x02\u24F4" +
		"\u24F3\x03\x02\x02\x02\u24F4\u24F5\x03\x02\x02\x02\u24F5\u24F7\x03\x02" +
		"\x02\x02\u24F6\u24F2\x03\x02\x02\x02\u24F6\u24F7\x03\x02\x02\x02\u24F7" +
		"\u2500\x03\x02\x02\x02\u24F8\u2500\x05\u031C\u018F\x02\u24F9\u24FA\x07" +
		"\u0339\x02\x02\u24FA\u24FB\x07\u0339\x02\x02\u24FB\u24FD\x05\u0334\u019B" +
		"\x02\u24FC\u24FE\x05\u0348\u01A5\x02\u24FD\u24FC\x03\x02\x02\x02\u24FD" +
		"\u24FE\x03\x02\x02\x02\u24FE\u2500\x03\x02\x02\x02\u24FF\u24D1\x03\x02" +
		"\x02\x02\u24FF\u24D5\x03\x02\x02\x02\u24FF\u24D9\x03\x02\x02\x02\u24FF" +
		"\u24DD\x03\x02\x02\x02\u24FF\u24E4\x03\x02\x02\x02\u24FF\u24E7\x03\x02" +
		"\x02\x02\u24FF\u24EB\x03\x02\x02\x02\u24FF\u24EF\x03\x02\x02\x02\u24FF" +
		"\u24F8\x03\x02\x02\x02\u24FF\u24F9\x03\x02\x02\x02\u2500\u031B\x03\x02" +
		"\x02\x02\u2501\u2502\x07\xEB\x02\x02\u2502\u2503\x07\u0335\x02\x02\u2503" +
		"\u2504\x05\u02CC\u0167\x02\u2504\u2505\x07\u0337\x02\x02\u2505\u2508\x05" +
		"\u02CC\u0167\x02\u2506\u2507\x07\u0337\x02\x02\u2507\u2509\x05\u02CC\u0167" +
		"\x02\u2508\u2506\x03\x02\x02\x02\u2508\u2509\x03\x02\x02\x02\u2509\u250A" +
		"\x03\x02\x02\x02\u250A\u2510\x07\u0336\x02\x02\u250B\u250C\x07\u017C\x02" +
		"\x02\u250C\u250D\x07\u0335\x02\x02\u250D\u250E\x05\u031E\u0190\x02\u250E" +
		"\u250F\x07\u0336\x02\x02\u250F\u2511\x03\x02\x02\x02\u2510\u250B\x03\x02" +
		"\x02\x02\u2510\u2511\x03\x02\x02\x02\u2511\u031D\x03\x02\x02\x02\u2512" +
		"\u2517\x05\u0320\u0191\x02\u2513\u2514\x07\u0337\x02\x02\u2514\u2516\x05" +
		"\u0320\u0191\x02\u2515\u2513\x03\x02\x02\x02\u2516\u2519\x03\x02\x02\x02" +
		"\u2517\u2515\x03\x02\x02\x02\u2517\u2518\x03\x02\x02\x02\u2518\u031F\x03" +
		"\x02\x02\x02\u2519\u2517\x03\x02\x02\x02\u251A\u251B\x07\u031C\x02\x02" +
		"\u251B\u251D\x05\u03AE\u01D8\x02\u251C\u251E\x07\u031F\x02\x02\u251D\u251C" +
		"\x03\x02\x02\x02\u251D\u251E\x03\x02\x02\x02\u251E\u0321\x03\x02\x02\x02" +
		"\u251F\u2520\x07,\x02\x02\u2520\u2521\x07\u0335\x02\x02\u2521\u2522\x07" +
		"-\x02\x02\u2522\u2523\x05\u0382\u01C2\x02\u2523\u2524\x07\u0337\x02\x02" +
		"\u2524\u2525\tz\x02\x02\u2525\u2526\x07\u0336\x02\x02\u2526\u0323\x03" +
		"\x02\x02\x02\u2527\u2529\x07\xA1\x02\x02\u2528\u2527\x03\x02\x02\x02\u2528" +
		"\u2529\x03\x02\x02\x02\u2529\u252F\x03\x02\x02\x02\u252A\u252C\t{\x02" +
		"\x02\u252B\u252D\x07\xEF\x02\x02\u252C\u252B\x03\x02\x02\x02\u252C\u252D" +
		"\x03\x02\x02\x02\u252D\u252F\x03\x02\x02\x02\u252E\u2528\x03\x02\x02\x02" +
		"\u252E\u252A\x03\x02\x02\x02\u252F\u2531\x03\x02\x02\x02\u2530\u2532\t" +
		"|\x02\x02\u2531\u2530\x03\x02\x02\x02\u2531\u2532\x03\x02\x02\x02\u2532" +
		"\u2533\x03\x02\x02\x02\u2533\u2534\x07\xAA\x02\x02\u2534\u2535\x05\u0316" +
		"\u018C\x02\u2535\u2536\x07\xE5\x02\x02\u2536\u2537\x05\u02E2\u0172\x02" +
		"\u2537\u254A\x03\x02\x02\x02\u2538\u2539\x07J\x02\x02\u2539\u253A\x07" +
		"\xAA\x02\x02\u253A\u254A\x05\u0316\u018C\x02\u253B\u253C\x07J\x02\x02" +
		"\u253C\u253D\x07\u0196\x02\x02\u253D\u254A\x05\u0316\u018C\x02\u253E\u253F" +
		"\x07\xEF\x02\x02\u253F\u2540\x07\u0196\x02\x02\u2540\u254A\x05\u0316\u018C" +
		"\x02\u2541\u2542\x07\xFA\x02\x02\u2542\u2543\x05\u0326\u0194\x02\u2543" +
		"\u2544\x05\u0348\u01A5\x02\u2544\u254A\x03\x02\x02\x02\u2545\u2546\x07" +
		"\u016A\x02\x02\u2546\u2547\x05\u0328\u0195\x02\u2547\u2548\x05\u0348\u01A5" +
		"\x02\u2548\u254A\x03\x02\x02\x02\u2549\u252E\x03\x02\x02\x02\u2549\u2538" +
		"\x03\x02\x02\x02\u2549\u253B\x03\x02\x02\x02\u2549\u253E\x03\x02\x02\x02" +
		"\u2549\u2541\x03\x02\x02\x02\u2549\u2545\x03\x02\x02\x02\u254A\u0325\x03" +
		"\x02\x02\x02\u254B\u254C\x07\u0335\x02\x02\u254C\u254D\x05\u035E\u01B0" +
		"\x02\u254D\u254E\x07\x86\x02\x02\u254E\u254F\x05\u038A\u01C6\x02\u254F" +
		"\u2550\x07\x9B\x02\x02\u2550\u2551\x05\u0354\u01AB\x02\u2551\u2552\x07" +
		"\u0336\x02\x02\u2552\u0327\x03\x02\x02\x02\u2553\u2554\x07\u0335\x02\x02" +
		"\u2554\u2555\x05\u02CC\u0167\x02\u2555\u2556\x07\x86\x02\x02\u2556\u2557" +
		"\x05\u038A\u01C6\x02\u2557\u2558\x07\x9B\x02\x02\u2558\u2559\x07\u0335" +
		"\x02\x02\u2559\u255A\x05\u032A\u0196\x02\u255A\u255B\x07\u0336\x02\x02" +
		"\u255B\u255C\x07\u0336\x02\x02\u255C\u0329\x03\x02\x02\x02\u255D\u2562" +
		"\x05\u038A\u01C6\x02\u255E\u255F\x07\u0337\x02\x02\u255F\u2561\x05\u038A" +
		"\u01C6\x02\u2560\u255E\x03\x02\x02\x02\u2561\u2564\x03\x02\x02\x02\u2562" +
		"\u2560\x03\x02\x02\x02\u2562\u2563\x03\x02\x02\x02\u2563\u032B\x03\x02" +
		"\x02\x02\u2564\u2562\x03\x02\x02\x02\u2565\u2567\x05\u0382\u01C2\x02\u2566" +
		"\u2568\x05\u034C\u01A7\x02\u2567\u2566\x03\x02\x02\x02\u2567\u2568\x03" +
		"\x02\x02\x02\u2568\u032D\x03\x02\x02\x02\u2569\u256A\x07\xEA\x02\x02\u256A" +
		"\u256B\x07\u0335\x02\x02\u256B\u256C\x07\u031F\x02\x02\u256C\u256D\x07" +
		"\u0337\x02\x02\u256D\u256E\x07\u031F\x02\x02\u256E\u256F\x07\u0337\x02" +
		"\x02\u256F\u2570\x07\u031F\x02\x02\u2570\u2584\x07\u0336\x02\x02\u2571" +
		"\u2572\x07\xEA\x02\x02\u2572\u2573\x07\u0335\x02\x02\u2573\u2574\x07%" +
		"\x02\x02\u2574\u2575\x07\u031F\x02\x02\u2575\u257F\x07\u0337\x02\x02\u2576" +
		"\u257B\x05\u0330\u0199\x02\u2577\u2578\x07\u0337\x02\x02\u2578\u257A\x05" +
		"\u0330\u0199\x02\u2579\u2577\x03\x02\x02\x02\u257A\u257D\x03\x02\x02\x02" +
		"\u257B\u2579\x03\x02\x02\x02\u257B\u257C\x03\x02\x02\x02\u257C\u2580\x03" +
		"\x02\x02\x02\u257D\u257B\x03\x02\x02\x02\u257E\u2580\x05\u03B6\u01DC\x02" +
		"\u257F\u2576\x03\x02\x02\x02\u257F\u257E\x03\x02\x02\x02\u2580\u2581\x03" +
		"\x02\x02\x02\u2581\u2582\x07\u0336\x02\x02\u2582\u2584\x03\x02\x02\x02" +
		"\u2583\u2569\x03\x02\x02\x02\u2583\u2571\x03\x02\x02\x02\u2584\u032F\x03" +
		"\x02\x02\x02\u2585\u2586\x05\u03B6\u01DC\x02\u2586\u2587\x07\u0323\x02" +
		"\x02\u2587\u2588\t\x18\x02\x02\u2588\u0331\x03\x02\x02\x02\u2589\u2594" +
		"\x05\u02D8\u016D\x02\u258A\u258B\x07\u0335\x02\x02\u258B\u258C\x05\u02D8" +
		"\u016D\x02\u258C\u258D\x07\u0336\x02\x02\u258D\u2594\x03\x02\x02\x02\u258E" +
		"\u2594\x05\u0358\u01AD\x02\u258F\u2590\x07\u0335\x02\x02\u2590\u2591\x05" +
		"\u0358\u01AD\x02\u2591\u2592\x07\u0336\x02\x02\u2592\u2594\x03\x02\x02" +
		"\x02\u2593\u2589\x03\x02\x02\x02\u2593\u258A\x03\x02\x02\x02\u2593\u258E" +
		"\x03\x02\x02\x02\u2593\u258F\x03\x02\x02\x02\u2594\u0333\x03\x02\x02\x02" +
		"\u2595\u2611\x05\u035C\u01AF\x02\u2596\u2611\x05\u035E\u01B0\x02\u2597" +
		"\u2611\x05\u0360\u01B1\x02\u2598\u2599\x05\u039A\u01CE\x02\u2599\u259B" +
		"\x07\u0335\x02\x02\u259A\u259C\x05\u035A\u01AE\x02\u259B\u259A\x03\x02" +
		"\x02\x02\u259B\u259C\x03\x02\x02\x02\u259C\u259D\x03\x02\x02\x02\u259D" +
		"\u259E\x07\u0336\x02\x02\u259E\u2611\x03\x02\x02\x02\u259F\u25A0\x07\u01A8" +
		"\x02\x02\u25A0\u25A1\x07\u0335\x02\x02\u25A1\u25A2\x07\u033A\x02\x02\u25A2" +
		"\u2611\x07\u0336\x02\x02\u25A3\u25A4\x07\u01B0\x02\x02\u25A4\u25A5\x07" +
		"\u0335\x02\x02\u25A5\u25A6\x05\u02CC\u0167\x02\u25A6\u25A7\x07\x10\x02" +
		"\x02\u25A7\u25A8\x05\u03AE\u01D8\x02\u25A8\u25A9\x07\u0336\x02\x02\u25A9" +
		"\u2611\x03\x02\x02\x02\u25AA\u25AB\x07G\x02\x02\u25AB\u25AC\x07\u0335" +
		"\x02\x02\u25AC\u25AD\x05\u03AE\u01D8\x02\u25AD\u25AE\x07\u0337\x02\x02" +
		"\u25AE\u25B1\x05\u02CC\u0167\x02\u25AF\u25B0\x07\u0337\x02\x02\u25B0\u25B2" +
		"\x05\u02CC\u0167\x02\u25B1\u25AF\x03\x02\x02\x02\u25B1\u25B2\x03\x02\x02" +
		"\x02\u25B2\u25B3\x03\x02\x02\x02\u25B3\u25B4\x07\u0336\x02\x02\u25B4\u2611" +
		"\x03\x02\x02\x02\u25B5\u25B6\x07\u01B5\x02\x02\u25B6\u25B7\x07\u0335\x02" +
		"\x02\u25B7\u25B8\x07\u033A\x02\x02\u25B8\u2611\x07\u0336\x02\x02\u25B9" +
		"\u25BA\x076\x02\x02\u25BA\u25BB\x07\u0335\x02\x02\u25BB\u25BC\x05\u035A" +
		"\u01AE\x02\u25BC\u25BD\x07\u0336\x02\x02\u25BD\u2611\x03\x02\x02\x02\u25BE" +
		"\u2611\x07N\x02\x02\u25BF\u2611\x07O\x02\x02\u25C0\u25C1\x07\u01CC\x02" +
		"\x02\u25C1\u25C2\x07\u0335\x02\x02\u25C2\u25C3\x07\u031C\x02\x02\u25C3" +
		"\u25C4\x07\u0337\x02\x02\u25C4\u25C5\x05\u02CC\u0167\x02\u25C5\u25C6\x07" +
		"\u0337\x02\x02\u25C6\u25C7\x05\u02CC\u0167\x02\u25C7\u25C8\x07\u0336\x02" +
		"\x02\u25C8\u2611\x03\x02\x02\x02\u25C9\u25CA\x07\u01CD\x02\x02\u25CA\u25CB" +
		"\x07\u0335\x02\x02\u25CB\u25CC\x07\u031C\x02\x02\u25CC\u25CD\x07\u0337" +
		"\x02\x02\u25CD\u25CE\x05\u02CC\u0167\x02\u25CE\u25CF\x07\u0337\x02\x02" +
		"\u25CF\u25D0\x05\u02CC\u0167\x02\u25D0\u25D1\x07\u0336\x02\x02\u25D1\u2611" +
		"\x03\x02\x02\x02\u25D2\u25D3\x07\u01CE\x02\x02\u25D3\u25D4\x07\u0335\x02" +
		"\x02\u25D4\u25D5\x07\u031C\x02\x02\u25D5\u25D6\x07\u0337\x02\x02\u25D6" +
		"\u25D7\x05\u02CC\u0167\x02\u25D7\u25D8\x07\u0336\x02\x02\u25D8\u2611\x03" +
		"\x02\x02\x02\u25D9\u25DA\x07\u01CF\x02\x02\u25DA\u25DB\x07\u0335\x02\x02" +
		"\u25DB\u25DC\x07\u031C\x02\x02\u25DC\u25DD\x07\u0337\x02\x02\u25DD\u25DE" +
		"\x05\u02CC\u0167\x02\u25DE\u25DF\x07\u0336\x02\x02\u25DF\u2611\x03\x02" +
		"\x02\x02\u25E0\u25E1\x07\u020D\x02\x02\u25E1\u25E2\x07\u0335\x02\x02\u25E2" +
		"\u2611\x07\u0336\x02\x02\u25E3\u25E4\x07\u020E\x02\x02\u25E4\u25E5\x07" +
		"\u0335\x02\x02\u25E5\u2611\x07\u0336\x02\x02\u25E6\u25E7\x07\x97\x02\x02" +
		"\u25E7\u25E8\x07\u0335\x02\x02\u25E8\u25EB\x05\u03AE\u01D8\x02\u25E9\u25EA" +
		"\x07\u0337\x02\x02\u25EA\u25EC\x07\u031B\x02\x02\u25EB\u25E9\x03\x02\x02" +
		"\x02\u25EB\u25EC\x03\x02\x02\x02\u25EC\u25EF\x03\x02\x02\x02\u25ED\u25EE" +
		"\x07\u0337\x02\x02\u25EE\u25F0\x07\u031B\x02\x02\u25EF\u25ED\x03\x02\x02" +
		"\x02\u25EF\u25F0\x03\x02\x02\x02\u25F0\u25F1\x03\x02\x02\x02\u25F1\u25F2" +
		"\x07\u0336\x02\x02\u25F2\u2611\x03\x02\x02\x02\u25F3\u2611\x07\u0253\x02" +
		"\x02\u25F4\u25F5\x07\xE0\x02\x02\u25F5\u25F6\x07\u0335\x02\x02\u25F6\u25F7" +
		"\x05\u02CC\u0167\x02\u25F7\u25F8\x07\u0337\x02\x02\u25F8\u25F9\x05\u02CC" +
		"\u0167\x02\u25F9\u25FA\x07\u0336\x02\x02\u25FA\u2611\x03\x02\x02\x02\u25FB" +
		"\u25FC\x07\u02E2\x02\x02\u25FC\u25FD\x07\u0335\x02\x02\u25FD\u25FE\x05" +
		"\u02CC\u0167\x02\u25FE\u25FF\x07\u0337\x02\x02\u25FF\u2600\x07\u031B\x02" +
		"\x02\u2600\u2601\x07\u0337\x02\x02\u2601\u2602\x07\u031B\x02\x02\u2602" +
		"\u2603\x07\u0337\x02\x02\u2603\u2604\x05\u02CC\u0167\x02\u2604\u2605\x07" +
		"\u0336\x02\x02\u2605\u2611\x03\x02\x02\x02\u2606\u2611\x07\u013C\x02\x02" +
		"\u2607\u2611\x07\u0155\x02\x02\u2608\u2609\x07\xA9\x02\x02\u2609\u260A" +
		"\x07\u0335\x02\x02\u260A\u260B\x05\u02CC\u0167\x02\u260B\u260C\x07\u0337" +
		"\x02\x02\u260C\u260D\x05\u02CC\u0167\x02\u260D\u260E\x07\u0336\x02\x02" +
		"\u260E\u2611\x03\x02\x02\x02\u260F\u2611\x05\u0336\u019C\x02\u2610\u2595" +
		"\x03\x02\x02\x02\u2610\u2596\x03\x02\x02\x02\u2610\u2597\x03\x02\x02\x02" +
		"\u2610\u2598\x03\x02\x02\x02\u2610\u259F\x03\x02\x02\x02\u2610\u25A3\x03" +
		"\x02\x02\x02\u2610\u25AA\x03\x02\x02\x02\u2610\u25B5\x03\x02\x02\x02\u2610" +
		"\u25B9\x03\x02\x02\x02\u2610\u25BE\x03\x02\x02\x02\u2610\u25BF\x03\x02" +
		"\x02\x02\u2610\u25C0\x03\x02\x02\x02\u2610\u25C9\x03\x02\x02\x02\u2610" +
		"\u25D2\x03\x02\x02\x02\u2610\u25D9\x03\x02\x02\x02\u2610\u25E0\x03\x02" +
		"\x02\x02\u2610\u25E3\x03\x02\x02\x02\u2610\u25E6\x03\x02\x02\x02\u2610" +
		"\u25F3\x03\x02\x02\x02\u2610\u25F4\x03\x02\x02\x02\u2610\u25FB\x03\x02" +
		"\x02\x02\u2610\u2606\x03\x02\x02\x02\u2610\u2607\x03\x02\x02\x02\u2610" +
		"\u2608\x03\x02\x02\x02\u2610\u260F\x03\x02\x02\x02\u2611\u0335\x03\x02" +
		"\x02\x02\u2612\u2618\x05\u0338\u019D\x02\u2613\u2618\x05\u033A\u019E\x02" +
		"\u2614\u2618\x05\u033C\u019F\x02\u2615\u2618\x05\u033E\u01A0\x02\u2616" +
		"\u2618\x05\u0340\u01A1\x02\u2617\u2612\x03\x02\x02\x02\u2617\u2613\x03" +
		"\x02\x02\x02\u2617\u2614\x03\x02\x02\x02\u2617\u2615\x03\x02\x02\x02\u2617" +
		"\u2616\x03\x02\x02\x02\u2618\u0337\x03\x02\x02\x02\u2619\u261E\x07\u031A" +
		"\x02\x02\u261A\u261E\x07\u031C\x02\x02\u261B\u261E\x07s\x02\x02\u261C" +
		"\u261E\x05\u033A\u019E\x02\u261D\u2619\x03\x02\x02\x02\u261D\u261A\x03" +
		"\x02\x02\x02\u261D\u261B\x03\x02\x02\x02\u261D\u261C\x03\x02\x02\x02\u261E" +
		"\u261F\x03\x02\x02\x02\u261F\u2620\x07\u0330\x02\x02\u2620\u2621\x07\u0304" +
		"\x02\x02\u2621\u2622\x07\u0335\x02\x02\u2622\u2623\x07\u031F\x02\x02\u2623" +
		"\u2624\x07\u0337\x02\x02\u2624\u2625\x07\u031F\x02\x02\u2625\u2645\x07" +
		"\u0336\x02\x02\u2626\u262B\x07\u031A\x02\x02\u2627\u262B\x07\u031C\x02" +
		"\x02\u2628\u262B\x07s\x02\x02\u2629\u262B\x05\u033A\u019E\x02\u262A\u2626" +
		"\x03\x02\x02\x02\u262A\u2627\x03\x02\x02\x02\u262A\u2628\x03\x02\x02\x02" +
		"\u262A\u2629\x03\x02\x02\x02\u262B\u262C\x03\x02\x02\x02\u262C\u262D\x07" +
		"\u0330\x02\x02\u262D\u262E\x07\u02B9\x02\x02\u262E\u262F\x07\u0330\x02" +
		"\x02\u262F\u2630\x07\u0304\x02\x02\u2630\u2631\x07\u0335\x02\x02\u2631" +
		"\u2632\x07\u031F\x02\x02\u2632\u2633\x07\u0337\x02\x02\u2633\u2634\x07" +
		"\u031F\x02\x02\u2634\u2645\x07\u0336\x02\x02\u2635\u263A\x07\u031A\x02" +
		"\x02\u2636\u263A\x07\u031C\x02\x02\u2637\u263A\x07s\x02\x02\u2638\u263A" +
		"\x05\u033A\u019E\x02\u2639\u2635\x03\x02\x02\x02\u2639\u2636\x03\x02\x02" +
		"\x02\u2639\u2637\x03\x02\x02\x02\u2639\u2638\x03\x02\x02\x02\u263A\u263B" +
		"\x03\x02\x02\x02\u263B\u263C\x07\u0330\x02\x02\u263C\u263D\x07\xF2\x02" +
		"\x02\u263D\u263E\x07\u0330\x02\x02\u263E\u263F\x07\u0304\x02\x02\u263F" +
		"\u2640\x07\u0335\x02\x02\u2640\u2641\x07\u031F\x02\x02\u2641\u2642\x07" +
		"\u0337\x02\x02\u2642\u2643\x07\u031F\x02\x02\u2643\u2645\x07\u0336\x02" +
		"\x02\u2644\u261D\x03\x02\x02\x02\u2644\u262A\x03\x02\x02\x02\u2644\u2639" +
		"\x03\x02\x02\x02\u2645\u0339\x03\x02\x02\x02\u2646\u264A\x07\u031A\x02" +
		"\x02\u2647\u264A\x07\u031C\x02\x02\u2648\u264A\x05\u0380\u01C1\x02\u2649" +
		"\u2646\x03\x02\x02\x02\u2649\u2647\x03\x02\x02\x02\u2649\u2648\x03\x02" +
		"\x02\x02\u264A\u264B\x03\x02\x02\x02\u264B\u264C\x07\u0330\x02\x02\u264C" +
		"\u264D\x07\u0293\x02\x02\u264D\u264E\x07\u0335\x02\x02\u264E\u264F\x07" +
		"\u031F\x02\x02\u264F\u265D\x07\u0336\x02\x02\u2650\u2654\x07\u031A\x02" +
		"\x02\u2651\u2654\x07\u031C\x02\x02\u2652\u2654\x05\u0380\u01C1\x02\u2653" +
		"\u2650\x03\x02\x02\x02\u2653\u2651\x03\x02\x02\x02\u2653\u2652\x03\x02" +
		"\x02\x02\u2654\u2655\x03\x02\x02\x02\u2655\u2656\x07\u0330\x02\x02\u2656" +
		"\u2657\x07\u02B9\x02\x02\u2657\u2658\x07\u0330\x02\x02\u2658\u2659\x07" +
		"\u0293\x02\x02\u2659\u265A\x07\u0335\x02\x02\u265A\u265B\x07\u031F\x02" +
		"\x02\u265B\u265D\x07\u0336\x02\x02\u265C\u2649\x03\x02\x02\x02\u265C\u2653" +
		"\x03\x02\x02\x02\u265D\u033B\x03\x02\x02\x02\u265E\u265F\t}\x02\x02\u265F" +
		"\u2660\x07\u0330\x02\x02\u2660\u2661\x07\u01F3\x02\x02\u2661\u2662\x07" +
		"\u0335\x02\x02\u2662\u2663\x07\u031F\x02\x02\u2663\u2664\x07\u0336\x02" +
		"\x02\u2664\u033D\x03\x02\x02\x02\u2665\u2666\t}\x02\x02\u2666\u2667\x07" +
		"\u0330\x02\x02\u2667\u2668\x07\u025B\x02\x02\u2668\u2669\x07\u0335\x02" +
		"\x02\u2669\u266A\x07\u031F\x02\x02\u266A\u266B\x07\u0336\x02\x02\u266B" +
		"\u033F\x03\x02\x02\x02\u266C\u266D\t}\x02\x02\u266D\u266E\x07\u0330\x02" +
		"\x02\u266E\u266F\x07\u0268\x02\x02\u266F\u2670\x07\u0335\x02\x02\u2670" +
		"\u2671\x07\u031F\x02\x02\u2671\u2672\x07\u0336\x02\x02\u2672\u0341\x03" +
		"\x02\x02\x02\u2673\u2674\x07\u0178\x02\x02\u2674\u2675\x05\u02CC\u0167" +
		"\x02\u2675\u2676\x07\u015C\x02\x02\u2676\u2677\x05\u02CC\u0167\x02\u2677" +
		"\u0343\x03\x02\x02\x02\u2678\u2679\x07\u0178\x02\x02\u2679\u267A\x05\u02E2" +
		"\u0172\x02\u267A\u267B\x07\u015C\x02\x02\u267B\u267C\x05\u02CC\u0167\x02" +
		"\u267C\u0345\x03\x02\x02\x02\u267D\u267F\x07\x10\x02\x02\u267E\u267D\x03" +
		"\x02\x02\x02\u267E\u267F\x03\x02\x02\x02\u267F\u2680\x03\x02\x02\x02\u2680" +
		"\u2681\x05\u0356\u01AC\x02\u2681\u0347\x03\x02\x02\x02\u2682\u2684\x07" +
		"\x10\x02\x02\u2683\u2682\x03\x02\x02\x02\u2683\u2684\x03\x02\x02\x02\u2684" +
		"\u2685\x03\x02\x02\x02\u2685\u2686\x05\u034A\u01A6\x02\u2686\u0349\x03" +
		"\x02\x02\x02\u2687\u2689\x05\u03B6\u01DC\x02\u2688\u268A\x05\u034C\u01A7" +
		"\x02\u2689\u2688\x03\x02\x02\x02\u2689\u268A\x03\x02\x02\x02\u268A\u034B" +
		"\x03\x02\x02\x02\u268B\u268D\x07\u017C\x02\x02\u268C\u268B\x03\x02\x02" +
		"\x02\u268C\u268D\x03\x02\x02\x02\u268D\u268E\x03\x02\x02\x02\u268E\u268F" +
		"\x07\u0335\x02\x02\u268F\u2696\x05\u0350\u01A9\x02\u2690\u2692\x07\u0337" +
		"\x02\x02\u2691\u2690\x03\x02\x02\x02\u2691\u2692\x03\x02\x02\x02\u2692" +
		"\u2693\x03\x02\x02\x02\u2693\u2695\x05\u0350\u01A9\x02\u2694\u2691\x03" +
		"\x02\x02\x02\u2695\u2698\x03\x02\x02\x02\u2696\u2694\x03\x02\x02\x02\u2696" +
		"\u2697\x03\x02\x02\x02\u2697\u2699\x03\x02\x02\x02\u2698\u2696\x03\x02" +
		"\x02\x02\u2699\u269A\x07\u0336\x02\x02\u269A\u034D\x03\x02\x02\x02\u269B" +
		"\u269C\x07\u017C\x02\x02\u269C\u269D\x07\u0335\x02\x02\u269D\u26A4\x05" +
		"\u0350\u01A9\x02\u269E\u26A0\x07\u0337\x02\x02\u269F\u269E\x03\x02\x02" +
		"\x02\u269F\u26A0\x03\x02\x02\x02\u26A0\u26A1\x03\x02\x02\x02\u26A1\u26A3" +
		"\x05\u0350\u01A9\x02\u26A2\u269F\x03\x02\x02\x02\u26A3\u26A6\x03\x02\x02" +
		"\x02\u26A4\u26A2\x03\x02\x02\x02\u26A4\u26A5\x03\x02\x02\x02\u26A5\u26A7" +
		"\x03\x02\x02\x02\u26A6\u26A4\x03\x02\x02\x02\u26A7\u26A8\x07\u0336\x02" +
		"\x02\u26A8\u034F\x03\x02\x02\x02\u26A9\u26AB\x07\u0269\x02\x02\u26AA\u26A9" +
		"\x03\x02\x02\x02\u26AA\u26AB\x03\x02\x02\x02\u26AB\u26DC\x03\x02\x02\x02" +
		"\u26AC\u26C0\x07\x9E\x02\x02\u26AD\u26AE\x07\u0335\x02\x02\u26AE\u26B3" +
		"\x05\u0352\u01AA\x02\u26AF\u26B0\x07\u0337\x02\x02\u26B0\u26B2\x05\u0352" +
		"\u01AA\x02\u26B1\u26AF\x03\x02\x02\x02\u26B2\u26B5\x03\x02\x02\x02\u26B3" +
		"\u26B1\x03\x02\x02\x02\u26B3\u26B4\x03\x02\x02\x02\u26B4\u26B6\x03\x02" +
		"\x02\x02\u26B5\u26B3\x03\x02\x02\x02\u26B6\u26B7\x07\u0336\x02\x02\u26B7" +
		"\u26C1\x03\x02\x02\x02\u26B8\u26BD\x05\u0352\u01AA\x02\u26B9\u26BA\x07" +
		"\u0337\x02\x02\u26BA\u26BC\x05\u0352\u01AA\x02\u26BB\u26B9\x03\x02\x02" +
		"\x02\u26BC\u26BF\x03\x02\x02\x02\u26BD\u26BB\x03\x02\x02\x02\u26BD\u26BE" +
		"\x03\x02\x02\x02\u26BE\u26C1\x03\x02\x02\x02\u26BF\u26BD\x03\x02\x02\x02" +
		"\u26C0\u26AD\x03\x02\x02\x02\u26C0\u26B8\x03\x02\x02\x02\u26C1\u26DD\x03" +
		"\x02\x02\x02\u26C2\u26C3\x07\x9E\x02\x02\u26C3\u26C4\x07\u0323\x02\x02" +
		"\u26C4\u26DD\x05\u0352\u01AA\x02\u26C5\u26D4\x07\x87\x02\x02\u26C6\u26C7" +
		"\x07\u0335\x02\x02\u26C7\u26C8\x05\u0352\u01AA\x02\u26C8\u26C9\x07\u0335" +
		"\x02\x02\u26C9\u26CE\x07\u031C\x02\x02\u26CA\u26CB\x07\u0337\x02\x02\u26CB" +
		"\u26CD\x07\u031C\x02\x02\u26CC\u26CA\x03\x02\x02\x02\u26CD\u26D0\x03\x02" +
		"\x02\x02\u26CE\u26CC\x03\x02\x02\x02\u26CE\u26CF\x03\x02\x02\x02\u26CF" +
		"\u26D1\x03\x02\x02\x02\u26D0\u26CE\x03\x02\x02\x02\u26D1\u26D2\x07\u0336" +
		"\x02\x02\u26D2\u26D3\x07\u0336\x02\x02\u26D3\u26D5\x03\x02\x02\x02\u26D4" +
		"\u26C6\x03\x02\x02\x02\u26D4\u26D5\x03\x02\x02\x02\u26D5\u26DD\x03\x02" +
		"\x02\x02\u26D6\u26DD\x07\u02CE\x02\x02\u26D7\u26DD\x07\u02D8\x02\x02\u26D8" +
		"\u26D9\x07\u02D9\x02\x02\u26D9\u26DA\x07\u0323\x02\x02\u26DA\u26DD\x07" +
		"\u031B\x02\x02\u26DB\u26DD\x07\u031C\x02\x02\u26DC\u26AC\x03\x02\x02\x02" +
		"\u26DC\u26C2\x03\x02\x02\x02\u26DC\u26C5\x03\x02\x02\x02\u26DC\u26D6\x03" +
		"\x02\x02\x02\u26DC\u26D7\x03\x02\x02\x02\u26DC\u26D8\x03\x02\x02\x02\u26DC" +
		"\u26DB\x03\x02\x02\x02\u26DD\u0351\x03\x02\x02\x02\u26DE\u26E1\x05\u03B6" +
		"\u01DC\x02\u26DF\u26E1\x07\u031B\x02\x02\u26E0\u26DE\x03\x02\x02\x02\u26E0" +
		"\u26DF\x03\x02\x02\x02\u26E1\u0353\x03\x02\x02\x02\u26E2\u26E3\x07\u0335" +
		"\x02\x02\u26E3\u26E8\x05\u0356\u01AC\x02\u26E4\u26E5\x07\u0337\x02\x02" +
		"\u26E5\u26E7\x05\u0356\u01AC\x02\u26E6\u26E4\x03\x02\x02\x02\u26E7\u26EA" +
		"\x03\x02\x02\x02\u26E8\u26E6\x03\x02\x02\x02\u26E8\u26E9\x03\x02\x02\x02" +
		"\u26E9\u26EB\x03\x02\x02\x02\u26EA\u26E8\x03\x02\x02\x02\u26EB\u26EC\x07" +
		"\u0336\x02\x02\u26EC\u0355\x03\x02\x02\x02\u26ED\u26F0\x05\u03B6\u01DC" +
		"\x02\u26EE\u26F0\x07\u031F\x02\x02\u26EF\u26ED\x03\x02\x02\x02\u26EF\u26EE" +
		"\x03\x02\x02\x02\u26F0\u0357\x03\x02\x02\x02\u26F1\u26F2\x07\u0172\x02" +
		"\x02\u26F2\u26F3\x07\u0335\x02\x02\u26F3\u26F4\x05\u035A\u01AE\x02\u26F4" +
		"\u26FC\x07\u0336\x02\x02\u26F5\u26F6\x07\u0337\x02\x02\u26F6\u26F7\x07" +
		"\u0335\x02\x02\u26F7\u26F8\x05\u035A\u01AE\x02\u26F8\u26F9\x07\u0336\x02" +
		"\x02\u26F9\u26FB\x03\x02\x02\x02\u26FA\u26F5\x03\x02\x02\x02\u26FB\u26FE" +
		"\x03\x02\x02\x02\u26FC\u26FA\x03\x02\x02\x02\u26FC\u26FD\x03\x02\x02\x02" +
		"\u26FD\u0359\x03\x02\x02\x02\u26FE\u26FC\x03\x02\x02\x02\u26FF\u2704\x05" +
		"\u02CC\u0167\x02\u2700\u2701\x07\u0337\x02\x02\u2701\u2703\x05\u02CC\u0167" +
		"\x02\u2702\u2700\x03\x02\x02\x02\u2703\u2706\x03\x02\x02\x02\u2704\u2702" +
		"\x03\x02\x02\x02\u2704\u2705\x03\x02\x02\x02\u2705\u035B\x03\x02\x02\x02" +
		"\u2706\u2704\x03\x02\x02\x02\u2707\u2708\t~\x02\x02\u2708\u2709\x07\u0335" +
		"\x02\x02\u2709\u270A\x07\u0336\x02\x02\u270A\u2712\x05\u0364\u01B3\x02" +
		"\u270B\u270C\x07\u026E\x02\x02\u270C\u270D\x07\u0335\x02\x02\u270D\u270E" +
		"\x05\u02CC\u0167\x02\u270E\u270F\x07\u0336\x02\x02\u270F\u2710\x05\u0364" +
		"\u01B3\x02\u2710\u2712\x03\x02\x02\x02\u2711\u2707\x03\x02\x02\x02\u2711" +
		"\u270B\x03\x02\x02\x02\u2712\u035D\x03\x02\x02\x02\u2713\u2714\t\x7F\x02" +
		"\x02\u2714\u2715\x07\u0335\x02\x02\u2715\u2716\x05\u0362\u01B2\x02\u2716" +
		"\u2718\x07\u0336\x02\x02\u2717\u2719\x05\u0364\u01B3\x02\u2718\u2717\x03" +
		"\x02\x02\x02\u2718\u2719\x03\x02\x02\x02\u2719\u2734\x03\x02\x02\x02\u271A" +
		"\u271B\t\x80\x02\x02\u271B\u271E\x07\u0335\x02\x02\u271C\u271F\x07\u033A" +
		"\x02\x02\u271D\u271F\x05\u0362\u01B2\x02\u271E\u271C\x03\x02\x02\x02\u271E" +
		"\u271D\x03\x02\x02\x02\u271F\u2720\x03\x02\x02\x02\u2720\u2722\x07\u0336" +
		"\x02\x02\u2721\u2723\x05\u0364\u01B3\x02\u2722\u2721\x03\x02\x02\x02\u2722" +
		"\u2723\x03\x02\x02\x02\u2723\u2734\x03\x02\x02\x02\u2724\u2725\x07\u01B6" +
		"\x02\x02\u2725\u2726\x07\u0335\x02\x02\u2726\u2727\x05\u0362\u01B2\x02" +
		"\u2727\u2728\x07\u0336\x02\x02\u2728\u2734\x03\x02\x02\x02\u2729\u272A" +
		"\x07\u0212\x02\x02\u272A\u272B\x07\u0335\x02\x02\u272B\u272C\x05\u02CC" +
		"\u0167\x02\u272C\u272D\x07\u0336\x02\x02\u272D\u2734\x03\x02\x02\x02\u272E" +
		"\u272F\x07\u0213\x02\x02\u272F\u2730\x07\u0335\x02\x02\u2730\u2731\x05" +
		"\u035A\u01AE\x02\u2731\u2732\x07\u0336\x02\x02\u2732\u2734\x03\x02\x02" +
		"\x02\u2733\u2713\x03\x02\x02\x02\u2733\u271A\x03\x02\x02\x02\u2733\u2724" +
		"\x03\x02\x02\x02\u2733\u2729\x03\x02\x02\x02\u2733\u272E\x03\x02\x02\x02" +
		"\u2734\u035F\x03\x02\x02\x02\u2735\u2736\t\x81\x02\x02\u2736\u2737\x07" +
		"\u0335\x02\x02\u2737\u2738\x05\u02CC\u0167\x02\u2738\u2739\x07\u0336\x02" +
		"\x02\u2739\u273A\x05\u0364\u01B3\x02\u273A\u274A\x03\x02\x02\x02\u273B" +
		"\u273C\t\x82\x02\x02\u273C\u273D\x07\u0335\x02\x02\u273D\u2744\x05\u02CC" +
		"\u0167\x02\u273E\u273F\x07\u0337\x02\x02\u273F\u2742\x05\u02CC\u0167\x02" +
		"\u2740\u2741\x07\u0337\x02\x02\u2741\u2743\x05\u02CC\u0167\x02\u2742\u2740" +
		"\x03\x02\x02\x02\u2742\u2743\x03\x02\x02\x02\u2743\u2745\x03\x02\x02\x02" +
		"\u2744\u273E\x03\x02\x02\x02\u2744\u2745\x03\x02\x02\x02\u2745\u2746\x03" +
		"\x02\x02\x02\u2746\u2747\x07\u0336\x02\x02\u2747\u2748\x05\u0364\u01B3" +
		"\x02\u2748\u274A\x03\x02\x02\x02\u2749\u2735\x03\x02\x02\x02\u2749\u273B" +
		"\x03\x02\x02\x02\u274A\u0361\x03\x02\x02\x02\u274B\u274D\to\x02\x02\u274C" +
		"\u274B\x03\x02\x02\x02\u274C\u274D\x03\x02\x02\x02\u274D\u274E\x03\x02" +
		"\x02\x02\u274E\u274F\x05\u02CC\u0167\x02\u274F\u0363\x03\x02\x02\x02\u2750" +
		"\u2751\x07\xF0\x02\x02\u2751\u2755\x07\u0335\x02\x02\u2752\u2753\x07\u0280" +
		"\x02\x02\u2753\u2754\x07&\x02\x02\u2754\u2756\x05\u035A\u01AE\x02\u2755" +
		"\u2752\x03\x02\x02\x02\u2755\u2756\x03\x02\x02\x02\u2756\u2758\x03\x02" +
		"\x02\x02\u2757\u2759\x05\u02F6\u017C\x02\u2758\u2757\x03\x02\x02\x02\u2758" +
		"\u2759\x03\x02\x02\x02\u2759\u275B\x03\x02\x02\x02\u275A\u275C\x05\u0366";
	private static readonly _serializedATNSegment19: string =
		"\u01B4\x02\u275B\u275A\x03\x02\x02\x02\u275B\u275C\x03\x02\x02\x02\u275C" +
		"\u275D\x03\x02\x02\x02\u275D\u275E\x07\u0336\x02\x02\u275E\u0365\x03\x02" +
		"\x02\x02\u275F\u2760\t\x83\x02\x02\u2760\u2761\x05\u0368\u01B5\x02\u2761" +
		"\u0367\x03\x02\x02\x02\u2762\u2769\x05\u036C\u01B7\x02\u2763\u2764\x07" +
		"\x1D\x02\x02\u2764\u2765\x05\u036A\u01B6\x02\u2765\u2766\x07\v\x02\x02" +
		"\u2766\u2767\x05\u036A\u01B6\x02\u2767\u2769\x03\x02\x02\x02\u2768\u2762" +
		"\x03\x02\x02\x02\u2768\u2763\x03\x02\x02\x02\u2769\u0369\x03\x02\x02\x02" +
		"\u276A\u276D\x05\u036C\u01B7\x02\u276B\u276D\x05\u036E\u01B8\x02\u276C" +
		"\u276A\x03\x02\x02\x02\u276C\u276B\x03\x02\x02\x02\u276D\u036B\x03\x02" +
		"\x02\x02\u276E\u276F\x07\u02FD\x02\x02\u276F\u2775\x07\u0287\x02\x02\u2770" +
		"\u2771\x07\u031B\x02\x02\u2771\u2775\x07\u0287\x02\x02\u2772\u2773\x07" +
		"K\x02\x02\u2773\u2775\x07\u02B9\x02\x02\u2774\u276E\x03\x02\x02\x02\u2774" +
		"\u2770\x03\x02\x02\x02\u2774\u2772\x03\x02\x02\x02\u2775\u036D\x03\x02" +
		"\x02\x02\u2776\u2777\x07\u02FD\x02\x02\u2777\u277B\x07\u0204\x02\x02\u2778" +
		"\u2779\x07\u031B\x02\x02\u2779\u277B\x07\u0204\x02\x02\u277A\u2776\x03" +
		"\x02\x02\x02\u277A\u2778\x03\x02\x02\x02\u277B\u036F\x03\x02\x02\x02\u277C" +
		"\u277D\x07\u0200\x02\x02\u277D\u2782\x05\u0372\u01BA\x02\u277E\u277F\x07" +
		"\u0337\x02\x02\u277F\u2781\x05\u0372\u01BA\x02\u2780\u277E\x03\x02\x02" +
		"\x02\u2781\u2784\x03\x02\x02\x02\u2782\u2780\x03\x02\x02\x02\u2782\u2783" +
		"\x03\x02\x02\x02\u2783\u279F\x03\x02\x02\x02\u2784\u2782\x03\x02\x02\x02" +
		"\u2785\u2786\x07\u01D6\x02\x02\u2786\u2789\x07\u0323\x02\x02\u2787\u278A" +
		"\x05\u03B6\u01DC\x02\u2788\u278A\x07\u031F\x02\x02\u2789\u2787\x03\x02" +
		"\x02\x02\u2789\u2788\x03\x02\x02\x02\u278A\u279F\x03\x02\x02\x02\u278B" +
		"\u278C\x07\u01D5\x02\x02\u278C\u278F\x07\u0323\x02\x02\u278D\u2790\x05" +
		"\u03B6\u01DC\x02\u278E\u2790\x07\u031F\x02\x02\u278F\u278D\x03\x02\x02" +
		"\x02\u278F\u278E\x03\x02\x02\x02\u2790\u279F\x03\x02\x02\x02\u2791\u2792" +
		"\x07\u025F\x02\x02\u2792\u2793\x07\u0323\x02\x02\u2793\u279F\t\t\x02\x02" +
		"\u2794\u2795\x07\u02F4\x02\x02\u2795\u2796\x07\u0323\x02\x02\u2796\u279F" +
		"\t\t\x02\x02\u2797\u2798\x07\u02FA\x02\x02\u2798\u2799\x07\u0323\x02\x02" +
		"\u2799\u279F\x07\u031B\x02\x02\u279A\u279B\x07\u01D1\x02\x02\u279B\u279F" +
		"\t\t\x02\x02\u279C\u279D\x07\u02F7\x02\x02\u279D\u279F\t\t\x02\x02\u279E" +
		"\u277C\x03\x02\x02\x02\u279E\u2785\x03\x02\x02\x02\u279E\u278B\x03\x02" +
		"\x02\x02\u279E\u2791\x03\x02\x02\x02\u279E\u2794\x03\x02\x02\x02\u279E" +
		"\u2797\x03\x02\x02\x02\u279E\u279A\x03\x02\x02\x02\u279E\u279C\x03\x02" +
		"\x02\x02\u279F\u0371\x03\x02\x02\x02\u27A0\u27A7\x07\u0335\x02\x02\u27A1" +
		"\u27A2\x07\u026A\x02\x02\u27A2\u27A3\x07\u0323\x02\x02\u27A3\u27A8\t\x84" +
		"\x02\x02\u27A4\u27A5\x07\u01E1\x02\x02\u27A5\u27A6\x07\u0323\x02\x02\u27A6" +
		"\u27A8\x07\u031F\x02\x02\u27A7\u27A1\x03\x02\x02\x02\u27A7\u27A4\x03\x02" +
		"\x02\x02\u27A8\u27A9\x03\x02\x02\x02\u27A9\u27AA\x07\u0336\x02\x02\u27AA" +
		"\u0373\x03\x02\x02\x02\u27AB\u27AE\x05\u0376\u01BC\x02\u27AC\u27AE\x05" +
		"\u0378\u01BD\x02\u27AD\u27AB\x03\x02\x02\x02\u27AD\u27AC\x03\x02\x02\x02" +
		"\u27AE\u0375\x03\x02\x02\x02\u27AF\u27B0\x07\u01FD\x02\x02\u27B0\u27B3" +
		"\x05\u03B6\u01DC\x02\u27B1\u27B2\x07?\x02\x02\u27B2\u27B4\x07\u0200\x02" +
		"\x02\u27B3\u27B1\x03\x02\x02\x02\u27B3\u27B4\x03\x02\x02\x02\u27B4\u27B6" +
		"\x03\x02\x02\x02\u27B5\u27B7\x07Z\x02\x02\u27B6\u27B5\x03\x02\x02\x02" +
		"\u27B6\u27B7\x03\x02\x02\x02\u27B7\u27BA\x03\x02\x02\x02\u27B8\u27B9\x07" +
		"?\x02\x02\u27B9\u27BB\x07\u0250\x02\x02\u27BA\u27B8\x03\x02\x02\x02\u27BA" +
		"\u27BB\x03\x02\x02\x02\u27BB\u27BC\x03\x02\x02\x02\u27BC\u27C1\x05\u0378" +
		"\u01BD\x02\u27BD\u27BE\x07\u0337\x02\x02\u27BE\u27C0\x05\u0378\u01BD\x02" +
		"\u27BF\u27BD\x03\x02\x02\x02\u27C0\u27C3\x03\x02\x02\x02\u27C1\u27BF\x03" +
		"\x02\x02\x02\u27C1\u27C2\x03\x02\x02\x02\u27C2\u0377\x03\x02\x02\x02\u27C3" +
		"\u27C1\x03\x02\x02\x02\u27C4\u27C5\x07\u0335\x02\x02\u27C5\u27C6\x07\u025E" +
		"\x02\x02\u27C6\u27C9\x07\u0323\x02\x02\u27C7\u27CA\x05\u03B6\u01DC\x02" +
		"\u27C8\u27CA\x07\u031F\x02\x02\u27C9\u27C7\x03\x02\x02\x02\u27C9\u27C8" +
		"\x03\x02\x02\x02\u27CA\u27CC\x03\x02\x02\x02\u27CB\u27CD\x07\u0337\x02" +
		"\x02\u27CC\u27CB\x03\x02\x02\x02\u27CC\u27CD\x03\x02\x02\x02\u27CD\u27CE" +
		"\x03\x02\x02\x02\u27CE\u27CF\x07\x83\x02\x02\u27CF\u27D0\x07\u0323\x02" +
		"\x02\u27D0\u27D2\x07\u031F\x02\x02\u27D1\u27D3\x07\u0337\x02\x02\u27D2" +
		"\u27D1\x03\x02\x02\x02\u27D2\u27D3\x03\x02\x02\x02\u27D3\u27DA\x03\x02" +
		"\x02\x02\u27D4\u27D5\x07\u02D6\x02\x02\u27D5\u27D6\x07\u0323\x02\x02\u27D6" +
		"\u27D8\x05\u03BE\u01E0\x02\u27D7\u27D9\x07\u0337\x02\x02\u27D8\u27D7\x03" +
		"\x02\x02\x02\u27D8\u27D9\x03\x02\x02\x02\u27D9\u27DB\x03\x02\x02\x02\u27DA" +
		"\u27D4\x03\x02\x02\x02\u27DA\u27DB\x03\x02\x02\x02\u27DB\u27E5\x03\x02" +
		"\x02\x02\u27DC\u27DD\x07\u024D\x02\x02\u27DD\u27E0\x07\u0323\x02\x02\u27DE" +
		"\u27E1\x05\u03BE\u01E0\x02\u27DF\u27E1\x07\u0300\x02\x02\u27E0\u27DE\x03" +
		"\x02\x02\x02\u27E0\u27DF\x03\x02\x02\x02\u27E1\u27E3\x03\x02\x02\x02\u27E2" +
		"\u27E4\x07\u0337\x02\x02\u27E3\u27E2\x03\x02\x02\x02\u27E3\u27E4\x03\x02" +
		"\x02\x02\u27E4\u27E6\x03\x02\x02\x02\u27E5\u27DC\x03\x02\x02\x02\u27E5" +
		"\u27E6\x03\x02\x02\x02\u27E6\u27ED\x03\x02\x02\x02\u27E7\u27E8\x07\u01FE" +
		"\x02\x02\u27E8\u27E9\x07\u0323\x02\x02\u27E9\u27EB\x05\u03BE\u01E0\x02" +
		"\u27EA\u27EC\x07\u0337\x02\x02\u27EB\u27EA\x03\x02\x02\x02\u27EB\u27EC" +
		"\x03\x02\x02\x02\u27EC\u27EE\x03\x02\x02\x02\u27ED\u27E7\x03\x02\x02\x02" +
		"\u27ED\u27EE\x03\x02\x02\x02\u27EE\u27EF\x03\x02\x02\x02\u27EF\u27F0\x07" +
		"\u0336\x02\x02\u27F0\u0379\x03\x02\x02\x02\u27F1\u27F2\x05\u03B6\u01DC" +
		"\x02\u27F2\u27F3\x07\u0330\x02\x02\u27F3\u27F4\x05\u03B6\u01DC\x02\u27F4" +
		"\u27F5\x07\u0330\x02\x02\u27F5\u27F6\x05\u03B6\u01DC\x02\u27F6\u27F7\x07" +
		"\u0330\x02\x02\u27F7\u2803\x03\x02\x02\x02\u27F8\u27F9\x05\u03B6\u01DC" +
		"\x02\u27F9\u27FB\x07\u0330\x02\x02\u27FA\u27FC\x05\u03B6\u01DC\x02\u27FB" +
		"\u27FA\x03\x02\x02\x02\u27FB\u27FC\x03\x02\x02\x02\u27FC\u27FD\x03\x02" +
		"\x02\x02\u27FD\u27FE\x07\u0330\x02\x02\u27FE\u2803\x03\x02\x02\x02\u27FF" +
		"\u2800\x05\u03B6\u01DC\x02\u2800\u2801\x07\u0330\x02\x02\u2801\u2803\x03" +
		"\x02\x02\x02\u2802\u27F1\x03\x02\x02\x02\u2802\u27F8\x03\x02\x02\x02\u2802" +
		"\u27FF\x03\x02\x02\x02\u2802\u2803\x03\x02\x02\x02\u2803\u2804\x03\x02" +
		"\x02\x02\u2804\u2805\x05\u03B6\u01DC\x02\u2805\u037B\x03\x02\x02\x02\u2806" +
		"\u280C\x05\u03B6\u01DC\x02\u2807\u2808\x05\u03B6\u01DC\x02\u2808\u2809" +
		"\x07\u0330\x02\x02\u2809\u280A\x05\u03B6\u01DC\x02\u280A\u280C\x03\x02" +
		"\x02\x02\u280B\u2806\x03\x02\x02\x02\u280B\u2807\x03\x02\x02\x02\u280C" +
		"\u037D\x03\x02\x02\x02\u280D\u2813\x05\u03B6\u01DC\x02\u280E\u280F\x05" +
		"\u03B6\u01DC\x02\u280F\u2810\x07\u0330\x02\x02\u2810\u2811\x05\u03B6\u01DC" +
		"\x02\u2811\u2813\x03\x02\x02\x02\u2812\u280D\x03\x02\x02\x02\u2812\u280E" +
		"\x03\x02\x02\x02\u2813\u037F\x03\x02\x02\x02\u2814\u2815\x05\u03B6\u01DC" +
		"\x02\u2815\u2816\x07\u0330\x02\x02\u2816\u2817\x05\u03B6\u01DC\x02\u2817" +
		"\u2818\x07\u0330\x02\x02\u2818\u2819\x05\u03B6\u01DC\x02\u2819\u281A\x07" +
		"\u0330\x02\x02\u281A\u2826\x03\x02\x02\x02\u281B\u281C\x05\u03B6\u01DC" +
		"\x02\u281C\u281E\x07\u0330\x02\x02\u281D\u281F\x05\u03B6\u01DC\x02\u281E" +
		"\u281D\x03\x02\x02\x02\u281E\u281F\x03\x02\x02\x02\u281F\u2820\x03\x02" +
		"\x02\x02\u2820\u2821\x07\u0330\x02\x02\u2821\u2826\x03\x02\x02\x02\u2822" +
		"\u2823\x05\u03B6\u01DC\x02\u2823\u2824\x07\u0330\x02\x02\u2824\u2826\x03" +
		"\x02\x02\x02\u2825\u2814\x03\x02\x02\x02\u2825\u281B\x03\x02\x02\x02\u2825" +
		"\u2822\x03\x02\x02\x02\u2825\u2826\x03\x02\x02\x02\u2826\u2827\x03\x02" +
		"\x02\x02\u2827\u2828\x05\u03B6\u01DC\x02\u2828\u0381\x03\x02\x02\x02\u2829" +
		"\u282A\x05\u03B6\u01DC\x02\u282A\u282C\x07\u0330\x02\x02\u282B\u282D\x05" +
		"\u03B6\u01DC\x02\u282C\u282B\x03\x02\x02\x02\u282C\u282D\x03\x02\x02\x02" +
		"\u282D\u282E\x03\x02\x02\x02\u282E\u282F\x07\u0330\x02\x02\u282F\u2834" +
		"\x03\x02\x02\x02\u2830\u2831\x05\u03B6\u01DC\x02\u2831\u2832\x07\u0330" +
		"\x02\x02\u2832\u2834\x03\x02\x02\x02\u2833\u2829\x03\x02\x02\x02\u2833" +
		"\u2830\x03\x02\x02\x02\u2833\u2834\x03\x02\x02\x02\u2834\u2835\x03\x02" +
		"\x02\x02\u2835\u2844\x05\u03B6\u01DC\x02\u2836\u2837\x05\u03B6\u01DC\x02" +
		"\u2837\u2839\x07\u0330\x02\x02\u2838\u283A\x05\u03B6\u01DC\x02\u2839\u2838" +
		"\x03\x02\x02\x02\u2839\u283A\x03\x02\x02\x02\u283A\u283B\x03\x02\x02\x02" +
		"\u283B\u283C\x07\u0330\x02\x02\u283C\u2841\x03\x02\x02\x02\u283D\u283E" +
		"\x05\u03B6\u01DC\x02\u283E\u283F\x07\u0330\x02\x02\u283F\u2841\x03\x02" +
		"\x02\x02\u2840\u2836\x03\x02\x02\x02\u2840\u283D\x03\x02\x02\x02\u2840" +
		"\u2841\x03\x02\x02\x02\u2841\u2842\x03\x02\x02\x02\u2842\u2844\x07 \x02" +
		"\x02\u2843\u2833\x03\x02\x02\x02\u2843\u2840\x03\x02\x02\x02\u2844\u0383" +
		"\x03\x02\x02\x02\u2845\u2846\x05\u03B6\u01DC\x02\u2846\u2847\x07\u0330" +
		"\x02\x02\u2847\u2849\x03\x02\x02\x02\u2848\u2845\x03\x02\x02\x02\u2848" +
		"\u2849\x03\x02\x02\x02\u2849\u284A\x03\x02\x02\x02\u284A\u284B\x05\u03B6" +
		"\u01DC\x02\u284B\u0385\x03\x02\x02\x02\u284C\u284D\x05\u03B6\u01DC\x02" +
		"\u284D\u284F\x07\u0330\x02\x02\u284E\u2850\x05\u03B6\u01DC\x02\u284F\u284E" +
		"\x03\x02\x02\x02\u284F\u2850\x03\x02\x02\x02\u2850\u2851\x03\x02\x02\x02" +
		"\u2851\u2852\x07\u0330\x02\x02\u2852\u2857\x03\x02\x02\x02\u2853\u2854" +
		"\x05\u03B6\u01DC\x02\u2854\u2855\x07\u0330\x02\x02\u2855\u2857\x03\x02" +
		"\x02\x02\u2856\u284C\x03\x02\x02\x02\u2856\u2853\x03\x02\x02\x02\u2856" +
		"\u2857\x03\x02\x02\x02\u2857\u2858\x03\x02\x02\x02\u2858\u2864\x05\u03B6" +
		"\u01DC\x02\u2859\u285A\x05\u03B6\u01DC\x02\u285A\u285B\x07\u0330\x02\x02" +
		"\u285B\u285C\x05\u03B6\u01DC\x02\u285C\u285E\x07\u0330\x02\x02\u285D\u285F" +
		"\x05\u03B6\u01DC\x02\u285E\u285D\x03\x02\x02\x02\u285E\u285F\x03\x02\x02" +
		"\x02\u285F\u2860\x03\x02\x02\x02\u2860\u2861\x07\u0330\x02\x02\u2861\u2862" +
		"\x05\u03B6\u01DC\x02\u2862\u2864\x03\x02\x02\x02\u2863\u2856\x03\x02\x02" +
		"\x02\u2863\u2859\x03\x02\x02\x02\u2864\u0387\x03\x02\x02\x02\u2865\u2868" +
		"\x05\u0380\u01C1\x02\u2866\u2868\x07\u031A\x02\x02\u2867\u2865\x03\x02" +
		"\x02\x02\u2867\u2866\x03\x02\x02\x02\u2868\u0389\x03\x02\x02\x02\u2869" +
		"\u286A\x05\u0382\u01C2\x02\u286A\u286B\x07\u0330\x02\x02\u286B\u286D\x03" +
		"\x02\x02\x02\u286C\u2869\x03\x02\x02\x02\u286C\u286D\x03\x02\x02\x02\u286D" +
		"\u286E\x03\x02\x02\x02\u286E\u289A\x05\u03B6\u01DC\x02\u286F\u2870\x05" +
		"\u0382\u01C2\x02\u2870\u2871\x07\u0330\x02\x02\u2871\u2873\x03\x02\x02" +
		"\x02\u2872\u286F\x03\x02\x02\x02\u2872\u2873\x03\x02\x02\x02\u2873\u2874" +
		"\x03\x02\x02\x02\u2874\u289A\x07\u01BB\x02\x02\u2875\u2876\x05\u0382\u01C2" +
		"\x02\u2876\u2877\x07\u0330\x02\x02\u2877\u2879\x03\x02\x02\x02\u2878\u2875" +
		"\x03\x02\x02\x02\u2878\u2879\x03\x02\x02\x02\u2879\u287A\x03\x02\x02\x02" +
		"\u287A\u289A\x07\u02DE\x02\x02\u287B\u287C\x05\u0382\u01C2\x02\u287C\u287D" +
		"\x07\u0330\x02\x02\u287D\u287F\x03\x02\x02\x02\u287E\u287B\x03\x02\x02" +
		"\x02\u287E\u287F\x03\x02\x02\x02\u287F\u2880\x03\x02\x02\x02\u2880\u289A" +
		"\x07\u0296\x02\x02\u2881\u2882\x05\u0382\u01C2\x02\u2882\u2883\x07\u0330" +
		"\x02\x02\u2883\u2885\x03\x02\x02\x02\u2884\u2881\x03\x02\x02\x02\u2884" +
		"\u2885\x03\x02\x02\x02\u2885\u2886\x03\x02\x02\x02\u2886\u289A\x07\u0197" +
		"\x02\x02\u2887\u2888\x05\u0382\u01C2\x02\u2888\u2889\x07\u0330\x02\x02" +
		"\u2889\u288B\x03\x02\x02\x02\u288A\u2887\x03\x02\x02\x02\u288A\u288B\x03" +
		"\x02\x02\x02\u288B\u288C\x03\x02\x02\x02\u288C\u289A\x07\u0194\x02\x02" +
		"\u288D\u288E\x05\u0382\u01C2\x02\u288E\u288F\x07\u0330\x02\x02\u288F\u2891" +
		"\x03\x02\x02\x02\u2890\u288D\x03\x02\x02\x02\u2890\u2891\x03\x02\x02\x02" +
		"\u2891\u2892\x03\x02\x02\x02\u2892\u289A\x07\u0193\x02\x02\u2893\u2894" +
		"\x05\u0382\u01C2\x02\u2894\u2895\x07\u0330\x02\x02\u2895\u2897\x03\x02" +
		"\x02\x02\u2896\u2893\x03\x02\x02\x02\u2896\u2897\x03\x02\x02\x02\u2897" +
		"\u2898\x03\x02\x02\x02\u2898\u289A\x07\u0192\x02\x02\u2899\u286C\x03\x02" +
		"\x02\x02\u2899\u2872\x03\x02\x02\x02\u2899\u2878\x03\x02\x02\x02\u2899" +
		"\u287E\x03\x02\x02\x02\u2899\u2884\x03\x02\x02\x02\u2899\u288A\x03\x02" +
		"\x02\x02\u2899\u2890\x03\x02\x02\x02\u2899\u2896\x03\x02\x02\x02\u289A" +
		"\u038B\x03\x02\x02\x02\u289B\u289D\x05\u03B6\u01DC\x02\u289C\u289E\tv" +
		"\x02\x02\u289D\u289C\x03\x02\x02\x02\u289D\u289E\x03\x02\x02\x02\u289E" +
		"\u28A6\x03\x02\x02\x02\u289F\u28A0\x07\u0337\x02\x02\u28A0\u28A2\x05\u03B6" +
		"\u01DC\x02\u28A1\u28A3\tv\x02\x02\u28A2\u28A1\x03\x02\x02\x02\u28A2\u28A3" +
		"\x03\x02\x02\x02\u28A3\u28A5\x03\x02\x02\x02\u28A4\u289F\x03\x02\x02\x02" +
		"\u28A5\u28A8\x03\x02\x02\x02\u28A6\u28A4\x03\x02\x02\x02\u28A6\u28A7\x03" +
		"\x02\x02\x02\u28A7\u038D\x03\x02\x02\x02\u28A8\u28A6\x03\x02\x02\x02\u28A9" +
		"\u28AE\x05\u03B6\u01DC\x02\u28AA\u28AB\x07\u0337\x02\x02\u28AB\u28AD\x05" +
		"\u03B6\u01DC\x02\u28AC\u28AA\x03\x02\x02\x02\u28AD\u28B0\x03\x02\x02\x02" +
		"\u28AE\u28AC\x03\x02\x02\x02\u28AE\u28AF\x03\x02\x02\x02\u28AF\u038F\x03" +
		"\x02\x02\x02\u28B0\u28AE\x03\x02\x02\x02\u28B1\u28B4\x05\u03B6\u01DC\x02" +
		"\u28B2\u28B4\x07\u031A\x02\x02\u28B3\u28B1\x03\x02\x02\x02\u28B3\u28B2" +
		"\x03\x02\x02\x02\u28B4\u0391\x03\x02\x02\x02\u28B5\u28B6\t\t\x02\x02\u28B6" +
		"\u0393\x03\x02\x02\x02\u28B7\u28B8\t\x85\x02\x02\u28B8\u0395\x03\x02\x02" +
		"\x02\u28B9\u28BB\x07\xDC\x02\x02\u28BA\u28B9\x03\x02\x02\x02\u28BA\u28BB" +
		"\x03\x02\x02\x02\u28BB\u28BC\x03\x02\x02\x02\u28BC\u28BD\x07\xDF\x02\x02" +
		"\u28BD\u0397\x03\x02\x02\x02\u28BE\u28C6\x05\u0396\u01CC\x02\u28BF\u28C0" +
		"\x07Z\x02\x02\u28C0\u28C3\x05\u02D6\u016C\x02\u28C1\u28C2\x07\u017C\x02" +
		"\x02\u28C2\u28C4\x07\u0172\x02\x02\u28C3\u28C1\x03\x02\x02\x02\u28C3\u28C4" +
		"\x03\x02\x02\x02\u28C4\u28C6\x03\x02\x02\x02\u28C5\u28BE\x03\x02\x02\x02" +
		"\u28C5\u28BF\x03\x02\x02\x02\u28C6\u0399\x03\x02\x02\x02\u28C7\u28CD\x05" +
		"\u0386\u01C4\x02\u28C8\u28CD\x07\u011F\x02\x02\u28C9\u28CD\x07\xB1\x02" +
		"\x02\u28CA\u28CD\x07\u01A8\x02\x02\u28CB\u28CD\x07\u01B5\x02\x02\u28CC" +
		"\u28C7\x03\x02\x02\x02\u28CC\u28C8\x03\x02\x02\x02\u28CC\u28C9\x03\x02" +
		"\x02\x02\u28CC\u28CA\x03\x02\x02\x02\u28CC\u28CB\x03\x02\x02\x02\u28CD" +
		"\u039B\x03\x02\x02\x02\u28CE\u28CF\x07\x1C\x02\x02\u28CF\u28D0\x07F\x02" +
		"\x02\u28D0\u28D1\x07\u02F1\x02\x02\u28D1\u28D2\x07\u0335\x02\x02\u28D2" +
		"\u28D3\x07\u031A\x02\x02\u28D3\u28D4\x07\u0336\x02\x02\u28D4\u28D5\x07" +
		"\u02F0\x02\x02\u28D5\u28D6\x07\u0323\x02\x02\u28D6\u28D8\x05\u01C0\xE1" +
		"\x02\u28D7\u28D9\x07\u0338\x02\x02\u28D8\u28D7\x03\x02\x02\x02\u28D8\u28D9" +
		"\x03\x02\x02\x02\u28D9\u039D\x03\x02\x02\x02\u28DA\u28DB\x07\x1C\x02\x02" +
		"\u28DB\u28DD\x07\u01E0\x02\x02\u28DC\u28DE\x07F\x02\x02\u28DD\u28DC\x03" +
		"\x02\x02\x02\u28DD\u28DE\x03\x02\x02\x02\u28DE\u28DF\x03\x02\x02\x02\u28DF" +
		"\u28E0\x07\u031A\x02\x02\u28E0\u28E1\x07\x8C\x02\x02\u28E1\u28E2\x07\u0138" +
		"\x02\x02\u28E2\u28E3\x05\u03A2\u01D2\x02\u28E3\u28E4\x07\u015D\x02\x02" +
		"\u28E4\u28E5\x07\u0138\x02\x02\u28E5\u28E8\x05\u03A2\u01D2\x02\u28E6\u28E7" +
		"\x07\u0337\x02\x02\u28E7\u28E9\x07\u031F\x02\x02\u28E8\u28E6\x03\x02\x02" +
		"\x02\u28E8\u28E9\x03\x02\x02\x02\u28E9\u28EA\x03\x02\x02\x02\u28EA\u28EB" +
		"\x07\xE5\x02\x02\u28EB\u28EC\x07D\x02\x02\u28EC\u2903\x05\u03A0\u01D1" +
		"\x02\u28ED\u28F4\x07\u017C\x02\x02\u28EE\u28EF\t\x86\x02\x02\u28EF\u28F0" +
		"\x07\u0323\x02\x02\u28F0\u28F2\x07\u031A\x02\x02\u28F1\u28F3\x07\u0337" +
		"\x02\x02\u28F2\u28F1\x03\x02\x02\x02\u28F2\u28F3\x03\x02\x02\x02\u28F3" +
		"\u28F5\x03\x02\x02\x02\u28F4\u28EE\x03\x02\x02\x02\u28F4\u28F5\x03\x02" +
		"\x02\x02\u28F5\u28FC\x03\x02\x02\x02\u28F6\u28F7\x07\xB3\x02\x02\u28F7" +
		"\u28F8\x07\u0323\x02\x02\u28F8\u28FA\t\x02\x02\x02\u28F9\u28FB\x07\u0337" +
		"\x02\x02\u28FA\u28F9\x03\x02\x02\x02\u28FA\u28FB\x03\x02\x02\x02\u28FB" +
		"\u28FD\x03\x02\x02\x02\u28FC\u28F6\x03\x02\x02\x02\u28FC\u28FD\x03\x02" +
		"\x02\x02\u28FD\u2901\x03\x02\x02\x02\u28FE\u28FF\x07\u01EE\x02\x02\u28FF" +
		"\u2900\x07\u0323\x02\x02\u2900\u2902\t\t\x02\x02\u2901\u28FE\x03\x02\x02" +
		"\x02\u2901\u2902\x03\x02\x02\x02\u2902\u2904\x03\x02\x02\x02\u2903\u28ED" +
		"\x03\x02\x02\x02\u2903\u2904\x03\x02\x02\x02\u2904\u2906\x03\x02\x02\x02" +
		"\u2905\u2907\x07\u0338\x02\x02\u2906\u2905\x03\x02\x02\x02\u2906\u2907" +
		"\x03\x02\x02\x02\u2907\u039F\x03\x02\x02\x02\u2908\u290B\x05\u03B6\u01DC" +
		"\x02\u2909\u290B\x05\u02CC\u0167\x02\u290A\u2908\x03\x02\x02\x02\u290A" +
		"\u2909\x03\x02\x02\x02\u290B\u03A1\x03\x02\x02\x02\u290C\u290F\x05\u03B6" +
		"\u01DC\x02\u290D\u290F\x05\u02CC\u0167\x02\u290E\u290C\x03\x02\x02\x02" +
		"\u290E\u290D\x03\x02\x02\x02\u290F\u03A3\x03\x02\x02\x02\u2910\u2911\x07" +
		"m\x02\x02\u2911\u2912\x07F\x02\x02\u2912\u2914\x07\u031A\x02\x02\u2913" +
		"\u2915\x07\u0338\x02\x02\u2914\u2913\x03\x02\x02\x02\u2914\u2915\x03\x02" +
		"\x02\x02\u2915\u2922\x03\x02\x02\x02\u2916\u291D\x07\u017C\x02\x02\u2917" +
		"\u2918\x07q\x02\x02\u2918\u2919\x07\u0323\x02\x02\u2919\u291A\t\x03\x02" +
		"\x02\u291A\u291B\x07\u01DD\x02\x02\u291B\u291C\x07\u0323\x02\x02\u291C" +
		"\u291E\t\x03\x02\x02\u291D\u2917\x03\x02\x02\x02\u291D\u291E\x03\x02\x02" +
		"\x02\u291E\u2920\x03\x02\x02\x02\u291F\u2921\x07\u01B7\x02\x02\u2920\u291F" +
		"\x03\x02\x02\x02\u2920\u2921\x03\x02\x02\x02\u2921\u2923\x03\x02\x02\x02" +
		"\u2922\u2916\x03\x02\x02\x02\u2922\u2923\x03\x02\x02\x02\u2923\u03A5\x03" +
		"\x02\x02\x02\u2924\u2926\x07\u0177\x02\x02\u2925\u2924\x03\x02\x02\x02" +
		"\u2925\u2926\x03\x02\x02\x02\u2926\u2927\x03\x02\x02\x02\u2927\u2928\x07" +
		"\u0335\x02\x02\u2928\u2929\x05\u03A8\u01D5\x02\u2929\u292F\x07\u0336\x02" +
		"\x02\u292A\u292C\x07\u0337\x02\x02\u292B\u292A\x03\x02\x02\x02\u292B\u292C" +
		"\x03\x02\x02\x02\u292C\u292D\x03\x02\x02\x02\u292D\u292E\x07\u02F0\x02" +
		"\x02\u292E\u2930\x05\u01C0\xE1\x02\u292F\u292B\x03\x02\x02\x02\u292F\u2930" +
		"\x03\x02\x02\x02\u2930\u2932\x03\x02\x02\x02\u2931\u2933\x07\u0338\x02" +
		"\x02\u2932\u2931\x03\x02\x02\x02\u2932\u2933\x03\x02\x02\x02\u2933\u03A7" +
		"\x03\x02\x02\x02\u2934\u2935\x07\x8F\x02\x02\u2935\u2936\x07F\x02\x02" +
		"\u2936\u2937\x07\x93\x02\x02\u2937\u2938\t\x03\x02\x02\u2938\u2939\x07" +
		"\x8C\x02\x02\u2939\u293B\x05\u03AA\u01D6\x02\u293A\u293C\x07\u0338\x02" +
		"\x02\u293B\u293A\x03\x02\x02\x02\u293B\u293C\x03\x02\x02\x02\u293C\u03A9" +
		"\x03\x02\x02\x02\u293D\u293E\x05\u03B6\u01DC\x02\u293E\u293F\x07\u0330" +
		"\x02\x02\u293F\u2940\x05\u03B6\u01DC\x02\u2940\u2941\x07\u0330\x02\x02" +
		"\u2941\u2942\x05\u03B6\u01DC\x02\u2942\u2945\x03\x02\x02\x02\u2943\u2945" +
		"\x05\u03B6\u01DC\x02\u2944\u293D\x03\x02\x02\x02\u2944\u2943\x03\x02\x02" +
		"\x02\u2945\u03AB\x03\x02\x02\x02\u2946\u2947\x07\u02CC\x02\x02\u2947\u2948" +
		"\x07\xE5\x02\x02\u2948\u2949\x07F\x02\x02\u2949\u294A\t\x03\x02\x02\u294A" +
		"\u294B\x07\u0251\x02\x02\u294B\u294C\x07\u02FB\x02\x02\u294C\u2950\x05" +
		"\u02CC\u0167\x02\u294D\u294E\x07\u0335\x02\x02\u294E\u294F\t\x03\x02\x02" +
		"\u294F\u2951\x07\u0336\x02\x02\u2950\u294D\x03\x02\x02\x02\u2950\u2951" +
		"\x03\x02\x02\x02\u2951\u2953\x03\x02\x02\x02\u2952\u2954\x07\u0338\x02" +
		"\x02\u2953\u2952\x03\x02\x02\x02\u2953\u2954\x03\x02\x02\x02\u2954\u03AD" +
		"\x03\x02\x02\x02\u2955\u2957\x05\u03B6\u01DC\x02\u2956\u2958\x07\x97\x02" +
		"\x02\u2957\u2956\x03\x02\x02\x02\u2957\u2958\x03\x02\x02\x02\u2958\u2960" +
		"\x03\x02\x02\x02\u2959\u295A\x07\u0335\x02\x02\u295A\u295D\t\x87\x02\x02" +
		"\u295B\u295C\x07\u0337\x02\x02\u295C\u295E\x07\u031B\x02\x02\u295D\u295B" +
		"\x03\x02\x02\x02\u295D\u295E\x03\x02\x02\x02\u295E\u295F\x03\x02\x02\x02" +
		"\u295F\u2961\x07\u0336\x02\x02\u2960\u2959\x03\x02\x02\x02\u2960\u2961" +
		"\x03\x02\x02\x02\u2961\u296B\x03\x02\x02\x02\u2962\u2964\x07e\x02\x02" +
		"\u2963\u2965\x07\xFE\x02\x02\u2964\u2963\x03\x02\x02\x02\u2964\u2965\x03" +
		"\x02\x02\x02\u2965\u296B\x03\x02\x02\x02\u2966\u296B\x07\u0225\x02\x02" +
		"\u2967\u296B\x07\u02F2\x02\x02\u2968\u296B\x07\u02D7\x02\x02\u2969\u296B" +
		"\x07\u01A6\x02\x02\u296A\u2955\x03\x02\x02\x02\u296A\u2962\x03\x02\x02" +
		"\x02\u296A\u2966\x03\x02\x02\x02\u296A\u2967\x03\x02\x02\x02\u296A\u2968" +
		"\x03\x02\x02\x02\u296A\u2969\x03\x02\x02\x02\u296B\u03AF\x03\x02\x02\x02" +
		"\u296C\u2970\x07\xDF\x02\x02\u296D\u2970\x07Z\x02\x02\u296E\u2970\x05" +
		"\u03B2\u01DA\x02\u296F\u296C\x03\x02\x02\x02\u296F\u296D\x03\x02\x02\x02" +
		"\u296F\u296E\x03\x02\x02\x02\u2970\u03B1\x03\x02\x02\x02\u2971\u2981\x07" +
		"\u031F\x02\x02\u2972\u2981\x07\u0320\x02\x02\u2973\u2975\x05\u03B4\u01DB" +
		"\x02\u2974\u2973\x03\x02\x02\x02\u2974\u2975\x03\x02\x02\x02\u2975\u2976" +
		"\x03\x02\x02\x02\u2976\u2981\x07\u031B\x02\x02\u2977\u2979\x05\u03B4\u01DB" +
		"\x02\u2978\u2977\x03\x02\x02\x02\u2978\u2979\x03\x02\x02\x02\u2979\u297A" +
		"\x03\x02\x02\x02\u297A\u2981\tp\x02\x02\u297B\u297D\x05\u03B4\u01DB\x02" +
		"\u297C\u297B\x03\x02\x02\x02\u297C\u297D\x03\x02\x02\x02\u297D\u297E\x03" +
		"\x02\x02\x02\u297E\u297F\x07\u0334\x02\x02\u297F\u2981\t\x88\x02\x02\u2980" +
		"\u2971\x03\x02\x02\x02\u2980\u2972\x03\x02\x02\x02\u2980\u2974\x03\x02" +
		"\x02\x02\u2980\u2978\x03\x02\x02\x02\u2980\u297C\x03\x02\x02\x02\u2981" +
		"\u03B3\x03\x02\x02\x02\u2982\u2983\tm\x02\x02\u2983\u03B5\x03\x02\x02" +
		"\x02\u2984\u2988\x05\u03B8\u01DD\x02\u2985\u2988\x07\u0317\x02\x02\u2986" +
		"\u2988\x07\u0319\x02\x02\u2987\u2984\x03\x02\x02\x02\u2987\u2985\x03\x02" +
		"\x02\x02\u2987\u2986\x03\x02\x02\x02\u2988\u03B7\x03\x02\x02\x02\u2989" +
		"\u298A\t\x89\x02\x02\u298A\u03B9\x03\x02\x02\x02\u298B\u299B\x07\u0323" +
		"\x02\x02\u298C\u299B\x07\u0324\x02\x02\u298D\u299B\x07\u0325\x02\x02\u298E" +
		"\u298F\x07\u0325\x02\x02\u298F\u299B\x07\u0323\x02\x02\u2990\u2991\x07" +
		"\u0324\x02\x02\u2991\u299B\x07\u0323\x02\x02\u2992\u2993\x07\u0325\x02" +
		"\x02\u2993\u299B\x07\u0324\x02\x02\u2994\u2995\x07\u0326\x02\x02\u2995" +
		"\u299B\x07\u0323\x02\x02\u2996\u2997\x07\u0326\x02\x02\u2997\u299B\x07" +
		"\u0324\x02\x02\u2998\u2999\x07\u0326\x02\x02\u2999\u299B\x07\u0325\x02" +
		"\x02\u299A\u298B\x03\x02\x02\x02\u299A\u298C\x03\x02\x02\x02\u299A\u298D" +
		"\x03\x02\x02\x02\u299A\u298E\x03\x02\x02\x02\u299A\u2990\x03\x02\x02\x02" +
		"\u299A\u2992\x03\x02\x02\x02\u299A\u2994\x03\x02\x02\x02\u299A\u2996\x03" +
		"\x02\x02\x02\u299A\u2998\x03\x02\x02\x02\u299B\u03BB\x03\x02\x02\x02\u299C" +
		"\u299D\t\x8A\x02\x02\u299D\u03BD\x03\x02\x02\x02\u299E\u29A0\x07\u031B" +
		"\x02\x02\u299F\u29A1\t\x8B\x02\x02\u29A0\u299F\x03\x02\x02\x02\u29A0\u29A1" +
		"\x03\x02\x02\x02\u29A1\u03BF\x03\x02\x02\x02\u05E7\u03C3\u03CC\u03D0\u03D6" +
		"\u03D9\u03DD\u03E1\u03EA\u03F1\u0492\u0499\u04A7\u04AB\u04AE\u04B2\u04B6" +
		"\u04BA\u04BF\u04C4\u04C6\u04CA\u04CD\u04D4\u04D7\u04E0\u04E3\u04EE\u04F1" +
		"\u04F6\u04FB\u04FE\u0503\u0507\u050A\u050E\u0511\u0514\u051B\u051F\u0521" +
		"\u0526\u052C\u0530\u053D\u0543\u0546\u054F\u0552\u0563\u056B\u0570\u0573" +
		"\u0578\u057B\u0580\u0588\u058D\u0590\u0595\u059B\u05A0\u05B1\u05B4\u05B7" +
		"\u05BA\u05BF\u05C8\u05D7\u05E8\u05F3\u05F9\u0608\u0617\u0620\u0624\u0629" +
		"\u062F\u0635\u0638\u063D\u0642\u064A\u0654\u0667\u066F\u067C\u067E\u068A" +
		"\u068C\u0693\u069C\u06A2\u06AB\u06BA\u06C4\u06CE\u06F6\u070D\u0731\u0743" +
		"\u0746\u074B\u074E\u0753\u0756\u075B\u075E\u0763\u0766\u076E\u0771\u0779" +
		"\u0786\u0791\u0796\u079A\u07A0\u07B7\u07C3\u07CE\u07D3\u07D7\u07DD\u07DF" +
		"\u07EC\u0803\u080A\u0813\u0818\u081B\u0820\u0823\u0828\u082D\u0849\u0850" +
		"\u0855\u085C\u085E\u0869\u086F\u087E\u088C\u088F\u0891\u0896\u089A\u089D" +
		"\u089F\u08A5\u08A8\u08AA\u08B0\u08B2\u08C8\u08D0\u08D8\u08DA\u08DC\u08E5" +
		"\u08FA\u0907\u0916\u091A\u093D\u0940\u0945\u0957\u095A\u095F\u0979\u0987" +
		"\u098C\u0994\u0999\u09A0\u09B5\u09DA\u09DF\u09F2\u09FE\u0A01\u0A06\u0A09" +
		"\u0A0F\u0A1E\u0A23\u0A2B\u0A2E\u0A33\u0A38\u0A3B\u0A53\u0A5A\u0A5F\u0A64" +
		"\u0A69\u0A6B\u0A72\u0A7F\u0A85\u0A8A\u0A92\u0AA2\u0AA9\u0AAE\u0AB3\u0AB6" +
		"\u0ABC\u0AC2\u0AC7\u0ACC\u0AD1\u0AD4\u0ADA\u0AE0\u0AEB\u0AEE\u0AF8\u0AFE" +
		"\u0B02\u0B06\u0B23\u0B30\u0B36\u0B40\u0B43\u0B57\u0B5B\u0B5F\u0B64\u0B73" +
		"\u0B7A\u0B83\u0B8B\u0B8E\u0B93\u0B98\u0BA0\u0BA6\u0BAA\u0BB0\u0BB5\u0BB9" +
		"\u0BC0\u0BC8\u0BD0\u0BD9\u0BDE\u0BE2\u0BE5\u0BE9\u0BEF\u0BF4\u0BFC\u0C04" +
		"\u0C0A\u0C10\u0C13\u0C18\u0C1B\u0C22\u0C24\u0C27\u0C2D\u0C30\u0C35\u0C38" +
		"\u0C3D\u0C40\u0C45\u0C48\u0C4D\u0C50\u0C53\u0C56\u0C5D\u0C61\u0C68\u0C6F" +
		"\u0C75\u0C82\u0C86\u0C8B\u0C95\u0C9E\u0CA2\u0CAE\u0CB4\u0CB9\u0CBB\u0CCF" +
		"\u0CD3\u0CDB\u0CE4\u0CEA\u0CF0\u0CF8\u0CFA\u0D04\u0D08\u0D0B\u0D0F\u0D14" +
		"\u0D1A\u0D1D\u0D21\u0D29\u0D2B\u0D2E\u0D36\u0D3E\u0D45\u0D4C\u0D4E\u0D50" +
		"\u0D55\u0D5B\u0D5E\u0D60\u0D62\u0D65\u0D6A\u0D6D\u0D72\u0D81\u0D88\u0D8F" +
		"\u0D91\u0D93\u0D98\u0D9E\u0DA1\u0DA3\u0DA5\u0DA8\u0DAD\u0DB0\u0DB5\u0DC2" +
		"\u0DC7\u0DD0\u0DD5\u0DDB\u0DDF\u0DE3\u0DF4\u0DF6\u0E00\u0E05\u0E07\u0E0B" +
		"\u0E11\u0E19\u0E1E\u0E21\u0E29\u0E2C\u0E31\u0E36\u0E3B\u0E40\u0E45\u0E4A" +
		"\u0E4E\u0E53\u0E5E\u0E63\u0E66\u0E69\u0E6E\u0E71\u0E76\u0E79\u0E7E\u0E81" +
		"\u0E86\u0E89\u0E8E\u0E91\u0E96\u0E9C\u0EA1\u0EA4\u0EA9\u0EB0\u0EB2\u0EB8" +
		"\u0EC1\u0EC6\u0EC8\u0ED4\u0EDA\u0EE6\u0EE9\u0EEE\u0EF0\u0EFA\u0EFF\u0F01" +
		"\u0F05\u0F0B\u0F1D\u0F1F\u0F2E\u0F40\u0F48\u0F52\u0F62\u0F77\u0F82\u0F88" +
		"\u0F91\u0F9A\u0FA0\u0FA9\u0FAE\u0FB1\u0FB6\u0FB9\u0FBE\u0FC1\u0FC9\u0FCF" +
		"\u0FD3\u0FDA\u0FE0\u0FE4\u0FE7\u0FE9\u0FEC\u0FF1\u0FF4\u0FF9\u0FFC\u1001" +
		"\u1004\u1009\u100C\u101B\u1026\u1032\u1039\u1040\u1044\u1049\u104C\u1051" +
		"\u1054\u1059\u105C\u1065\u106C\u107B\u107F\u1084\u108F\u1099\u10A5\u10AB" +
		"\u10AD\u10B5\u10BE\u10C3\u10CE\u10D1\u10D5\u10DD\u10E1\u10E5\u10ED\u10F2" +
		"\u10FA\u10FF\u1103\u1105\u110A\u1113\u1116\u111B\u1122\u1128\u112A\u112F" +
		"\u1135\u113B\u1140\u1146\u114D\u1152\u1157\u115C\u115F\u1163\u1167\u116B" +
		"\u116F\u1174\u1178\u117C\u1186\u118C\u1193\u1196\u119C\u11A2\u11A7\u11A9" +
		"\u11AF\u11B1\u11B6\u11BC\u11C2\u11C7\u11C9\u11CD\u11D1\u11D4\u11E2\u11E7" +
		"\u11EB\u11F8\u11FB\u11FD\u1205\u120F\u1215\u121C\u121F\u1225\u122B\u1230" +
		"\u1232\u1238\u123A\u123F\u1245\u124B\u1251\u1256\u1258\u125C\u1260\u1263" +
		"\u1271\u1276\u127A\u1287\u128A\u128C\u1294\u129F\u12A8\u12B1\u12BC\u12C5" +
		"\u12CE\u12DA\u12DE\u12E3\u12E5\u12E7\u12EC\u12F0\u12F5\u12F7\u12F9\u1307" +
		"\u130C\u1322\u1338\u133D\u134A\u1352\u1366\u1369\u136F\u1377\u137E\u1383" +
		"\u1387\u138B\u138E\u1395\u13A7\u13A9\u13BD\u13C5\u13CA\u13DC\u13EB\u13ED" +
		"\u13F4\u13FB\u1400\u1405\u140B\u1410\u1412\u1419\u141F\u1425\u1428\u142E" +
		"\u1438\u143B\u1442\u1445\u144A\u144C\u1454\u1458\u145E\u1463\u1465\u1468" +
		"\u146F\u1475\u147C\u147F\u1485\u148A\u148C\u148F\u1497\u149D\u14A4\u14A7" +
		"\u14AD\u14B2\u14B4\u14BC\u14C4\u14CA\u14CF\u14D1\u14DB\u14E0\u14EA\u14F0" +
		"\u14FC\u14FE\u1505\u150B\u1511\u1517\u151C\u151E\u1525\u152D\u1533\u1541" +
		"\u1543\u1546\u154B\u154D\u1559\u155F\u156D\u156F\u1572\u1577\u157A\u157F" +
		"\u1581\u158A\u1591\u1597\u159A\u159F\u15A6\u15A8\u15AE\u15B0\u15B8\u15BA" +
		"\u15C0\u15C2\u15C8\u15CA\u15D1\u15D4\u15D6";
	private static readonly _serializedATNSegment20: string =
		"\u15D9\u15DD\u15DF\u15E8\u15EE\u15F2\u15FA\u1601\u1607\u1609\u1614\u1619" +
		"\u161F\u1623\u162D\u1635\u1641\u1644\u164C\u164E\u1651\u1655\u1658\u1662" +
		"\u1668\u1670\u1674\u1678\u1681\u1687\u168B\u168E\u1699\u169D\u16A4\u16A9" +
		"\u16AC\u16B4\u16B8\u16BB\u16BF\u16C2\u16C6\u16CD\u16D1\u16D3\u16D5\u16D8" +
		"\u16DB\u16DE\u16E4\u16E7\u16EF\u16F1\u16F4\u16F8\u16FB\u1701\u1704\u1708" +
		"\u170B\u170E\u1715\u1718\u171F\u1725\u1729\u1733\u1736\u1739\u173D\u1740" +
		"\u1743\u1746\u174A\u174D\u1755\u1757\u175B\u175E\u1766\u176A\u176E\u1775" +
		"\u1779\u177B\u177D\u1780\u1783\u1786\u178E\u1794\u179A\u179C\u17A0\u17A3" +
		"\u17A8\u17AD\u17B0\u17B8\u17BC\u17C3\u17C6\u17CF\u17D2\u17D6\u17DE\u17E1" +
		"\u17E5\u17E8\u17F6\u17FA\u17FD\u1801\u1804\u1809\u180C\u1812\u1815\u181C" +
		"\u1820\u1822\u182A\u182D\u1831\u1838\u183D\u1840\u184C\u184F\u1855\u185C" +
		"\u1861\u1866\u186D\u1874\u1877\u187F\u1887\u188A\u1892\u189D\u18A0\u18AA" +
		"\u18B1\u18B6\u18B9\u18C3\u18C6\u18C9\u18D1\u18DC\u18DF\u18E2\u18E8\u18ED" +
		"\u18F1\u18FB\u18FE\u1901\u1907\u190D\u1915\u1918\u191C\u1920\u1923\u1928" +
		"\u1936\u1946\u194A\u1950\u1952\u1955\u1959\u195E\u1963\u196B\u1970\u1975" +
		"\u197B\u1980\u1983\u198C\u1996\u1999\u19A2\u19AA\u19AD\u19B4\u19B7\u19E5" +
		"\u19E9\u19EC\u19F2\u19FE\u1A00\u1A03\u1A1C\u1A27\u1A2F\u1A3A\u1A3F\u1A42" +
		"\u1A4A\u1A54\u1A5B\u1A62\u1A64\u1A70\u1A7B\u1A7F\u1A84\u1A87\u1A89\u1A8C" +
		"\u1A98\u1A9A\u1A9C\u1A9F\u1AA4\u1AA7\u1AAC\u1AB6\u1ABA\u1ABF\u1AC2\u1AC4" +
		"\u1AC7\u1AD3\u1AD5\u1AD7\u1ADA\u1AE0\u1AEA\u1AFE\u1B04\u1B1D\u1B1F\u1B39" +
		"\u1B3F\u1B4A\u1B52\u1B55\u1B63\u1B6B\u1B72\u1B89\u1B96\u1B9C\u1BA3\u1BAB" +
		"\u1BAE\u1BB1\u1BBA\u1BC4\u1BCB\u1BCF\u1BD3\u1BD9\u1BE0\u1BE4\u1BEA\u1BF1" +
		"\u1BF8\u1BFB\u1C01\u1C08\u1C0C\u1C11\u1C16\u1C1B\u1C23\u1C27\u1C2D\u1C34" +
		"\u1C38\u1C41\u1C49\u1C4F\u1C55\u1C66\u1C6A\u1C72\u1C76\u1C7E\u1C82\u1C87" +
		"\u1C8B\u1C92\u1C98\u1C9A\u1C9E\u1CA2\u1CA6\u1CA9\u1CAD\u1CB3\u1CB7\u1CB9" +
		"\u1CC0\u1CC7\u1CCA\u1CCD\u1CD4\u1CD9\u1CDE\u1CE2\u1CE8\u1CEC\u1CEE\u1CF3" +
		"\u1CF8\u1CFC\u1D01\u1D07\u1D0B\u1D0F\u1D11\u1D15\u1D19\u1D1D\u1D21\u1D27" +
		"\u1D2A\u1D30\u1D34\u1D38\u1D3E\u1D44\u1D46\u1D49\u1D4D\u1D51\u1D55\u1D5B" +
		"\u1D5E\u1D64\u1D6A\u1D6D\u1D73\u1D76\u1D7C\u1D7F\u1D83\u1D87\u1D8B\u1D90" +
		"\u1D93\u1D97\u1D9B\u1DAC\u1DAE\u1DB0\u1DB3\u1DBA\u1DBF\u1DC3\u1DC9\u1DCD" +
		"\u1DCF\u1DD4\u1DD9\u1DDD\u1DE2\u1DE8\u1DEC\u1DF0\u1DF2\u1DF6\u1DFA\u1DFE" +
		"\u1E02\u1E08\u1E0B\u1E11\u1E15\u1E19\u1E1F\u1E25\u1E27\u1E2A\u1E2E\u1E32" +
		"\u1E36\u1E3C\u1E3F\u1E45\u1E4B\u1E4E\u1E54\u1E57\u1E5D\u1E60\u1E64\u1E68" +
		"\u1E6C\u1E71\u1E74\u1E78\u1E7C\u1E82\u1E85\u1E89\u1E9A\u1E9C\u1E9E\u1EA1" +
		"\u1EAF\u1EB5\u1EBD\u1EC4\u1EC6\u1EC9\u1EEB\u1EEF\u1EF6\u1EF9\u1EFC\u1F04" +
		"\u1F09\u1F0E\u1F11\u1F13\u1F17\u1F1B\u1F1E\u1F22\u1F28\u1F2D\u1F34\u1F36" +
		"\u1F3A\u1F42\u1F48\u1F4C\u1F4F\u1F58\u1F5B\u1F61\u1F68\u1F6D\u1F75\u1F7A" +
		"\u1F86\u1F88\u1F93\u1F9A\u1FA4\u1FBB\u1FC8\u1FD8\u1FDD\u1FE4\u1FE7\u1FEB" +
		"\u1FED\u1FFE\u200D\u2015\u201E\u2026\u202F\u203A\u203E\u2040\u2042\u2048" +
		"\u204D\u2054\u2061\u2063\u2065\u2068\u206B\u2072\u2075\u207B\u2080\u2082" +
		"\u2085\u208B\u2093\u2095\u2098\u209C\u209F\u20A9\u20AC\u20B0\u20B3\u20B9" +
		"\u20BC\u20BE\u20C2\u20C7\u20CB\u20D3\u20D7\u20DA\u20DF\u20E7\u20EC\u20F6" +
		"\u2101\u2106\u210C\u2112\u2116\u2119\u211D\u2121\u2129\u212E\u2130\u2133" +
		"\u2138\u2141\u2145\u214A\u214D\u2150\u2156\u215E\u2166\u2169\u216C\u2170" +
		"\u2175\u2178\u217E\u2182\u2188\u2190\u2196\u2198\u219B\u21AA\u21AD\u21B0" +
		"\u21B2\u21BD\u21C8\u21D1\u21DB\u21E5\u21E7\u21E9\u21EC\u21EF\u21FA\u21FC" +
		"\u21FE\u2201\u2206\u2211\u221A\u221D\u2220\u2229\u222C\u222F\u2236\u2239" +
		"\u2248\u224B\u2252\u2262\u2266\u2270\u2283\u2285\u228C\u2293\u2297\u229F" +
		"\u22A3\u22A7\u22AD\u22B7\u22C1\u22C8\u22CF\u22D8\u22DF\u22E6\u22EF\u22F3" +
		"\u22FD\u2304\u230C\u2314\u2318\u232E\u2337\u233D\u2343\u2349\u2353\u235A" +
		"\u235F\u2364\u2368\u236F\u2373\u2376\u237B\u237F\u2383\u2388\u238F\u2392" +
		"\u2396\u239B\u239F\u23A8\u23AF\u23B8\u23C4\u23C6\u23D0\u23D3\u23D8\u23E1" +
		"\u23E3\u23E5\u23EA\u23F2\u23F7\u23FF\u2404\u240A\u2414\u2416\u241A\u241E" +
		"\u2420\u2427\u2432\u2454\u2464\u246B\u246D\u2474\u247D\u2487\u248C\u2493" +
		"\u2496\u249D\u24A4\u24A7\u24A9\u24B1\u24B3\u24B9\u24C0\u24C8\u24CE\u24D3" +
		"\u24D7\u24DB\u24E0\u24E2\u24E9\u24ED\u24F4\u24F6\u24FD\u24FF\u2508\u2510" +
		"\u2517\u251D\u2528\u252C\u252E\u2531\u2549\u2562\u2567\u257B\u257F\u2583" +
		"\u2593\u259B\u25B1\u25EB\u25EF\u2610\u2617\u261D\u262A\u2639\u2644\u2649" +
		"\u2653\u265C\u267E\u2683\u2689\u268C\u2691\u2696\u269F\u26A4\u26AA\u26B3" +
		"\u26BD\u26C0\u26CE\u26D4\u26DC\u26E0\u26E8\u26EF\u26FC\u2704\u2711\u2718" +
		"\u271E\u2722\u2733\u2742\u2744\u2749\u274C\u2755\u2758\u275B\u2768\u276C" +
		"\u2774\u277A\u2782\u2789\u278F\u279E\u27A7\u27AD\u27B3\u27B6\u27BA\u27C1" +
		"\u27C9\u27CC\u27D2\u27D8\u27DA\u27E0\u27E3\u27E5\u27EB\u27ED\u27FB\u2802" +
		"\u280B\u2812\u281E\u2825\u282C\u2833\u2839\u2840\u2843\u2848\u284F\u2856" +
		"\u285E\u2863\u2867\u286C\u2872\u2878\u287E\u2884\u288A\u2890\u2896\u2899" +
		"\u289D\u28A2\u28A6\u28AE\u28B3\u28BA\u28C3\u28C5\u28CC\u28D8\u28DD\u28E8" +
		"\u28F2\u28F4\u28FA\u28FC\u2901\u2903\u2906\u290A\u290E\u2914\u291D\u2920" +
		"\u2922\u2925\u292B\u292F\u2932\u293B\u2944\u2950\u2953\u2957\u295D\u2960" +
		"\u2964\u296A\u296F\u2974\u2978\u297C\u2980\u2987\u299A\u29A0";
	public static readonly _serializedATN: string = Utils.join(
		[
			TSqlParser._serializedATNSegment0,
			TSqlParser._serializedATNSegment1,
			TSqlParser._serializedATNSegment2,
			TSqlParser._serializedATNSegment3,
			TSqlParser._serializedATNSegment4,
			TSqlParser._serializedATNSegment5,
			TSqlParser._serializedATNSegment6,
			TSqlParser._serializedATNSegment7,
			TSqlParser._serializedATNSegment8,
			TSqlParser._serializedATNSegment9,
			TSqlParser._serializedATNSegment10,
			TSqlParser._serializedATNSegment11,
			TSqlParser._serializedATNSegment12,
			TSqlParser._serializedATNSegment13,
			TSqlParser._serializedATNSegment14,
			TSqlParser._serializedATNSegment15,
			TSqlParser._serializedATNSegment16,
			TSqlParser._serializedATNSegment17,
			TSqlParser._serializedATNSegment18,
			TSqlParser._serializedATNSegment19,
			TSqlParser._serializedATNSegment20,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TSqlParser.__ATN) {
			TSqlParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TSqlParser._serializedATN));
		}

		return TSqlParser.__ATN;
	}

}

export class Tsql_fileContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(TSqlParser.EOF, 0); }
	public batch(): BatchContext[];
	public batch(i: number): BatchContext;
	public batch(i?: number): BatchContext | BatchContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BatchContext);
		} else {
			return this.getRuleContext(i, BatchContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_tsql_file; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTsql_file) {
			listener.enterTsql_file(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTsql_file) {
			listener.exitTsql_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTsql_file) {
			return visitor.visitTsql_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BatchContext extends ParserRuleContext {
	public execute_body(): Execute_bodyContext | undefined {
		return this.tryGetRuleContext(0, Execute_bodyContext);
	}
	public go_statement(): Go_statementContext[];
	public go_statement(i: number): Go_statementContext;
	public go_statement(i?: number): Go_statementContext | Go_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Go_statementContext);
		} else {
			return this.getRuleContext(i, Go_statementContext);
		}
	}
	public sql_clauses(): Sql_clausesContext | undefined {
		return this.tryGetRuleContext(0, Sql_clausesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_batch; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBatch) {
			listener.enterBatch(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBatch) {
			listener.exitBatch(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBatch) {
			return visitor.visitBatch(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql_clausesContext extends ParserRuleContext {
	public sql_clause(): Sql_clauseContext[];
	public sql_clause(i: number): Sql_clauseContext;
	public sql_clause(i?: number): Sql_clauseContext | Sql_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sql_clauseContext);
		} else {
			return this.getRuleContext(i, Sql_clauseContext);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SEMI);
		} else {
			return this.getToken(TSqlParser.SEMI, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_sql_clauses; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSql_clauses) {
			listener.enterSql_clauses(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSql_clauses) {
			listener.exitSql_clauses(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSql_clauses) {
			return visitor.visitSql_clauses(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql_clauseContext extends ParserRuleContext {
	public dml_clause(): Dml_clauseContext | undefined {
		return this.tryGetRuleContext(0, Dml_clauseContext);
	}
	public ddl_clause(): Ddl_clauseContext | undefined {
		return this.tryGetRuleContext(0, Ddl_clauseContext);
	}
	public cfl_statement(): Cfl_statementContext | undefined {
		return this.tryGetRuleContext(0, Cfl_statementContext);
	}
	public dbcc_clause(): Dbcc_clauseContext | undefined {
		return this.tryGetRuleContext(0, Dbcc_clauseContext);
	}
	public empty_statement(): Empty_statementContext | undefined {
		return this.tryGetRuleContext(0, Empty_statementContext);
	}
	public another_statement(): Another_statementContext | undefined {
		return this.tryGetRuleContext(0, Another_statementContext);
	}
	public backup_statement(): Backup_statementContext | undefined {
		return this.tryGetRuleContext(0, Backup_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_sql_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSql_clause) {
			listener.enterSql_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSql_clause) {
			listener.exitSql_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSql_clause) {
			return visitor.visitSql_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dml_clauseContext extends ParserRuleContext {
	public merge_statement(): Merge_statementContext | undefined {
		return this.tryGetRuleContext(0, Merge_statementContext);
	}
	public delete_statement(): Delete_statementContext | undefined {
		return this.tryGetRuleContext(0, Delete_statementContext);
	}
	public insert_statement(): Insert_statementContext | undefined {
		return this.tryGetRuleContext(0, Insert_statementContext);
	}
	public select_statement(): Select_statementContext | undefined {
		return this.tryGetRuleContext(0, Select_statementContext);
	}
	public update_statement(): Update_statementContext | undefined {
		return this.tryGetRuleContext(0, Update_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_dml_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDml_clause) {
			listener.enterDml_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDml_clause) {
			listener.exitDml_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDml_clause) {
			return visitor.visitDml_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ddl_clauseContext extends ParserRuleContext {
	public alter_application_role(): Alter_application_roleContext | undefined {
		return this.tryGetRuleContext(0, Alter_application_roleContext);
	}
	public alter_assembly(): Alter_assemblyContext | undefined {
		return this.tryGetRuleContext(0, Alter_assemblyContext);
	}
	public alter_asymmetric_key(): Alter_asymmetric_keyContext | undefined {
		return this.tryGetRuleContext(0, Alter_asymmetric_keyContext);
	}
	public alter_authorization(): Alter_authorizationContext | undefined {
		return this.tryGetRuleContext(0, Alter_authorizationContext);
	}
	public alter_authorization_for_azure_dw(): Alter_authorization_for_azure_dwContext | undefined {
		return this.tryGetRuleContext(0, Alter_authorization_for_azure_dwContext);
	}
	public alter_authorization_for_parallel_dw(): Alter_authorization_for_parallel_dwContext | undefined {
		return this.tryGetRuleContext(0, Alter_authorization_for_parallel_dwContext);
	}
	public alter_authorization_for_sql_database(): Alter_authorization_for_sql_databaseContext | undefined {
		return this.tryGetRuleContext(0, Alter_authorization_for_sql_databaseContext);
	}
	public alter_availability_group(): Alter_availability_groupContext | undefined {
		return this.tryGetRuleContext(0, Alter_availability_groupContext);
	}
	public alter_certificate(): Alter_certificateContext | undefined {
		return this.tryGetRuleContext(0, Alter_certificateContext);
	}
	public alter_column_encryption_key(): Alter_column_encryption_keyContext | undefined {
		return this.tryGetRuleContext(0, Alter_column_encryption_keyContext);
	}
	public alter_credential(): Alter_credentialContext | undefined {
		return this.tryGetRuleContext(0, Alter_credentialContext);
	}
	public alter_cryptographic_provider(): Alter_cryptographic_providerContext | undefined {
		return this.tryGetRuleContext(0, Alter_cryptographic_providerContext);
	}
	public alter_database(): Alter_databaseContext | undefined {
		return this.tryGetRuleContext(0, Alter_databaseContext);
	}
	public alter_db_role(): Alter_db_roleContext | undefined {
		return this.tryGetRuleContext(0, Alter_db_roleContext);
	}
	public alter_endpoint(): Alter_endpointContext | undefined {
		return this.tryGetRuleContext(0, Alter_endpointContext);
	}
	public create_or_alter_event_session(): Create_or_alter_event_sessionContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_event_sessionContext);
	}
	public alter_external_data_source(): Alter_external_data_sourceContext | undefined {
		return this.tryGetRuleContext(0, Alter_external_data_sourceContext);
	}
	public alter_external_library(): Alter_external_libraryContext | undefined {
		return this.tryGetRuleContext(0, Alter_external_libraryContext);
	}
	public alter_external_resource_pool(): Alter_external_resource_poolContext | undefined {
		return this.tryGetRuleContext(0, Alter_external_resource_poolContext);
	}
	public alter_fulltext_catalog(): Alter_fulltext_catalogContext | undefined {
		return this.tryGetRuleContext(0, Alter_fulltext_catalogContext);
	}
	public alter_fulltext_stoplist(): Alter_fulltext_stoplistContext | undefined {
		return this.tryGetRuleContext(0, Alter_fulltext_stoplistContext);
	}
	public alter_login_azure_sql(): Alter_login_azure_sqlContext | undefined {
		return this.tryGetRuleContext(0, Alter_login_azure_sqlContext);
	}
	public alter_login_azure_sql_dw_and_pdw(): Alter_login_azure_sql_dw_and_pdwContext | undefined {
		return this.tryGetRuleContext(0, Alter_login_azure_sql_dw_and_pdwContext);
	}
	public alter_login_sql_server(): Alter_login_sql_serverContext | undefined {
		return this.tryGetRuleContext(0, Alter_login_sql_serverContext);
	}
	public alter_master_key_azure_sql(): Alter_master_key_azure_sqlContext | undefined {
		return this.tryGetRuleContext(0, Alter_master_key_azure_sqlContext);
	}
	public alter_master_key_sql_server(): Alter_master_key_sql_serverContext | undefined {
		return this.tryGetRuleContext(0, Alter_master_key_sql_serverContext);
	}
	public alter_message_type(): Alter_message_typeContext | undefined {
		return this.tryGetRuleContext(0, Alter_message_typeContext);
	}
	public alter_partition_function(): Alter_partition_functionContext | undefined {
		return this.tryGetRuleContext(0, Alter_partition_functionContext);
	}
	public alter_partition_scheme(): Alter_partition_schemeContext | undefined {
		return this.tryGetRuleContext(0, Alter_partition_schemeContext);
	}
	public alter_remote_service_binding(): Alter_remote_service_bindingContext | undefined {
		return this.tryGetRuleContext(0, Alter_remote_service_bindingContext);
	}
	public alter_resource_governor(): Alter_resource_governorContext | undefined {
		return this.tryGetRuleContext(0, Alter_resource_governorContext);
	}
	public alter_schema_azure_sql_dw_and_pdw(): Alter_schema_azure_sql_dw_and_pdwContext | undefined {
		return this.tryGetRuleContext(0, Alter_schema_azure_sql_dw_and_pdwContext);
	}
	public alter_schema_sql(): Alter_schema_sqlContext | undefined {
		return this.tryGetRuleContext(0, Alter_schema_sqlContext);
	}
	public alter_sequence(): Alter_sequenceContext | undefined {
		return this.tryGetRuleContext(0, Alter_sequenceContext);
	}
	public alter_server_audit(): Alter_server_auditContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_auditContext);
	}
	public alter_server_audit_specification(): Alter_server_audit_specificationContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_audit_specificationContext);
	}
	public alter_server_configuration(): Alter_server_configurationContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_configurationContext);
	}
	public alter_server_role(): Alter_server_roleContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_roleContext);
	}
	public alter_server_role_pdw(): Alter_server_role_pdwContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_role_pdwContext);
	}
	public alter_service(): Alter_serviceContext | undefined {
		return this.tryGetRuleContext(0, Alter_serviceContext);
	}
	public alter_service_master_key(): Alter_service_master_keyContext | undefined {
		return this.tryGetRuleContext(0, Alter_service_master_keyContext);
	}
	public alter_symmetric_key(): Alter_symmetric_keyContext | undefined {
		return this.tryGetRuleContext(0, Alter_symmetric_keyContext);
	}
	public alter_table(): Alter_tableContext | undefined {
		return this.tryGetRuleContext(0, Alter_tableContext);
	}
	public alter_user(): Alter_userContext | undefined {
		return this.tryGetRuleContext(0, Alter_userContext);
	}
	public alter_user_azure_sql(): Alter_user_azure_sqlContext | undefined {
		return this.tryGetRuleContext(0, Alter_user_azure_sqlContext);
	}
	public alter_workload_group(): Alter_workload_groupContext | undefined {
		return this.tryGetRuleContext(0, Alter_workload_groupContext);
	}
	public create_application_role(): Create_application_roleContext | undefined {
		return this.tryGetRuleContext(0, Create_application_roleContext);
	}
	public create_assembly(): Create_assemblyContext | undefined {
		return this.tryGetRuleContext(0, Create_assemblyContext);
	}
	public create_asymmetric_key(): Create_asymmetric_keyContext | undefined {
		return this.tryGetRuleContext(0, Create_asymmetric_keyContext);
	}
	public create_column_encryption_key(): Create_column_encryption_keyContext | undefined {
		return this.tryGetRuleContext(0, Create_column_encryption_keyContext);
	}
	public create_column_master_key(): Create_column_master_keyContext | undefined {
		return this.tryGetRuleContext(0, Create_column_master_keyContext);
	}
	public create_credential(): Create_credentialContext | undefined {
		return this.tryGetRuleContext(0, Create_credentialContext);
	}
	public create_cryptographic_provider(): Create_cryptographic_providerContext | undefined {
		return this.tryGetRuleContext(0, Create_cryptographic_providerContext);
	}
	public create_database(): Create_databaseContext | undefined {
		return this.tryGetRuleContext(0, Create_databaseContext);
	}
	public create_db_role(): Create_db_roleContext | undefined {
		return this.tryGetRuleContext(0, Create_db_roleContext);
	}
	public create_event_notification(): Create_event_notificationContext | undefined {
		return this.tryGetRuleContext(0, Create_event_notificationContext);
	}
	public create_external_library(): Create_external_libraryContext | undefined {
		return this.tryGetRuleContext(0, Create_external_libraryContext);
	}
	public create_external_resource_pool(): Create_external_resource_poolContext | undefined {
		return this.tryGetRuleContext(0, Create_external_resource_poolContext);
	}
	public create_fulltext_catalog(): Create_fulltext_catalogContext | undefined {
		return this.tryGetRuleContext(0, Create_fulltext_catalogContext);
	}
	public create_fulltext_stoplist(): Create_fulltext_stoplistContext | undefined {
		return this.tryGetRuleContext(0, Create_fulltext_stoplistContext);
	}
	public create_index(): Create_indexContext | undefined {
		return this.tryGetRuleContext(0, Create_indexContext);
	}
	public create_login_azure_sql(): Create_login_azure_sqlContext | undefined {
		return this.tryGetRuleContext(0, Create_login_azure_sqlContext);
	}
	public create_login_pdw(): Create_login_pdwContext | undefined {
		return this.tryGetRuleContext(0, Create_login_pdwContext);
	}
	public create_login_sql_server(): Create_login_sql_serverContext | undefined {
		return this.tryGetRuleContext(0, Create_login_sql_serverContext);
	}
	public create_master_key_azure_sql(): Create_master_key_azure_sqlContext | undefined {
		return this.tryGetRuleContext(0, Create_master_key_azure_sqlContext);
	}
	public create_master_key_sql_server(): Create_master_key_sql_serverContext | undefined {
		return this.tryGetRuleContext(0, Create_master_key_sql_serverContext);
	}
	public create_or_alter_broker_priority(): Create_or_alter_broker_priorityContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_broker_priorityContext);
	}
	public create_or_alter_function(): Create_or_alter_functionContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_functionContext);
	}
	public create_or_alter_procedure(): Create_or_alter_procedureContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_procedureContext);
	}
	public create_or_alter_trigger(): Create_or_alter_triggerContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_triggerContext);
	}
	public create_remote_service_binding(): Create_remote_service_bindingContext | undefined {
		return this.tryGetRuleContext(0, Create_remote_service_bindingContext);
	}
	public create_resource_pool(): Create_resource_poolContext | undefined {
		return this.tryGetRuleContext(0, Create_resource_poolContext);
	}
	public create_route(): Create_routeContext | undefined {
		return this.tryGetRuleContext(0, Create_routeContext);
	}
	public create_rule(): Create_ruleContext | undefined {
		return this.tryGetRuleContext(0, Create_ruleContext);
	}
	public create_schema(): Create_schemaContext | undefined {
		return this.tryGetRuleContext(0, Create_schemaContext);
	}
	public create_schema_azure_sql_dw_and_pdw(): Create_schema_azure_sql_dw_and_pdwContext | undefined {
		return this.tryGetRuleContext(0, Create_schema_azure_sql_dw_and_pdwContext);
	}
	public create_search_property_list(): Create_search_property_listContext | undefined {
		return this.tryGetRuleContext(0, Create_search_property_listContext);
	}
	public create_security_policy(): Create_security_policyContext | undefined {
		return this.tryGetRuleContext(0, Create_security_policyContext);
	}
	public create_sequence(): Create_sequenceContext | undefined {
		return this.tryGetRuleContext(0, Create_sequenceContext);
	}
	public create_server_audit(): Create_server_auditContext | undefined {
		return this.tryGetRuleContext(0, Create_server_auditContext);
	}
	public create_server_audit_specification(): Create_server_audit_specificationContext | undefined {
		return this.tryGetRuleContext(0, Create_server_audit_specificationContext);
	}
	public create_server_role(): Create_server_roleContext | undefined {
		return this.tryGetRuleContext(0, Create_server_roleContext);
	}
	public create_service(): Create_serviceContext | undefined {
		return this.tryGetRuleContext(0, Create_serviceContext);
	}
	public create_statistics(): Create_statisticsContext | undefined {
		return this.tryGetRuleContext(0, Create_statisticsContext);
	}
	public create_symmetric_key(): Create_symmetric_keyContext | undefined {
		return this.tryGetRuleContext(0, Create_symmetric_keyContext);
	}
	public create_synonym(): Create_synonymContext | undefined {
		return this.tryGetRuleContext(0, Create_synonymContext);
	}
	public create_table(): Create_tableContext | undefined {
		return this.tryGetRuleContext(0, Create_tableContext);
	}
	public create_type(): Create_typeContext | undefined {
		return this.tryGetRuleContext(0, Create_typeContext);
	}
	public create_user(): Create_userContext | undefined {
		return this.tryGetRuleContext(0, Create_userContext);
	}
	public create_user_azure_sql_dw(): Create_user_azure_sql_dwContext | undefined {
		return this.tryGetRuleContext(0, Create_user_azure_sql_dwContext);
	}
	public create_view(): Create_viewContext | undefined {
		return this.tryGetRuleContext(0, Create_viewContext);
	}
	public create_workload_group(): Create_workload_groupContext | undefined {
		return this.tryGetRuleContext(0, Create_workload_groupContext);
	}
	public create_xml_schema_collection(): Create_xml_schema_collectionContext | undefined {
		return this.tryGetRuleContext(0, Create_xml_schema_collectionContext);
	}
	public drop_aggregate(): Drop_aggregateContext | undefined {
		return this.tryGetRuleContext(0, Drop_aggregateContext);
	}
	public drop_application_role(): Drop_application_roleContext | undefined {
		return this.tryGetRuleContext(0, Drop_application_roleContext);
	}
	public drop_assembly(): Drop_assemblyContext | undefined {
		return this.tryGetRuleContext(0, Drop_assemblyContext);
	}
	public drop_asymmetric_key(): Drop_asymmetric_keyContext | undefined {
		return this.tryGetRuleContext(0, Drop_asymmetric_keyContext);
	}
	public drop_availability_group(): Drop_availability_groupContext | undefined {
		return this.tryGetRuleContext(0, Drop_availability_groupContext);
	}
	public drop_broker_priority(): Drop_broker_priorityContext | undefined {
		return this.tryGetRuleContext(0, Drop_broker_priorityContext);
	}
	public drop_certificate(): Drop_certificateContext | undefined {
		return this.tryGetRuleContext(0, Drop_certificateContext);
	}
	public drop_column_encryption_key(): Drop_column_encryption_keyContext | undefined {
		return this.tryGetRuleContext(0, Drop_column_encryption_keyContext);
	}
	public drop_column_master_key(): Drop_column_master_keyContext | undefined {
		return this.tryGetRuleContext(0, Drop_column_master_keyContext);
	}
	public drop_contract(): Drop_contractContext | undefined {
		return this.tryGetRuleContext(0, Drop_contractContext);
	}
	public drop_credential(): Drop_credentialContext | undefined {
		return this.tryGetRuleContext(0, Drop_credentialContext);
	}
	public drop_cryptograhic_provider(): Drop_cryptograhic_providerContext | undefined {
		return this.tryGetRuleContext(0, Drop_cryptograhic_providerContext);
	}
	public drop_database(): Drop_databaseContext | undefined {
		return this.tryGetRuleContext(0, Drop_databaseContext);
	}
	public drop_database_audit_specification(): Drop_database_audit_specificationContext | undefined {
		return this.tryGetRuleContext(0, Drop_database_audit_specificationContext);
	}
	public drop_database_scoped_credential(): Drop_database_scoped_credentialContext | undefined {
		return this.tryGetRuleContext(0, Drop_database_scoped_credentialContext);
	}
	public drop_db_role(): Drop_db_roleContext | undefined {
		return this.tryGetRuleContext(0, Drop_db_roleContext);
	}
	public drop_default(): Drop_defaultContext | undefined {
		return this.tryGetRuleContext(0, Drop_defaultContext);
	}
	public drop_endpoint(): Drop_endpointContext | undefined {
		return this.tryGetRuleContext(0, Drop_endpointContext);
	}
	public drop_event_notifications(): Drop_event_notificationsContext | undefined {
		return this.tryGetRuleContext(0, Drop_event_notificationsContext);
	}
	public drop_event_session(): Drop_event_sessionContext | undefined {
		return this.tryGetRuleContext(0, Drop_event_sessionContext);
	}
	public drop_external_data_source(): Drop_external_data_sourceContext | undefined {
		return this.tryGetRuleContext(0, Drop_external_data_sourceContext);
	}
	public drop_external_file_format(): Drop_external_file_formatContext | undefined {
		return this.tryGetRuleContext(0, Drop_external_file_formatContext);
	}
	public drop_external_library(): Drop_external_libraryContext | undefined {
		return this.tryGetRuleContext(0, Drop_external_libraryContext);
	}
	public drop_external_resource_pool(): Drop_external_resource_poolContext | undefined {
		return this.tryGetRuleContext(0, Drop_external_resource_poolContext);
	}
	public drop_external_table(): Drop_external_tableContext | undefined {
		return this.tryGetRuleContext(0, Drop_external_tableContext);
	}
	public drop_fulltext_catalog(): Drop_fulltext_catalogContext | undefined {
		return this.tryGetRuleContext(0, Drop_fulltext_catalogContext);
	}
	public drop_fulltext_index(): Drop_fulltext_indexContext | undefined {
		return this.tryGetRuleContext(0, Drop_fulltext_indexContext);
	}
	public drop_fulltext_stoplist(): Drop_fulltext_stoplistContext | undefined {
		return this.tryGetRuleContext(0, Drop_fulltext_stoplistContext);
	}
	public drop_function(): Drop_functionContext | undefined {
		return this.tryGetRuleContext(0, Drop_functionContext);
	}
	public drop_index(): Drop_indexContext | undefined {
		return this.tryGetRuleContext(0, Drop_indexContext);
	}
	public drop_login(): Drop_loginContext | undefined {
		return this.tryGetRuleContext(0, Drop_loginContext);
	}
	public drop_master_key(): Drop_master_keyContext | undefined {
		return this.tryGetRuleContext(0, Drop_master_keyContext);
	}
	public drop_message_type(): Drop_message_typeContext | undefined {
		return this.tryGetRuleContext(0, Drop_message_typeContext);
	}
	public drop_partition_function(): Drop_partition_functionContext | undefined {
		return this.tryGetRuleContext(0, Drop_partition_functionContext);
	}
	public drop_partition_scheme(): Drop_partition_schemeContext | undefined {
		return this.tryGetRuleContext(0, Drop_partition_schemeContext);
	}
	public drop_procedure(): Drop_procedureContext | undefined {
		return this.tryGetRuleContext(0, Drop_procedureContext);
	}
	public drop_queue(): Drop_queueContext | undefined {
		return this.tryGetRuleContext(0, Drop_queueContext);
	}
	public drop_remote_service_binding(): Drop_remote_service_bindingContext | undefined {
		return this.tryGetRuleContext(0, Drop_remote_service_bindingContext);
	}
	public drop_resource_pool(): Drop_resource_poolContext | undefined {
		return this.tryGetRuleContext(0, Drop_resource_poolContext);
	}
	public drop_route(): Drop_routeContext | undefined {
		return this.tryGetRuleContext(0, Drop_routeContext);
	}
	public drop_rule(): Drop_ruleContext | undefined {
		return this.tryGetRuleContext(0, Drop_ruleContext);
	}
	public drop_schema(): Drop_schemaContext | undefined {
		return this.tryGetRuleContext(0, Drop_schemaContext);
	}
	public drop_search_property_list(): Drop_search_property_listContext | undefined {
		return this.tryGetRuleContext(0, Drop_search_property_listContext);
	}
	public drop_security_policy(): Drop_security_policyContext | undefined {
		return this.tryGetRuleContext(0, Drop_security_policyContext);
	}
	public drop_sequence(): Drop_sequenceContext | undefined {
		return this.tryGetRuleContext(0, Drop_sequenceContext);
	}
	public drop_server_audit(): Drop_server_auditContext | undefined {
		return this.tryGetRuleContext(0, Drop_server_auditContext);
	}
	public drop_server_audit_specification(): Drop_server_audit_specificationContext | undefined {
		return this.tryGetRuleContext(0, Drop_server_audit_specificationContext);
	}
	public drop_server_role(): Drop_server_roleContext | undefined {
		return this.tryGetRuleContext(0, Drop_server_roleContext);
	}
	public drop_service(): Drop_serviceContext | undefined {
		return this.tryGetRuleContext(0, Drop_serviceContext);
	}
	public drop_signature(): Drop_signatureContext | undefined {
		return this.tryGetRuleContext(0, Drop_signatureContext);
	}
	public drop_statistics(): Drop_statisticsContext | undefined {
		return this.tryGetRuleContext(0, Drop_statisticsContext);
	}
	public drop_statistics_name_azure_dw_and_pdw(): Drop_statistics_name_azure_dw_and_pdwContext | undefined {
		return this.tryGetRuleContext(0, Drop_statistics_name_azure_dw_and_pdwContext);
	}
	public drop_symmetric_key(): Drop_symmetric_keyContext | undefined {
		return this.tryGetRuleContext(0, Drop_symmetric_keyContext);
	}
	public drop_synonym(): Drop_synonymContext | undefined {
		return this.tryGetRuleContext(0, Drop_synonymContext);
	}
	public drop_table(): Drop_tableContext | undefined {
		return this.tryGetRuleContext(0, Drop_tableContext);
	}
	public drop_trigger(): Drop_triggerContext | undefined {
		return this.tryGetRuleContext(0, Drop_triggerContext);
	}
	public drop_type(): Drop_typeContext | undefined {
		return this.tryGetRuleContext(0, Drop_typeContext);
	}
	public drop_user(): Drop_userContext | undefined {
		return this.tryGetRuleContext(0, Drop_userContext);
	}
	public drop_view(): Drop_viewContext | undefined {
		return this.tryGetRuleContext(0, Drop_viewContext);
	}
	public drop_workload_group(): Drop_workload_groupContext | undefined {
		return this.tryGetRuleContext(0, Drop_workload_groupContext);
	}
	public drop_xml_schema_collection(): Drop_xml_schema_collectionContext | undefined {
		return this.tryGetRuleContext(0, Drop_xml_schema_collectionContext);
	}
	public disable_trigger(): Disable_triggerContext | undefined {
		return this.tryGetRuleContext(0, Disable_triggerContext);
	}
	public enable_trigger(): Enable_triggerContext | undefined {
		return this.tryGetRuleContext(0, Enable_triggerContext);
	}
	public lock_table(): Lock_tableContext | undefined {
		return this.tryGetRuleContext(0, Lock_tableContext);
	}
	public truncate_table(): Truncate_tableContext | undefined {
		return this.tryGetRuleContext(0, Truncate_tableContext);
	}
	public update_statistics(): Update_statisticsContext | undefined {
		return this.tryGetRuleContext(0, Update_statisticsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_ddl_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDdl_clause) {
			listener.enterDdl_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDdl_clause) {
			listener.exitDdl_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDdl_clause) {
			return visitor.visitDdl_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Backup_statementContext extends ParserRuleContext {
	public backup_database(): Backup_databaseContext | undefined {
		return this.tryGetRuleContext(0, Backup_databaseContext);
	}
	public backup_log(): Backup_logContext | undefined {
		return this.tryGetRuleContext(0, Backup_logContext);
	}
	public backup_certificate(): Backup_certificateContext | undefined {
		return this.tryGetRuleContext(0, Backup_certificateContext);
	}
	public backup_master_key(): Backup_master_keyContext | undefined {
		return this.tryGetRuleContext(0, Backup_master_keyContext);
	}
	public backup_service_master_key(): Backup_service_master_keyContext | undefined {
		return this.tryGetRuleContext(0, Backup_service_master_keyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_backup_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBackup_statement) {
			listener.enterBackup_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBackup_statement) {
			listener.exitBackup_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBackup_statement) {
			return visitor.visitBackup_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cfl_statementContext extends ParserRuleContext {
	public block_statement(): Block_statementContext | undefined {
		return this.tryGetRuleContext(0, Block_statementContext);
	}
	public break_statement(): Break_statementContext | undefined {
		return this.tryGetRuleContext(0, Break_statementContext);
	}
	public continue_statement(): Continue_statementContext | undefined {
		return this.tryGetRuleContext(0, Continue_statementContext);
	}
	public goto_statement(): Goto_statementContext | undefined {
		return this.tryGetRuleContext(0, Goto_statementContext);
	}
	public if_statement(): If_statementContext | undefined {
		return this.tryGetRuleContext(0, If_statementContext);
	}
	public return_statement(): Return_statementContext | undefined {
		return this.tryGetRuleContext(0, Return_statementContext);
	}
	public throw_statement(): Throw_statementContext | undefined {
		return this.tryGetRuleContext(0, Throw_statementContext);
	}
	public try_catch_statement(): Try_catch_statementContext | undefined {
		return this.tryGetRuleContext(0, Try_catch_statementContext);
	}
	public waitfor_statement(): Waitfor_statementContext | undefined {
		return this.tryGetRuleContext(0, Waitfor_statementContext);
	}
	public while_statement(): While_statementContext | undefined {
		return this.tryGetRuleContext(0, While_statementContext);
	}
	public print_statement(): Print_statementContext | undefined {
		return this.tryGetRuleContext(0, Print_statementContext);
	}
	public raiseerror_statement(): Raiseerror_statementContext | undefined {
		return this.tryGetRuleContext(0, Raiseerror_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_cfl_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCfl_statement) {
			listener.enterCfl_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCfl_statement) {
			listener.exitCfl_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCfl_statement) {
			return visitor.visitCfl_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_statementContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(TSqlParser.BEGIN, 0); }
	public END(): TerminalNode { return this.getToken(TSqlParser.END, 0); }
	public sql_clauses(): Sql_clausesContext | undefined {
		return this.tryGetRuleContext(0, Sql_clausesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_block_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBlock_statement) {
			listener.enterBlock_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBlock_statement) {
			listener.exitBlock_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBlock_statement) {
			return visitor.visitBlock_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Break_statementContext extends ParserRuleContext {
	public BREAK(): TerminalNode { return this.getToken(TSqlParser.BREAK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_break_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBreak_statement) {
			listener.enterBreak_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBreak_statement) {
			listener.exitBreak_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBreak_statement) {
			return visitor.visitBreak_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Continue_statementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode { return this.getToken(TSqlParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_continue_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterContinue_statement) {
			listener.enterContinue_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitContinue_statement) {
			listener.exitContinue_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitContinue_statement) {
			return visitor.visitContinue_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Goto_statementContext extends ParserRuleContext {
	public GOTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GOTO, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_goto_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGoto_statement) {
			listener.enterGoto_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGoto_statement) {
			listener.exitGoto_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGoto_statement) {
			return visitor.visitGoto_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Return_statementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(TSqlParser.RETURN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_return_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterReturn_statement) {
			listener.enterReturn_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitReturn_statement) {
			listener.exitReturn_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitReturn_statement) {
			return visitor.visitReturn_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_statementContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(TSqlParser.IF, 0); }
	public search_condition(): Search_conditionContext {
		return this.getRuleContext(0, Search_conditionContext);
	}
	public sql_clause(): Sql_clauseContext[];
	public sql_clause(i: number): Sql_clauseContext;
	public sql_clause(i?: number): Sql_clauseContext | Sql_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sql_clauseContext);
		} else {
			return this.getRuleContext(i, Sql_clauseContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_if_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterIf_statement) {
			listener.enterIf_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitIf_statement) {
			listener.exitIf_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitIf_statement) {
			return visitor.visitIf_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Throw_statementContext extends ParserRuleContext {
	public THROW(): TerminalNode { return this.getToken(TSqlParser.THROW, 0); }
	public throw_error_number(): Throw_error_numberContext | undefined {
		return this.tryGetRuleContext(0, Throw_error_numberContext);
	}
	public throw_message(): Throw_messageContext | undefined {
		return this.tryGetRuleContext(0, Throw_messageContext);
	}
	public throw_state(): Throw_stateContext | undefined {
		return this.tryGetRuleContext(0, Throw_stateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_throw_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterThrow_statement) {
			listener.enterThrow_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitThrow_statement) {
			listener.exitThrow_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitThrow_statement) {
			return visitor.visitThrow_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Throw_error_numberContext extends ParserRuleContext {
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_throw_error_number; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterThrow_error_number) {
			listener.enterThrow_error_number(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitThrow_error_number) {
			listener.exitThrow_error_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitThrow_error_number) {
			return visitor.visitThrow_error_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Throw_messageContext extends ParserRuleContext {
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_throw_message; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterThrow_message) {
			listener.enterThrow_message(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitThrow_message) {
			listener.exitThrow_message(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitThrow_message) {
			return visitor.visitThrow_message(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Throw_stateContext extends ParserRuleContext {
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_throw_state; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterThrow_state) {
			listener.enterThrow_state(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitThrow_state) {
			listener.exitThrow_state(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitThrow_state) {
			return visitor.visitThrow_state(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Try_catch_statementContext extends ParserRuleContext {
	public _try_clauses: Sql_clausesContext;
	public _catch_clauses: Sql_clausesContext;
	public BEGIN(): TerminalNode[];
	public BEGIN(i: number): TerminalNode;
	public BEGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BEGIN);
		} else {
			return this.getToken(TSqlParser.BEGIN, i);
		}
	}
	public TRY(): TerminalNode[];
	public TRY(i: number): TerminalNode;
	public TRY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TRY);
		} else {
			return this.getToken(TSqlParser.TRY, i);
		}
	}
	public END(): TerminalNode[];
	public END(i: number): TerminalNode;
	public END(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.END);
		} else {
			return this.getToken(TSqlParser.END, i);
		}
	}
	public CATCH(): TerminalNode[];
	public CATCH(i: number): TerminalNode;
	public CATCH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CATCH);
		} else {
			return this.getToken(TSqlParser.CATCH, i);
		}
	}
	public sql_clauses(): Sql_clausesContext[];
	public sql_clauses(i: number): Sql_clausesContext;
	public sql_clauses(i?: number): Sql_clausesContext | Sql_clausesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sql_clausesContext);
		} else {
			return this.getRuleContext(i, Sql_clausesContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_try_catch_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTry_catch_statement) {
			listener.enterTry_catch_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTry_catch_statement) {
			listener.exitTry_catch_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTry_catch_statement) {
			return visitor.visitTry_catch_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Waitfor_statementContext extends ParserRuleContext {
	public WAITFOR(): TerminalNode { return this.getToken(TSqlParser.WAITFOR, 0); }
	public receive_statement(): Receive_statementContext | undefined {
		return this.tryGetRuleContext(0, Receive_statementContext);
	}
	public time(): TimeContext | undefined {
		return this.tryGetRuleContext(0, TimeContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DELAY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELAY, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIME, 0); }
	public TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIMEOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_waitfor_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWaitfor_statement) {
			listener.enterWaitfor_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWaitfor_statement) {
			listener.exitWaitfor_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWaitfor_statement) {
			return visitor.visitWaitfor_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class While_statementContext extends ParserRuleContext {
	public WHILE(): TerminalNode { return this.getToken(TSqlParser.WHILE, 0); }
	public search_condition(): Search_conditionContext {
		return this.getRuleContext(0, Search_conditionContext);
	}
	public sql_clause(): Sql_clauseContext | undefined {
		return this.tryGetRuleContext(0, Sql_clauseContext);
	}
	public BREAK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BREAK, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_while_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWhile_statement) {
			listener.enterWhile_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWhile_statement) {
			listener.exitWhile_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWhile_statement) {
			return visitor.visitWhile_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Print_statementContext extends ParserRuleContext {
	public PRINT(): TerminalNode { return this.getToken(TSqlParser.PRINT, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DOUBLE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_print_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPrint_statement) {
			listener.enterPrint_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPrint_statement) {
			listener.exitPrint_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPrint_statement) {
			return visitor.visitPrint_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Raiseerror_statementContext extends ParserRuleContext {
	public _msg: Token;
	public _severity: Constant_LOCAL_IDContext;
	public _state: Constant_LOCAL_IDContext;
	public _formatstring: Token;
	public _argument: Token;
	public RAISERROR(): TerminalNode { return this.getToken(TSqlParser.RAISERROR, 0); }
	public constant_LOCAL_ID(): Constant_LOCAL_IDContext[];
	public constant_LOCAL_ID(i: number): Constant_LOCAL_IDContext;
	public constant_LOCAL_ID(i?: number): Constant_LOCAL_IDContext | Constant_LOCAL_IDContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_LOCAL_IDContext);
		} else {
			return this.getRuleContext(i, Constant_LOCAL_IDContext);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOG, 0); }
	public SETERROR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SETERROR, 0); }
	public DOUBLE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_raiseerror_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRaiseerror_statement) {
			listener.enterRaiseerror_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRaiseerror_statement) {
			listener.exitRaiseerror_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRaiseerror_statement) {
			return visitor.visitRaiseerror_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Empty_statementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_empty_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEmpty_statement) {
			listener.enterEmpty_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEmpty_statement) {
			listener.exitEmpty_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEmpty_statement) {
			return visitor.visitEmpty_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Another_statementContext extends ParserRuleContext {
	public declare_statement(): Declare_statementContext | undefined {
		return this.tryGetRuleContext(0, Declare_statementContext);
	}
	public cursor_statement(): Cursor_statementContext | undefined {
		return this.tryGetRuleContext(0, Cursor_statementContext);
	}
	public conversation_statement(): Conversation_statementContext | undefined {
		return this.tryGetRuleContext(0, Conversation_statementContext);
	}
	public create_contract(): Create_contractContext | undefined {
		return this.tryGetRuleContext(0, Create_contractContext);
	}
	public create_queue(): Create_queueContext | undefined {
		return this.tryGetRuleContext(0, Create_queueContext);
	}
	public alter_queue(): Alter_queueContext | undefined {
		return this.tryGetRuleContext(0, Alter_queueContext);
	}
	public execute_statement(): Execute_statementContext | undefined {
		return this.tryGetRuleContext(0, Execute_statementContext);
	}
	public message_statement(): Message_statementContext | undefined {
		return this.tryGetRuleContext(0, Message_statementContext);
	}
	public security_statement(): Security_statementContext | undefined {
		return this.tryGetRuleContext(0, Security_statementContext);
	}
	public set_statement(): Set_statementContext | undefined {
		return this.tryGetRuleContext(0, Set_statementContext);
	}
	public transaction_statement(): Transaction_statementContext | undefined {
		return this.tryGetRuleContext(0, Transaction_statementContext);
	}
	public use_statement(): Use_statementContext | undefined {
		return this.tryGetRuleContext(0, Use_statementContext);
	}
	public setuser_statement(): Setuser_statementContext | undefined {
		return this.tryGetRuleContext(0, Setuser_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_another_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAnother_statement) {
			listener.enterAnother_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAnother_statement) {
			listener.exitAnother_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAnother_statement) {
			return visitor.visitAnother_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_application_roleContext extends ParserRuleContext {
	public _appliction_role: IdContext;
	public _new_application_role_name: IdContext;
	public _application_role_password: Token;
	public _app_role_default_schema: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public APPLICATION(): TerminalNode { return this.getToken(TSqlParser.APPLICATION, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public DEFAULT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_application_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_application_role) {
			listener.enterAlter_application_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_application_role) {
			listener.exitAlter_application_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_application_role) {
			return visitor.visitAlter_application_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_application_roleContext extends ParserRuleContext {
	public _appliction_role: IdContext;
	public _application_role_password: Token;
	public _app_role_default_schema: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public APPLICATION(): TerminalNode { return this.getToken(TSqlParser.APPLICATION, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DEFAULT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_application_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_application_role) {
			listener.enterCreate_application_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_application_role) {
			listener.exitCreate_application_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_application_role) {
			return visitor.visitCreate_application_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_aggregateContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _aggregate_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public AGGREGATE(): TerminalNode { return this.getToken(TSqlParser.AGGREGATE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_aggregate; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_aggregate) {
			listener.enterDrop_aggregate(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_aggregate) {
			listener.exitDrop_aggregate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_aggregate) {
			return visitor.visitDrop_aggregate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_application_roleContext extends ParserRuleContext {
	public _rolename: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public APPLICATION(): TerminalNode { return this.getToken(TSqlParser.APPLICATION, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_application_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_application_role) {
			listener.enterDrop_application_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_application_role) {
			listener.exitDrop_application_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_application_role) {
			return visitor.visitDrop_application_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assemblyContext extends ParserRuleContext {
	public _assembly_name: IdContext;
	public alter_assembly_start(): Alter_assembly_startContext {
		return this.getRuleContext(0, Alter_assembly_startContext);
	}
	public alter_assembly_clause(): Alter_assembly_clauseContext {
		return this.getRuleContext(0, Alter_assembly_clauseContext);
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly) {
			listener.enterAlter_assembly(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly) {
			listener.exitAlter_assembly(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly) {
			return visitor.visitAlter_assembly(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_startContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public ASSEMBLY(): TerminalNode { return this.getToken(TSqlParser.ASSEMBLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_start) {
			listener.enterAlter_assembly_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_start) {
			listener.exitAlter_assembly_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_start) {
			return visitor.visitAlter_assembly_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_clauseContext extends ParserRuleContext {
	public alter_assembly_from_clause(): Alter_assembly_from_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alter_assembly_from_clauseContext);
	}
	public alter_assembly_with_clause(): Alter_assembly_with_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alter_assembly_with_clauseContext);
	}
	public alter_assembly_drop_clause(): Alter_assembly_drop_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alter_assembly_drop_clauseContext);
	}
	public alter_assembly_add_clause(): Alter_assembly_add_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alter_assembly_add_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_clause) {
			listener.enterAlter_assembly_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_clause) {
			listener.exitAlter_assembly_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_clause) {
			return visitor.visitAlter_assembly_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_from_clauseContext extends ParserRuleContext {
	public alter_assembly_from_clause_start(): Alter_assembly_from_clause_startContext {
		return this.getRuleContext(0, Alter_assembly_from_clause_startContext);
	}
	public client_assembly_specifier(): Client_assembly_specifierContext | undefined {
		return this.tryGetRuleContext(0, Client_assembly_specifierContext);
	}
	public alter_assembly_file_bits(): Alter_assembly_file_bitsContext | undefined {
		return this.tryGetRuleContext(0, Alter_assembly_file_bitsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_from_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_from_clause) {
			listener.enterAlter_assembly_from_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_from_clause) {
			listener.exitAlter_assembly_from_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_from_clause) {
			return visitor.visitAlter_assembly_from_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_from_clause_startContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_from_clause_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_from_clause_start) {
			listener.enterAlter_assembly_from_clause_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_from_clause_start) {
			listener.exitAlter_assembly_from_clause_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_from_clause_start) {
			return visitor.visitAlter_assembly_from_clause_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_drop_clauseContext extends ParserRuleContext {
	public alter_assembly_drop(): Alter_assembly_dropContext {
		return this.getRuleContext(0, Alter_assembly_dropContext);
	}
	public alter_assembly_drop_multiple_files(): Alter_assembly_drop_multiple_filesContext {
		return this.getRuleContext(0, Alter_assembly_drop_multiple_filesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_drop_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_drop_clause) {
			listener.enterAlter_assembly_drop_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_drop_clause) {
			listener.exitAlter_assembly_drop_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_drop_clause) {
			return visitor.visitAlter_assembly_drop_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public multiple_local_files(): Multiple_local_filesContext | undefined {
		return this.tryGetRuleContext(0, Multiple_local_filesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_drop_multiple_files; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_drop_multiple_files) {
			listener.enterAlter_assembly_drop_multiple_files(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_drop_multiple_files) {
			listener.exitAlter_assembly_drop_multiple_files(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_drop_multiple_files) {
			return visitor.visitAlter_assembly_drop_multiple_files(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_dropContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_drop; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_drop) {
			listener.enterAlter_assembly_drop(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_drop) {
			listener.exitAlter_assembly_drop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_drop) {
			return visitor.visitAlter_assembly_drop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_add_clauseContext extends ParserRuleContext {
	public alter_asssembly_add_clause_start(): Alter_asssembly_add_clause_startContext {
		return this.getRuleContext(0, Alter_asssembly_add_clause_startContext);
	}
	public alter_assembly_client_file_clause(): Alter_assembly_client_file_clauseContext {
		return this.getRuleContext(0, Alter_assembly_client_file_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_add_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_add_clause) {
			listener.enterAlter_assembly_add_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_add_clause) {
			listener.exitAlter_assembly_add_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_add_clause) {
			return visitor.visitAlter_assembly_add_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(TSqlParser.ADD, 0); }
	public FILE(): TerminalNode { return this.getToken(TSqlParser.FILE, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_asssembly_add_clause_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_asssembly_add_clause_start) {
			listener.enterAlter_asssembly_add_clause_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_asssembly_add_clause_start) {
			listener.exitAlter_asssembly_add_clause_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_asssembly_add_clause_start) {
			return visitor.visitAlter_asssembly_add_clause_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
	public alter_assembly_file_name(): Alter_assembly_file_nameContext {
		return this.getRuleContext(0, Alter_assembly_file_nameContext);
	}
	public alter_assembly_as(): Alter_assembly_asContext | undefined {
		return this.tryGetRuleContext(0, Alter_assembly_asContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_client_file_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_client_file_clause) {
			listener.enterAlter_assembly_client_file_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_client_file_clause) {
			listener.exitAlter_assembly_client_file_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_client_file_clause) {
			return visitor.visitAlter_assembly_client_file_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_file_nameContext extends ParserRuleContext {
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_file_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_file_name) {
			listener.enterAlter_assembly_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_file_name) {
			listener.exitAlter_assembly_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_file_name) {
			return visitor.visitAlter_assembly_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_file_bitsContext extends ParserRuleContext {
	public alter_assembly_as(): Alter_assembly_asContext {
		return this.getRuleContext(0, Alter_assembly_asContext);
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_file_bits; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_file_bits) {
			listener.enterAlter_assembly_file_bits(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_file_bits) {
			listener.exitAlter_assembly_file_bits(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_file_bits) {
			return visitor.visitAlter_assembly_file_bits(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_asContext extends ParserRuleContext {
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_as; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_as) {
			listener.enterAlter_assembly_as(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_as) {
			listener.exitAlter_assembly_as(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_as) {
			return visitor.visitAlter_assembly_as(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_with_clauseContext extends ParserRuleContext {
	public alter_assembly_with(): Alter_assembly_withContext {
		return this.getRuleContext(0, Alter_assembly_withContext);
	}
	public assembly_option(): Assembly_optionContext {
		return this.getRuleContext(0, Assembly_optionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_with_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_with_clause) {
			listener.enterAlter_assembly_with_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_with_clause) {
			listener.exitAlter_assembly_with_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_with_clause) {
			return visitor.visitAlter_assembly_with_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_assembly_withContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_assembly_with; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_assembly_with) {
			listener.enterAlter_assembly_with(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_assembly_with) {
			listener.exitAlter_assembly_with(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_assembly_with) {
			return visitor.visitAlter_assembly_with(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Client_assembly_specifierContext extends ParserRuleContext {
	public network_file_share(): Network_file_shareContext | undefined {
		return this.tryGetRuleContext(0, Network_file_shareContext);
	}
	public local_file(): Local_fileContext | undefined {
		return this.tryGetRuleContext(0, Local_fileContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_client_assembly_specifier; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClient_assembly_specifier) {
			listener.enterClient_assembly_specifier(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClient_assembly_specifier) {
			listener.exitClient_assembly_specifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClient_assembly_specifier) {
			return visitor.visitClient_assembly_specifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assembly_optionContext extends ParserRuleContext {
	public PERMISSION_SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERMISSION_SET, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public SAFE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAFE, 0); }
	public EXTERNAL_ACCESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
	public UNSAFE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNSAFE, 0); }
	public VISIBILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VISIBILITY, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public UNCHECKED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNCHECKED, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATA, 0); }
	public assembly_option(): Assembly_optionContext | undefined {
		return this.tryGetRuleContext(0, Assembly_optionContext);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_assembly_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAssembly_option) {
			listener.enterAssembly_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAssembly_option) {
			listener.exitAssembly_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAssembly_option) {
			return visitor.visitAssembly_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Network_file_shareContext extends ParserRuleContext {
	public network_file_start(): Network_file_startContext {
		return this.getRuleContext(0, Network_file_startContext);
	}
	public network_computer(): Network_computerContext {
		return this.getRuleContext(0, Network_computerContext);
	}
	public file_path(): File_pathContext {
		return this.getRuleContext(0, File_pathContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_network_file_share; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNetwork_file_share) {
			listener.enterNetwork_file_share(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNetwork_file_share) {
			listener.exitNetwork_file_share(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNetwork_file_share) {
			return visitor.visitNetwork_file_share(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Network_computerContext extends ParserRuleContext {
	public _computer_name: IdContext;
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_network_computer; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNetwork_computer) {
			listener.enterNetwork_computer(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNetwork_computer) {
			listener.exitNetwork_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNetwork_computer) {
			return visitor.visitNetwork_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Network_file_startContext extends ParserRuleContext {
	public DOUBLE_BACK_SLASH(): TerminalNode { return this.getToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_network_file_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNetwork_file_start) {
			listener.enterNetwork_file_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNetwork_file_start) {
			listener.exitNetwork_file_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNetwork_file_start) {
			return visitor.visitNetwork_file_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_pathContext extends ParserRuleContext {
	public file_directory_path_separator(): File_directory_path_separatorContext | undefined {
		return this.tryGetRuleContext(0, File_directory_path_separatorContext);
	}
	public file_path(): File_pathContext | undefined {
		return this.tryGetRuleContext(0, File_pathContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_file_path; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFile_path) {
			listener.enterFile_path(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFile_path) {
			listener.exitFile_path(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFile_path) {
			return visitor.visitFile_path(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_directory_path_separatorContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_file_directory_path_separator; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFile_directory_path_separator) {
			listener.enterFile_directory_path_separator(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFile_directory_path_separator) {
			listener.exitFile_directory_path_separator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFile_directory_path_separator) {
			return visitor.visitFile_directory_path_separator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Local_fileContext extends ParserRuleContext {
	public local_drive(): Local_driveContext {
		return this.getRuleContext(0, Local_driveContext);
	}
	public file_path(): File_pathContext {
		return this.getRuleContext(0, File_pathContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_local_file; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterLocal_file) {
			listener.enterLocal_file(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitLocal_file) {
			listener.exitLocal_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitLocal_file) {
			return visitor.visitLocal_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Local_driveContext extends ParserRuleContext {
	public DISK_DRIVE(): TerminalNode { return this.getToken(TSqlParser.DISK_DRIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_local_drive; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterLocal_drive) {
			listener.enterLocal_drive(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitLocal_drive) {
			listener.exitLocal_drive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitLocal_drive) {
			return visitor.visitLocal_drive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_local_filesContext extends ParserRuleContext {
	public multiple_local_file_start(): Multiple_local_file_startContext | undefined {
		return this.tryGetRuleContext(0, Multiple_local_file_startContext);
	}
	public local_file(): Local_fileContext {
		return this.getRuleContext(0, Local_fileContext);
	}
	public SINGLE_QUOTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SINGLE_QUOTE, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_multiple_local_files; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMultiple_local_files) {
			listener.enterMultiple_local_files(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMultiple_local_files) {
			listener.exitMultiple_local_files(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMultiple_local_files) {
			return visitor.visitMultiple_local_files(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_local_file_startContext extends ParserRuleContext {
	public SINGLE_QUOTE(): TerminalNode { return this.getToken(TSqlParser.SINGLE_QUOTE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_multiple_local_file_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMultiple_local_file_start) {
			listener.enterMultiple_local_file_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMultiple_local_file_start) {
			listener.exitMultiple_local_file_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMultiple_local_file_start) {
			return visitor.visitMultiple_local_file_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_assemblyContext extends ParserRuleContext {
	public _assembly_name: IdContext;
	public _owner_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public ASSEMBLY(): TerminalNode { return this.getToken(TSqlParser.ASSEMBLY, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PERMISSION_SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERMISSION_SET, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public BINARY(): TerminalNode[];
	public BINARY(i: number): TerminalNode;
	public BINARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BINARY);
		} else {
			return this.getToken(TSqlParser.BINARY, i);
		}
	}
	public SAFE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAFE, 0); }
	public EXTERNAL_ACCESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
	public UNSAFE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNSAFE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_assembly; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_assembly) {
			listener.enterCreate_assembly(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_assembly) {
			listener.exitCreate_assembly(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_assembly) {
			return visitor.visitCreate_assembly(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_assemblyContext extends ParserRuleContext {
	public _assembly_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public ASSEMBLY(): TerminalNode { return this.getToken(TSqlParser.ASSEMBLY, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO, 0); }
	public DEPENDENTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEPENDENTS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_assembly; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_assembly) {
			listener.enterDrop_assembly(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_assembly) {
			listener.exitDrop_assembly(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_assembly) {
			return visitor.visitDrop_assembly(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_asymmetric_keyContext extends ParserRuleContext {
	public _Asym_Key_Name: IdContext;
	public alter_asymmetric_key_start(): Alter_asymmetric_key_startContext {
		return this.getRuleContext(0, Alter_asymmetric_key_startContext);
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public asymmetric_key_option(): Asymmetric_key_optionContext | undefined {
		return this.tryGetRuleContext(0, Asymmetric_key_optionContext);
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_asymmetric_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_asymmetric_key) {
			listener.enterAlter_asymmetric_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_asymmetric_key) {
			listener.exitAlter_asymmetric_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_asymmetric_key) {
			return visitor.visitAlter_asymmetric_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_asymmetric_key_startContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public ASYMMETRIC(): TerminalNode { return this.getToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_asymmetric_key_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_asymmetric_key_start) {
			listener.enterAlter_asymmetric_key_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_asymmetric_key_start) {
			listener.exitAlter_asymmetric_key_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_asymmetric_key_start) {
			return visitor.visitAlter_asymmetric_key_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Asymmetric_key_optionContext extends ParserRuleContext {
	public asymmetric_key_option_start(): Asymmetric_key_option_startContext {
		return this.getRuleContext(0, Asymmetric_key_option_startContext);
	}
	public asymmetric_key_password_change_option(): Asymmetric_key_password_change_optionContext[];
	public asymmetric_key_password_change_option(i: number): Asymmetric_key_password_change_optionContext;
	public asymmetric_key_password_change_option(i?: number): Asymmetric_key_password_change_optionContext | Asymmetric_key_password_change_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Asymmetric_key_password_change_optionContext);
		} else {
			return this.getRuleContext(i, Asymmetric_key_password_change_optionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_asymmetric_key_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAsymmetric_key_option) {
			listener.enterAsymmetric_key_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAsymmetric_key_option) {
			listener.exitAsymmetric_key_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAsymmetric_key_option) {
			return visitor.visitAsymmetric_key_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Asymmetric_key_option_startContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public PRIVATE(): TerminalNode { return this.getToken(TSqlParser.PRIVATE, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_asymmetric_key_option_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAsymmetric_key_option_start) {
			listener.enterAsymmetric_key_option_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAsymmetric_key_option_start) {
			listener.exitAsymmetric_key_option_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAsymmetric_key_option_start) {
			return visitor.visitAsymmetric_key_option_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
	public DECRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECRYPTION, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_asymmetric_key_password_change_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAsymmetric_key_password_change_option) {
			listener.enterAsymmetric_key_password_change_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAsymmetric_key_password_change_option) {
			listener.exitAsymmetric_key_password_change_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAsymmetric_key_password_change_option) {
			return visitor.visitAsymmetric_key_password_change_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_asymmetric_keyContext extends ParserRuleContext {
	public _Asym_Key_Nam: IdContext;
	public _database_principal_name: IdContext;
	public _Assembly_Name: IdContext;
	public _Provider_Name: IdContext;
	public _provider_key_name: Token;
	public _asymmetric_key_password: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public ASYMMETRIC(): TerminalNode { return this.getToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILE, 0); }
	public EXECUTABLE_FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXECUTABLE_FILE, 0); }
	public ASSEMBLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASSEMBLY, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALGORITHM, 0); }
	public PROVIDER_KEY_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
	public CREATION_DISPOSITION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATION_DISPOSITION, 0); }
	public RSA_4096(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RSA_4096, 0); }
	public RSA_3072(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RSA_3072, 0); }
	public RSA_2048(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RSA_2048, 0); }
	public RSA_1024(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RSA_1024, 0); }
	public RSA_512(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RSA_512, 0); }
	public CREATE_NEW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE_NEW, 0); }
	public OPEN_EXISTING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPEN_EXISTING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_asymmetric_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_asymmetric_key) {
			listener.enterCreate_asymmetric_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_asymmetric_key) {
			listener.exitCreate_asymmetric_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_asymmetric_key) {
			return visitor.visitCreate_asymmetric_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_asymmetric_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public ASYMMETRIC(): TerminalNode { return this.getToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_asymmetric_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_asymmetric_key) {
			listener.enterDrop_asymmetric_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_asymmetric_key) {
			listener.exitDrop_asymmetric_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_asymmetric_key) {
			return visitor.visitDrop_asymmetric_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_authorizationContext extends ParserRuleContext {
	public _entity: Entity_nameContext;
	public alter_authorization_start(): Alter_authorization_startContext {
		return this.getRuleContext(0, Alter_authorization_startContext);
	}
	public entity_to(): Entity_toContext {
		return this.getRuleContext(0, Entity_toContext);
	}
	public authorization_grantee(): Authorization_granteeContext {
		return this.getRuleContext(0, Authorization_granteeContext);
	}
	public entity_name(): Entity_nameContext {
		return this.getRuleContext(0, Entity_nameContext);
	}
	public class_type(): Class_typeContext | undefined {
		return this.tryGetRuleContext(0, Class_typeContext);
	}
	public colon_colon(): Colon_colonContext | undefined {
		return this.tryGetRuleContext(0, Colon_colonContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_authorization; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_authorization) {
			listener.enterAlter_authorization(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_authorization) {
			listener.exitAlter_authorization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_authorization) {
			return visitor.visitAlter_authorization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Authorization_granteeContext extends ParserRuleContext {
	public _principal_name: IdContext;
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OWNER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_authorization_grantee; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAuthorization_grantee) {
			listener.enterAuthorization_grantee(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAuthorization_grantee) {
			listener.exitAuthorization_grantee(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAuthorization_grantee) {
			return visitor.visitAuthorization_grantee(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Entity_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_entity_to; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEntity_to) {
			listener.enterEntity_to(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEntity_to) {
			listener.exitEntity_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEntity_to) {
			return visitor.visitEntity_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Colon_colonContext extends ParserRuleContext {
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COLON);
		} else {
			return this.getToken(TSqlParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_colon_colon; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColon_colon) {
			listener.enterColon_colon(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColon_colon) {
			listener.exitColon_colon(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColon_colon) {
			return visitor.visitColon_colon(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_authorization_startContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public AUTHORIZATION(): TerminalNode { return this.getToken(TSqlParser.AUTHORIZATION, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_authorization_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_authorization_start) {
			listener.enterAlter_authorization_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_authorization_start) {
			listener.exitAlter_authorization_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_authorization_start) {
			return visitor.visitAlter_authorization_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
	public _entity: Entity_nameContext;
	public alter_authorization_start(): Alter_authorization_startContext {
		return this.getRuleContext(0, Alter_authorization_startContext);
	}
	public entity_to(): Entity_toContext {
		return this.getRuleContext(0, Entity_toContext);
	}
	public authorization_grantee(): Authorization_granteeContext {
		return this.getRuleContext(0, Authorization_granteeContext);
	}
	public entity_name(): Entity_nameContext {
		return this.getRuleContext(0, Entity_nameContext);
	}
	public class_type_for_sql_database(): Class_type_for_sql_databaseContext | undefined {
		return this.tryGetRuleContext(0, Class_type_for_sql_databaseContext);
	}
	public colon_colon(): Colon_colonContext | undefined {
		return this.tryGetRuleContext(0, Colon_colonContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_authorization_for_sql_database; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_authorization_for_sql_database) {
			listener.enterAlter_authorization_for_sql_database(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_authorization_for_sql_database) {
			listener.exitAlter_authorization_for_sql_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_authorization_for_sql_database) {
			return visitor.visitAlter_authorization_for_sql_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
	public _entity: Entity_name_for_azure_dwContext;
	public alter_authorization_start(): Alter_authorization_startContext {
		return this.getRuleContext(0, Alter_authorization_startContext);
	}
	public entity_to(): Entity_toContext {
		return this.getRuleContext(0, Entity_toContext);
	}
	public authorization_grantee(): Authorization_granteeContext {
		return this.getRuleContext(0, Authorization_granteeContext);
	}
	public entity_name_for_azure_dw(): Entity_name_for_azure_dwContext {
		return this.getRuleContext(0, Entity_name_for_azure_dwContext);
	}
	public class_type_for_azure_dw(): Class_type_for_azure_dwContext | undefined {
		return this.tryGetRuleContext(0, Class_type_for_azure_dwContext);
	}
	public colon_colon(): Colon_colonContext | undefined {
		return this.tryGetRuleContext(0, Colon_colonContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_authorization_for_azure_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_authorization_for_azure_dw) {
			listener.enterAlter_authorization_for_azure_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_authorization_for_azure_dw) {
			listener.exitAlter_authorization_for_azure_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_authorization_for_azure_dw) {
			return visitor.visitAlter_authorization_for_azure_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
	public _entity: Entity_name_for_parallel_dwContext;
	public alter_authorization_start(): Alter_authorization_startContext {
		return this.getRuleContext(0, Alter_authorization_startContext);
	}
	public entity_to(): Entity_toContext {
		return this.getRuleContext(0, Entity_toContext);
	}
	public authorization_grantee(): Authorization_granteeContext {
		return this.getRuleContext(0, Authorization_granteeContext);
	}
	public entity_name_for_parallel_dw(): Entity_name_for_parallel_dwContext {
		return this.getRuleContext(0, Entity_name_for_parallel_dwContext);
	}
	public class_type_for_parallel_dw(): Class_type_for_parallel_dwContext | undefined {
		return this.tryGetRuleContext(0, Class_type_for_parallel_dwContext);
	}
	public colon_colon(): Colon_colonContext | undefined {
		return this.tryGetRuleContext(0, Colon_colonContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_authorization_for_parallel_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_authorization_for_parallel_dw) {
			listener.enterAlter_authorization_for_parallel_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_authorization_for_parallel_dw) {
			listener.exitAlter_authorization_for_parallel_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_authorization_for_parallel_dw) {
			return visitor.visitAlter_authorization_for_parallel_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_typeContext extends ParserRuleContext {
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	public ASSEMBLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASSEMBLY, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public AVAILABILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AVAILABILITY, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUP, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public CONTRACT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTRACT, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENDPOINT, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULLTEXT, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CATALOG, 0); }
	public STOPLIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STOPLIST, 0); }
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MESSAGE, 0); }
	public REMOTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOTE, 0); }
	public SERVICE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVICE, 0); }
	public BINDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINDING, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROLE, 0); }
	public ROUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROUTE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEARCH, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROPERTY, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LIST, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XML, 0); }
	public COLLECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLECTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_class_type; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClass_type) {
			listener.enterClass_type(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClass_type) {
			listener.exitClass_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClass_type) {
			return visitor.visitClass_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_type_for_sql_databaseContext extends ParserRuleContext {
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	public ASSEMBLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASSEMBLY, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULLTEXT, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CATALOG, 0); }
	public STOPLIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STOPLIST, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEARCH, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROPERTY, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LIST, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XML, 0); }
	public COLLECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLECTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_class_type_for_sql_database; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClass_type_for_sql_database) {
			listener.enterClass_type_for_sql_database(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClass_type_for_sql_database) {
			listener.exitClass_type_for_sql_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClass_type_for_sql_database) {
			return visitor.visitClass_type_for_sql_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_type_for_azure_dwContext extends ParserRuleContext {
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_class_type_for_azure_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClass_type_for_azure_dw) {
			listener.enterClass_type_for_azure_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClass_type_for_azure_dw) {
			listener.exitClass_type_for_azure_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClass_type_for_azure_dw) {
			return visitor.visitClass_type_for_azure_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_type_for_parallel_dwContext extends ParserRuleContext {
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_class_type_for_parallel_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClass_type_for_parallel_dw) {
			listener.enterClass_type_for_parallel_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClass_type_for_parallel_dw) {
			listener.exitClass_type_for_parallel_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClass_type_for_parallel_dw) {
			return visitor.visitClass_type_for_parallel_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_availability_groupContext extends ParserRuleContext {
	public _group_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public AVAILABILITY(): TerminalNode { return this.getToken(TSqlParser.AVAILABILITY, 0); }
	public GROUP(): TerminalNode { return this.getToken(TSqlParser.GROUP, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_availability_group; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_availability_group) {
			listener.enterDrop_availability_group(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_availability_group) {
			listener.exitDrop_availability_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_availability_group) {
			return visitor.visitDrop_availability_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_availability_groupContext extends ParserRuleContext {
	public alter_availability_group_start(): Alter_availability_group_startContext {
		return this.getRuleContext(0, Alter_availability_group_startContext);
	}
	public alter_availability_group_options(): Alter_availability_group_optionsContext {
		return this.getRuleContext(0, Alter_availability_group_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_availability_group; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_availability_group) {
			listener.enterAlter_availability_group(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_availability_group) {
			listener.exitAlter_availability_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_availability_group) {
			return visitor.visitAlter_availability_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_availability_group_startContext extends ParserRuleContext {
	public _group_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public AVAILABILITY(): TerminalNode { return this.getToken(TSqlParser.AVAILABILITY, 0); }
	public GROUP(): TerminalNode { return this.getToken(TSqlParser.GROUP, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_availability_group_start; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_availability_group_start) {
			listener.enterAlter_availability_group_start(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_availability_group_start) {
			listener.exitAlter_availability_group_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_availability_group_start) {
			return visitor.visitAlter_availability_group_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_availability_group_optionsContext extends ParserRuleContext {
	public _milliseconds: Token;
	public _database_name: IdContext;
	public _server_instance: Token;
	public _session_timeout: Token;
	public _ag_name: Token;
	public _ag_name_modified: Token;
	public _listener_name: Token;
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public AUTOMATED_BACKUP_PREFERENCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public FAILURE_CONDITION_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public HEALTH_CHECK_TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
	public DB_FAILOVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DB_FAILOVER, 0); }
	public REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIMARY, 0); }
	public SECONDARY_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDARY_ONLY, 0); }
	public SECONDARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDARY, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICA, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.WITH);
		} else {
			return this.getToken(TSqlParser.WITH, i);
		}
	}
	public ENDPOINT_URL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENDPOINT_URL, 0); }
	public AVAILABILITY_MODE(): TerminalNode[];
	public AVAILABILITY_MODE(i: number): TerminalNode;
	public AVAILABILITY_MODE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AVAILABILITY_MODE);
		} else {
			return this.getToken(TSqlParser.AVAILABILITY_MODE, i);
		}
	}
	public FAILOVER_MODE(): TerminalNode[];
	public FAILOVER_MODE(i: number): TerminalNode;
	public FAILOVER_MODE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FAILOVER_MODE);
		} else {
			return this.getToken(TSqlParser.FAILOVER_MODE, i);
		}
	}
	public SEEDING_MODE(): TerminalNode[];
	public SEEDING_MODE(i: number): TerminalNode;
	public SEEDING_MODE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SEEDING_MODE);
		} else {
			return this.getToken(TSqlParser.SEEDING_MODE, i);
		}
	}
	public BACKUP_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BACKUP_PRIORITY, 0); }
	public PRIMARY_ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIMARY_ROLE, 0); }
	public ALLOW_CONNECTIONS(): TerminalNode[];
	public ALLOW_CONNECTIONS(i: number): TerminalNode;
	public ALLOW_CONNECTIONS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALLOW_CONNECTIONS);
		} else {
			return this.getToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
	}
	public SECONDARY_ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDARY_ROLE, 0); }
	public SYNCHRONOUS_COMMIT(): TerminalNode[];
	public SYNCHRONOUS_COMMIT(i: number): TerminalNode;
	public SYNCHRONOUS_COMMIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SYNCHRONOUS_COMMIT);
		} else {
			return this.getToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
	}
	public ASYNCHRONOUS_COMMIT(): TerminalNode[];
	public ASYNCHRONOUS_COMMIT(i: number): TerminalNode;
	public ASYNCHRONOUS_COMMIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ASYNCHRONOUS_COMMIT);
		} else {
			return this.getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
	}
	public AUTOMATIC(): TerminalNode[];
	public AUTOMATIC(i: number): TerminalNode;
	public AUTOMATIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AUTOMATIC);
		} else {
			return this.getToken(TSqlParser.AUTOMATIC, i);
		}
	}
	public MANUAL(): TerminalNode[];
	public MANUAL(i: number): TerminalNode;
	public MANUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MANUAL);
		} else {
			return this.getToken(TSqlParser.MANUAL, i);
		}
	}
	public READ_WRITE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_WRITE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public READ_ONLY_ROUTING_LIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO, 0); }
	public SESSION_TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SESSION_TIMEOUT, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MODIFY, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.JOIN, 0); }
	public AVAILABILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AVAILABILITY, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUP, 0); }
	public LISTENER_URL(): TerminalNode[];
	public LISTENER_URL(i: number): TerminalNode;
	public LISTENER_URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LISTENER_URL);
		} else {
			return this.getToken(TSqlParser.LISTENER_URL, i);
		}
	}
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GRANT, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANY, 0); }
	public DENY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DENY, 0); }
	public FAILOVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILOVER, 0); }
	public FORCE_FAILOVER_ALLOW_DATA_LOSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
	public LISTENER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LISTENER, 0); }
	public DHCP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DHCP, 0); }
	public IP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IP, 0); }
	public IPV4_ADDR(): TerminalNode[];
	public IPV4_ADDR(i: number): TerminalNode;
	public IPV4_ADDR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.IPV4_ADDR);
		} else {
			return this.getToken(TSqlParser.IPV4_ADDR, i);
		}
	}
	public PORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PORT, 0); }
	public IPV6_ADDR(): TerminalNode[];
	public IPV6_ADDR(i: number): TerminalNode;
	public IPV6_ADDR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.IPV6_ADDR);
		} else {
			return this.getToken(TSqlParser.IPV6_ADDR, i);
		}
	}
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESTART, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFFLINE, 0); }
	public DTC_SUPPORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DTC_SUPPORT, 0); }
	public PER_DB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PER_DB, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_availability_group_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_availability_group_options) {
			listener.enterAlter_availability_group_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_availability_group_options) {
			listener.exitAlter_availability_group_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_availability_group_options) {
			return visitor.visitAlter_availability_group_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_broker_priorityContext extends ParserRuleContext {
	public _ConversationPriorityName: IdContext;
	public _RemoteServiceName: Token;
	public _PriorityValue: Token;
	public BROKER(): TerminalNode { return this.getToken(TSqlParser.BROKER, 0); }
	public PRIORITY(): TerminalNode { return this.getToken(TSqlParser.PRIORITY, 0); }
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public CONVERSATION(): TerminalNode { return this.getToken(TSqlParser.CONVERSATION, 0); }
	public SET(): TerminalNode { return this.getToken(TSqlParser.SET, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public CONTRACT_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTRACT_NAME, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public LOCAL_SERVICE_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
	public REMOTE_SERVICE_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
	public PRIORITY_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIORITY_LEVEL, 0); }
	public ANY(): TerminalNode[];
	public ANY(i: number): TerminalNode;
	public ANY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ANY);
		} else {
			return this.getToken(TSqlParser.ANY, i);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public DOUBLE_FORWARD_SLASH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_broker_priority; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_broker_priority) {
			listener.enterCreate_or_alter_broker_priority(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_broker_priority) {
			listener.exitCreate_or_alter_broker_priority(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_broker_priority) {
			return visitor.visitCreate_or_alter_broker_priority(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_broker_priorityContext extends ParserRuleContext {
	public _ConversationPriorityName: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public BROKER(): TerminalNode { return this.getToken(TSqlParser.BROKER, 0); }
	public PRIORITY(): TerminalNode { return this.getToken(TSqlParser.PRIORITY, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_broker_priority; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_broker_priority) {
			listener.enterDrop_broker_priority(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_broker_priority) {
			listener.exitDrop_broker_priority(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_broker_priority) {
			return visitor.visitDrop_broker_priority(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_certificateContext extends ParserRuleContext {
	public _certificate_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public CERTIFICATE(): TerminalNode { return this.getToken(TSqlParser.CERTIFICATE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public PRIVATE_KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE_KEY, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTIVE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public BEGIN_DIALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BEGIN_DIALOG, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public FILE(): TerminalNode[];
	public FILE(i: number): TerminalNode;
	public FILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILE);
		} else {
			return this.getToken(TSqlParser.FILE, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public DECRYPTION(): TerminalNode[];
	public DECRYPTION(i: number): TerminalNode;
	public DECRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECRYPTION);
		} else {
			return this.getToken(TSqlParser.DECRYPTION, i);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BY);
		} else {
			return this.getToken(TSqlParser.BY, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PASSWORD);
		} else {
			return this.getToken(TSqlParser.PASSWORD, i);
		}
	}
	public ENCRYPTION(): TerminalNode[];
	public ENCRYPTION(i: number): TerminalNode;
	public ENCRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ENCRYPTION);
		} else {
			return this.getToken(TSqlParser.ENCRYPTION, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_certificate; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_certificate) {
			listener.enterAlter_certificate(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_certificate) {
			listener.exitAlter_certificate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_certificate) {
			return visitor.visitAlter_certificate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_column_encryption_keyContext extends ParserRuleContext {
	public _column_encryption_key: IdContext;
	public _column_master_key_name: IdContext;
	public _algorithm_name: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TSqlParser.COLUMN, 0); }
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public VALUE(): TerminalNode { return this.getToken(TSqlParser.VALUE, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public COLUMN_MASTER_KEY(): TerminalNode { return this.getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALGORITHM, 0); }
	public ENCRYPTED_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_column_encryption_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_column_encryption_key) {
			listener.enterAlter_column_encryption_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_column_encryption_key) {
			listener.exitAlter_column_encryption_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_column_encryption_key) {
			return visitor.visitAlter_column_encryption_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_column_encryption_keyContext extends ParserRuleContext {
	public _column_encryption_key: IdContext;
	public _column_master_key_name: IdContext;
	public _algorithm_name: Token;
	public _encrypted_value: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TSqlParser.COLUMN, 0); }
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public VALUES(): TerminalNode { return this.getToken(TSqlParser.VALUES, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public COLUMN_MASTER_KEY(): TerminalNode[];
	public COLUMN_MASTER_KEY(i: number): TerminalNode;
	public COLUMN_MASTER_KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COLUMN_MASTER_KEY);
		} else {
			return this.getToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALGORITHM);
		} else {
			return this.getToken(TSqlParser.ALGORITHM, i);
		}
	}
	public ENCRYPTED_VALUE(): TerminalNode[];
	public ENCRYPTED_VALUE(i: number): TerminalNode;
	public ENCRYPTED_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ENCRYPTED_VALUE);
		} else {
			return this.getToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public BINARY(): TerminalNode[];
	public BINARY(i: number): TerminalNode;
	public BINARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BINARY);
		} else {
			return this.getToken(TSqlParser.BINARY, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_column_encryption_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_column_encryption_key) {
			listener.enterCreate_column_encryption_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_column_encryption_key) {
			listener.exitCreate_column_encryption_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_column_encryption_key) {
			return visitor.visitCreate_column_encryption_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_certificateContext extends ParserRuleContext {
	public _certificate_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public CERTIFICATE(): TerminalNode { return this.getToken(TSqlParser.CERTIFICATE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_certificate; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_certificate) {
			listener.enterDrop_certificate(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_certificate) {
			listener.exitDrop_certificate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_certificate) {
			return visitor.visitDrop_certificate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_column_encryption_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TSqlParser.COLUMN, 0); }
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_column_encryption_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_column_encryption_key) {
			listener.enterDrop_column_encryption_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_column_encryption_key) {
			listener.exitDrop_column_encryption_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_column_encryption_key) {
			return visitor.visitDrop_column_encryption_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_column_master_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TSqlParser.COLUMN, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_column_master_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_column_master_key) {
			listener.enterDrop_column_master_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_column_master_key) {
			listener.exitDrop_column_master_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_column_master_key) {
			return visitor.visitDrop_column_master_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_contractContext extends ParserRuleContext {
	public _dropped_contract_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public CONTRACT(): TerminalNode { return this.getToken(TSqlParser.CONTRACT, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_contract; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_contract) {
			listener.enterDrop_contract(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_contract) {
			listener.exitDrop_contract(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_contract) {
			return visitor.visitDrop_contract(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_credentialContext extends ParserRuleContext {
	public _credential_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public CREDENTIAL(): TerminalNode { return this.getToken(TSqlParser.CREDENTIAL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_credential; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_credential) {
			listener.enterDrop_credential(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_credential) {
			listener.exitDrop_credential(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_credential) {
			return visitor.visitDrop_credential(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_cryptograhic_providerContext extends ParserRuleContext {
	public _provider_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public CRYPTOGRAPHIC(): TerminalNode { return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
	public PROVIDER(): TerminalNode { return this.getToken(TSqlParser.PROVIDER, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_cryptograhic_provider; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_cryptograhic_provider) {
			listener.enterDrop_cryptograhic_provider(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_cryptograhic_provider) {
			listener.exitDrop_cryptograhic_provider(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_cryptograhic_provider) {
			return visitor.visitDrop_cryptograhic_provider(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_databaseContext extends ParserRuleContext {
	public _database_name_or_database_snapshot_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public DATABASE(): TerminalNode { return this.getToken(TSqlParser.DATABASE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_database; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_database) {
			listener.enterDrop_database(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_database) {
			listener.exitDrop_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_database) {
			return visitor.visitDrop_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_database_audit_specificationContext extends ParserRuleContext {
	public _audit_specification_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public DATABASE(): TerminalNode { return this.getToken(TSqlParser.DATABASE, 0); }
	public AUDIT(): TerminalNode { return this.getToken(TSqlParser.AUDIT, 0); }
	public SPECIFICATION(): TerminalNode { return this.getToken(TSqlParser.SPECIFICATION, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_database_audit_specification; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_database_audit_specification) {
			listener.enterDrop_database_audit_specification(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_database_audit_specification) {
			listener.exitDrop_database_audit_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_database_audit_specification) {
			return visitor.visitDrop_database_audit_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_database_scoped_credentialContext extends ParserRuleContext {
	public _credential_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public DATABASE(): TerminalNode { return this.getToken(TSqlParser.DATABASE, 0); }
	public SCOPED(): TerminalNode { return this.getToken(TSqlParser.SCOPED, 0); }
	public CREDENTIAL(): TerminalNode { return this.getToken(TSqlParser.CREDENTIAL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_database_scoped_credential; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_database_scoped_credential) {
			listener.enterDrop_database_scoped_credential(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_database_scoped_credential) {
			listener.exitDrop_database_scoped_credential(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_database_scoped_credential) {
			return visitor.visitDrop_database_scoped_credential(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_defaultContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _default_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(TSqlParser.DEFAULT, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_default; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_default) {
			listener.enterDrop_default(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_default) {
			listener.exitDrop_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_default) {
			return visitor.visitDrop_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_endpointContext extends ParserRuleContext {
	public _endPointName: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public ENDPOINT(): TerminalNode { return this.getToken(TSqlParser.ENDPOINT, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_endpoint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_endpoint) {
			listener.enterDrop_endpoint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_endpoint) {
			listener.exitDrop_endpoint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_endpoint) {
			return visitor.visitDrop_endpoint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_external_data_sourceContext extends ParserRuleContext {
	public _external_data_source_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public DATA(): TerminalNode { return this.getToken(TSqlParser.DATA, 0); }
	public SOURCE(): TerminalNode { return this.getToken(TSqlParser.SOURCE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_external_data_source; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_external_data_source) {
			listener.enterDrop_external_data_source(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_external_data_source) {
			listener.exitDrop_external_data_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_external_data_source) {
			return visitor.visitDrop_external_data_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_external_file_formatContext extends ParserRuleContext {
	public _external_file_format_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public FILE(): TerminalNode { return this.getToken(TSqlParser.FILE, 0); }
	public FORMAT(): TerminalNode { return this.getToken(TSqlParser.FORMAT, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_external_file_format; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_external_file_format) {
			listener.enterDrop_external_file_format(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_external_file_format) {
			listener.exitDrop_external_file_format(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_external_file_format) {
			return visitor.visitDrop_external_file_format(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_external_libraryContext extends ParserRuleContext {
	public _library_name: IdContext;
	public _owner_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public LIBRARY(): TerminalNode { return this.getToken(TSqlParser.LIBRARY, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_external_library; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_external_library) {
			listener.enterDrop_external_library(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_external_library) {
			listener.exitDrop_external_library(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_external_library) {
			return visitor.visitDrop_external_library(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_external_resource_poolContext extends ParserRuleContext {
	public _pool_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(TSqlParser.RESOURCE, 0); }
	public POOL(): TerminalNode { return this.getToken(TSqlParser.POOL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_external_resource_pool; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_external_resource_pool) {
			listener.enterDrop_external_resource_pool(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_external_resource_pool) {
			listener.exitDrop_external_resource_pool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_external_resource_pool) {
			return visitor.visitDrop_external_resource_pool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_external_tableContext extends ParserRuleContext {
	public _database_name: IdContext;
	public _schema_name: IdContext;
	public _table: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_external_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_external_table) {
			listener.enterDrop_external_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_external_table) {
			listener.exitDrop_external_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_external_table) {
			return visitor.visitDrop_external_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_event_notificationsContext extends ParserRuleContext {
	public _notification_name: IdContext;
	public _queue_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EVENT(): TerminalNode { return this.getToken(TSqlParser.EVENT, 0); }
	public NOTIFICATION(): TerminalNode { return this.getToken(TSqlParser.NOTIFICATION, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public QUEUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUEUE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_event_notifications; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_event_notifications) {
			listener.enterDrop_event_notifications(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_event_notifications) {
			listener.exitDrop_event_notifications(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_event_notifications) {
			return visitor.visitDrop_event_notifications(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_event_sessionContext extends ParserRuleContext {
	public _event_session_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public EVENT(): TerminalNode { return this.getToken(TSqlParser.EVENT, 0); }
	public SESSION(): TerminalNode { return this.getToken(TSqlParser.SESSION, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_event_session; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_event_session) {
			listener.enterDrop_event_session(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_event_session) {
			listener.exitDrop_event_session(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_event_session) {
			return visitor.visitDrop_event_session(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_fulltext_catalogContext extends ParserRuleContext {
	public _catalog_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public CATALOG(): TerminalNode { return this.getToken(TSqlParser.CATALOG, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_fulltext_catalog; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_fulltext_catalog) {
			listener.enterDrop_fulltext_catalog(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_fulltext_catalog) {
			listener.exitDrop_fulltext_catalog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_fulltext_catalog) {
			return visitor.visitDrop_fulltext_catalog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_fulltext_indexContext extends ParserRuleContext {
	public _schema: IdContext;
	public _table: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public INDEX(): TerminalNode { return this.getToken(TSqlParser.INDEX, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_fulltext_index; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_fulltext_index) {
			listener.enterDrop_fulltext_index(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_fulltext_index) {
			listener.exitDrop_fulltext_index(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_fulltext_index) {
			return visitor.visitDrop_fulltext_index(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_fulltext_stoplistContext extends ParserRuleContext {
	public _stoplist_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public STOPLIST(): TerminalNode { return this.getToken(TSqlParser.STOPLIST, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_fulltext_stoplist; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_fulltext_stoplist) {
			listener.enterDrop_fulltext_stoplist(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_fulltext_stoplist) {
			listener.exitDrop_fulltext_stoplist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_fulltext_stoplist) {
			return visitor.visitDrop_fulltext_stoplist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_loginContext extends ParserRuleContext {
	public _login_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_login; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_login) {
			listener.enterDrop_login(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_login) {
			listener.exitDrop_login(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_login) {
			return visitor.visitDrop_login(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_master_keyContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_master_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_master_key) {
			listener.enterDrop_master_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_master_key) {
			listener.exitDrop_master_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_master_key) {
			return visitor.visitDrop_master_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_message_typeContext extends ParserRuleContext {
	public _message_type_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public MESSAGE(): TerminalNode { return this.getToken(TSqlParser.MESSAGE, 0); }
	public TYPE(): TerminalNode { return this.getToken(TSqlParser.TYPE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_message_type; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_message_type) {
			listener.enterDrop_message_type(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_message_type) {
			listener.exitDrop_message_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_message_type) {
			return visitor.visitDrop_message_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_partition_functionContext extends ParserRuleContext {
	public _partition_function_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public PARTITION(): TerminalNode { return this.getToken(TSqlParser.PARTITION, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(TSqlParser.FUNCTION, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_partition_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_partition_function) {
			listener.enterDrop_partition_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_partition_function) {
			listener.exitDrop_partition_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_partition_function) {
			return visitor.visitDrop_partition_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_partition_schemeContext extends ParserRuleContext {
	public _partition_scheme_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public PARTITION(): TerminalNode { return this.getToken(TSqlParser.PARTITION, 0); }
	public SCHEME(): TerminalNode { return this.getToken(TSqlParser.SCHEME, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_partition_scheme; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_partition_scheme) {
			listener.enterDrop_partition_scheme(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_partition_scheme) {
			listener.exitDrop_partition_scheme(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_partition_scheme) {
			return visitor.visitDrop_partition_scheme(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_queueContext extends ParserRuleContext {
	public _database_name: IdContext;
	public _schema_name: IdContext;
	public _queue_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public QUEUE(): TerminalNode { return this.getToken(TSqlParser.QUEUE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_queue; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_queue) {
			listener.enterDrop_queue(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_queue) {
			listener.exitDrop_queue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_queue) {
			return visitor.visitDrop_queue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_remote_service_bindingContext extends ParserRuleContext {
	public _binding_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public REMOTE(): TerminalNode { return this.getToken(TSqlParser.REMOTE, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public BINDING(): TerminalNode { return this.getToken(TSqlParser.BINDING, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_remote_service_binding; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_remote_service_binding) {
			listener.enterDrop_remote_service_binding(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_remote_service_binding) {
			listener.exitDrop_remote_service_binding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_remote_service_binding) {
			return visitor.visitDrop_remote_service_binding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_resource_poolContext extends ParserRuleContext {
	public _pool_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(TSqlParser.RESOURCE, 0); }
	public POOL(): TerminalNode { return this.getToken(TSqlParser.POOL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_resource_pool; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_resource_pool) {
			listener.enterDrop_resource_pool(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_resource_pool) {
			listener.exitDrop_resource_pool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_resource_pool) {
			return visitor.visitDrop_resource_pool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_db_roleContext extends ParserRuleContext {
	public _role_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_db_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_db_role) {
			listener.enterDrop_db_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_db_role) {
			listener.exitDrop_db_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_db_role) {
			return visitor.visitDrop_db_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_routeContext extends ParserRuleContext {
	public _route_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public ROUTE(): TerminalNode { return this.getToken(TSqlParser.ROUTE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_route; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_route) {
			listener.enterDrop_route(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_route) {
			listener.exitDrop_route(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_route) {
			return visitor.visitDrop_route(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_ruleContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _rule_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public RULE(): TerminalNode { return this.getToken(TSqlParser.RULE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_rule; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_rule) {
			listener.enterDrop_rule(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_rule) {
			listener.exitDrop_rule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_rule) {
			return visitor.visitDrop_rule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_schemaContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TSqlParser.SCHEMA, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_schema; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_schema) {
			listener.enterDrop_schema(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_schema) {
			listener.exitDrop_schema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_schema) {
			return visitor.visitDrop_schema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_search_property_listContext extends ParserRuleContext {
	public _property_list_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SEARCH(): TerminalNode { return this.getToken(TSqlParser.SEARCH, 0); }
	public PROPERTY(): TerminalNode { return this.getToken(TSqlParser.PROPERTY, 0); }
	public LIST(): TerminalNode { return this.getToken(TSqlParser.LIST, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_search_property_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_search_property_list) {
			listener.enterDrop_search_property_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_search_property_list) {
			listener.exitDrop_search_property_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_search_property_list) {
			return visitor.visitDrop_search_property_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_security_policyContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _security_policy_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SECURITY(): TerminalNode { return this.getToken(TSqlParser.SECURITY, 0); }
	public POLICY(): TerminalNode { return this.getToken(TSqlParser.POLICY, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_security_policy; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_security_policy) {
			listener.enterDrop_security_policy(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_security_policy) {
			listener.exitDrop_security_policy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_security_policy) {
			return visitor.visitDrop_security_policy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_sequenceContext extends ParserRuleContext {
	public _database_name: IdContext;
	public _schema_name: IdContext;
	public _sequence_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(TSqlParser.SEQUENCE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_sequence; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_sequence) {
			listener.enterDrop_sequence(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_sequence) {
			listener.exitDrop_sequence(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_sequence) {
			return visitor.visitDrop_sequence(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_server_auditContext extends ParserRuleContext {
	public _audit_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public AUDIT(): TerminalNode { return this.getToken(TSqlParser.AUDIT, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_server_audit; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_server_audit) {
			listener.enterDrop_server_audit(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_server_audit) {
			listener.exitDrop_server_audit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_server_audit) {
			return visitor.visitDrop_server_audit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_server_audit_specificationContext extends ParserRuleContext {
	public _audit_specification_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public AUDIT(): TerminalNode { return this.getToken(TSqlParser.AUDIT, 0); }
	public SPECIFICATION(): TerminalNode { return this.getToken(TSqlParser.SPECIFICATION, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_server_audit_specification; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_server_audit_specification) {
			listener.enterDrop_server_audit_specification(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_server_audit_specification) {
			listener.exitDrop_server_audit_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_server_audit_specification) {
			return visitor.visitDrop_server_audit_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_server_roleContext extends ParserRuleContext {
	public _role_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_server_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_server_role) {
			listener.enterDrop_server_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_server_role) {
			listener.exitDrop_server_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_server_role) {
			return visitor.visitDrop_server_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_serviceContext extends ParserRuleContext {
	public _dropped_service_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_service; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_service) {
			listener.enterDrop_service(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_service) {
			listener.exitDrop_service(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_service) {
			return visitor.visitDrop_service(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_signatureContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _module_name: IdContext;
	public _cert_name: IdContext;
	public _Asym_key_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SIGNATURE(): TerminalNode { return this.getToken(TSqlParser.SIGNATURE, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COUNTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COUNTER, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public CERTIFICATE(): TerminalNode[];
	public CERTIFICATE(i: number): TerminalNode;
	public CERTIFICATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CERTIFICATE);
		} else {
			return this.getToken(TSqlParser.CERTIFICATE, i);
		}
	}
	public ASYMMETRIC(): TerminalNode[];
	public ASYMMETRIC(i: number): TerminalNode;
	public ASYMMETRIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ASYMMETRIC);
		} else {
			return this.getToken(TSqlParser.ASYMMETRIC, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_signature; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_signature) {
			listener.enterDrop_signature(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_signature) {
			listener.exitDrop_signature(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_signature) {
			return visitor.visitDrop_signature(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _object_name: IdContext;
	public _statistics_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public STATISTICS(): TerminalNode { return this.getToken(TSqlParser.STATISTICS, 0); }
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_statistics_name_azure_dw_and_pdw) {
			listener.enterDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_statistics_name_azure_dw_and_pdw) {
			listener.exitDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_statistics_name_azure_dw_and_pdw) {
			return visitor.visitDrop_statistics_name_azure_dw_and_pdw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_symmetric_keyContext extends ParserRuleContext {
	public _symmetric_key_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SYMMETRIC(): TerminalNode { return this.getToken(TSqlParser.SYMMETRIC, 0); }
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_symmetric_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_symmetric_key) {
			listener.enterDrop_symmetric_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_symmetric_key) {
			listener.exitDrop_symmetric_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_symmetric_key) {
			return visitor.visitDrop_symmetric_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_synonymContext extends ParserRuleContext {
	public _schema: IdContext;
	public _synonym_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public SYNONYM(): TerminalNode { return this.getToken(TSqlParser.SYNONYM, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_synonym; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_synonym) {
			listener.enterDrop_synonym(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_synonym) {
			listener.exitDrop_synonym(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_synonym) {
			return visitor.visitDrop_synonym(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_userContext extends ParserRuleContext {
	public _user_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public USER(): TerminalNode { return this.getToken(TSqlParser.USER, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_user; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_user) {
			listener.enterDrop_user(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_user) {
			listener.exitDrop_user(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_user) {
			return visitor.visitDrop_user(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_workload_groupContext extends ParserRuleContext {
	public _group_name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public WORKLOAD(): TerminalNode { return this.getToken(TSqlParser.WORKLOAD, 0); }
	public GROUP(): TerminalNode { return this.getToken(TSqlParser.GROUP, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_workload_group; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_workload_group) {
			listener.enterDrop_workload_group(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_workload_group) {
			listener.exitDrop_workload_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_workload_group) {
			return visitor.visitDrop_workload_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_xml_schema_collectionContext extends ParserRuleContext {
	public _relational_schema: IdContext;
	public _sql_identifier: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public XML(): TerminalNode { return this.getToken(TSqlParser.XML, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TSqlParser.SCHEMA, 0); }
	public COLLECTION(): TerminalNode { return this.getToken(TSqlParser.COLLECTION, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_xml_schema_collection; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_xml_schema_collection) {
			listener.enterDrop_xml_schema_collection(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_xml_schema_collection) {
			listener.exitDrop_xml_schema_collection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_xml_schema_collection) {
			return visitor.visitDrop_xml_schema_collection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disable_triggerContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _trigger_name: IdContext;
	public _schema_id: IdContext;
	public _object_name: IdContext;
	public DISABLE(): TerminalNode { return this.getToken(TSqlParser.DISABLE, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(TSqlParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALL);
		} else {
			return this.getToken(TSqlParser.ALL, i);
		}
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_disable_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDisable_trigger) {
			listener.enterDisable_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDisable_trigger) {
			listener.exitDisable_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDisable_trigger) {
			return visitor.visitDisable_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Enable_triggerContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _trigger_name: IdContext;
	public _schema_id: IdContext;
	public _object_name: IdContext;
	public ENABLE(): TerminalNode { return this.getToken(TSqlParser.ENABLE, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(TSqlParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALL);
		} else {
			return this.getToken(TSqlParser.ALL, i);
		}
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_enable_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEnable_trigger) {
			listener.enterEnable_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEnable_trigger) {
			listener.exitEnable_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEnable_trigger) {
			return visitor.visitEnable_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_tableContext extends ParserRuleContext {
	public _seconds: Token;
	public LOCK(): TerminalNode { return this.getToken(TSqlParser.LOCK, 0); }
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public IN(): TerminalNode { return this.getToken(TSqlParser.IN, 0); }
	public MODE(): TerminalNode { return this.getToken(TSqlParser.MODE, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SHARE, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXCLUSIVE, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WAIT, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOWAIT, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_lock_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterLock_table) {
			listener.enterLock_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitLock_table) {
			listener.exitLock_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitLock_table) {
			return visitor.visitLock_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Truncate_tableContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(TSqlParser.TRUNCATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTITIONS, 0); }
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_truncate_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTruncate_table) {
			listener.enterTruncate_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTruncate_table) {
			listener.exitTruncate_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTruncate_table) {
			return visitor.visitTruncate_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_column_master_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public _key_store_provider_name: Token;
	public _key_path: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TSqlParser.COLUMN, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public KEY_STORE_PROVIDER_NAME(): TerminalNode { return this.getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(TSqlParser.COMMA, 0); }
	public KEY_PATH(): TerminalNode { return this.getToken(TSqlParser.KEY_PATH, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_column_master_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_column_master_key) {
			listener.enterCreate_column_master_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_column_master_key) {
			listener.exitCreate_column_master_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_column_master_key) {
			return visitor.visitCreate_column_master_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_credentialContext extends ParserRuleContext {
	public _credential_name: IdContext;
	public _identity_name: Token;
	public _secret: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public CREDENTIAL(): TerminalNode { return this.getToken(TSqlParser.CREDENTIAL, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public IDENTITY(): TerminalNode { return this.getToken(TSqlParser.IDENTITY, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public SECRET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECRET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_credential; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_credential) {
			listener.enterAlter_credential(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_credential) {
			listener.exitAlter_credential(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_credential) {
			return visitor.visitAlter_credential(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_credentialContext extends ParserRuleContext {
	public _credential_name: IdContext;
	public _identity_name: Token;
	public _secret: Token;
	public _cryptographic_provider_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public CREDENTIAL(): TerminalNode { return this.getToken(TSqlParser.CREDENTIAL, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public IDENTITY(): TerminalNode { return this.getToken(TSqlParser.IDENTITY, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public SECRET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECRET, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public CRYPTOGRAPHIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_credential; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_credential) {
			listener.enterCreate_credential(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_credential) {
			listener.exitCreate_credential(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_credential) {
			return visitor.visitCreate_credential(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_cryptographic_providerContext extends ParserRuleContext {
	public _provider_name: IdContext;
	public _crypto_provider_ddl_file: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public CRYPTOGRAPHIC(): TerminalNode { return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
	public PROVIDER(): TerminalNode { return this.getToken(TSqlParser.PROVIDER, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_cryptographic_provider; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_cryptographic_provider) {
			listener.enterAlter_cryptographic_provider(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_cryptographic_provider) {
			listener.exitAlter_cryptographic_provider(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_cryptographic_provider) {
			return visitor.visitAlter_cryptographic_provider(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_cryptographic_providerContext extends ParserRuleContext {
	public _provider_name: IdContext;
	public _path_of_DLL: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public CRYPTOGRAPHIC(): TerminalNode { return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
	public PROVIDER(): TerminalNode { return this.getToken(TSqlParser.PROVIDER, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public FILE(): TerminalNode { return this.getToken(TSqlParser.FILE, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_cryptographic_provider; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_cryptographic_provider) {
			listener.enterCreate_cryptographic_provider(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_cryptographic_provider) {
			listener.exitCreate_cryptographic_provider(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_cryptographic_provider) {
			return visitor.visitCreate_cryptographic_provider(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_event_notificationContext extends ParserRuleContext {
	public _event_notification_name: IdContext;
	public _queue_name: IdContext;
	public _event_type_or_group: IdContext;
	public _broker_service: Token;
	public _broker_service_specifier_or_current_database: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public EVENT(): TerminalNode { return this.getToken(TSqlParser.EVENT, 0); }
	public NOTIFICATION(): TerminalNode { return this.getToken(TSqlParser.NOTIFICATION, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public QUEUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUEUE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FAN_IN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAN_IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_event_notification; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_event_notification) {
			listener.enterCreate_event_notification(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_event_notification) {
			listener.exitCreate_event_notification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_event_notification) {
			return visitor.visitCreate_event_notification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_event_sessionContext extends ParserRuleContext {
	public _event_session_name: IdContext;
	public _event_module_guid: IdContext;
	public _event_package_name: IdContext;
	public _event_name: IdContext;
	public _event_customizable_attributue: IdContext;
	public _action_name: IdContext;
	public _target_name: IdContext;
	public _target_parameter_name: IdContext;
	public _max_memory: Token;
	public _max_dispatch_latency_seconds: Token;
	public _max_event_size: Token;
	public EVENT(): TerminalNode[];
	public EVENT(i: number): TerminalNode;
	public EVENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EVENT);
		} else {
			return this.getToken(TSqlParser.EVENT, i);
		}
	}
	public SESSION(): TerminalNode { return this.getToken(TSqlParser.SESSION, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ADD(): TerminalNode[];
	public ADD(i: number): TerminalNode;
	public ADD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ADD);
		} else {
			return this.getToken(TSqlParser.ADD, i);
		}
	}
	public DROP(): TerminalNode[];
	public DROP(i: number): TerminalNode;
	public DROP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DROP);
		} else {
			return this.getToken(TSqlParser.DROP, i);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	public TARGET(): TerminalNode[];
	public TARGET(i: number): TerminalNode;
	public TARGET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TARGET);
		} else {
			return this.getToken(TSqlParser.TARGET, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATE, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public START(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.START, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STOP, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SET);
		} else {
			return this.getToken(TSqlParser.SET, i);
		}
	}
	public MAX_MEMORY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_MEMORY, 0); }
	public EVENT_RETENTION_MODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
	public MAX_DISPATCH_LATENCY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
	public MAX_EVENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
	public MEMORY_PARTITION_MODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
	public TRACK_CAUSALITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRACK_CAUSALITY, 0); }
	public STARTUP_STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STARTUP_STATE, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public KB(): TerminalNode[];
	public KB(i: number): TerminalNode;
	public KB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KB);
		} else {
			return this.getToken(TSqlParser.KB, i);
		}
	}
	public MB(): TerminalNode[];
	public MB(i: number): TerminalNode;
	public MB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MB);
		} else {
			return this.getToken(TSqlParser.MB, i);
		}
	}
	public ALLOW_SINGLE_EVENT_LOSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
	public ALLOW_MULTIPLE_EVENT_LOSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
	public NO_EVENT_LOSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO_EVENT_LOSS, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public PER_NODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PER_NODE, 0); }
	public PER_CPU(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PER_CPU, 0); }
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public SECONDS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDS, 0); }
	public INFINITE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INFINITE, 0); }
	public ACTION(): TerminalNode[];
	public ACTION(i: number): TerminalNode;
	public ACTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ACTION);
		} else {
			return this.getToken(TSqlParser.ACTION, i);
		}
	}
	public WHERE(): TerminalNode[];
	public WHERE(i: number): TerminalNode;
	public WHERE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.WHERE);
		} else {
			return this.getToken(TSqlParser.WHERE, i);
		}
	}
	public event_session_predicate_expression(): Event_session_predicate_expressionContext[];
	public event_session_predicate_expression(i: number): Event_session_predicate_expressionContext;
	public event_session_predicate_expression(i?: number): Event_session_predicate_expressionContext | Event_session_predicate_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Event_session_predicate_expressionContext);
		} else {
			return this.getRuleContext(i, Event_session_predicate_expressionContext);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_event_session; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_event_session) {
			listener.enterCreate_or_alter_event_session(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_event_session) {
			listener.exitCreate_or_alter_event_session(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_event_session) {
			return visitor.visitCreate_or_alter_event_session(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Event_session_predicate_expressionContext extends ParserRuleContext {
	public event_session_predicate_factor(): Event_session_predicate_factorContext[];
	public event_session_predicate_factor(i: number): Event_session_predicate_factorContext;
	public event_session_predicate_factor(i?: number): Event_session_predicate_factorContext | Event_session_predicate_factorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Event_session_predicate_factorContext);
		} else {
			return this.getRuleContext(i, Event_session_predicate_factorContext);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public event_session_predicate_expression(): Event_session_predicate_expressionContext[];
	public event_session_predicate_expression(i: number): Event_session_predicate_expressionContext;
	public event_session_predicate_expression(i?: number): Event_session_predicate_expressionContext | Event_session_predicate_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Event_session_predicate_expressionContext);
		} else {
			return this.getRuleContext(i, Event_session_predicate_expressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public NOT(): TerminalNode[];
	public NOT(i: number): TerminalNode;
	public NOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOT);
		} else {
			return this.getToken(TSqlParser.NOT, i);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AND);
		} else {
			return this.getToken(TSqlParser.AND, i);
		}
	}
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OR);
		} else {
			return this.getToken(TSqlParser.OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_event_session_predicate_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEvent_session_predicate_expression) {
			listener.enterEvent_session_predicate_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEvent_session_predicate_expression) {
			listener.exitEvent_session_predicate_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEvent_session_predicate_expression) {
			return visitor.visitEvent_session_predicate_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Event_session_predicate_factorContext extends ParserRuleContext {
	public event_session_predicate_leaf(): Event_session_predicate_leafContext | undefined {
		return this.tryGetRuleContext(0, Event_session_predicate_leafContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public event_session_predicate_expression(): Event_session_predicate_expressionContext | undefined {
		return this.tryGetRuleContext(0, Event_session_predicate_expressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_event_session_predicate_factor; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEvent_session_predicate_factor) {
			listener.enterEvent_session_predicate_factor(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEvent_session_predicate_factor) {
			listener.exitEvent_session_predicate_factor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEvent_session_predicate_factor) {
			return visitor.visitEvent_session_predicate_factor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Event_session_predicate_leafContext extends ParserRuleContext {
	public _event_field_name: IdContext;
	public _event_module_guid: IdContext;
	public _event_package_name: IdContext;
	public _predicate_source_name: IdContext;
	public _predicate_compare_name: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GREATER, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LESS, 0); }
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	public EXCLAMATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXCLAMATION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_event_session_predicate_leaf; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEvent_session_predicate_leaf) {
			listener.enterEvent_session_predicate_leaf(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEvent_session_predicate_leaf) {
			listener.exitEvent_session_predicate_leaf(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEvent_session_predicate_leaf) {
			return visitor.visitEvent_session_predicate_leaf(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_external_data_sourceContext extends ParserRuleContext {
	public _data_source_name: IdContext;
	public _location: Token;
	public _resource_manager_location: Token;
	public _credential_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public DATA(): TerminalNode { return this.getToken(TSqlParser.DATA, 0); }
	public SOURCE(): TerminalNode { return this.getToken(TSqlParser.SOURCE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public LOCATION(): TerminalNode[];
	public LOCATION(i: number): TerminalNode;
	public LOCATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCATION);
		} else {
			return this.getToken(TSqlParser.LOCATION, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public RESOURCE_MANAGER_LOCATION(): TerminalNode[];
	public RESOURCE_MANAGER_LOCATION(i: number): TerminalNode;
	public RESOURCE_MANAGER_LOCATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION);
		} else {
			return this.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
	}
	public CREDENTIAL(): TerminalNode[];
	public CREDENTIAL(i: number): TerminalNode;
	public CREDENTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CREDENTIAL);
		} else {
			return this.getToken(TSqlParser.CREDENTIAL, i);
		}
	}
	public QUOTED_URL(): TerminalNode[];
	public QUOTED_URL(i: number): TerminalNode;
	public QUOTED_URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.QUOTED_URL);
		} else {
			return this.getToken(TSqlParser.QUOTED_URL, i);
		}
	}
	public QUOTED_HOST_AND_PORT(): TerminalNode[];
	public QUOTED_HOST_AND_PORT(i: number): TerminalNode;
	public QUOTED_HOST_AND_PORT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.QUOTED_HOST_AND_PORT);
		} else {
			return this.getToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE, 0); }
	public BLOB_STORAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BLOB_STORAGE, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_external_data_source; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_external_data_source) {
			listener.enterAlter_external_data_source(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_external_data_source) {
			listener.exitAlter_external_data_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_external_data_source) {
			return visitor.visitAlter_external_data_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_external_libraryContext extends ParserRuleContext {
	public _library_name: IdContext;
	public _owner_name: IdContext;
	public _client_library: Token;
	public _external_data_source_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public LIBRARY(): TerminalNode { return this.getToken(TSqlParser.LIBRARY, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTENT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public PLATFORM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PLATFORM, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LANGUAGE(): TerminalNode[];
	public LANGUAGE(i: number): TerminalNode;
	public LANGUAGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LANGUAGE);
		} else {
			return this.getToken(TSqlParser.LANGUAGE, i);
		}
	}
	public DATA_SOURCE(): TerminalNode[];
	public DATA_SOURCE(i: number): TerminalNode;
	public DATA_SOURCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DATA_SOURCE);
		} else {
			return this.getToken(TSqlParser.DATA_SOURCE, i);
		}
	}
	public R(): TerminalNode[];
	public R(i: number): TerminalNode;
	public R(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.R);
		} else {
			return this.getToken(TSqlParser.R, i);
		}
	}
	public PYTHON(): TerminalNode[];
	public PYTHON(i: number): TerminalNode;
	public PYTHON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PYTHON);
		} else {
			return this.getToken(TSqlParser.PYTHON, i);
		}
	}
	public WINDOWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WINDOWS, 0); }
	public LINUX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LINUX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_external_library; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_external_library) {
			listener.enterAlter_external_library(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_external_library) {
			listener.exitAlter_external_library(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_external_library) {
			return visitor.visitAlter_external_library(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_external_libraryContext extends ParserRuleContext {
	public _library_name: IdContext;
	public _owner_name: IdContext;
	public _client_library: Token;
	public _external_data_source_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public LIBRARY(): TerminalNode { return this.getToken(TSqlParser.LIBRARY, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTENT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public PLATFORM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PLATFORM, 0); }
	public LANGUAGE(): TerminalNode[];
	public LANGUAGE(i: number): TerminalNode;
	public LANGUAGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LANGUAGE);
		} else {
			return this.getToken(TSqlParser.LANGUAGE, i);
		}
	}
	public DATA_SOURCE(): TerminalNode[];
	public DATA_SOURCE(i: number): TerminalNode;
	public DATA_SOURCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DATA_SOURCE);
		} else {
			return this.getToken(TSqlParser.DATA_SOURCE, i);
		}
	}
	public R(): TerminalNode[];
	public R(i: number): TerminalNode;
	public R(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.R);
		} else {
			return this.getToken(TSqlParser.R, i);
		}
	}
	public PYTHON(): TerminalNode[];
	public PYTHON(i: number): TerminalNode;
	public PYTHON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PYTHON);
		} else {
			return this.getToken(TSqlParser.PYTHON, i);
		}
	}
	public WINDOWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WINDOWS, 0); }
	public LINUX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LINUX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_external_library; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_external_library) {
			listener.enterCreate_external_library(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_external_library) {
			listener.exitCreate_external_library(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_external_library) {
			return visitor.visitCreate_external_library(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_external_resource_poolContext extends ParserRuleContext {
	public _pool_name: IdContext;
	public _max_cpu_percent: Token;
	public _max_memory_percent: Token;
	public _max_processes: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(TSqlParser.RESOURCE, 0); }
	public POOL(): TerminalNode { return this.getToken(TSqlParser.POOL, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public MAX_CPU_PERCENT(): TerminalNode { return this.getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public DEFAULT_DOUBLE_QUOTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
	public AFFINITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFFINITY, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CPU, 0); }
	public NUMANODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMANODE, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public MAX_MEMORY_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
	public MAX_PROCESSES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_PROCESSES, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_external_resource_pool; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_external_resource_pool) {
			listener.enterAlter_external_resource_pool(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_external_resource_pool) {
			listener.exitAlter_external_resource_pool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_external_resource_pool) {
			return visitor.visitAlter_external_resource_pool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_external_resource_poolContext extends ParserRuleContext {
	public _pool_name: IdContext;
	public _max_cpu_percent: Token;
	public _max_memory_percent: Token;
	public _max_processes: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(TSqlParser.EXTERNAL, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(TSqlParser.RESOURCE, 0); }
	public POOL(): TerminalNode { return this.getToken(TSqlParser.POOL, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public MAX_CPU_PERCENT(): TerminalNode { return this.getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public AFFINITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFFINITY, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CPU, 0); }
	public NUMANODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMANODE, 0); }
	public MAX_MEMORY_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
	public MAX_PROCESSES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_PROCESSES, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_external_resource_pool; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_external_resource_pool) {
			listener.enterCreate_external_resource_pool(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_external_resource_pool) {
			listener.exitCreate_external_resource_pool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_external_resource_pool) {
			return visitor.visitCreate_external_resource_pool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_fulltext_catalogContext extends ParserRuleContext {
	public _catalog_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public CATALOG(): TerminalNode { return this.getToken(TSqlParser.CATALOG, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REBUILD, 0); }
	public REORGANIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REORGANIZE, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public ACCENT_SENSITIVITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_fulltext_catalog; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_fulltext_catalog) {
			listener.enterAlter_fulltext_catalog(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_fulltext_catalog) {
			listener.exitAlter_fulltext_catalog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_fulltext_catalog) {
			return visitor.visitAlter_fulltext_catalog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_fulltext_catalogContext extends ParserRuleContext {
	public _catalog_name: IdContext;
	public _filegroup: IdContext;
	public _rootpath: Token;
	public _owner_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public CATALOG(): TerminalNode { return this.getToken(TSqlParser.CATALOG, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public FILEGROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILEGROUP, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IN, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PATH, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public ACCENT_SENSITIVITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_fulltext_catalog; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_fulltext_catalog) {
			listener.enterCreate_fulltext_catalog(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_fulltext_catalog) {
			listener.exitCreate_fulltext_catalog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_fulltext_catalog) {
			return visitor.visitCreate_fulltext_catalog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_fulltext_stoplistContext extends ParserRuleContext {
	public _stoplist_name: IdContext;
	public _stopword: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public STOPLIST(): TerminalNode { return this.getToken(TSqlParser.STOPLIST, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LANGUAGE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_fulltext_stoplist; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_fulltext_stoplist) {
			listener.enterAlter_fulltext_stoplist(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_fulltext_stoplist) {
			listener.exitAlter_fulltext_stoplist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_fulltext_stoplist) {
			return visitor.visitAlter_fulltext_stoplist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_fulltext_stoplistContext extends ParserRuleContext {
	public _stoplist_name: IdContext;
	public _database_name: IdContext;
	public _source_stoplist_name: IdContext;
	public _owner_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public FULLTEXT(): TerminalNode { return this.getToken(TSqlParser.FULLTEXT, 0); }
	public STOPLIST(): TerminalNode[];
	public STOPLIST(i: number): TerminalNode;
	public STOPLIST(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STOPLIST);
		} else {
			return this.getToken(TSqlParser.STOPLIST, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYSTEM, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_fulltext_stoplist; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_fulltext_stoplist) {
			listener.enterCreate_fulltext_stoplist(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_fulltext_stoplist) {
			listener.exitCreate_fulltext_stoplist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_fulltext_stoplist) {
			return visitor.visitCreate_fulltext_stoplist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_login_sql_serverContext extends ParserRuleContext {
	public _login_name: IdContext;
	public _password: Token;
	public _password_hash: Token;
	public _old_password: Token;
	public _default_database: IdContext;
	public _default_laguage: IdContext;
	public _credential_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public CREDENTIAL(): TerminalNode[];
	public CREDENTIAL(i: number): TerminalNode;
	public CREDENTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CREDENTIAL);
		} else {
			return this.getToken(TSqlParser.CREDENTIAL, i);
		}
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OLD_PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DEFAULT_DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_DATABASE, 0); }
	public DEFAULT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public CHECK_POLICY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK_POLICY, 0); }
	public CHECK_EXPIRATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK_EXPIRATION, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public HASHED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HASHED, 0); }
	public MUST_CHANGE(): TerminalNode[];
	public MUST_CHANGE(i: number): TerminalNode;
	public MUST_CHANGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MUST_CHANGE);
		} else {
			return this.getToken(TSqlParser.MUST_CHANGE, i);
		}
	}
	public UNLOCK(): TerminalNode[];
	public UNLOCK(i: number): TerminalNode;
	public UNLOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UNLOCK);
		} else {
			return this.getToken(TSqlParser.UNLOCK, i);
		}
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_login_sql_server; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_login_sql_server) {
			listener.enterAlter_login_sql_server(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_login_sql_server) {
			listener.exitAlter_login_sql_server(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_login_sql_server) {
			return visitor.visitAlter_login_sql_server(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_login_sql_serverContext extends ParserRuleContext {
	public _login_name: IdContext;
	public _password: Token;
	public _password_hash: Token;
	public _sid: Token;
	public _default_database: IdContext;
	public _default_laguage: IdContext;
	public _credential_name: IdContext;
	public _default_language: Token;
	public _certname: IdContext;
	public _asym_key_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public SID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SID, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DEFAULT_DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_DATABASE, 0); }
	public DEFAULT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
	public CHECK_EXPIRATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK_EXPIRATION, 0); }
	public CHECK_POLICY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK_POLICY, 0); }
	public CREDENTIAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREDENTIAL, 0); }
	public BINARY(): TerminalNode[];
	public BINARY(i: number): TerminalNode;
	public BINARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BINARY);
		} else {
			return this.getToken(TSqlParser.BINARY, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public WINDOWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WINDOWS, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public HASHED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HASHED, 0); }
	public MUST_CHANGE(): TerminalNode[];
	public MUST_CHANGE(i: number): TerminalNode;
	public MUST_CHANGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MUST_CHANGE);
		} else {
			return this.getToken(TSqlParser.MUST_CHANGE, i);
		}
	}
	public UNLOCK(): TerminalNode[];
	public UNLOCK(i: number): TerminalNode;
	public UNLOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UNLOCK);
		} else {
			return this.getToken(TSqlParser.UNLOCK, i);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_login_sql_server; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_login_sql_server) {
			listener.enterCreate_login_sql_server(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_login_sql_server) {
			listener.exitCreate_login_sql_server(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_login_sql_server) {
			return visitor.visitCreate_login_sql_server(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_login_azure_sqlContext extends ParserRuleContext {
	public _login_name: IdContext;
	public _password: Token;
	public _old_password: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OLD_PASSWORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_login_azure_sql; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_login_azure_sql) {
			listener.enterAlter_login_azure_sql(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_login_azure_sql) {
			listener.exitAlter_login_azure_sql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_login_azure_sql) {
			return visitor.visitAlter_login_azure_sql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_login_azure_sqlContext extends ParserRuleContext {
	public _login_name: IdContext;
	public _sid: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public SID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SID, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_login_azure_sql; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_login_azure_sql) {
			listener.enterCreate_login_azure_sql(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_login_azure_sql) {
			listener.exitCreate_login_azure_sql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_login_azure_sql) {
			return visitor.visitCreate_login_azure_sql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
	public _login_name: IdContext;
	public _password: Token;
	public _old_password: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OLD_PASSWORD, 0); }
	public MUST_CHANGE(): TerminalNode[];
	public MUST_CHANGE(i: number): TerminalNode;
	public MUST_CHANGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MUST_CHANGE);
		} else {
			return this.getToken(TSqlParser.MUST_CHANGE, i);
		}
	}
	public UNLOCK(): TerminalNode[];
	public UNLOCK(i: number): TerminalNode;
	public UNLOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UNLOCK);
		} else {
			return this.getToken(TSqlParser.UNLOCK, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_login_azure_sql_dw_and_pdw) {
			listener.enterAlter_login_azure_sql_dw_and_pdw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_login_azure_sql_dw_and_pdw) {
			listener.exitAlter_login_azure_sql_dw_and_pdw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_login_azure_sql_dw_and_pdw) {
			return visitor.visitAlter_login_azure_sql_dw_and_pdw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_login_pdwContext extends ParserRuleContext {
	public _loginName: IdContext;
	public _password: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public LOGIN(): TerminalNode { return this.getToken(TSqlParser.LOGIN, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public WINDOWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WINDOWS, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public MUST_CHANGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MUST_CHANGE, 0); }
	public CHECK_POLICY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK_POLICY, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_login_pdw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_login_pdw) {
			listener.enterCreate_login_pdw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_login_pdw) {
			listener.exitCreate_login_pdw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_login_pdw) {
			return visitor.visitCreate_login_pdw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_master_key_sql_serverContext extends ParserRuleContext {
	public _password: Token;
	public _encryption_password: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public MASTER(): TerminalNode[];
	public MASTER(i: number): TerminalNode;
	public MASTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MASTER);
		} else {
			return this.getToken(TSqlParser.MASTER, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public REGENERATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REGENERATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public SERVICE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVICE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_master_key_sql_server; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_master_key_sql_server) {
			listener.enterAlter_master_key_sql_server(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_master_key_sql_server) {
			listener.exitAlter_master_key_sql_server(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_master_key_sql_server) {
			return visitor.visitAlter_master_key_sql_server(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_master_key_sql_serverContext extends ParserRuleContext {
	public _password: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_master_key_sql_server; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_master_key_sql_server) {
			listener.enterCreate_master_key_sql_server(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_master_key_sql_server) {
			listener.exitCreate_master_key_sql_server(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_master_key_sql_server) {
			return visitor.visitCreate_master_key_sql_server(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_master_key_azure_sqlContext extends ParserRuleContext {
	public _password: Token;
	public _encryption_password: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public MASTER(): TerminalNode[];
	public MASTER(i: number): TerminalNode;
	public MASTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MASTER);
		} else {
			return this.getToken(TSqlParser.MASTER, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public REGENERATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REGENERATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public SERVICE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVICE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_master_key_azure_sql; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_master_key_azure_sql) {
			listener.enterAlter_master_key_azure_sql(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_master_key_azure_sql) {
			listener.exitAlter_master_key_azure_sql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_master_key_azure_sql) {
			return visitor.visitAlter_master_key_azure_sql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_master_key_azure_sqlContext extends ParserRuleContext {
	public _password: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_master_key_azure_sql; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_master_key_azure_sql) {
			listener.enterCreate_master_key_azure_sql(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_master_key_azure_sql) {
			listener.exitCreate_master_key_azure_sql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_master_key_azure_sql) {
			return visitor.visitCreate_master_key_azure_sql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_message_typeContext extends ParserRuleContext {
	public _message_type_name: IdContext;
	public _schema_collection_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public MESSAGE(): TerminalNode { return this.getToken(TSqlParser.MESSAGE, 0); }
	public TYPE(): TerminalNode { return this.getToken(TSqlParser.TYPE, 0); }
	public VALIDATION(): TerminalNode { return this.getToken(TSqlParser.VALIDATION, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EMPTY, 0); }
	public WELL_FORMED_XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WELL_FORMED_XML, 0); }
	public VALID_XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALID_XML, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public COLLECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLECTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_message_type; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_message_type) {
			listener.enterAlter_message_type(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_message_type) {
			listener.exitAlter_message_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_message_type) {
			return visitor.visitAlter_message_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_partition_functionContext extends ParserRuleContext {
	public _partition_function_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public PARTITION(): TerminalNode { return this.getToken(TSqlParser.PARTITION, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(TSqlParser.FUNCTION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public RANGE(): TerminalNode { return this.getToken(TSqlParser.RANGE, 0); }
	public DECIMAL(): TerminalNode { return this.getToken(TSqlParser.DECIMAL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public SPLIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SPLIT, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_partition_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_partition_function) {
			listener.enterAlter_partition_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_partition_function) {
			listener.exitAlter_partition_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_partition_function) {
			return visitor.visitAlter_partition_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_partition_schemeContext extends ParserRuleContext {
	public _partition_scheme_name: IdContext;
	public _file_group_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public PARTITION(): TerminalNode { return this.getToken(TSqlParser.PARTITION, 0); }
	public SCHEME(): TerminalNode { return this.getToken(TSqlParser.SCHEME, 0); }
	public NEXT(): TerminalNode { return this.getToken(TSqlParser.NEXT, 0); }
	public USED(): TerminalNode { return this.getToken(TSqlParser.USED, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_partition_scheme; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_partition_scheme) {
			listener.enterAlter_partition_scheme(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_partition_scheme) {
			listener.exitAlter_partition_scheme(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_partition_scheme) {
			return visitor.visitAlter_partition_scheme(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_remote_service_bindingContext extends ParserRuleContext {
	public _binding_name: IdContext;
	public _user_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public REMOTE(): TerminalNode { return this.getToken(TSqlParser.REMOTE, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public BINDING(): TerminalNode { return this.getToken(TSqlParser.BINDING, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USER, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public ANONYMOUS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANONYMOUS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_remote_service_binding; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_remote_service_binding) {
			listener.enterAlter_remote_service_binding(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_remote_service_binding) {
			listener.exitAlter_remote_service_binding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_remote_service_binding) {
			return visitor.visitAlter_remote_service_binding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_remote_service_bindingContext extends ParserRuleContext {
	public _binding_name: IdContext;
	public _owner_name: IdContext;
	public _remote_service_name: Token;
	public _user_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public REMOTE(): TerminalNode { return this.getToken(TSqlParser.REMOTE, 0); }
	public SERVICE(): TerminalNode[];
	public SERVICE(i: number): TerminalNode;
	public SERVICE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SERVICE);
		} else {
			return this.getToken(TSqlParser.SERVICE, i);
		}
	}
	public BINDING(): TerminalNode { return this.getToken(TSqlParser.BINDING, 0); }
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USER, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public ANONYMOUS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANONYMOUS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_remote_service_binding; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_remote_service_binding) {
			listener.enterCreate_remote_service_binding(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_remote_service_binding) {
			listener.exitCreate_remote_service_binding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_remote_service_binding) {
			return visitor.visitCreate_remote_service_binding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_resource_poolContext extends ParserRuleContext {
	public _pool_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(TSqlParser.RESOURCE, 0); }
	public POOL(): TerminalNode { return this.getToken(TSqlParser.POOL, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public MIN_CPU_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public MAX_CPU_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
	public CAP_CPU_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
	public AFFINITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFFINITY, 0); }
	public SCHEDULER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEDULER, 0); }
	public MIN_MEMORY_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
	public MAX_MEMORY_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
	public MIN_IOPS_PER_VOLUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
	public MAX_IOPS_PER_VOLUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public NUMANODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMANODE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_resource_pool; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_resource_pool) {
			listener.enterCreate_resource_pool(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_resource_pool) {
			listener.exitCreate_resource_pool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_resource_pool) {
			return visitor.visitCreate_resource_pool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_resource_governorContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _function_name: IdContext;
	public _max_outstanding_io_per_volume: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(TSqlParser.RESOURCE, 0); }
	public GOVERNOR(): TerminalNode { return this.getToken(TSqlParser.GOVERNOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public CLASSIFIER_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESET, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATISTICS, 0); }
	public MAX_OUTSTANDING_IO_PER_VOLUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	public RECONFIGURE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECONFIGURE, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_resource_governor; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_resource_governor) {
			listener.enterAlter_resource_governor(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_resource_governor) {
			listener.exitAlter_resource_governor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_resource_governor) {
			return visitor.visitAlter_resource_governor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_db_roleContext extends ParserRuleContext {
	public _role_name: IdContext;
	public _database_principal: IdContext;
	public _new_role_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public MEMBER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MEMBER, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_db_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_db_role) {
			listener.enterAlter_db_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_db_role) {
			listener.exitAlter_db_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_db_role) {
			return visitor.visitAlter_db_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_db_roleContext extends ParserRuleContext {
	public _role_name: IdContext;
	public _owner_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_db_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_db_role) {
			listener.enterCreate_db_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_db_role) {
			listener.exitCreate_db_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_db_role) {
			return visitor.visitCreate_db_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_routeContext extends ParserRuleContext {
	public _route_name: IdContext;
	public _owner_name: IdContext;
	public _route_service_name: Token;
	public _broker_instance_identifier: Token;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public ROUTE(): TerminalNode { return this.getToken(TSqlParser.ROUTE, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public ADDRESS(): TerminalNode { return this.getToken(TSqlParser.ADDRESS, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public QUOTED_URL(): TerminalNode[];
	public QUOTED_URL(i: number): TerminalNode;
	public QUOTED_URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.QUOTED_URL);
		} else {
			return this.getToken(TSqlParser.QUOTED_URL, i);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public SERVICE_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVICE_NAME, 0); }
	public BROKER_INSTANCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BROKER_INSTANCE, 0); }
	public LIFETIME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LIFETIME, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public MIRROR_ADDRESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIRROR_ADDRESS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_route; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_route) {
			listener.enterCreate_route(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_route) {
			listener.exitCreate_route(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_route) {
			return visitor.visitCreate_route(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_ruleContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _rule_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public RULE(): TerminalNode { return this.getToken(TSqlParser.RULE, 0); }
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public search_condition(): Search_conditionContext {
		return this.getRuleContext(0, Search_conditionContext);
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_rule; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_rule) {
			listener.enterCreate_rule(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_rule) {
			listener.exitCreate_rule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_rule) {
			return visitor.visitCreate_rule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_schema_sqlContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SCHEMA(): TerminalNode[];
	public SCHEMA(i: number): TerminalNode;
	public SCHEMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SCHEMA);
		} else {
			return this.getToken(TSqlParser.SCHEMA, i);
		}
	}
	public TRANSFER(): TerminalNode { return this.getToken(TSqlParser.TRANSFER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COLON);
		} else {
			return this.getToken(TSqlParser.COLON, i);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XML, 0); }
	public COLLECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLECTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_schema_sql; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_schema_sql) {
			listener.enterAlter_schema_sql(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_schema_sql) {
			listener.exitAlter_schema_sql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_schema_sql) {
			return visitor.visitAlter_schema_sql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_schemaContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _owner_name: IdContext;
	public _object_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SCHEMA(): TerminalNode[];
	public SCHEMA(i: number): TerminalNode;
	public SCHEMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SCHEMA);
		} else {
			return this.getToken(TSqlParser.SCHEMA, i);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public create_table(): Create_tableContext[];
	public create_table(i: number): Create_tableContext;
	public create_table(i?: number): Create_tableContext | Create_tableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_tableContext);
		} else {
			return this.getRuleContext(i, Create_tableContext);
		}
	}
	public create_view(): Create_viewContext[];
	public create_view(i: number): Create_viewContext;
	public create_view(i?: number): Create_viewContext | Create_viewContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_viewContext);
		} else {
			return this.getRuleContext(i, Create_viewContext);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	public REVOKE(): TerminalNode[];
	public REVOKE(i: number): TerminalNode;
	public REVOKE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REVOKE);
		} else {
			return this.getToken(TSqlParser.REVOKE, i);
		}
	}
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FROM);
		} else {
			return this.getToken(TSqlParser.FROM, i);
		}
	}
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.GRANT);
		} else {
			return this.getToken(TSqlParser.GRANT, i);
		}
	}
	public DENY(): TerminalNode[];
	public DENY(i: number): TerminalNode;
	public DENY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DENY);
		} else {
			return this.getToken(TSqlParser.DENY, i);
		}
	}
	public SELECT(): TerminalNode[];
	public SELECT(i: number): TerminalNode;
	public SELECT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SELECT);
		} else {
			return this.getToken(TSqlParser.SELECT, i);
		}
	}
	public INSERT(): TerminalNode[];
	public INSERT(i: number): TerminalNode;
	public INSERT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.INSERT);
		} else {
			return this.getToken(TSqlParser.INSERT, i);
		}
	}
	public DELETE(): TerminalNode[];
	public DELETE(i: number): TerminalNode;
	public DELETE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DELETE);
		} else {
			return this.getToken(TSqlParser.DELETE, i);
		}
	}
	public UPDATE(): TerminalNode[];
	public UPDATE(i: number): TerminalNode;
	public UPDATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UPDATE);
		} else {
			return this.getToken(TSqlParser.UPDATE, i);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COLON);
		} else {
			return this.getToken(TSqlParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_schema; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_schema) {
			listener.enterCreate_schema(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_schema) {
			listener.exitCreate_schema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_schema) {
			return visitor.visitCreate_schema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _owner_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TSqlParser.SCHEMA, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_schema_azure_sql_dw_and_pdw) {
			listener.enterCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_schema_azure_sql_dw_and_pdw) {
			listener.exitCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_schema_azure_sql_dw_and_pdw) {
			return visitor.visitCreate_schema_azure_sql_dw_and_pdw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TSqlParser.SCHEMA, 0); }
	public TRANSFER(): TerminalNode { return this.getToken(TSqlParser.TRANSFER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COLON);
		} else {
			return this.getToken(TSqlParser.COLON, i);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_schema_azure_sql_dw_and_pdw) {
			listener.enterAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_schema_azure_sql_dw_and_pdw) {
			listener.exitAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_schema_azure_sql_dw_and_pdw) {
			return visitor.visitAlter_schema_azure_sql_dw_and_pdw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_search_property_listContext extends ParserRuleContext {
	public _new_list_name: IdContext;
	public _database_name: IdContext;
	public _source_list_name: IdContext;
	public _owner_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SEARCH(): TerminalNode { return this.getToken(TSqlParser.SEARCH, 0); }
	public PROPERTY(): TerminalNode { return this.getToken(TSqlParser.PROPERTY, 0); }
	public LIST(): TerminalNode { return this.getToken(TSqlParser.LIST, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_search_property_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_search_property_list) {
			listener.enterCreate_search_property_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_search_property_list) {
			listener.exitCreate_search_property_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_search_property_list) {
			return visitor.visitCreate_search_property_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_security_policyContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _security_policy_name: IdContext;
	public _tvf_schema_name: IdContext;
	public _security_predicate_function_name: IdContext;
	public _column_name_or_arguments: IdContext;
	public _table_schema_name: IdContext;
	public _name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SECURITY(): TerminalNode { return this.getToken(TSqlParser.SECURITY, 0); }
	public POLICY(): TerminalNode { return this.getToken(TSqlParser.POLICY, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	public ADD(): TerminalNode[];
	public ADD(i: number): TerminalNode;
	public ADD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ADD);
		} else {
			return this.getToken(TSqlParser.ADD, i);
		}
	}
	public PREDICATE(): TerminalNode[];
	public PREDICATE(i: number): TerminalNode;
	public PREDICATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PREDICATE);
		} else {
			return this.getToken(TSqlParser.PREDICATE, i);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICATION, 0); }
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public AFTER(): TerminalNode[];
	public AFTER(i: number): TerminalNode;
	public AFTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AFTER);
		} else {
			return this.getToken(TSqlParser.AFTER, i);
		}
	}
	public BEFORE(): TerminalNode[];
	public BEFORE(i: number): TerminalNode;
	public BEFORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BEFORE);
		} else {
			return this.getToken(TSqlParser.BEFORE, i);
		}
	}
	public SCHEMABINDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMABINDING, 0); }
	public FILTER(): TerminalNode[];
	public FILTER(i: number): TerminalNode;
	public FILTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILTER);
		} else {
			return this.getToken(TSqlParser.FILTER, i);
		}
	}
	public BLOCK(): TerminalNode[];
	public BLOCK(i: number): TerminalNode;
	public BLOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BLOCK);
		} else {
			return this.getToken(TSqlParser.BLOCK, i);
		}
	}
	public INSERT(): TerminalNode[];
	public INSERT(i: number): TerminalNode;
	public INSERT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.INSERT);
		} else {
			return this.getToken(TSqlParser.INSERT, i);
		}
	}
	public UPDATE(): TerminalNode[];
	public UPDATE(i: number): TerminalNode;
	public UPDATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UPDATE);
		} else {
			return this.getToken(TSqlParser.UPDATE, i);
		}
	}
	public DELETE(): TerminalNode[];
	public DELETE(i: number): TerminalNode;
	public DELETE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DELETE);
		} else {
			return this.getToken(TSqlParser.DELETE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_security_policy; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_security_policy) {
			listener.enterCreate_security_policy(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_security_policy) {
			listener.exitCreate_security_policy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_security_policy) {
			return visitor.visitCreate_security_policy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_sequenceContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _sequence_name: IdContext;
	public _sequnce_increment: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(TSqlParser.SEQUENCE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESTART, 0); }
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCREMENT, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MINVALUE, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO);
		} else {
			return this.getToken(TSqlParser.NO, i);
		}
	}
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXVALUE, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CYCLE, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CACHE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_sequence; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_sequence) {
			listener.enterAlter_sequence(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_sequence) {
			listener.exitAlter_sequence(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_sequence) {
			return visitor.visitAlter_sequence(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_sequenceContext extends ParserRuleContext {
	public _schema_name: IdContext;
	public _sequence_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(TSqlParser.SEQUENCE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public START(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.START, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCREMENT, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MINVALUE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO);
		} else {
			return this.getToken(TSqlParser.NO, i);
		}
	}
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXVALUE, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CYCLE, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CACHE, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_sequence; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_sequence) {
			listener.enterCreate_sequence(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_sequence) {
			listener.exitCreate_sequence(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_sequence) {
			return visitor.visitCreate_sequence(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_auditContext extends ParserRuleContext {
	public _audit_name: IdContext;
	public _filepath: Token;
	public _max_rollover_files: Token;
	public _max_files: Token;
	public _queue_delay: Token;
	public _event_field_name: IdContext;
	public _new_audit_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public AUDIT(): TerminalNode { return this.getToken(TSqlParser.AUDIT, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MODIFY, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TO, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILE, 0); }
	public APPLICATION_LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.APPLICATION_LOG, 0); }
	public SECURITY_LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECURITY_LOG, 0); }
	public QUEUE_DELAY(): TerminalNode[];
	public QUEUE_DELAY(i: number): TerminalNode;
	public QUEUE_DELAY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.QUEUE_DELAY);
		} else {
			return this.getToken(TSqlParser.QUEUE_DELAY, i);
		}
	}
	public ON_FAILURE(): TerminalNode[];
	public ON_FAILURE(i: number): TerminalNode;
	public ON_FAILURE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON_FAILURE);
		} else {
			return this.getToken(TSqlParser.ON_FAILURE, i);
		}
	}
	public STATE(): TerminalNode[];
	public STATE(i: number): TerminalNode;
	public STATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STATE);
		} else {
			return this.getToken(TSqlParser.STATE, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OR, 0); }
	public CONTINUE(): TerminalNode[];
	public CONTINUE(i: number): TerminalNode;
	public CONTINUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CONTINUE);
		} else {
			return this.getToken(TSqlParser.CONTINUE, i);
		}
	}
	public SHUTDOWN(): TerminalNode[];
	public SHUTDOWN(i: number): TerminalNode;
	public SHUTDOWN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SHUTDOWN);
		} else {
			return this.getToken(TSqlParser.SHUTDOWN, i);
		}
	}
	public FAIL_OPERATION(): TerminalNode[];
	public FAIL_OPERATION(i: number): TerminalNode;
	public FAIL_OPERATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FAIL_OPERATION);
		} else {
			return this.getToken(TSqlParser.FAIL_OPERATION, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GREATER, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LESS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public EXCLAMATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXCLAMATION, 0); }
	public FILEPATH(): TerminalNode[];
	public FILEPATH(i: number): TerminalNode;
	public FILEPATH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILEPATH);
		} else {
			return this.getToken(TSqlParser.FILEPATH, i);
		}
	}
	public MAXSIZE(): TerminalNode[];
	public MAXSIZE(i: number): TerminalNode;
	public MAXSIZE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAXSIZE);
		} else {
			return this.getToken(TSqlParser.MAXSIZE, i);
		}
	}
	public MAX_ROLLOVER_FILES(): TerminalNode[];
	public MAX_ROLLOVER_FILES(i: number): TerminalNode;
	public MAX_ROLLOVER_FILES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAX_ROLLOVER_FILES);
		} else {
			return this.getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
	}
	public MAX_FILES(): TerminalNode[];
	public MAX_FILES(i: number): TerminalNode;
	public MAX_FILES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAX_FILES);
		} else {
			return this.getToken(TSqlParser.MAX_FILES, i);
		}
	}
	public RESERVE_DISK_SPACE(): TerminalNode[];
	public RESERVE_DISK_SPACE(i: number): TerminalNode;
	public RESERVE_DISK_SPACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RESERVE_DISK_SPACE);
		} else {
			return this.getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
	}
	public UNLIMITED(): TerminalNode[];
	public UNLIMITED(i: number): TerminalNode;
	public UNLIMITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UNLIMITED);
		} else {
			return this.getToken(TSqlParser.UNLIMITED, i);
		}
	}
	public MB(): TerminalNode[];
	public MB(i: number): TerminalNode;
	public MB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MB);
		} else {
			return this.getToken(TSqlParser.MB, i);
		}
	}
	public GB(): TerminalNode[];
	public GB(i: number): TerminalNode;
	public GB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.GB);
		} else {
			return this.getToken(TSqlParser.GB, i);
		}
	}
	public TB(): TerminalNode[];
	public TB(i: number): TerminalNode;
	public TB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TB);
		} else {
			return this.getToken(TSqlParser.TB, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_server_audit; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_server_audit) {
			listener.enterAlter_server_audit(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_server_audit) {
			listener.exitAlter_server_audit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_audit) {
			return visitor.visitAlter_server_audit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_server_auditContext extends ParserRuleContext {
	public _audit_name: IdContext;
	public _filepath: Token;
	public _max_rollover_files: Token;
	public _max_files: Token;
	public _queue_delay: Token;
	public _audit_guid: IdContext;
	public _event_field_name: IdContext;
	public _new_audit_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public AUDIT(): TerminalNode { return this.getToken(TSqlParser.AUDIT, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MODIFY, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TO, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILE, 0); }
	public APPLICATION_LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.APPLICATION_LOG, 0); }
	public SECURITY_LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECURITY_LOG, 0); }
	public QUEUE_DELAY(): TerminalNode[];
	public QUEUE_DELAY(i: number): TerminalNode;
	public QUEUE_DELAY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.QUEUE_DELAY);
		} else {
			return this.getToken(TSqlParser.QUEUE_DELAY, i);
		}
	}
	public ON_FAILURE(): TerminalNode[];
	public ON_FAILURE(i: number): TerminalNode;
	public ON_FAILURE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON_FAILURE);
		} else {
			return this.getToken(TSqlParser.ON_FAILURE, i);
		}
	}
	public STATE(): TerminalNode[];
	public STATE(i: number): TerminalNode;
	public STATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STATE);
		} else {
			return this.getToken(TSqlParser.STATE, i);
		}
	}
	public AUDIT_GUID(): TerminalNode[];
	public AUDIT_GUID(i: number): TerminalNode;
	public AUDIT_GUID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AUDIT_GUID);
		} else {
			return this.getToken(TSqlParser.AUDIT_GUID, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OR, 0); }
	public CONTINUE(): TerminalNode[];
	public CONTINUE(i: number): TerminalNode;
	public CONTINUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CONTINUE);
		} else {
			return this.getToken(TSqlParser.CONTINUE, i);
		}
	}
	public SHUTDOWN(): TerminalNode[];
	public SHUTDOWN(i: number): TerminalNode;
	public SHUTDOWN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SHUTDOWN);
		} else {
			return this.getToken(TSqlParser.SHUTDOWN, i);
		}
	}
	public FAIL_OPERATION(): TerminalNode[];
	public FAIL_OPERATION(i: number): TerminalNode;
	public FAIL_OPERATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FAIL_OPERATION);
		} else {
			return this.getToken(TSqlParser.FAIL_OPERATION, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GREATER, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LESS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public EXCLAMATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXCLAMATION, 0); }
	public FILEPATH(): TerminalNode[];
	public FILEPATH(i: number): TerminalNode;
	public FILEPATH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILEPATH);
		} else {
			return this.getToken(TSqlParser.FILEPATH, i);
		}
	}
	public MAXSIZE(): TerminalNode[];
	public MAXSIZE(i: number): TerminalNode;
	public MAXSIZE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAXSIZE);
		} else {
			return this.getToken(TSqlParser.MAXSIZE, i);
		}
	}
	public MAX_ROLLOVER_FILES(): TerminalNode[];
	public MAX_ROLLOVER_FILES(i: number): TerminalNode;
	public MAX_ROLLOVER_FILES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAX_ROLLOVER_FILES);
		} else {
			return this.getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
	}
	public MAX_FILES(): TerminalNode[];
	public MAX_FILES(i: number): TerminalNode;
	public MAX_FILES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAX_FILES);
		} else {
			return this.getToken(TSqlParser.MAX_FILES, i);
		}
	}
	public RESERVE_DISK_SPACE(): TerminalNode[];
	public RESERVE_DISK_SPACE(i: number): TerminalNode;
	public RESERVE_DISK_SPACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RESERVE_DISK_SPACE);
		} else {
			return this.getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
	}
	public UNLIMITED(): TerminalNode[];
	public UNLIMITED(i: number): TerminalNode;
	public UNLIMITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.UNLIMITED);
		} else {
			return this.getToken(TSqlParser.UNLIMITED, i);
		}
	}
	public MB(): TerminalNode[];
	public MB(i: number): TerminalNode;
	public MB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MB);
		} else {
			return this.getToken(TSqlParser.MB, i);
		}
	}
	public GB(): TerminalNode[];
	public GB(i: number): TerminalNode;
	public GB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.GB);
		} else {
			return this.getToken(TSqlParser.GB, i);
		}
	}
	public TB(): TerminalNode[];
	public TB(i: number): TerminalNode;
	public TB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TB);
		} else {
			return this.getToken(TSqlParser.TB, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_server_audit; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_server_audit) {
			listener.enterCreate_server_audit(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_server_audit) {
			listener.exitCreate_server_audit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_server_audit) {
			return visitor.visitCreate_server_audit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_audit_specificationContext extends ParserRuleContext {
	public _audit_specification_name: IdContext;
	public _audit_name: IdContext;
	public _audit_action_group_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVER(): TerminalNode[];
	public SERVER(i: number): TerminalNode;
	public SERVER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SERVER);
		} else {
			return this.getToken(TSqlParser.SERVER, i);
		}
	}
	public AUDIT(): TerminalNode[];
	public AUDIT(i: number): TerminalNode;
	public AUDIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AUDIT);
		} else {
			return this.getToken(TSqlParser.AUDIT, i);
		}
	}
	public SPECIFICATION(): TerminalNode { return this.getToken(TSqlParser.SPECIFICATION, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ADD(): TerminalNode[];
	public ADD(i: number): TerminalNode;
	public ADD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ADD);
		} else {
			return this.getToken(TSqlParser.ADD, i);
		}
	}
	public DROP(): TerminalNode[];
	public DROP(i: number): TerminalNode;
	public DROP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DROP);
		} else {
			return this.getToken(TSqlParser.DROP, i);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_server_audit_specification; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_server_audit_specification) {
			listener.enterAlter_server_audit_specification(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_server_audit_specification) {
			listener.exitAlter_server_audit_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_audit_specification) {
			return visitor.visitAlter_server_audit_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_server_audit_specificationContext extends ParserRuleContext {
	public _audit_specification_name: IdContext;
	public _audit_name: IdContext;
	public _audit_action_group_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SERVER(): TerminalNode[];
	public SERVER(i: number): TerminalNode;
	public SERVER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SERVER);
		} else {
			return this.getToken(TSqlParser.SERVER, i);
		}
	}
	public AUDIT(): TerminalNode[];
	public AUDIT(i: number): TerminalNode;
	public AUDIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AUDIT);
		} else {
			return this.getToken(TSqlParser.AUDIT, i);
		}
	}
	public SPECIFICATION(): TerminalNode { return this.getToken(TSqlParser.SPECIFICATION, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public ADD(): TerminalNode[];
	public ADD(i: number): TerminalNode;
	public ADD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ADD);
		} else {
			return this.getToken(TSqlParser.ADD, i);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_server_audit_specification; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_server_audit_specification) {
			listener.enterCreate_server_audit_specification(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_server_audit_specification) {
			listener.exitCreate_server_audit_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_server_audit_specification) {
			return visitor.visitCreate_server_audit_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_configurationContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public CONFIGURATION(): TerminalNode { return this.getToken(TSqlParser.CONFIGURATION, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SET);
		} else {
			return this.getToken(TSqlParser.SET, i);
		}
	}
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROCESS, 0); }
	public AFFINITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFFINITY, 0); }
	public DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DIAGNOSTICS, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOG, 0); }
	public FAILOVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILOVER, 0); }
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CLUSTER, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROPERTY, 0); }
	public HADR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HADR, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTEXT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public BUFFER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BUFFER, 0); }
	public POOL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.POOL, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXTENSION, 0); }
	public SOFTNUMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SOFTNUMA, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CPU, 0); }
	public NUMANODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMANODE, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PATH, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_SIZE, 0); }
	public MAX_FILES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_FILES, 0); }
	public VERBOSELOGGING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VERBOSELOGGING, 0); }
	public SQLDUMPERFLAGS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
	public SQLDUMPERPATH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SQLDUMPERPATH, 0); }
	public SQLDUMPERTIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
	public FAILURECONDITIONLEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
	public HEALTHCHECKTIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public FILENAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILENAME, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIZE, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public KB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KB, 0); }
	public MB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MB, 0); }
	public GB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GB, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_server_configuration; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_server_configuration) {
			listener.enterAlter_server_configuration(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_server_configuration) {
			listener.exitAlter_server_configuration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_configuration) {
			return visitor.visitAlter_server_configuration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_roleContext extends ParserRuleContext {
	public _server_role_name: IdContext;
	public _server_principal: IdContext;
	public _new_server_role_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public MEMBER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MEMBER, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_server_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_server_role) {
			listener.enterAlter_server_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_server_role) {
			listener.exitAlter_server_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_role) {
			return visitor.visitAlter_server_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_server_roleContext extends ParserRuleContext {
	public _server_role: IdContext;
	public _server_principal: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_server_role; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_server_role) {
			listener.enterCreate_server_role(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_server_role) {
			listener.exitCreate_server_role(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_server_role) {
			return visitor.visitCreate_server_role(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_role_pdwContext extends ParserRuleContext {
	public _server_role_name: IdContext;
	public _login: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(TSqlParser.SERVER, 0); }
	public ROLE(): TerminalNode { return this.getToken(TSqlParser.ROLE, 0); }
	public MEMBER(): TerminalNode { return this.getToken(TSqlParser.MEMBER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_server_role_pdw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_server_role_pdw) {
			listener.enterAlter_server_role_pdw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_server_role_pdw) {
			listener.exitAlter_server_role_pdw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_role_pdw) {
			return visitor.visitAlter_server_role_pdw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_serviceContext extends ParserRuleContext {
	public _modified_service_name: IdContext;
	public _schema_name: IdContext;
	public _queue_name: IdContext;
	public _modified_contract_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public QUEUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUEUE, 0); }
	public ADD(): TerminalNode[];
	public ADD(i: number): TerminalNode;
	public ADD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ADD);
		} else {
			return this.getToken(TSqlParser.ADD, i);
		}
	}
	public DROP(): TerminalNode[];
	public DROP(i: number): TerminalNode;
	public DROP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DROP);
		} else {
			return this.getToken(TSqlParser.DROP, i);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_service; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_service) {
			listener.enterAlter_service(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_service) {
			listener.exitAlter_service(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_service) {
			return visitor.visitAlter_service(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_serviceContext extends ParserRuleContext {
	public _create_service_name: IdContext;
	public _owner_name: IdContext;
	public _schema_name: IdContext;
	public _queue_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public QUEUE(): TerminalNode { return this.getToken(TSqlParser.QUEUE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT);
		} else {
			return this.getToken(TSqlParser.DEFAULT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_service; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_service) {
			listener.enterCreate_service(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_service) {
			listener.exitCreate_service(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_service) {
			return visitor.visitCreate_service(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_service_master_keyContext extends ParserRuleContext {
	public _acold_account_name: Token;
	public _old_password: Token;
	public _new_account_name: Token;
	public _new_password: Token;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public REGENERATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REGENERATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE, 0); }
	public OLD_ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OLD_ACCOUNT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMA, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OLD_PASSWORD, 0); }
	public NEW_ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEW_ACCOUNT, 0); }
	public NEW_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEW_PASSWORD, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_service_master_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_service_master_key) {
			listener.enterAlter_service_master_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_service_master_key) {
			listener.exitAlter_service_master_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_service_master_key) {
			return visitor.visitAlter_service_master_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_symmetric_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public _certificate_name: IdContext;
	public _password: Token;
	public _symmetric_key_name: IdContext;
	public _Asym_key_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SYMMETRIC(): TerminalNode[];
	public SYMMETRIC(i: number): TerminalNode;
	public SYMMETRIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SYMMETRIC);
		} else {
			return this.getToken(TSqlParser.SYMMETRIC, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_symmetric_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_symmetric_key) {
			listener.enterAlter_symmetric_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_symmetric_key) {
			listener.exitAlter_symmetric_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_symmetric_key) {
			return visitor.visitAlter_symmetric_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_symmetric_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public _owner_name: IdContext;
	public _provider_name: IdContext;
	public _key_pass_phrase: Token;
	public _identity_phrase: Token;
	public _provider_key_name: Token;
	public _certificate_name: IdContext;
	public _password: Token;
	public _symmetric_key_name: IdContext;
	public _asym_key_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public SYMMETRIC(): TerminalNode[];
	public SYMMETRIC(i: number): TerminalNode;
	public SYMMETRIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SYMMETRIC);
		} else {
			return this.getToken(TSqlParser.SYMMETRIC, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public KEY_SOURCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY_SOURCE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALGORITHM, 0); }
	public IDENTITY_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY_VALUE, 0); }
	public PROVIDER_KEY_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
	public CREATION_DISPOSITION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATION_DISPOSITION, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public DES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DES, 0); }
	public TRIPLE_DES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIPLE_DES, 0); }
	public TRIPLE_DES_3KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
	public RC2(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC2, 0); }
	public RC4(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4, 0); }
	public RC4_128(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4_128, 0); }
	public DESX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DESX, 0); }
	public AES_128(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_128, 0); }
	public AES_192(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_192, 0); }
	public AES_256(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_256, 0); }
	public CREATE_NEW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE_NEW, 0); }
	public OPEN_EXISTING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPEN_EXISTING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_symmetric_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_symmetric_key) {
			listener.enterCreate_symmetric_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_symmetric_key) {
			listener.exitCreate_symmetric_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_symmetric_key) {
			return visitor.visitCreate_symmetric_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_synonymContext extends ParserRuleContext {
	public _schema_name_1: IdContext;
	public _synonym_name: IdContext;
	public _server_name: IdContext;
	public _database_name: IdContext;
	public _schema_name_2: IdContext;
	public _object_name: IdContext;
	public _database_or_schema2: IdContext;
	public _schema_id_2_or_object_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public SYNONYM(): TerminalNode { return this.getToken(TSqlParser.SYNONYM, 0); }
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DOT);
		} else {
			return this.getToken(TSqlParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_synonym; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_synonym) {
			listener.enterCreate_synonym(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_synonym) {
			listener.exitCreate_synonym(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_synonym) {
			return visitor.visitCreate_synonym(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_userContext extends ParserRuleContext {
	public _username: IdContext;
	public _newusername: IdContext;
	public _schema_name: IdContext;
	public _loginame: IdContext;
	public _lcid: Token;
	public _language_name_or_alias: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(TSqlParser.USER, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public NAME(): TerminalNode[];
	public NAME(i: number): TerminalNode;
	public NAME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NAME);
		} else {
			return this.getToken(TSqlParser.NAME, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DEFAULT_SCHEMA(): TerminalNode[];
	public DEFAULT_SCHEMA(i: number): TerminalNode;
	public DEFAULT_SCHEMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_SCHEMA);
		} else {
			return this.getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
	}
	public LOGIN(): TerminalNode[];
	public LOGIN(i: number): TerminalNode;
	public LOGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOGIN);
		} else {
			return this.getToken(TSqlParser.LOGIN, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PASSWORD);
		} else {
			return this.getToken(TSqlParser.PASSWORD, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public DEFAULT_LANGUAGE(): TerminalNode[];
	public DEFAULT_LANGUAGE(i: number): TerminalNode;
	public DEFAULT_LANGUAGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_LANGUAGE);
		} else {
			return this.getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
	}
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode[];
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i: number): TerminalNode;
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
		} else {
			return this.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NULL);
		} else {
			return this.getToken(TSqlParser.NULL, i);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NONE);
		} else {
			return this.getToken(TSqlParser.NONE, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public OLD_PASSWORD(): TerminalNode[];
	public OLD_PASSWORD(i: number): TerminalNode;
	public OLD_PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OLD_PASSWORD);
		} else {
			return this.getToken(TSqlParser.OLD_PASSWORD, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_user; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_user) {
			listener.enterAlter_user(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_user) {
			listener.exitAlter_user(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_user) {
			return visitor.visitAlter_user(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_userContext extends ParserRuleContext {
	public _user_name: IdContext;
	public _login_name: IdContext;
	public _schema_name: IdContext;
	public _windows_principal: IdContext;
	public _language_name_or_alias: IdContext;
	public _password: Token;
	public _Azure_Active_Directory_principal: IdContext;
	public _cert_name: IdContext;
	public _asym_key_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(TSqlParser.USER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOGIN, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public DEFAULT_SCHEMA(): TerminalNode[];
	public DEFAULT_SCHEMA(i: number): TerminalNode;
	public DEFAULT_SCHEMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_SCHEMA);
		} else {
			return this.getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode[];
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i: number): TerminalNode;
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
		} else {
			return this.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXTERNAL, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public DEFAULT_LANGUAGE(): TerminalNode[];
	public DEFAULT_LANGUAGE(i: number): TerminalNode;
	public DEFAULT_LANGUAGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_LANGUAGE);
		} else {
			return this.getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
	}
	public SID(): TerminalNode[];
	public SID(i: number): TerminalNode;
	public SID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SID);
		} else {
			return this.getToken(TSqlParser.SID, i);
		}
	}
	public BINARY(): TerminalNode[];
	public BINARY(i: number): TerminalNode;
	public BINARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BINARY);
		} else {
			return this.getToken(TSqlParser.BINARY, i);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NONE);
		} else {
			return this.getToken(TSqlParser.NONE, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITHOUT, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_user; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_user) {
			listener.enterCreate_user(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_user) {
			listener.exitCreate_user(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_user) {
			return visitor.visitCreate_user(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_user_azure_sql_dwContext extends ParserRuleContext {
	public _user_name: IdContext;
	public _login_name: IdContext;
	public _schema_name: IdContext;
	public _Azure_Active_Directory_principal: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(TSqlParser.USER, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOGIN, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITHOUT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public DEFAULT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXTERNAL, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_user_azure_sql_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_user_azure_sql_dw) {
			listener.enterCreate_user_azure_sql_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_user_azure_sql_dw) {
			listener.exitCreate_user_azure_sql_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_user_azure_sql_dw) {
			return visitor.visitCreate_user_azure_sql_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_user_azure_sqlContext extends ParserRuleContext {
	public _username: IdContext;
	public _newusername: IdContext;
	public _schema_name: IdContext;
	public _loginame: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(TSqlParser.USER, 0); }
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public NAME(): TerminalNode[];
	public NAME(i: number): TerminalNode;
	public NAME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NAME);
		} else {
			return this.getToken(TSqlParser.NAME, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DEFAULT_SCHEMA(): TerminalNode[];
	public DEFAULT_SCHEMA(i: number): TerminalNode;
	public DEFAULT_SCHEMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_SCHEMA);
		} else {
			return this.getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
	}
	public LOGIN(): TerminalNode[];
	public LOGIN(i: number): TerminalNode;
	public LOGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOGIN);
		} else {
			return this.getToken(TSqlParser.LOGIN, i);
		}
	}
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode[];
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i: number): TerminalNode;
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
		} else {
			return this.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_user_azure_sql; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_user_azure_sql) {
			listener.enterAlter_user_azure_sql(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_user_azure_sql) {
			listener.exitAlter_user_azure_sql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_user_azure_sql) {
			return visitor.visitAlter_user_azure_sql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_workload_groupContext extends ParserRuleContext {
	public _workload_group_group_name: IdContext;
	public _request_max_memory_grant: Token;
	public _request_max_cpu_time_sec: Token;
	public _request_memory_grant_timeout_sec: Token;
	public _max_dop: Token;
	public _group_max_requests: Token;
	public _workload_group_pool_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public WORKLOAD(): TerminalNode { return this.getToken(TSqlParser.WORKLOAD, 0); }
	public GROUP(): TerminalNode { return this.getToken(TSqlParser.GROUP, 0); }
	public DEFAULT_DOUBLE_QUOTE(): TerminalNode[];
	public DEFAULT_DOUBLE_QUOTE(i: number): TerminalNode;
	public DEFAULT_DOUBLE_QUOTE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE);
		} else {
			return this.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USING, 0); }
	public IMPORTANCE(): TerminalNode[];
	public IMPORTANCE(i: number): TerminalNode;
	public IMPORTANCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.IMPORTANCE);
		} else {
			return this.getToken(TSqlParser.IMPORTANCE, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(): TerminalNode[];
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(i: number): TerminalNode;
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
		} else {
			return this.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
	}
	public REQUEST_MAX_CPU_TIME_SEC(): TerminalNode[];
	public REQUEST_MAX_CPU_TIME_SEC(i: number): TerminalNode;
	public REQUEST_MAX_CPU_TIME_SEC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
		} else {
			return this.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
	}
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(): TerminalNode[];
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i: number): TerminalNode;
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
		} else {
			return this.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
	}
	public MAX_DOP(): TerminalNode[];
	public MAX_DOP(i: number): TerminalNode;
	public MAX_DOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAX_DOP);
		} else {
			return this.getToken(TSqlParser.MAX_DOP, i);
		}
	}
	public GROUP_MAX_REQUESTS(): TerminalNode[];
	public GROUP_MAX_REQUESTS(i: number): TerminalNode;
	public GROUP_MAX_REQUESTS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.GROUP_MAX_REQUESTS);
		} else {
			return this.getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
	}
	public LOW(): TerminalNode[];
	public LOW(i: number): TerminalNode;
	public LOW(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOW);
		} else {
			return this.getToken(TSqlParser.LOW, i);
		}
	}
	public MEDIUM(): TerminalNode[];
	public MEDIUM(i: number): TerminalNode;
	public MEDIUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MEDIUM);
		} else {
			return this.getToken(TSqlParser.MEDIUM, i);
		}
	}
	public HIGH(): TerminalNode[];
	public HIGH(i: number): TerminalNode;
	public HIGH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.HIGH);
		} else {
			return this.getToken(TSqlParser.HIGH, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_workload_group; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_workload_group) {
			listener.enterAlter_workload_group(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_workload_group) {
			listener.exitAlter_workload_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_workload_group) {
			return visitor.visitAlter_workload_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_workload_groupContext extends ParserRuleContext {
	public _workload_group_group_name: IdContext;
	public _request_max_memory_grant: Token;
	public _request_max_cpu_time_sec: Token;
	public _request_memory_grant_timeout_sec: Token;
	public _max_dop: Token;
	public _group_max_requests: Token;
	public _workload_group_pool_name: IdContext;
	public _external_pool_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public WORKLOAD(): TerminalNode { return this.getToken(TSqlParser.WORKLOAD, 0); }
	public GROUP(): TerminalNode { return this.getToken(TSqlParser.GROUP, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USING, 0); }
	public IMPORTANCE(): TerminalNode[];
	public IMPORTANCE(i: number): TerminalNode;
	public IMPORTANCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.IMPORTANCE);
		} else {
			return this.getToken(TSqlParser.IMPORTANCE, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(): TerminalNode[];
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(i: number): TerminalNode;
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
		} else {
			return this.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
	}
	public REQUEST_MAX_CPU_TIME_SEC(): TerminalNode[];
	public REQUEST_MAX_CPU_TIME_SEC(i: number): TerminalNode;
	public REQUEST_MAX_CPU_TIME_SEC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
		} else {
			return this.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
	}
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(): TerminalNode[];
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i: number): TerminalNode;
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
		} else {
			return this.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
	}
	public MAX_DOP(): TerminalNode[];
	public MAX_DOP(i: number): TerminalNode;
	public MAX_DOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAX_DOP);
		} else {
			return this.getToken(TSqlParser.MAX_DOP, i);
		}
	}
	public GROUP_MAX_REQUESTS(): TerminalNode[];
	public GROUP_MAX_REQUESTS(i: number): TerminalNode;
	public GROUP_MAX_REQUESTS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.GROUP_MAX_REQUESTS);
		} else {
			return this.getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
	}
	public DEFAULT_DOUBLE_QUOTE(): TerminalNode[];
	public DEFAULT_DOUBLE_QUOTE(i: number): TerminalNode;
	public DEFAULT_DOUBLE_QUOTE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE);
		} else {
			return this.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXTERNAL, 0); }
	public LOW(): TerminalNode[];
	public LOW(i: number): TerminalNode;
	public LOW(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOW);
		} else {
			return this.getToken(TSqlParser.LOW, i);
		}
	}
	public MEDIUM(): TerminalNode[];
	public MEDIUM(i: number): TerminalNode;
	public MEDIUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MEDIUM);
		} else {
			return this.getToken(TSqlParser.MEDIUM, i);
		}
	}
	public HIGH(): TerminalNode[];
	public HIGH(i: number): TerminalNode;
	public HIGH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.HIGH);
		} else {
			return this.getToken(TSqlParser.HIGH, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_workload_group; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_workload_group) {
			listener.enterCreate_workload_group(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_workload_group) {
			listener.exitCreate_workload_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_workload_group) {
			return visitor.visitCreate_workload_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_xml_schema_collectionContext extends ParserRuleContext {
	public _relational_schema: IdContext;
	public _sql_identifier: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public XML(): TerminalNode { return this.getToken(TSqlParser.XML, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TSqlParser.SCHEMA, 0); }
	public COLLECTION(): TerminalNode { return this.getToken(TSqlParser.COLLECTION, 0); }
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_xml_schema_collection; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_xml_schema_collection) {
			listener.enterCreate_xml_schema_collection(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_xml_schema_collection) {
			listener.exitCreate_xml_schema_collection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_xml_schema_collection) {
			return visitor.visitCreate_xml_schema_collection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_queueContext extends ParserRuleContext {
	public _queue_name: IdContext;
	public _filegroup: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public QUEUE(): TerminalNode { return this.getToken(TSqlParser.QUEUE, 0); }
	public full_table_name(): Full_table_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_table_nameContext);
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public queue_settings(): Queue_settingsContext | undefined {
		return this.tryGetRuleContext(0, Queue_settingsContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_queue; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_queue) {
			listener.enterCreate_queue(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_queue) {
			listener.exitCreate_queue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_queue) {
			return visitor.visitCreate_queue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Queue_settingsContext extends ParserRuleContext {
	public _max_readers: Token;
	public _user_name: Token;
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public STATUS(): TerminalNode[];
	public STATUS(i: number): TerminalNode;
	public STATUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STATUS);
		} else {
			return this.getToken(TSqlParser.STATUS, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public RETENTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RETENTION, 0); }
	public ACTIVATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTIVATION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public POISON_MESSAGE_HANDLING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OFF);
		} else {
			return this.getToken(TSqlParser.OFF, i);
		}
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public PROCEDURE_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROCEDURE_NAME, 0); }
	public func_proc_name(): Func_proc_nameContext | undefined {
		return this.tryGetRuleContext(0, Func_proc_nameContext);
	}
	public MAX_QUEUE_READERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXECUTE, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public SELF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SELF, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OWNER, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_queue_settings; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQueue_settings) {
			listener.enterQueue_settings(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQueue_settings) {
			listener.exitQueue_settings(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQueue_settings) {
			return visitor.visitQueue_settings(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_queueContext extends ParserRuleContext {
	public _queue_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public QUEUE(): TerminalNode { return this.getToken(TSqlParser.QUEUE, 0); }
	public full_table_name(): Full_table_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_table_nameContext);
	}
	public queue_settings(): Queue_settingsContext | undefined {
		return this.tryGetRuleContext(0, Queue_settingsContext);
	}
	public queue_action(): Queue_actionContext | undefined {
		return this.tryGetRuleContext(0, Queue_actionContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_queue; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_queue) {
			listener.enterAlter_queue(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_queue) {
			listener.exitAlter_queue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_queue) {
			return visitor.visitAlter_queue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Queue_actionContext extends ParserRuleContext {
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REBUILD, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public queue_rebuild_options(): Queue_rebuild_optionsContext | undefined {
		return this.tryGetRuleContext(0, Queue_rebuild_optionsContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public REORGANIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REORGANIZE, 0); }
	public LOB_COMPACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOB_COMPACTION, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MOVE, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TO, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_queue_action; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQueue_action) {
			listener.enterQueue_action(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQueue_action) {
			listener.exitQueue_action(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQueue_action) {
			return visitor.visitQueue_action(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Queue_rebuild_optionsContext extends ParserRuleContext {
	public MAXDOP(): TerminalNode { return this.getToken(TSqlParser.MAXDOP, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public DECIMAL(): TerminalNode { return this.getToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_queue_rebuild_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQueue_rebuild_options) {
			listener.enterQueue_rebuild_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQueue_rebuild_options) {
			listener.exitQueue_rebuild_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQueue_rebuild_options) {
			return visitor.visitQueue_rebuild_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_contractContext extends ParserRuleContext {
	public _owner_name: IdContext;
	public _message_type_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public CONTRACT(): TerminalNode { return this.getToken(TSqlParser.CONTRACT, 0); }
	public contract_name(): Contract_nameContext {
		return this.getRuleContext(0, Contract_nameContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public SENT(): TerminalNode[];
	public SENT(i: number): TerminalNode;
	public SENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SENT);
		} else {
			return this.getToken(TSqlParser.SENT, i);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BY);
		} else {
			return this.getToken(TSqlParser.BY, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public INITIATOR(): TerminalNode[];
	public INITIATOR(i: number): TerminalNode;
	public INITIATOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.INITIATOR);
		} else {
			return this.getToken(TSqlParser.INITIATOR, i);
		}
	}
	public TARGET(): TerminalNode[];
	public TARGET(i: number): TerminalNode;
	public TARGET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TARGET);
		} else {
			return this.getToken(TSqlParser.TARGET, i);
		}
	}
	public ANY(): TerminalNode[];
	public ANY(i: number): TerminalNode;
	public ANY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ANY);
		} else {
			return this.getToken(TSqlParser.ANY, i);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT);
		} else {
			return this.getToken(TSqlParser.DEFAULT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_contract; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_contract) {
			listener.enterCreate_contract(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_contract) {
			listener.exitCreate_contract(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_contract) {
			return visitor.visitCreate_contract(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Conversation_statementContext extends ParserRuleContext {
	public begin_conversation_timer(): Begin_conversation_timerContext | undefined {
		return this.tryGetRuleContext(0, Begin_conversation_timerContext);
	}
	public begin_conversation_dialog(): Begin_conversation_dialogContext | undefined {
		return this.tryGetRuleContext(0, Begin_conversation_dialogContext);
	}
	public end_conversation(): End_conversationContext | undefined {
		return this.tryGetRuleContext(0, End_conversationContext);
	}
	public get_conversation(): Get_conversationContext | undefined {
		return this.tryGetRuleContext(0, Get_conversationContext);
	}
	public send_conversation(): Send_conversationContext | undefined {
		return this.tryGetRuleContext(0, Send_conversationContext);
	}
	public waitfor_conversation(): Waitfor_conversationContext | undefined {
		return this.tryGetRuleContext(0, Waitfor_conversationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_conversation_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterConversation_statement) {
			listener.enterConversation_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitConversation_statement) {
			listener.exitConversation_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitConversation_statement) {
			return visitor.visitConversation_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Message_statementContext extends ParserRuleContext {
	public _message_type_name: IdContext;
	public _owner_name: IdContext;
	public _schema_collection_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public MESSAGE(): TerminalNode { return this.getToken(TSqlParser.MESSAGE, 0); }
	public TYPE(): TerminalNode { return this.getToken(TSqlParser.TYPE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALIDATION, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EMPTY, 0); }
	public WELL_FORMED_XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WELL_FORMED_XML, 0); }
	public VALID_XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALID_XML, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMA, 0); }
	public COLLECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLECTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_message_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMessage_statement) {
			listener.enterMessage_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMessage_statement) {
			listener.exitMessage_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMessage_statement) {
			return visitor.visitMessage_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_statementContext extends ParserRuleContext {
	public MERGE(): TerminalNode { return this.getToken(TSqlParser.MERGE, 0); }
	public ddl_object(): Ddl_objectContext {
		return this.getRuleContext(0, Ddl_objectContext);
	}
	public USING(): TerminalNode { return this.getToken(TSqlParser.USING, 0); }
	public table_sources(): Table_sourcesContext {
		return this.getRuleContext(0, Table_sourcesContext);
	}
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public search_condition(): Search_conditionContext[];
	public search_condition(i: number): Search_conditionContext;
	public search_condition(i?: number): Search_conditionContext | Search_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Search_conditionContext);
		} else {
			return this.getRuleContext(i, Search_conditionContext);
		}
	}
	public with_expression(): With_expressionContext | undefined {
		return this.tryGetRuleContext(0, With_expressionContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TOP, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTO, 0); }
	public insert_with_table_hints(): Insert_with_table_hintsContext | undefined {
		return this.tryGetRuleContext(0, Insert_with_table_hintsContext);
	}
	public as_table_alias(): As_table_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_table_aliasContext);
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.WHEN);
		} else {
			return this.getToken(TSqlParser.WHEN, i);
		}
	}
	public MATCHED(): TerminalNode[];
	public MATCHED(i: number): TerminalNode;
	public MATCHED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MATCHED);
		} else {
			return this.getToken(TSqlParser.MATCHED, i);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.THEN);
		} else {
			return this.getToken(TSqlParser.THEN, i);
		}
	}
	public merge_matched(): Merge_matchedContext[];
	public merge_matched(i: number): Merge_matchedContext;
	public merge_matched(i?: number): Merge_matchedContext | Merge_matchedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Merge_matchedContext);
		} else {
			return this.getRuleContext(i, Merge_matchedContext);
		}
	}
	public NOT(): TerminalNode[];
	public NOT(i: number): TerminalNode;
	public NOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOT);
		} else {
			return this.getToken(TSqlParser.NOT, i);
		}
	}
	public merge_not_matched(): Merge_not_matchedContext | undefined {
		return this.tryGetRuleContext(0, Merge_not_matchedContext);
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BY);
		} else {
			return this.getToken(TSqlParser.BY, i);
		}
	}
	public SOURCE(): TerminalNode[];
	public SOURCE(i: number): TerminalNode;
	public SOURCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SOURCE);
		} else {
			return this.getToken(TSqlParser.SOURCE, i);
		}
	}
	public output_clause(): Output_clauseContext | undefined {
		return this.tryGetRuleContext(0, Output_clauseContext);
	}
	public option_clause(): Option_clauseContext | undefined {
		return this.tryGetRuleContext(0, Option_clauseContext);
	}
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERCENT, 0); }
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AND);
		} else {
			return this.getToken(TSqlParser.AND, i);
		}
	}
	public TARGET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TARGET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_merge_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMerge_statement) {
			listener.enterMerge_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMerge_statement) {
			listener.exitMerge_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMerge_statement) {
			return visitor.visitMerge_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_matchedContext extends ParserRuleContext {
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UPDATE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public update_elem(): Update_elemContext[];
	public update_elem(i: number): Update_elemContext;
	public update_elem(i?: number): Update_elemContext | Update_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Update_elemContext);
		} else {
			return this.getRuleContext(i, Update_elemContext);
		}
	}
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_merge_matched; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMerge_matched) {
			listener.enterMerge_matched(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMerge_matched) {
			listener.exitMerge_matched(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMerge_matched) {
			return visitor.visitMerge_matched(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_not_matchedContext extends ParserRuleContext {
	public INSERT(): TerminalNode { return this.getToken(TSqlParser.INSERT, 0); }
	public table_value_constructor(): Table_value_constructorContext | undefined {
		return this.tryGetRuleContext(0, Table_value_constructorContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALUES, 0); }
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_merge_not_matched; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMerge_not_matched) {
			listener.enterMerge_not_matched(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMerge_not_matched) {
			listener.exitMerge_not_matched(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMerge_not_matched) {
			return visitor.visitMerge_not_matched(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_statementContext extends ParserRuleContext {
	public _cursor_var: Token;
	public DELETE(): TerminalNode { return this.getToken(TSqlParser.DELETE, 0); }
	public delete_statement_from(): Delete_statement_fromContext {
		return this.getRuleContext(0, Delete_statement_fromContext);
	}
	public with_expression(): With_expressionContext | undefined {
		return this.tryGetRuleContext(0, With_expressionContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TOP, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FROM);
		} else {
			return this.getToken(TSqlParser.FROM, i);
		}
	}
	public insert_with_table_hints(): Insert_with_table_hintsContext | undefined {
		return this.tryGetRuleContext(0, Insert_with_table_hintsContext);
	}
	public output_clause(): Output_clauseContext | undefined {
		return this.tryGetRuleContext(0, Output_clauseContext);
	}
	public table_sources(): Table_sourcesContext | undefined {
		return this.tryGetRuleContext(0, Table_sourcesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public for_clause(): For_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_clauseContext);
	}
	public option_clause(): Option_clauseContext | undefined {
		return this.tryGetRuleContext(0, Option_clauseContext);
	}
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURRENT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OF, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERCENT, 0); }
	public cursor_name(): Cursor_nameContext | undefined {
		return this.tryGetRuleContext(0, Cursor_nameContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_delete_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDelete_statement) {
			listener.enterDelete_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDelete_statement) {
			listener.exitDelete_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDelete_statement) {
			return visitor.visitDelete_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_statement_fromContext extends ParserRuleContext {
	public _table_var: Token;
	public ddl_object(): Ddl_objectContext | undefined {
		return this.tryGetRuleContext(0, Ddl_objectContext);
	}
	public table_alias(): Table_aliasContext | undefined {
		return this.tryGetRuleContext(0, Table_aliasContext);
	}
	public rowset_function_limited(): Rowset_function_limitedContext | undefined {
		return this.tryGetRuleContext(0, Rowset_function_limitedContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_delete_statement_from; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDelete_statement_from) {
			listener.enterDelete_statement_from(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDelete_statement_from) {
			listener.exitDelete_statement_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDelete_statement_from) {
			return visitor.visitDelete_statement_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_statementContext extends ParserRuleContext {
	public INSERT(): TerminalNode { return this.getToken(TSqlParser.INSERT, 0); }
	public insert_statement_value(): Insert_statement_valueContext {
		return this.getRuleContext(0, Insert_statement_valueContext);
	}
	public ddl_object(): Ddl_objectContext | undefined {
		return this.tryGetRuleContext(0, Ddl_objectContext);
	}
	public rowset_function_limited(): Rowset_function_limitedContext | undefined {
		return this.tryGetRuleContext(0, Rowset_function_limitedContext);
	}
	public with_expression(): With_expressionContext | undefined {
		return this.tryGetRuleContext(0, With_expressionContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TOP, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTO, 0); }
	public insert_with_table_hints(): Insert_with_table_hintsContext | undefined {
		return this.tryGetRuleContext(0, Insert_with_table_hintsContext);
	}
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	public output_clause(): Output_clauseContext | undefined {
		return this.tryGetRuleContext(0, Output_clauseContext);
	}
	public for_clause(): For_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_clauseContext);
	}
	public option_clause(): Option_clauseContext | undefined {
		return this.tryGetRuleContext(0, Option_clauseContext);
	}
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERCENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_insert_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterInsert_statement) {
			listener.enterInsert_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitInsert_statement) {
			listener.exitInsert_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitInsert_statement) {
			return visitor.visitInsert_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_statement_valueContext extends ParserRuleContext {
	public table_value_constructor(): Table_value_constructorContext | undefined {
		return this.tryGetRuleContext(0, Table_value_constructorContext);
	}
	public derived_table(): Derived_tableContext | undefined {
		return this.tryGetRuleContext(0, Derived_tableContext);
	}
	public execute_statement(): Execute_statementContext | undefined {
		return this.tryGetRuleContext(0, Execute_statementContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALUES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_insert_statement_value; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterInsert_statement_value) {
			listener.enterInsert_statement_value(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitInsert_statement_value) {
			listener.exitInsert_statement_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitInsert_statement_value) {
			return visitor.visitInsert_statement_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Receive_statementContext extends ParserRuleContext {
	public _table_variable: IdContext;
	public _where: Search_conditionContext;
	public RECEIVE(): TerminalNode { return this.getToken(TSqlParser.RECEIVE, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public full_table_name(): Full_table_nameContext {
		return this.getRuleContext(0, Full_table_nameContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISTINCT, 0); }
	public top_clause(): Top_clauseContext | undefined {
		return this.tryGetRuleContext(0, Top_clauseContext);
	}
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTO, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_receive_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterReceive_statement) {
			listener.enterReceive_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitReceive_statement) {
			listener.exitReceive_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitReceive_statement) {
			return visitor.visitReceive_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_statementContext extends ParserRuleContext {
	public query_expression(): Query_expressionContext {
		return this.getRuleContext(0, Query_expressionContext);
	}
	public with_expression(): With_expressionContext | undefined {
		return this.tryGetRuleContext(0, With_expressionContext);
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public for_clause(): For_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_clauseContext);
	}
	public option_clause(): Option_clauseContext | undefined {
		return this.tryGetRuleContext(0, Option_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_select_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSelect_statement) {
			listener.enterSelect_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSelect_statement) {
			listener.exitSelect_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSelect_statement) {
			return visitor.visitSelect_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimeContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_time; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTime) {
			listener.enterTime(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTime) {
			listener.exitTime(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTime) {
			return visitor.visitTime(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_statementContext extends ParserRuleContext {
	public _cursor_var: Token;
	public UPDATE(): TerminalNode { return this.getToken(TSqlParser.UPDATE, 0); }
	public SET(): TerminalNode { return this.getToken(TSqlParser.SET, 0); }
	public update_elem(): Update_elemContext[];
	public update_elem(i: number): Update_elemContext;
	public update_elem(i?: number): Update_elemContext | Update_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Update_elemContext);
		} else {
			return this.getRuleContext(i, Update_elemContext);
		}
	}
	public ddl_object(): Ddl_objectContext | undefined {
		return this.tryGetRuleContext(0, Ddl_objectContext);
	}
	public rowset_function_limited(): Rowset_function_limitedContext | undefined {
		return this.tryGetRuleContext(0, Rowset_function_limitedContext);
	}
	public with_expression(): With_expressionContext | undefined {
		return this.tryGetRuleContext(0, With_expressionContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TOP, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public with_table_hints(): With_table_hintsContext | undefined {
		return this.tryGetRuleContext(0, With_table_hintsContext);
	}
	public output_clause(): Output_clauseContext | undefined {
		return this.tryGetRuleContext(0, Output_clauseContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public table_sources(): Table_sourcesContext | undefined {
		return this.tryGetRuleContext(0, Table_sourcesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public for_clause(): For_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_clauseContext);
	}
	public option_clause(): Option_clauseContext | undefined {
		return this.tryGetRuleContext(0, Option_clauseContext);
	}
	public search_condition_list(): Search_condition_listContext | undefined {
		return this.tryGetRuleContext(0, Search_condition_listContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURRENT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OF, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERCENT, 0); }
	public cursor_name(): Cursor_nameContext | undefined {
		return this.tryGetRuleContext(0, Cursor_nameContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_update_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUpdate_statement) {
			listener.enterUpdate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUpdate_statement) {
			listener.exitUpdate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUpdate_statement) {
			return visitor.visitUpdate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Output_clauseContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(TSqlParser.OUTPUT, 0); }
	public output_dml_list_elem(): Output_dml_list_elemContext[];
	public output_dml_list_elem(i: number): Output_dml_list_elemContext;
	public output_dml_list_elem(i?: number): Output_dml_list_elemContext | Output_dml_list_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Output_dml_list_elemContext);
		} else {
			return this.getRuleContext(i, Output_dml_list_elemContext);
		}
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTO, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_output_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOutput_clause) {
			listener.enterOutput_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOutput_clause) {
			listener.exitOutput_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOutput_clause) {
			return visitor.visitOutput_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Output_dml_list_elemContext extends ParserRuleContext {
	public output_column_name(): Output_column_nameContext | undefined {
		return this.tryGetRuleContext(0, Output_column_nameContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public as_column_alias(): As_column_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_column_aliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_output_dml_list_elem; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOutput_dml_list_elem) {
			listener.enterOutput_dml_list_elem(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOutput_dml_list_elem) {
			listener.exitOutput_dml_list_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOutput_dml_list_elem) {
			return visitor.visitOutput_dml_list_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Output_column_nameContext extends ParserRuleContext {
	public DELETED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELETED, 0); }
	public INSERTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSERTED, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public DOLLAR_ACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOLLAR_ACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_output_column_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOutput_column_name) {
			listener.enterOutput_column_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOutput_column_name) {
			listener.exitOutput_column_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOutput_column_name) {
			return visitor.visitOutput_column_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_databaseContext extends ParserRuleContext {
	public _database: IdContext;
	public _collation_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public DATABASE(): TerminalNode { return this.getToken(TSqlParser.DATABASE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public CONTAINMENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTAINMENT, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public database_file_spec(): Database_file_specContext[];
	public database_file_spec(i: number): Database_file_specContext;
	public database_file_spec(i?: number): Database_file_specContext | Database_file_specContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Database_file_specContext);
		} else {
			return this.getRuleContext(i, Database_file_specContext);
		}
	}
	public LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOG, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public create_database_option(): Create_database_optionContext[];
	public create_database_option(i: number): Create_database_optionContext;
	public create_database_option(i?: number): Create_database_optionContext | Create_database_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_database_optionContext);
		} else {
			return this.getRuleContext(i, Create_database_optionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTIAL, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIMARY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_database; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_database) {
			listener.enterCreate_database(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_database) {
			listener.exitCreate_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_database) {
			return visitor.visitCreate_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_indexContext extends ParserRuleContext {
	public _where: Search_conditionContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public INDEX(): TerminalNode { return this.getToken(TSqlParser.INDEX, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public table_name_with_hint(): Table_name_with_hintContext {
		return this.getRuleContext(0, Table_name_with_hintContext);
	}
	public column_name_list_with_order(): Column_name_list_with_orderContext {
		return this.getRuleContext(0, Column_name_list_with_orderContext);
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNIQUE, 0); }
	public clustered(): ClusteredContext | undefined {
		return this.tryGetRuleContext(0, ClusteredContext);
	}
	public INCLUDE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCLUDE, 0); }
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public index_options(): Index_optionsContext | undefined {
		return this.tryGetRuleContext(0, Index_optionsContext);
	}
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_index; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_index) {
			listener.enterCreate_index(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_index) {
			listener.exitCreate_index(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_index) {
			return visitor.visitCreate_index(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_procedureContext extends ParserRuleContext {
	public _proc: Token;
	public func_proc_name(): Func_proc_nameContext {
		return this.getRuleContext(0, Func_proc_nameContext);
	}
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public sql_clauses(): Sql_clausesContext {
		return this.getRuleContext(0, Sql_clausesContext);
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public PROC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROC, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROCEDURE, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public procedure_param(): Procedure_paramContext[];
	public procedure_param(i: number): Procedure_paramContext;
	public procedure_param(i?: number): Procedure_paramContext | Procedure_paramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_paramContext);
		} else {
			return this.getRuleContext(i, Procedure_paramContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public procedure_option(): Procedure_optionContext[];
	public procedure_option(i: number): Procedure_optionContext;
	public procedure_option(i?: number): Procedure_optionContext | Procedure_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_optionContext);
		} else {
			return this.getRuleContext(i, Procedure_optionContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICATION, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_procedure; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_procedure) {
			listener.enterCreate_or_alter_procedure(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_procedure) {
			listener.exitCreate_or_alter_procedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_procedure) {
			return visitor.visitCreate_or_alter_procedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_triggerContext extends ParserRuleContext {
	public create_or_alter_dml_trigger(): Create_or_alter_dml_triggerContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_dml_triggerContext);
	}
	public create_or_alter_ddl_trigger(): Create_or_alter_ddl_triggerContext | undefined {
		return this.tryGetRuleContext(0, Create_or_alter_ddl_triggerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_trigger) {
			listener.enterCreate_or_alter_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_trigger) {
			listener.exitCreate_or_alter_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_trigger) {
			return visitor.visitCreate_or_alter_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_dml_triggerContext extends ParserRuleContext {
	public TRIGGER(): TerminalNode { return this.getToken(TSqlParser.TRIGGER, 0); }
	public simple_name(): Simple_nameContext {
		return this.getRuleContext(0, Simple_nameContext);
	}
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public dml_trigger_operation(): Dml_trigger_operationContext[];
	public dml_trigger_operation(i: number): Dml_trigger_operationContext;
	public dml_trigger_operation(i?: number): Dml_trigger_operationContext | Dml_trigger_operationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dml_trigger_operationContext);
		} else {
			return this.getRuleContext(i, Dml_trigger_operationContext);
		}
	}
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public sql_clauses(): Sql_clausesContext {
		return this.getRuleContext(0, Sql_clausesContext);
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public FOR(): TerminalNode[];
	public FOR(i: number): TerminalNode;
	public FOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FOR);
		} else {
			return this.getToken(TSqlParser.FOR, i);
		}
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFTER, 0); }
	public INSTEAD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSTEAD, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OF, 0); }
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.WITH);
		} else {
			return this.getToken(TSqlParser.WITH, i);
		}
	}
	public dml_trigger_option(): Dml_trigger_optionContext[];
	public dml_trigger_option(i: number): Dml_trigger_optionContext;
	public dml_trigger_option(i?: number): Dml_trigger_optionContext | Dml_trigger_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dml_trigger_optionContext);
		} else {
			return this.getRuleContext(i, Dml_trigger_optionContext);
		}
	}
	public APPEND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.APPEND, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICATION, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_dml_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_dml_trigger) {
			listener.enterCreate_or_alter_dml_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_dml_trigger) {
			listener.exitCreate_or_alter_dml_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_dml_trigger) {
			return visitor.visitCreate_or_alter_dml_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dml_trigger_optionContext extends ParserRuleContext {
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public execute_clause(): Execute_clauseContext | undefined {
		return this.tryGetRuleContext(0, Execute_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_dml_trigger_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDml_trigger_option) {
			listener.enterDml_trigger_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDml_trigger_option) {
			listener.exitDml_trigger_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDml_trigger_option) {
			return visitor.visitDml_trigger_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dml_trigger_operationContext extends ParserRuleContext {
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_dml_trigger_operation; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDml_trigger_operation) {
			listener.enterDml_trigger_operation(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDml_trigger_operation) {
			listener.exitDml_trigger_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDml_trigger_operation) {
			return visitor.visitDml_trigger_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
	public TRIGGER(): TerminalNode { return this.getToken(TSqlParser.TRIGGER, 0); }
	public simple_name(): Simple_nameContext {
		return this.getRuleContext(0, Simple_nameContext);
	}
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public ddl_trigger_operation(): Ddl_trigger_operationContext {
		return this.getRuleContext(0, Ddl_trigger_operationContext);
	}
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public sql_clauses(): Sql_clausesContext {
		return this.getRuleContext(0, Sql_clausesContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFTER, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public dml_trigger_option(): Dml_trigger_optionContext[];
	public dml_trigger_option(i: number): Dml_trigger_optionContext;
	public dml_trigger_option(i?: number): Dml_trigger_optionContext | Dml_trigger_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dml_trigger_optionContext);
		} else {
			return this.getRuleContext(i, Dml_trigger_optionContext);
		}
	}
	public dml_trigger_operation(): Dml_trigger_operationContext[];
	public dml_trigger_operation(i: number): Dml_trigger_operationContext;
	public dml_trigger_operation(i?: number): Dml_trigger_operationContext | Dml_trigger_operationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dml_trigger_operationContext);
		} else {
			return this.getRuleContext(i, Dml_trigger_operationContext);
		}
	}
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_ddl_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_ddl_trigger) {
			listener.enterCreate_or_alter_ddl_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_ddl_trigger) {
			listener.exitCreate_or_alter_ddl_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_ddl_trigger) {
			return visitor.visitCreate_or_alter_ddl_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ddl_trigger_operationContext extends ParserRuleContext {
	public simple_id(): Simple_idContext {
		return this.getRuleContext(0, Simple_idContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_ddl_trigger_operation; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDdl_trigger_operation) {
			listener.enterDdl_trigger_operation(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDdl_trigger_operation) {
			listener.exitDdl_trigger_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDdl_trigger_operation) {
			return visitor.visitDdl_trigger_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_or_alter_functionContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(TSqlParser.FUNCTION, 0); }
	public func_proc_name(): Func_proc_nameContext {
		return this.getRuleContext(0, Func_proc_nameContext);
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public func_body_returns_select(): Func_body_returns_selectContext | undefined {
		return this.tryGetRuleContext(0, Func_body_returns_selectContext);
	}
	public func_body_returns_table(): Func_body_returns_tableContext | undefined {
		return this.tryGetRuleContext(0, Func_body_returns_tableContext);
	}
	public func_body_returns_scalar(): Func_body_returns_scalarContext | undefined {
		return this.tryGetRuleContext(0, Func_body_returns_scalarContext);
	}
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public procedure_param(): Procedure_paramContext[];
	public procedure_param(i: number): Procedure_paramContext;
	public procedure_param(i?: number): Procedure_paramContext | Procedure_paramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_paramContext);
		} else {
			return this.getRuleContext(i, Procedure_paramContext);
		}
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_or_alter_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_or_alter_function) {
			listener.enterCreate_or_alter_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_or_alter_function) {
			listener.exitCreate_or_alter_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_or_alter_function) {
			return visitor.visitCreate_or_alter_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_body_returns_selectContext extends ParserRuleContext {
	public RETURNS(): TerminalNode { return this.getToken(TSqlParser.RETURNS, 0); }
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public RETURN(): TerminalNode { return this.getToken(TSqlParser.RETURN, 0); }
	public select_statement(): Select_statementContext | undefined {
		return this.tryGetRuleContext(0, Select_statementContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public function_option(): Function_optionContext[];
	public function_option(i: number): Function_optionContext;
	public function_option(i?: number): Function_optionContext | Function_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_optionContext);
		} else {
			return this.getRuleContext(i, Function_optionContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_func_body_returns_select; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFunc_body_returns_select) {
			listener.enterFunc_body_returns_select(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFunc_body_returns_select) {
			listener.exitFunc_body_returns_select(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFunc_body_returns_select) {
			return visitor.visitFunc_body_returns_select(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_body_returns_tableContext extends ParserRuleContext {
	public RETURNS(): TerminalNode { return this.getToken(TSqlParser.RETURNS, 0); }
	public LOCAL_ID(): TerminalNode { return this.getToken(TSqlParser.LOCAL_ID, 0); }
	public table_type_definition(): Table_type_definitionContext {
		return this.getRuleContext(0, Table_type_definitionContext);
	}
	public BEGIN(): TerminalNode { return this.getToken(TSqlParser.BEGIN, 0); }
	public RETURN(): TerminalNode { return this.getToken(TSqlParser.RETURN, 0); }
	public END(): TerminalNode { return this.getToken(TSqlParser.END, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public function_option(): Function_optionContext[];
	public function_option(i: number): Function_optionContext;
	public function_option(i?: number): Function_optionContext | Function_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_optionContext);
		} else {
			return this.getRuleContext(i, Function_optionContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public sql_clause(): Sql_clauseContext[];
	public sql_clause(i: number): Sql_clauseContext;
	public sql_clause(i?: number): Sql_clauseContext | Sql_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sql_clauseContext);
		} else {
			return this.getRuleContext(i, Sql_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_func_body_returns_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFunc_body_returns_table) {
			listener.enterFunc_body_returns_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFunc_body_returns_table) {
			listener.exitFunc_body_returns_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFunc_body_returns_table) {
			return visitor.visitFunc_body_returns_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_body_returns_scalarContext extends ParserRuleContext {
	public _ret: ExpressionContext;
	public RETURNS(): TerminalNode { return this.getToken(TSqlParser.RETURNS, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public BEGIN(): TerminalNode { return this.getToken(TSqlParser.BEGIN, 0); }
	public RETURN(): TerminalNode { return this.getToken(TSqlParser.RETURN, 0); }
	public END(): TerminalNode { return this.getToken(TSqlParser.END, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public function_option(): Function_optionContext[];
	public function_option(i: number): Function_optionContext;
	public function_option(i?: number): Function_optionContext | Function_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_optionContext);
		} else {
			return this.getRuleContext(i, Function_optionContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public sql_clause(): Sql_clauseContext[];
	public sql_clause(i: number): Sql_clauseContext;
	public sql_clause(i?: number): Sql_clauseContext | Sql_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sql_clauseContext);
		} else {
			return this.getRuleContext(i, Sql_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_func_body_returns_scalar; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFunc_body_returns_scalar) {
			listener.enterFunc_body_returns_scalar(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFunc_body_returns_scalar) {
			listener.exitFunc_body_returns_scalar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFunc_body_returns_scalar) {
			return visitor.visitFunc_body_returns_scalar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_paramContext extends ParserRuleContext {
	public _default_val: Default_valueContext;
	public LOCAL_ID(): TerminalNode { return this.getToken(TSqlParser.LOCAL_ID, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VARYING, 0); }
	public default_value(): Default_valueContext | undefined {
		return this.tryGetRuleContext(0, Default_valueContext);
	}
	public OUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUTPUT, 0); }
	public READONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_procedure_param; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterProcedure_param) {
			listener.enterProcedure_param(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitProcedure_param) {
			listener.exitProcedure_param(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitProcedure_param) {
			return visitor.visitProcedure_param(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_optionContext extends ParserRuleContext {
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public RECOMPILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECOMPILE, 0); }
	public execute_clause(): Execute_clauseContext | undefined {
		return this.tryGetRuleContext(0, Execute_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_procedure_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterProcedure_option) {
			listener.enterProcedure_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitProcedure_option) {
			listener.exitProcedure_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitProcedure_option) {
			return visitor.visitProcedure_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_optionContext extends ParserRuleContext {
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public SCHEMABINDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMABINDING, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RETURNS, 0); }
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NULL);
		} else {
			return this.getToken(TSqlParser.NULL, i);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INPUT, 0); }
	public CALLED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CALLED, 0); }
	public execute_clause(): Execute_clauseContext | undefined {
		return this.tryGetRuleContext(0, Execute_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_function_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFunction_option) {
			listener.enterFunction_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFunction_option) {
			listener.exitFunction_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFunction_option) {
			return visitor.visitFunction_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_statisticsContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public STATISTICS(): TerminalNode { return this.getToken(TSqlParser.STATISTICS, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public table_name_with_hint(): Table_name_with_hintContext {
		return this.getRuleContext(0, Table_name_with_hintContext);
	}
	public column_name_list(): Column_name_listContext {
		return this.getRuleContext(0, Column_name_listContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FULLSCAN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULLSCAN, 0); }
	public SAMPLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAMPLE, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public STATS_STREAM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATS_STREAM, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PERCENT, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWS, 0); }
	public NORECOMPUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NORECOMPUTE, 0); }
	public INCREMENTAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCREMENTAL, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_statistics; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_statistics) {
			listener.enterCreate_statistics(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_statistics) {
			listener.exitCreate_statistics(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_statistics) {
			return visitor.visitCreate_statistics(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_statisticsContext extends ParserRuleContext {
	public UPDATE(): TerminalNode { return this.getToken(TSqlParser.UPDATE, 0); }
	public STATISTICS(): TerminalNode { return this.getToken(TSqlParser.STATISTICS, 0); }
	public full_table_name(): Full_table_nameContext {
		return this.getRuleContext(0, Full_table_nameContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USING, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALUES, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INDEX, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_update_statistics; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUpdate_statistics) {
			listener.enterUpdate_statistics(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUpdate_statistics) {
			listener.exitUpdate_statistics(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUpdate_statistics) {
			return visitor.visitUpdate_statistics(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_tableContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public column_def_table_constraints(): Column_def_table_constraintsContext {
		return this.getRuleContext(0, Column_def_table_constraintsContext);
	}
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCK, 0); }
	public simple_id(): Simple_idContext | undefined {
		return this.tryGetRuleContext(0, Simple_idContext);
	}
	public table_options(): Table_optionsContext[];
	public table_options(i: number): Table_optionsContext;
	public table_options(i?: number): Table_optionsContext | Table_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_optionsContext);
		} else {
			return this.getRuleContext(i, Table_optionsContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DEFAULT);
		} else {
			return this.getToken(TSqlParser.DEFAULT, i);
		}
	}
	public TEXTIMAGE_ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TEXTIMAGE_ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_table) {
			listener.enterCreate_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_table) {
			listener.exitCreate_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_table) {
			return visitor.visitCreate_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_optionsContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public index_option(): Index_optionContext[];
	public index_option(i: number): Index_optionContext;
	public index_option(i?: number): Index_optionContext | Index_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Index_optionContext);
		} else {
			return this.getRuleContext(i, Index_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_options) {
			listener.enterTable_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_options) {
			listener.exitTable_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_options) {
			return visitor.visitTable_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_viewContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(TSqlParser.VIEW, 0); }
	public simple_name(): Simple_nameContext {
		return this.getRuleContext(0, Simple_nameContext);
	}
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public select_statement(): Select_statementContext {
		return this.getRuleContext(0, Select_statementContext);
	}
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.WITH);
		} else {
			return this.getToken(TSqlParser.WITH, i);
		}
	}
	public view_attribute(): View_attributeContext[];
	public view_attribute(i: number): View_attributeContext;
	public view_attribute(i?: number): View_attributeContext | View_attributeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(View_attributeContext);
		} else {
			return this.getRuleContext(i, View_attributeContext);
		}
	}
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_view; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_view) {
			listener.enterCreate_view(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_view) {
			listener.exitCreate_view(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_view) {
			return visitor.visitCreate_view(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class View_attributeContext extends ParserRuleContext {
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public SCHEMABINDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMABINDING, 0); }
	public VIEW_METADATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VIEW_METADATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_view_attribute; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterView_attribute) {
			listener.enterView_attribute(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitView_attribute) {
			listener.exitView_attribute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitView_attribute) {
			return visitor.visitView_attribute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_tableContext extends ParserRuleContext {
	public _constraint: IdContext;
	public _fk: Column_name_listContext;
	public _pk: Column_name_listContext;
	public ALTER(): TerminalNode[];
	public ALTER(i: number): TerminalNode;
	public ALTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALTER);
		} else {
			return this.getToken(TSqlParser.ALTER, i);
		}
	}
	public TABLE(): TerminalNode[];
	public TABLE(i: number): TerminalNode;
	public TABLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TABLE);
		} else {
			return this.getToken(TSqlParser.TABLE, i);
		}
	}
	public table_name(): Table_nameContext[];
	public table_name(i: number): Table_nameContext;
	public table_name(i?: number): Table_nameContext | Table_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_nameContext);
		} else {
			return this.getRuleContext(i, Table_nameContext);
		}
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public LOCK_ESCALATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCK_ESCALATION, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADD, 0); }
	public column_def_table_constraint(): Column_def_table_constraintContext | undefined {
		return this.tryGetRuleContext(0, Column_def_table_constraintContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLUMN, 0); }
	public column_definition(): Column_definitionContext | undefined {
		return this.tryGetRuleContext(0, Column_definitionContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DROP, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONSTRAINT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REFERENCES, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIGGER, 0); }
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REBUILD, 0); }
	public table_options(): Table_optionsContext | undefined {
		return this.tryGetRuleContext(0, Table_optionsContext);
	}
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	public column_name_list(): Column_name_listContext[];
	public column_name_list(i: number): Column_name_listContext;
	public column_name_list(i?: number): Column_name_listContext | Column_name_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_name_listContext);
		} else {
			return this.getRuleContext(i, Column_name_listContext);
		}
	}
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_table) {
			listener.enterAlter_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_table) {
			listener.exitAlter_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_table) {
			return visitor.visitAlter_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_databaseContext extends ParserRuleContext {
	public _database: IdContext;
	public _new_name: IdContext;
	public _collation: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public DATABASE(): TerminalNode { return this.getToken(TSqlParser.DATABASE, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURRENT, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MODIFY, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLATE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public database_optionspec(): Database_optionspecContext | undefined {
		return this.tryGetRuleContext(0, Database_optionspecContext);
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public termination(): TerminationContext | undefined {
		return this.tryGetRuleContext(0, TerminationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_database; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_database) {
			listener.enterAlter_database(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_database) {
			listener.exitAlter_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_database) {
			return visitor.visitAlter_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Database_optionspecContext extends ParserRuleContext {
	public auto_option(): Auto_optionContext | undefined {
		return this.tryGetRuleContext(0, Auto_optionContext);
	}
	public change_tracking_option(): Change_tracking_optionContext | undefined {
		return this.tryGetRuleContext(0, Change_tracking_optionContext);
	}
	public containment_option(): Containment_optionContext | undefined {
		return this.tryGetRuleContext(0, Containment_optionContext);
	}
	public cursor_option(): Cursor_optionContext | undefined {
		return this.tryGetRuleContext(0, Cursor_optionContext);
	}
	public database_mirroring_option(): Database_mirroring_optionContext | undefined {
		return this.tryGetRuleContext(0, Database_mirroring_optionContext);
	}
	public date_correlation_optimization_option(): Date_correlation_optimization_optionContext | undefined {
		return this.tryGetRuleContext(0, Date_correlation_optimization_optionContext);
	}
	public db_encryption_option(): Db_encryption_optionContext | undefined {
		return this.tryGetRuleContext(0, Db_encryption_optionContext);
	}
	public db_state_option(): Db_state_optionContext | undefined {
		return this.tryGetRuleContext(0, Db_state_optionContext);
	}
	public db_update_option(): Db_update_optionContext | undefined {
		return this.tryGetRuleContext(0, Db_update_optionContext);
	}
	public db_user_access_option(): Db_user_access_optionContext | undefined {
		return this.tryGetRuleContext(0, Db_user_access_optionContext);
	}
	public delayed_durability_option(): Delayed_durability_optionContext | undefined {
		return this.tryGetRuleContext(0, Delayed_durability_optionContext);
	}
	public external_access_option(): External_access_optionContext | undefined {
		return this.tryGetRuleContext(0, External_access_optionContext);
	}
	public FILESTREAM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILESTREAM, 0); }
	public database_filestream_option(): Database_filestream_optionContext | undefined {
		return this.tryGetRuleContext(0, Database_filestream_optionContext);
	}
	public hadr_options(): Hadr_optionsContext | undefined {
		return this.tryGetRuleContext(0, Hadr_optionsContext);
	}
	public mixed_page_allocation_option(): Mixed_page_allocation_optionContext | undefined {
		return this.tryGetRuleContext(0, Mixed_page_allocation_optionContext);
	}
	public parameterization_option(): Parameterization_optionContext | undefined {
		return this.tryGetRuleContext(0, Parameterization_optionContext);
	}
	public recovery_option(): Recovery_optionContext | undefined {
		return this.tryGetRuleContext(0, Recovery_optionContext);
	}
	public service_broker_option(): Service_broker_optionContext | undefined {
		return this.tryGetRuleContext(0, Service_broker_optionContext);
	}
	public snapshot_option(): Snapshot_optionContext | undefined {
		return this.tryGetRuleContext(0, Snapshot_optionContext);
	}
	public sql_option(): Sql_optionContext | undefined {
		return this.tryGetRuleContext(0, Sql_optionContext);
	}
	public target_recovery_time_option(): Target_recovery_time_optionContext | undefined {
		return this.tryGetRuleContext(0, Target_recovery_time_optionContext);
	}
	public termination(): TerminationContext | undefined {
		return this.tryGetRuleContext(0, TerminationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_database_optionspec; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDatabase_optionspec) {
			listener.enterDatabase_optionspec(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDatabase_optionspec) {
			listener.exitDatabase_optionspec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDatabase_optionspec) {
			return visitor.visitDatabase_optionspec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Auto_optionContext extends ParserRuleContext {
	public AUTO_CLOSE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_CLOSE, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public AUTO_CREATE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public INCREMENTAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCREMENTAL, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public AUTO_SHRINK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_SHRINK, 0); }
	public AUTO_UPDATE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
	public AUTO_UPDATE_STATISTICS_ASYNC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_auto_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAuto_option) {
			listener.enterAuto_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAuto_option) {
			listener.exitAuto_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAuto_option) {
			return visitor.visitAuto_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Change_tracking_optionContext extends ParserRuleContext {
	public CHANGE_TRACKING(): TerminalNode { return this.getToken(TSqlParser.CHANGE_TRACKING, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public change_tracking_option_list(): Change_tracking_option_listContext[];
	public change_tracking_option_list(i: number): Change_tracking_option_listContext;
	public change_tracking_option_list(i?: number): Change_tracking_option_listContext | Change_tracking_option_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Change_tracking_option_listContext);
		} else {
			return this.getRuleContext(i, Change_tracking_option_listContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_change_tracking_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterChange_tracking_option) {
			listener.enterChange_tracking_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitChange_tracking_option) {
			listener.exitChange_tracking_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitChange_tracking_option) {
			return visitor.visitChange_tracking_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Change_tracking_option_listContext extends ParserRuleContext {
	public AUTO_CLEANUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_CLEANUP, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public CHANGE_RETENTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHANGE_RETENTION, 0); }
	public DAYS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DAYS, 0); }
	public HOURS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HOURS, 0); }
	public MINUTES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MINUTES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_change_tracking_option_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterChange_tracking_option_list) {
			listener.enterChange_tracking_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitChange_tracking_option_list) {
			listener.exitChange_tracking_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitChange_tracking_option_list) {
			return visitor.visitChange_tracking_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Containment_optionContext extends ParserRuleContext {
	public CONTAINMENT(): TerminalNode { return this.getToken(TSqlParser.CONTAINMENT, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTIAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_containment_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterContainment_option) {
			listener.enterContainment_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitContainment_option) {
			listener.exitContainment_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitContainment_option) {
			return visitor.visitContainment_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_optionContext extends ParserRuleContext {
	public CURSOR_CLOSE_ON_COMMIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public CURSOR_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR_DEFAULT, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_cursor_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCursor_option) {
			listener.enterCursor_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCursor_option) {
			listener.exitCursor_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCursor_option) {
			return visitor.visitCursor_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_endpointContext extends ParserRuleContext {
	public _endpointname: IdContext;
	public _login: IdContext;
	public _state: Token;
	public _port: Token;
	public _cert_name: IdContext;
	public ALTER(): TerminalNode { return this.getToken(TSqlParser.ALTER, 0); }
	public ENDPOINT(): TerminalNode { return this.getToken(TSqlParser.ENDPOINT, 0); }
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public TCP(): TerminalNode { return this.getToken(TSqlParser.TCP, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public LISTENER_PORT(): TerminalNode { return this.getToken(TSqlParser.LISTENER_PORT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RR_BRACKET);
		} else {
			return this.getToken(TSqlParser.RR_BRACKET, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public TSQL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TSQL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public SERVICE_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVICE_BROKER, 0); }
	public AUTHENTICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHENTICATION, 0); }
	public DATABASE_MIRRORING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE_MIRRORING, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROLE, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public LISTENER_IP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LISTENER_IP, 0); }
	public WITNESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITNESS, 0); }
	public PARTNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTNER, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALL);
		} else {
			return this.getToken(TSqlParser.ALL, i);
		}
	}
	public IPV4_ADDR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IPV4_ADDR, 0); }
	public IPV6_ADDR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IPV6_ADDR, 0); }
	public WINDOWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WINDOWS, 0); }
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public MESSAGE_FORWARDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
	public MESSAGE_FORWARD_SIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
	public STARTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STARTED, 0); }
	public STOPPED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STOPPED, 0); }
	public DISABLED(): TerminalNode[];
	public DISABLED(i: number): TerminalNode;
	public DISABLED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DISABLED);
		} else {
			return this.getToken(TSqlParser.DISABLED, i);
		}
	}
	public SUPPORTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUPPORTED, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REQUIRED, 0); }
	public ENABLED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLED, 0); }
	public NTLM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NTLM, 0); }
	public KERBEROS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KERBEROS, 0); }
	public NEGOTIATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEGOTIATE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALGORITHM, 0); }
	public AES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES, 0); }
	public RC4(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_alter_endpoint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlter_endpoint) {
			listener.enterAlter_endpoint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlter_endpoint) {
			listener.exitAlter_endpoint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlter_endpoint) {
			return visitor.visitAlter_endpoint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Database_mirroring_optionContext extends ParserRuleContext {
	public mirroring_set_option(): Mirroring_set_optionContext {
		return this.getRuleContext(0, Mirroring_set_optionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_database_mirroring_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDatabase_mirroring_option) {
			listener.enterDatabase_mirroring_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDatabase_mirroring_option) {
			listener.exitDatabase_mirroring_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDatabase_mirroring_option) {
			return visitor.visitDatabase_mirroring_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mirroring_set_optionContext extends ParserRuleContext {
	public mirroring_partner(): Mirroring_partnerContext | undefined {
		return this.tryGetRuleContext(0, Mirroring_partnerContext);
	}
	public partner_option(): Partner_optionContext | undefined {
		return this.tryGetRuleContext(0, Partner_optionContext);
	}
	public mirroring_witness(): Mirroring_witnessContext | undefined {
		return this.tryGetRuleContext(0, Mirroring_witnessContext);
	}
	public witness_option(): Witness_optionContext | undefined {
		return this.tryGetRuleContext(0, Witness_optionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_mirroring_set_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMirroring_set_option) {
			listener.enterMirroring_set_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMirroring_set_option) {
			listener.exitMirroring_set_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMirroring_set_option) {
			return visitor.visitMirroring_set_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mirroring_partnerContext extends ParserRuleContext {
	public PARTNER(): TerminalNode { return this.getToken(TSqlParser.PARTNER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_mirroring_partner; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMirroring_partner) {
			listener.enterMirroring_partner(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMirroring_partner) {
			listener.exitMirroring_partner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMirroring_partner) {
			return visitor.visitMirroring_partner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mirroring_witnessContext extends ParserRuleContext {
	public WITNESS(): TerminalNode { return this.getToken(TSqlParser.WITNESS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_mirroring_witness; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMirroring_witness) {
			listener.enterMirroring_witness(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMirroring_witness) {
			listener.exitMirroring_witness(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMirroring_witness) {
			return visitor.visitMirroring_witness(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Witness_partner_equalContext extends ParserRuleContext {
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_witness_partner_equal; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWitness_partner_equal) {
			listener.enterWitness_partner_equal(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWitness_partner_equal) {
			listener.exitWitness_partner_equal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWitness_partner_equal) {
			return visitor.visitWitness_partner_equal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Partner_optionContext extends ParserRuleContext {
	public witness_partner_equal(): Witness_partner_equalContext | undefined {
		return this.tryGetRuleContext(0, Witness_partner_equalContext);
	}
	public partner_server(): Partner_serverContext | undefined {
		return this.tryGetRuleContext(0, Partner_serverContext);
	}
	public FAILOVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILOVER, 0); }
	public FORCE_SERVICE_ALLOW_DATA_LOSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESUME, 0); }
	public SAFETY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAFETY, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULL, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUSPEND, 0); }
	public TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIMEOUT, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_partner_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPartner_option) {
			listener.enterPartner_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPartner_option) {
			listener.exitPartner_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPartner_option) {
			return visitor.visitPartner_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Witness_optionContext extends ParserRuleContext {
	public witness_partner_equal(): Witness_partner_equalContext | undefined {
		return this.tryGetRuleContext(0, Witness_partner_equalContext);
	}
	public witness_server(): Witness_serverContext | undefined {
		return this.tryGetRuleContext(0, Witness_serverContext);
	}
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_witness_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWitness_option) {
			listener.enterWitness_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWitness_option) {
			listener.exitWitness_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWitness_option) {
			return visitor.visitWitness_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Witness_serverContext extends ParserRuleContext {
	public partner_server(): Partner_serverContext {
		return this.getRuleContext(0, Partner_serverContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_witness_server; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWitness_server) {
			listener.enterWitness_server(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWitness_server) {
			listener.exitWitness_server(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWitness_server) {
			return visitor.visitWitness_server(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Partner_serverContext extends ParserRuleContext {
	public partner_server_tcp_prefix(): Partner_server_tcp_prefixContext {
		return this.getRuleContext(0, Partner_server_tcp_prefixContext);
	}
	public host(): HostContext {
		return this.getRuleContext(0, HostContext);
	}
	public mirroring_host_port_seperator(): Mirroring_host_port_seperatorContext {
		return this.getRuleContext(0, Mirroring_host_port_seperatorContext);
	}
	public port_number(): Port_numberContext {
		return this.getRuleContext(0, Port_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_partner_server; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPartner_server) {
			listener.enterPartner_server(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPartner_server) {
			listener.exitPartner_server(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPartner_server) {
			return visitor.visitPartner_server(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mirroring_host_port_seperatorContext extends ParserRuleContext {
	public COLON(): TerminalNode { return this.getToken(TSqlParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_mirroring_host_port_seperator; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMirroring_host_port_seperator) {
			listener.enterMirroring_host_port_seperator(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMirroring_host_port_seperator) {
			listener.exitMirroring_host_port_seperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMirroring_host_port_seperator) {
			return visitor.visitMirroring_host_port_seperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Partner_server_tcp_prefixContext extends ParserRuleContext {
	public TCP(): TerminalNode { return this.getToken(TSqlParser.TCP, 0); }
	public COLON(): TerminalNode { return this.getToken(TSqlParser.COLON, 0); }
	public DOUBLE_FORWARD_SLASH(): TerminalNode { return this.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_partner_server_tcp_prefix; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPartner_server_tcp_prefix) {
			listener.enterPartner_server_tcp_prefix(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPartner_server_tcp_prefix) {
			listener.exitPartner_server_tcp_prefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPartner_server_tcp_prefix) {
			return visitor.visitPartner_server_tcp_prefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Port_numberContext extends ParserRuleContext {
	public _port: Token;
	public DECIMAL(): TerminalNode { return this.getToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_port_number; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPort_number) {
			listener.enterPort_number(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPort_number) {
			listener.exitPort_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPort_number) {
			return visitor.visitPort_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HostContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOT, 0); }
	public host(): HostContext | undefined {
		return this.tryGetRuleContext(0, HostContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_host; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterHost) {
			listener.enterHost(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitHost) {
			listener.exitHost(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitHost) {
			return visitor.visitHost(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_correlation_optimization_optionContext extends ParserRuleContext {
	public DATE_CORRELATION_OPTIMIZATION(): TerminalNode { return this.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
	public on_off(): On_offContext {
		return this.getRuleContext(0, On_offContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_date_correlation_optimization_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDate_correlation_optimization_option) {
			listener.enterDate_correlation_optimization_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDate_correlation_optimization_option) {
			listener.exitDate_correlation_optimization_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDate_correlation_optimization_option) {
			return visitor.visitDate_correlation_optimization_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Db_encryption_optionContext extends ParserRuleContext {
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public on_off(): On_offContext {
		return this.getRuleContext(0, On_offContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_db_encryption_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDb_encryption_option) {
			listener.enterDb_encryption_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDb_encryption_option) {
			listener.exitDb_encryption_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDb_encryption_option) {
			return visitor.visitDb_encryption_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Db_state_optionContext extends ParserRuleContext {
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFFLINE, 0); }
	public EMERGENCY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EMERGENCY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_db_state_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDb_state_option) {
			listener.enterDb_state_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDb_state_option) {
			listener.exitDb_state_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDb_state_option) {
			return visitor.visitDb_state_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Db_update_optionContext extends ParserRuleContext {
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY, 0); }
	public READ_WRITE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_WRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_db_update_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDb_update_option) {
			listener.enterDb_update_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDb_update_option) {
			listener.exitDb_update_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDb_update_option) {
			return visitor.visitDb_update_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Db_user_access_optionContext extends ParserRuleContext {
	public SINGLE_USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SINGLE_USER, 0); }
	public RESTRICTED_USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESTRICTED_USER, 0); }
	public MULTI_USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MULTI_USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_db_user_access_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDb_user_access_option) {
			listener.enterDb_user_access_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDb_user_access_option) {
			listener.exitDb_user_access_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDb_user_access_option) {
			return visitor.visitDb_user_access_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delayed_durability_optionContext extends ParserRuleContext {
	public DELAYED_DURABILITY(): TerminalNode { return this.getToken(TSqlParser.DELAYED_DURABILITY, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public DISABLED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLED, 0); }
	public ALLOWED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOWED, 0); }
	public FORCED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_delayed_durability_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDelayed_durability_option) {
			listener.enterDelayed_durability_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDelayed_durability_option) {
			listener.exitDelayed_durability_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDelayed_durability_option) {
			return visitor.visitDelayed_durability_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_access_optionContext extends ParserRuleContext {
	public DB_CHAINING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DB_CHAINING, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public TRUSTWORTHY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRUSTWORTHY, 0); }
	public DEFAULT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public DEFAULT_FULLTEXT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
	public NESTED_TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NESTED_TRIGGERS, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public TRANSFORM_NOISE_WORDS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
	public TWO_DIGIT_YEAR_CUTOFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_external_access_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExternal_access_option) {
			listener.enterExternal_access_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExternal_access_option) {
			listener.exitExternal_access_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExternal_access_option) {
			return visitor.visitExternal_access_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Hadr_optionsContext extends ParserRuleContext {
	public _availability_group_name: IdContext;
	public HADR(): TerminalNode { return this.getToken(TSqlParser.HADR, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUSPEND, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESUME, 0); }
	public AVAILABILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AVAILABILITY, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUP, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_hadr_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterHadr_options) {
			listener.enterHadr_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitHadr_options) {
			listener.exitHadr_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitHadr_options) {
			return visitor.visitHadr_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mixed_page_allocation_optionContext extends ParserRuleContext {
	public MIXED_PAGE_ALLOCATION(): TerminalNode { return this.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_mixed_page_allocation_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMixed_page_allocation_option) {
			listener.enterMixed_page_allocation_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMixed_page_allocation_option) {
			listener.exitMixed_page_allocation_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMixed_page_allocation_option) {
			return visitor.visitMixed_page_allocation_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Parameterization_optionContext extends ParserRuleContext {
	public PARAMETERIZATION(): TerminalNode { return this.getToken(TSqlParser.PARAMETERIZATION, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIMPLE, 0); }
	public FORCED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_parameterization_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterParameterization_option) {
			listener.enterParameterization_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitParameterization_option) {
			listener.exitParameterization_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitParameterization_option) {
			return visitor.visitParameterization_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Recovery_optionContext extends ParserRuleContext {
	public RECOVERY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECOVERY, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULL, 0); }
	public BULK_LOGGED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BULK_LOGGED, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIMPLE, 0); }
	public TORN_PAGE_DETECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public PAGE_VERIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PAGE_VERIFY, 0); }
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECKSUM, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_recovery_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRecovery_option) {
			listener.enterRecovery_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRecovery_option) {
			listener.exitRecovery_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRecovery_option) {
			return visitor.visitRecovery_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Service_broker_optionContext extends ParserRuleContext {
	public ENABLE_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE_BROKER, 0); }
	public DISABLE_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE_BROKER, 0); }
	public NEW_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEW_BROKER, 0); }
	public ERROR_BROKER_CONVERSATIONS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
	public HONOR_BROKER_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_service_broker_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterService_broker_option) {
			listener.enterService_broker_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitService_broker_option) {
			listener.exitService_broker_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitService_broker_option) {
			return visitor.visitService_broker_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Snapshot_optionContext extends ParserRuleContext {
	public _MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT: Token;
	public ALLOW_SNAPSHOT_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public READ_COMMITTED_SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_snapshot_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSnapshot_option) {
			listener.enterSnapshot_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSnapshot_option) {
			listener.exitSnapshot_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSnapshot_option) {
			return visitor.visitSnapshot_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql_optionContext extends ParserRuleContext {
	public ANSI_NULL_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public ANSI_NULLS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_NULLS, 0); }
	public ANSI_PADDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_PADDING, 0); }
	public ANSI_WARNINGS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_WARNINGS, 0); }
	public ARITHABORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ARITHABORT, 0); }
	public COMPATIBILITY_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public CONCAT_NULL_YIELDS_NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
	public NUMERIC_ROUNDABORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
	public QUOTED_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
	public RECURSIVE_TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_sql_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSql_option) {
			listener.enterSql_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSql_option) {
			listener.exitSql_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSql_option) {
			return visitor.visitSql_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Target_recovery_time_optionContext extends ParserRuleContext {
	public TARGET_RECOVERY_TIME(): TerminalNode { return this.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public DECIMAL(): TerminalNode { return this.getToken(TSqlParser.DECIMAL, 0); }
	public SECONDS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDS, 0); }
	public MINUTES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MINUTES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_target_recovery_time_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTarget_recovery_time_option) {
			listener.enterTarget_recovery_time_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTarget_recovery_time_option) {
			listener.exitTarget_recovery_time_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTarget_recovery_time_option) {
			return visitor.visitTarget_recovery_time_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TerminationContext extends ParserRuleContext {
	public _seconds: Token;
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROLLBACK, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFTER, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IMMEDIATE, 0); }
	public NO_WAIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO_WAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_termination; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTermination) {
			listener.enterTermination(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTermination) {
			listener.exitTermination(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTermination) {
			return visitor.visitTermination(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_indexContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(TSqlParser.INDEX, 0); }
	public drop_relational_or_xml_or_spatial_index(): Drop_relational_or_xml_or_spatial_indexContext[];
	public drop_relational_or_xml_or_spatial_index(i: number): Drop_relational_or_xml_or_spatial_indexContext;
	public drop_relational_or_xml_or_spatial_index(i?: number): Drop_relational_or_xml_or_spatial_indexContext | Drop_relational_or_xml_or_spatial_indexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext);
		} else {
			return this.getRuleContext(i, Drop_relational_or_xml_or_spatial_indexContext);
		}
	}
	public drop_backward_compatible_index(): Drop_backward_compatible_indexContext[];
	public drop_backward_compatible_index(i: number): Drop_backward_compatible_indexContext;
	public drop_backward_compatible_index(i?: number): Drop_backward_compatible_indexContext | Drop_backward_compatible_indexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Drop_backward_compatible_indexContext);
		} else {
			return this.getRuleContext(i, Drop_backward_compatible_indexContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_index; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_index) {
			listener.enterDrop_index(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_index) {
			listener.exitDrop_index(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_index) {
			return visitor.visitDrop_index(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
	public _index_name: IdContext;
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public full_table_name(): Full_table_nameContext {
		return this.getRuleContext(0, Full_table_nameContext);
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_relational_or_xml_or_spatial_index; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_relational_or_xml_or_spatial_index) {
			listener.enterDrop_relational_or_xml_or_spatial_index(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_relational_or_xml_or_spatial_index) {
			listener.exitDrop_relational_or_xml_or_spatial_index(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_relational_or_xml_or_spatial_index) {
			return visitor.visitDrop_relational_or_xml_or_spatial_index(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_backward_compatible_indexContext extends ParserRuleContext {
	public _owner_name: IdContext;
	public _table_or_view_name: IdContext;
	public _index_name: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_backward_compatible_index; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_backward_compatible_index) {
			listener.enterDrop_backward_compatible_index(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_backward_compatible_index) {
			listener.exitDrop_backward_compatible_index(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_backward_compatible_index) {
			return visitor.visitDrop_backward_compatible_index(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_procedureContext extends ParserRuleContext {
	public _proc: Token;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public func_proc_name(): Func_proc_nameContext[];
	public func_proc_name(i: number): Func_proc_nameContext;
	public func_proc_name(i?: number): Func_proc_nameContext | Func_proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_proc_nameContext);
		} else {
			return this.getRuleContext(i, Func_proc_nameContext);
		}
	}
	public PROC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROC, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROCEDURE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_procedure; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_procedure) {
			listener.enterDrop_procedure(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_procedure) {
			listener.exitDrop_procedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_procedure) {
			return visitor.visitDrop_procedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_triggerContext extends ParserRuleContext {
	public drop_dml_trigger(): Drop_dml_triggerContext | undefined {
		return this.tryGetRuleContext(0, Drop_dml_triggerContext);
	}
	public drop_ddl_trigger(): Drop_ddl_triggerContext | undefined {
		return this.tryGetRuleContext(0, Drop_ddl_triggerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_trigger) {
			listener.enterDrop_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_trigger) {
			listener.exitDrop_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_trigger) {
			return visitor.visitDrop_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_dml_triggerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(TSqlParser.TRIGGER, 0); }
	public simple_name(): Simple_nameContext[];
	public simple_name(i: number): Simple_nameContext;
	public simple_name(i?: number): Simple_nameContext | Simple_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Simple_nameContext);
		} else {
			return this.getRuleContext(i, Simple_nameContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_dml_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_dml_trigger) {
			listener.enterDrop_dml_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_dml_trigger) {
			listener.exitDrop_dml_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_dml_trigger) {
			return visitor.visitDrop_dml_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_ddl_triggerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(TSqlParser.TRIGGER, 0); }
	public simple_name(): Simple_nameContext[];
	public simple_name(i: number): Simple_nameContext;
	public simple_name(i?: number): Simple_nameContext | Simple_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Simple_nameContext);
		} else {
			return this.getRuleContext(i, Simple_nameContext);
		}
	}
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_ddl_trigger; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_ddl_trigger) {
			listener.enterDrop_ddl_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_ddl_trigger) {
			listener.exitDrop_ddl_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_ddl_trigger) {
			return visitor.visitDrop_ddl_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_functionContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(TSqlParser.FUNCTION, 0); }
	public func_proc_name(): Func_proc_nameContext[];
	public func_proc_name(i: number): Func_proc_nameContext;
	public func_proc_name(i?: number): Func_proc_nameContext | Func_proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_proc_nameContext);
		} else {
			return this.getRuleContext(i, Func_proc_nameContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_function) {
			listener.enterDrop_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_function) {
			listener.exitDrop_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_function) {
			return visitor.visitDrop_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_statisticsContext extends ParserRuleContext {
	public _name: IdContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public STATISTICS(): TerminalNode { return this.getToken(TSqlParser.STATISTICS, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public table_name(): Table_nameContext[];
	public table_name(i: number): Table_nameContext;
	public table_name(i?: number): Table_nameContext | Table_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_nameContext);
		} else {
			return this.getRuleContext(i, Table_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_statistics; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_statistics) {
			listener.enterDrop_statistics(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_statistics) {
			listener.exitDrop_statistics(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_statistics) {
			return visitor.visitDrop_statistics(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_tableContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_table) {
			listener.enterDrop_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_table) {
			listener.exitDrop_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_table) {
			return visitor.visitDrop_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_viewContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(TSqlParser.VIEW, 0); }
	public simple_name(): Simple_nameContext[];
	public simple_name(i: number): Simple_nameContext;
	public simple_name(i?: number): Simple_nameContext | Simple_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Simple_nameContext);
		} else {
			return this.getRuleContext(i, Simple_nameContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_view; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_view) {
			listener.enterDrop_view(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_view) {
			listener.exitDrop_view(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_view) {
			return visitor.visitDrop_view(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_typeContext extends ParserRuleContext {
	public _name: Simple_nameContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public TYPE(): TerminalNode { return this.getToken(TSqlParser.TYPE, 0); }
	public simple_name(): Simple_nameContext {
		return this.getRuleContext(0, Simple_nameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public default_value(): Default_valueContext | undefined {
		return this.tryGetRuleContext(0, Default_valueContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TABLE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public column_def_table_constraints(): Column_def_table_constraintsContext | undefined {
		return this.tryGetRuleContext(0, Column_def_table_constraintsContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_type; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_type) {
			listener.enterCreate_type(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_type) {
			listener.exitCreate_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_type) {
			return visitor.visitCreate_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_typeContext extends ParserRuleContext {
	public _name: Simple_nameContext;
	public DROP(): TerminalNode { return this.getToken(TSqlParser.DROP, 0); }
	public TYPE(): TerminalNode { return this.getToken(TSqlParser.TYPE, 0); }
	public simple_name(): Simple_nameContext {
		return this.getRuleContext(0, Simple_nameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_drop_type; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDrop_type) {
			listener.enterDrop_type(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDrop_type) {
			listener.exitDrop_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDrop_type) {
			return visitor.visitDrop_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rowset_function_limitedContext extends ParserRuleContext {
	public openquery(): OpenqueryContext | undefined {
		return this.tryGetRuleContext(0, OpenqueryContext);
	}
	public opendatasource(): OpendatasourceContext | undefined {
		return this.tryGetRuleContext(0, OpendatasourceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_rowset_function_limited; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRowset_function_limited) {
			listener.enterRowset_function_limited(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRowset_function_limited) {
			listener.exitRowset_function_limited(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRowset_function_limited) {
			return visitor.visitRowset_function_limited(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenqueryContext extends ParserRuleContext {
	public _linked_server: IdContext;
	public _query: Token;
	public OPENQUERY(): TerminalNode { return this.getToken(TSqlParser.OPENQUERY, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_openquery; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOpenquery) {
			listener.enterOpenquery(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOpenquery) {
			listener.exitOpenquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOpenquery) {
			return visitor.visitOpenquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpendatasourceContext extends ParserRuleContext {
	public _provider: Token;
	public _init: Token;
	public _database: IdContext;
	public _scheme: IdContext;
	public _table: IdContext;
	public OPENDATASOURCE(): TerminalNode { return this.getToken(TSqlParser.OPENDATASOURCE, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_opendatasource; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOpendatasource) {
			listener.enterOpendatasource(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOpendatasource) {
			listener.exitOpendatasource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOpendatasource) {
			return visitor.visitOpendatasource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_statementContext extends ParserRuleContext {
	public _xml_namespace_uri: Token;
	public DECLARE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECLARE, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public table_type_definition(): Table_type_definitionContext | undefined {
		return this.tryGetRuleContext(0, Table_type_definitionContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public declare_local(): Declare_localContext[];
	public declare_local(i: number): Declare_localContext;
	public declare_local(i?: number): Declare_localContext | Declare_localContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declare_localContext);
		} else {
			return this.getRuleContext(i, Declare_localContext);
		}
	}
	public xml_type_definition(): Xml_type_definitionContext | undefined {
		return this.tryGetRuleContext(0, Xml_type_definitionContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XMLNAMESPACES, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_declare_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDeclare_statement) {
			listener.enterDeclare_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDeclare_statement) {
			listener.exitDeclare_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDeclare_statement) {
			return visitor.visitDeclare_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_statementContext extends ParserRuleContext {
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CLOSE, 0); }
	public cursor_name(): Cursor_nameContext | undefined {
		return this.tryGetRuleContext(0, Cursor_nameContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEALLOCATE, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR, 0); }
	public declare_cursor(): Declare_cursorContext | undefined {
		return this.tryGetRuleContext(0, Declare_cursorContext);
	}
	public fetch_cursor(): Fetch_cursorContext | undefined {
		return this.tryGetRuleContext(0, Fetch_cursorContext);
	}
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_cursor_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCursor_statement) {
			listener.enterCursor_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCursor_statement) {
			listener.exitCursor_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCursor_statement) {
			return visitor.visitCursor_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Backup_databaseContext extends ParserRuleContext {
	public _database_name: IdContext;
	public _file_or_filegroup: Token;
	public _logical_device_name: IdContext;
	public _backup_set_name: IdContext;
	public _medianame: Token;
	public _stats_percent: Token;
	public _encryptor_name: IdContext;
	public BACKUP(): TerminalNode { return this.getToken(TSqlParser.BACKUP, 0); }
	public DATABASE(): TerminalNode { return this.getToken(TSqlParser.DATABASE, 0); }
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public READ_WRITE_FILEGROUPS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public FILE(): TerminalNode[];
	public FILE(i: number): TerminalNode;
	public FILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILE);
		} else {
			return this.getToken(TSqlParser.FILE, i);
		}
	}
	public FILEGROUP(): TerminalNode[];
	public FILEGROUP(i: number): TerminalNode;
	public FILEGROUP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILEGROUP);
		} else {
			return this.getToken(TSqlParser.FILEGROUP, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public DISK(): TerminalNode[];
	public DISK(i: number): TerminalNode;
	public DISK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DISK);
		} else {
			return this.getToken(TSqlParser.DISK, i);
		}
	}
	public TAPE(): TerminalNode[];
	public TAPE(i: number): TerminalNode;
	public TAPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TAPE);
		} else {
			return this.getToken(TSqlParser.TAPE, i);
		}
	}
	public URL(): TerminalNode[];
	public URL(i: number): TerminalNode;
	public URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.URL);
		} else {
			return this.getToken(TSqlParser.URL, i);
		}
	}
	public MIRROR(): TerminalNode[];
	public MIRROR(i: number): TerminalNode;
	public MIRROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MIRROR);
		} else {
			return this.getToken(TSqlParser.MIRROR, i);
		}
	}
	public DIFFERENTIAL(): TerminalNode[];
	public DIFFERENTIAL(i: number): TerminalNode;
	public DIFFERENTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DIFFERENTIAL);
		} else {
			return this.getToken(TSqlParser.DIFFERENTIAL, i);
		}
	}
	public COPY_ONLY(): TerminalNode[];
	public COPY_ONLY(i: number): TerminalNode;
	public COPY_ONLY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COPY_ONLY);
		} else {
			return this.getToken(TSqlParser.COPY_ONLY, i);
		}
	}
	public DESCRIPTION(): TerminalNode[];
	public DESCRIPTION(i: number): TerminalNode;
	public DESCRIPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DESCRIPTION);
		} else {
			return this.getToken(TSqlParser.DESCRIPTION, i);
		}
	}
	public NAME(): TerminalNode[];
	public NAME(i: number): TerminalNode;
	public NAME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NAME);
		} else {
			return this.getToken(TSqlParser.NAME, i);
		}
	}
	public CREDENTIAL(): TerminalNode[];
	public CREDENTIAL(i: number): TerminalNode;
	public CREDENTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CREDENTIAL);
		} else {
			return this.getToken(TSqlParser.CREDENTIAL, i);
		}
	}
	public FILE_SNAPSHOT(): TerminalNode[];
	public FILE_SNAPSHOT(i: number): TerminalNode;
	public FILE_SNAPSHOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILE_SNAPSHOT);
		} else {
			return this.getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
	}
	public MEDIADESCRIPTION(): TerminalNode[];
	public MEDIADESCRIPTION(i: number): TerminalNode;
	public MEDIADESCRIPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MEDIADESCRIPTION);
		} else {
			return this.getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
	}
	public MEDIANAME(): TerminalNode[];
	public MEDIANAME(i: number): TerminalNode;
	public MEDIANAME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MEDIANAME);
		} else {
			return this.getToken(TSqlParser.MEDIANAME, i);
		}
	}
	public BLOCKSIZE(): TerminalNode[];
	public BLOCKSIZE(i: number): TerminalNode;
	public BLOCKSIZE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BLOCKSIZE);
		} else {
			return this.getToken(TSqlParser.BLOCKSIZE, i);
		}
	}
	public BUFFERCOUNT(): TerminalNode[];
	public BUFFERCOUNT(i: number): TerminalNode;
	public BUFFERCOUNT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BUFFERCOUNT);
		} else {
			return this.getToken(TSqlParser.BUFFERCOUNT, i);
		}
	}
	public MAXTRANSFER(): TerminalNode[];
	public MAXTRANSFER(i: number): TerminalNode;
	public MAXTRANSFER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAXTRANSFER);
		} else {
			return this.getToken(TSqlParser.MAXTRANSFER, i);
		}
	}
	public RESTART(): TerminalNode[];
	public RESTART(i: number): TerminalNode;
	public RESTART(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RESTART);
		} else {
			return this.getToken(TSqlParser.RESTART, i);
		}
	}
	public STATS(): TerminalNode[];
	public STATS(i: number): TerminalNode;
	public STATS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STATS);
		} else {
			return this.getToken(TSqlParser.STATS, i);
		}
	}
	public ENCRYPTION(): TerminalNode[];
	public ENCRYPTION(i: number): TerminalNode;
	public ENCRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ENCRYPTION);
		} else {
			return this.getToken(TSqlParser.ENCRYPTION, i);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALGORITHM);
		} else {
			return this.getToken(TSqlParser.ALGORITHM, i);
		}
	}
	public SERVER(): TerminalNode[];
	public SERVER(i: number): TerminalNode;
	public SERVER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SERVER);
		} else {
			return this.getToken(TSqlParser.SERVER, i);
		}
	}
	public CERTIFICATE(): TerminalNode[];
	public CERTIFICATE(i: number): TerminalNode;
	public CERTIFICATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CERTIFICATE);
		} else {
			return this.getToken(TSqlParser.CERTIFICATE, i);
		}
	}
	public COMPRESSION(): TerminalNode[];
	public COMPRESSION(i: number): TerminalNode;
	public COMPRESSION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMPRESSION);
		} else {
			return this.getToken(TSqlParser.COMPRESSION, i);
		}
	}
	public NO_COMPRESSION(): TerminalNode[];
	public NO_COMPRESSION(i: number): TerminalNode;
	public NO_COMPRESSION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO_COMPRESSION);
		} else {
			return this.getToken(TSqlParser.NO_COMPRESSION, i);
		}
	}
	public NOINIT(): TerminalNode[];
	public NOINIT(i: number): TerminalNode;
	public NOINIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOINIT);
		} else {
			return this.getToken(TSqlParser.NOINIT, i);
		}
	}
	public INIT(): TerminalNode[];
	public INIT(i: number): TerminalNode;
	public INIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.INIT);
		} else {
			return this.getToken(TSqlParser.INIT, i);
		}
	}
	public NOSKIP(): TerminalNode[];
	public NOSKIP(i: number): TerminalNode;
	public NOSKIP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOSKIP);
		} else {
			return this.getToken(TSqlParser.NOSKIP, i);
		}
	}
	public SKIP_KEYWORD(): TerminalNode[];
	public SKIP_KEYWORD(i: number): TerminalNode;
	public SKIP_KEYWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SKIP_KEYWORD);
		} else {
			return this.getToken(TSqlParser.SKIP_KEYWORD, i);
		}
	}
	public NOFORMAT(): TerminalNode[];
	public NOFORMAT(i: number): TerminalNode;
	public NOFORMAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOFORMAT);
		} else {
			return this.getToken(TSqlParser.NOFORMAT, i);
		}
	}
	public FORMAT(): TerminalNode[];
	public FORMAT(i: number): TerminalNode;
	public FORMAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FORMAT);
		} else {
			return this.getToken(TSqlParser.FORMAT, i);
		}
	}
	public NO_CHECKSUM(): TerminalNode[];
	public NO_CHECKSUM(i: number): TerminalNode;
	public NO_CHECKSUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO_CHECKSUM);
		} else {
			return this.getToken(TSqlParser.NO_CHECKSUM, i);
		}
	}
	public CHECKSUM(): TerminalNode[];
	public CHECKSUM(i: number): TerminalNode;
	public CHECKSUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CHECKSUM);
		} else {
			return this.getToken(TSqlParser.CHECKSUM, i);
		}
	}
	public STOP_ON_ERROR(): TerminalNode[];
	public STOP_ON_ERROR(i: number): TerminalNode;
	public STOP_ON_ERROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STOP_ON_ERROR);
		} else {
			return this.getToken(TSqlParser.STOP_ON_ERROR, i);
		}
	}
	public CONTINUE_AFTER_ERROR(): TerminalNode[];
	public CONTINUE_AFTER_ERROR(i: number): TerminalNode;
	public CONTINUE_AFTER_ERROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CONTINUE_AFTER_ERROR);
		} else {
			return this.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
	}
	public REWIND(): TerminalNode[];
	public REWIND(i: number): TerminalNode;
	public REWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REWIND);
		} else {
			return this.getToken(TSqlParser.REWIND, i);
		}
	}
	public NOREWIND(): TerminalNode[];
	public NOREWIND(i: number): TerminalNode;
	public NOREWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOREWIND);
		} else {
			return this.getToken(TSqlParser.NOREWIND, i);
		}
	}
	public LOAD(): TerminalNode[];
	public LOAD(i: number): TerminalNode;
	public LOAD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOAD);
		} else {
			return this.getToken(TSqlParser.LOAD, i);
		}
	}
	public NOUNLOAD(): TerminalNode[];
	public NOUNLOAD(i: number): TerminalNode;
	public NOUNLOAD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOUNLOAD);
		} else {
			return this.getToken(TSqlParser.NOUNLOAD, i);
		}
	}
	public AES_128(): TerminalNode[];
	public AES_128(i: number): TerminalNode;
	public AES_128(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AES_128);
		} else {
			return this.getToken(TSqlParser.AES_128, i);
		}
	}
	public AES_192(): TerminalNode[];
	public AES_192(i: number): TerminalNode;
	public AES_192(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AES_192);
		} else {
			return this.getToken(TSqlParser.AES_192, i);
		}
	}
	public AES_256(): TerminalNode[];
	public AES_256(i: number): TerminalNode;
	public AES_256(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AES_256);
		} else {
			return this.getToken(TSqlParser.AES_256, i);
		}
	}
	public TRIPLE_DES_3KEY(): TerminalNode[];
	public TRIPLE_DES_3KEY(i: number): TerminalNode;
	public TRIPLE_DES_3KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TRIPLE_DES_3KEY);
		} else {
			return this.getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
	}
	public EXPIREDATE(): TerminalNode[];
	public EXPIREDATE(i: number): TerminalNode;
	public EXPIREDATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EXPIREDATE);
		} else {
			return this.getToken(TSqlParser.EXPIREDATE, i);
		}
	}
	public RETAINDAYS(): TerminalNode[];
	public RETAINDAYS(i: number): TerminalNode;
	public RETAINDAYS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RETAINDAYS);
		} else {
			return this.getToken(TSqlParser.RETAINDAYS, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public ASYMMETRIC(): TerminalNode[];
	public ASYMMETRIC(i: number): TerminalNode;
	public ASYMMETRIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ASYMMETRIC);
		} else {
			return this.getToken(TSqlParser.ASYMMETRIC, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_backup_database; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBackup_database) {
			listener.enterBackup_database(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBackup_database) {
			listener.exitBackup_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBackup_database) {
			return visitor.visitBackup_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Backup_logContext extends ParserRuleContext {
	public _database_name: IdContext;
	public _logical_device_name: IdContext;
	public _backup_set_name: IdContext;
	public _medianame: Token;
	public _stats_percent: Token;
	public _undo_file_name: Token;
	public _encryptor_name: IdContext;
	public BACKUP(): TerminalNode { return this.getToken(TSqlParser.BACKUP, 0); }
	public LOG(): TerminalNode { return this.getToken(TSqlParser.LOG, 0); }
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TO);
		} else {
			return this.getToken(TSqlParser.TO, i);
		}
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public DISK(): TerminalNode[];
	public DISK(i: number): TerminalNode;
	public DISK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DISK);
		} else {
			return this.getToken(TSqlParser.DISK, i);
		}
	}
	public TAPE(): TerminalNode[];
	public TAPE(i: number): TerminalNode;
	public TAPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TAPE);
		} else {
			return this.getToken(TSqlParser.TAPE, i);
		}
	}
	public URL(): TerminalNode[];
	public URL(i: number): TerminalNode;
	public URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.URL);
		} else {
			return this.getToken(TSqlParser.URL, i);
		}
	}
	public MIRROR(): TerminalNode[];
	public MIRROR(i: number): TerminalNode;
	public MIRROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MIRROR);
		} else {
			return this.getToken(TSqlParser.MIRROR, i);
		}
	}
	public DIFFERENTIAL(): TerminalNode[];
	public DIFFERENTIAL(i: number): TerminalNode;
	public DIFFERENTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DIFFERENTIAL);
		} else {
			return this.getToken(TSqlParser.DIFFERENTIAL, i);
		}
	}
	public COPY_ONLY(): TerminalNode[];
	public COPY_ONLY(i: number): TerminalNode;
	public COPY_ONLY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COPY_ONLY);
		} else {
			return this.getToken(TSqlParser.COPY_ONLY, i);
		}
	}
	public DESCRIPTION(): TerminalNode[];
	public DESCRIPTION(i: number): TerminalNode;
	public DESCRIPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DESCRIPTION);
		} else {
			return this.getToken(TSqlParser.DESCRIPTION, i);
		}
	}
	public NAME(): TerminalNode[];
	public NAME(i: number): TerminalNode;
	public NAME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NAME);
		} else {
			return this.getToken(TSqlParser.NAME, i);
		}
	}
	public CREDENTIAL(): TerminalNode[];
	public CREDENTIAL(i: number): TerminalNode;
	public CREDENTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CREDENTIAL);
		} else {
			return this.getToken(TSqlParser.CREDENTIAL, i);
		}
	}
	public FILE_SNAPSHOT(): TerminalNode[];
	public FILE_SNAPSHOT(i: number): TerminalNode;
	public FILE_SNAPSHOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILE_SNAPSHOT);
		} else {
			return this.getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
	}
	public MEDIADESCRIPTION(): TerminalNode[];
	public MEDIADESCRIPTION(i: number): TerminalNode;
	public MEDIADESCRIPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MEDIADESCRIPTION);
		} else {
			return this.getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
	}
	public MEDIANAME(): TerminalNode[];
	public MEDIANAME(i: number): TerminalNode;
	public MEDIANAME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MEDIANAME);
		} else {
			return this.getToken(TSqlParser.MEDIANAME, i);
		}
	}
	public BLOCKSIZE(): TerminalNode[];
	public BLOCKSIZE(i: number): TerminalNode;
	public BLOCKSIZE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BLOCKSIZE);
		} else {
			return this.getToken(TSqlParser.BLOCKSIZE, i);
		}
	}
	public BUFFERCOUNT(): TerminalNode[];
	public BUFFERCOUNT(i: number): TerminalNode;
	public BUFFERCOUNT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BUFFERCOUNT);
		} else {
			return this.getToken(TSqlParser.BUFFERCOUNT, i);
		}
	}
	public MAXTRANSFER(): TerminalNode[];
	public MAXTRANSFER(i: number): TerminalNode;
	public MAXTRANSFER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.MAXTRANSFER);
		} else {
			return this.getToken(TSqlParser.MAXTRANSFER, i);
		}
	}
	public RESTART(): TerminalNode[];
	public RESTART(i: number): TerminalNode;
	public RESTART(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RESTART);
		} else {
			return this.getToken(TSqlParser.RESTART, i);
		}
	}
	public STATS(): TerminalNode[];
	public STATS(i: number): TerminalNode;
	public STATS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STATS);
		} else {
			return this.getToken(TSqlParser.STATS, i);
		}
	}
	public NO_TRUNCATE(): TerminalNode[];
	public NO_TRUNCATE(i: number): TerminalNode;
	public NO_TRUNCATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO_TRUNCATE);
		} else {
			return this.getToken(TSqlParser.NO_TRUNCATE, i);
		}
	}
	public ENCRYPTION(): TerminalNode[];
	public ENCRYPTION(i: number): TerminalNode;
	public ENCRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ENCRYPTION);
		} else {
			return this.getToken(TSqlParser.ENCRYPTION, i);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LR_BRACKET);
		} else {
			return this.getToken(TSqlParser.LR_BRACKET, i);
		}
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALGORITHM);
		} else {
			return this.getToken(TSqlParser.ALGORITHM, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public SERVER(): TerminalNode[];
	public SERVER(i: number): TerminalNode;
	public SERVER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SERVER);
		} else {
			return this.getToken(TSqlParser.SERVER, i);
		}
	}
	public CERTIFICATE(): TerminalNode[];
	public CERTIFICATE(i: number): TerminalNode;
	public CERTIFICATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CERTIFICATE);
		} else {
			return this.getToken(TSqlParser.CERTIFICATE, i);
		}
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public COMPRESSION(): TerminalNode[];
	public COMPRESSION(i: number): TerminalNode;
	public COMPRESSION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMPRESSION);
		} else {
			return this.getToken(TSqlParser.COMPRESSION, i);
		}
	}
	public NO_COMPRESSION(): TerminalNode[];
	public NO_COMPRESSION(i: number): TerminalNode;
	public NO_COMPRESSION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO_COMPRESSION);
		} else {
			return this.getToken(TSqlParser.NO_COMPRESSION, i);
		}
	}
	public NOINIT(): TerminalNode[];
	public NOINIT(i: number): TerminalNode;
	public NOINIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOINIT);
		} else {
			return this.getToken(TSqlParser.NOINIT, i);
		}
	}
	public INIT(): TerminalNode[];
	public INIT(i: number): TerminalNode;
	public INIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.INIT);
		} else {
			return this.getToken(TSqlParser.INIT, i);
		}
	}
	public NOSKIP(): TerminalNode[];
	public NOSKIP(i: number): TerminalNode;
	public NOSKIP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOSKIP);
		} else {
			return this.getToken(TSqlParser.NOSKIP, i);
		}
	}
	public SKIP_KEYWORD(): TerminalNode[];
	public SKIP_KEYWORD(i: number): TerminalNode;
	public SKIP_KEYWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SKIP_KEYWORD);
		} else {
			return this.getToken(TSqlParser.SKIP_KEYWORD, i);
		}
	}
	public NOFORMAT(): TerminalNode[];
	public NOFORMAT(i: number): TerminalNode;
	public NOFORMAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOFORMAT);
		} else {
			return this.getToken(TSqlParser.NOFORMAT, i);
		}
	}
	public FORMAT(): TerminalNode[];
	public FORMAT(i: number): TerminalNode;
	public FORMAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FORMAT);
		} else {
			return this.getToken(TSqlParser.FORMAT, i);
		}
	}
	public NO_CHECKSUM(): TerminalNode[];
	public NO_CHECKSUM(i: number): TerminalNode;
	public NO_CHECKSUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NO_CHECKSUM);
		} else {
			return this.getToken(TSqlParser.NO_CHECKSUM, i);
		}
	}
	public CHECKSUM(): TerminalNode[];
	public CHECKSUM(i: number): TerminalNode;
	public CHECKSUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CHECKSUM);
		} else {
			return this.getToken(TSqlParser.CHECKSUM, i);
		}
	}
	public STOP_ON_ERROR(): TerminalNode[];
	public STOP_ON_ERROR(i: number): TerminalNode;
	public STOP_ON_ERROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STOP_ON_ERROR);
		} else {
			return this.getToken(TSqlParser.STOP_ON_ERROR, i);
		}
	}
	public CONTINUE_AFTER_ERROR(): TerminalNode[];
	public CONTINUE_AFTER_ERROR(i: number): TerminalNode;
	public CONTINUE_AFTER_ERROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CONTINUE_AFTER_ERROR);
		} else {
			return this.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
	}
	public REWIND(): TerminalNode[];
	public REWIND(i: number): TerminalNode;
	public REWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.REWIND);
		} else {
			return this.getToken(TSqlParser.REWIND, i);
		}
	}
	public NOREWIND(): TerminalNode[];
	public NOREWIND(i: number): TerminalNode;
	public NOREWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOREWIND);
		} else {
			return this.getToken(TSqlParser.NOREWIND, i);
		}
	}
	public LOAD(): TerminalNode[];
	public LOAD(i: number): TerminalNode;
	public LOAD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOAD);
		} else {
			return this.getToken(TSqlParser.LOAD, i);
		}
	}
	public NOUNLOAD(): TerminalNode[];
	public NOUNLOAD(i: number): TerminalNode;
	public NOUNLOAD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NOUNLOAD);
		} else {
			return this.getToken(TSqlParser.NOUNLOAD, i);
		}
	}
	public AES_128(): TerminalNode[];
	public AES_128(i: number): TerminalNode;
	public AES_128(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AES_128);
		} else {
			return this.getToken(TSqlParser.AES_128, i);
		}
	}
	public AES_192(): TerminalNode[];
	public AES_192(i: number): TerminalNode;
	public AES_192(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AES_192);
		} else {
			return this.getToken(TSqlParser.AES_192, i);
		}
	}
	public AES_256(): TerminalNode[];
	public AES_256(i: number): TerminalNode;
	public AES_256(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AES_256);
		} else {
			return this.getToken(TSqlParser.AES_256, i);
		}
	}
	public TRIPLE_DES_3KEY(): TerminalNode[];
	public TRIPLE_DES_3KEY(i: number): TerminalNode;
	public TRIPLE_DES_3KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.TRIPLE_DES_3KEY);
		} else {
			return this.getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
	}
	public EXPIREDATE(): TerminalNode[];
	public EXPIREDATE(i: number): TerminalNode;
	public EXPIREDATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EXPIREDATE);
		} else {
			return this.getToken(TSqlParser.EXPIREDATE, i);
		}
	}
	public RETAINDAYS(): TerminalNode[];
	public RETAINDAYS(i: number): TerminalNode;
	public RETAINDAYS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.RETAINDAYS);
		} else {
			return this.getToken(TSqlParser.RETAINDAYS, i);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public NORECOVERY(): TerminalNode[];
	public NORECOVERY(i: number): TerminalNode;
	public NORECOVERY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.NORECOVERY);
		} else {
			return this.getToken(TSqlParser.NORECOVERY, i);
		}
	}
	public STANDBY(): TerminalNode[];
	public STANDBY(i: number): TerminalNode;
	public STANDBY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STANDBY);
		} else {
			return this.getToken(TSqlParser.STANDBY, i);
		}
	}
	public ASYMMETRIC(): TerminalNode[];
	public ASYMMETRIC(i: number): TerminalNode;
	public ASYMMETRIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ASYMMETRIC);
		} else {
			return this.getToken(TSqlParser.ASYMMETRIC, i);
		}
	}
	public KEY(): TerminalNode[];
	public KEY(i: number): TerminalNode;
	public KEY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.KEY);
		} else {
			return this.getToken(TSqlParser.KEY, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_backup_log; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBackup_log) {
			listener.enterBackup_log(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBackup_log) {
			listener.exitBackup_log(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBackup_log) {
			return visitor.visitBackup_log(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Backup_certificateContext extends ParserRuleContext {
	public _certname: IdContext;
	public _cert_file: Token;
	public _private_key_file: Token;
	public _encryption_password: Token;
	public _decryption_pasword: Token;
	public BACKUP(): TerminalNode { return this.getToken(TSqlParser.BACKUP, 0); }
	public CERTIFICATE(): TerminalNode { return this.getToken(TSqlParser.CERTIFICATE, 0); }
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	public FILE(): TerminalNode[];
	public FILE(i: number): TerminalNode;
	public FILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FILE);
		} else {
			return this.getToken(TSqlParser.FILE, i);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public ENCRYPTION(): TerminalNode[];
	public ENCRYPTION(i: number): TerminalNode;
	public ENCRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ENCRYPTION);
		} else {
			return this.getToken(TSqlParser.ENCRYPTION, i);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BY);
		} else {
			return this.getToken(TSqlParser.BY, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PASSWORD);
		} else {
			return this.getToken(TSqlParser.PASSWORD, i);
		}
	}
	public DECRYPTION(): TerminalNode[];
	public DECRYPTION(i: number): TerminalNode;
	public DECRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECRYPTION);
		} else {
			return this.getToken(TSqlParser.DECRYPTION, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_backup_certificate; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBackup_certificate) {
			listener.enterBackup_certificate(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBackup_certificate) {
			listener.exitBackup_certificate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBackup_certificate) {
			return visitor.visitBackup_certificate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Backup_master_keyContext extends ParserRuleContext {
	public _master_key_backup_file: Token;
	public _encryption_password: Token;
	public BACKUP(): TerminalNode { return this.getToken(TSqlParser.BACKUP, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	public FILE(): TerminalNode { return this.getToken(TSqlParser.FILE, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(TSqlParser.PASSWORD, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_backup_master_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBackup_master_key) {
			listener.enterBackup_master_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBackup_master_key) {
			listener.exitBackup_master_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBackup_master_key) {
			return visitor.visitBackup_master_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Backup_service_master_keyContext extends ParserRuleContext {
	public _service_master_key_backup_file: Token;
	public _encryption_password: Token;
	public BACKUP(): TerminalNode { return this.getToken(TSqlParser.BACKUP, 0); }
	public SERVICE(): TerminalNode { return this.getToken(TSqlParser.SERVICE, 0); }
	public MASTER(): TerminalNode { return this.getToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	public FILE(): TerminalNode { return this.getToken(TSqlParser.FILE, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public ENCRYPTION(): TerminalNode { return this.getToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(TSqlParser.PASSWORD, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_backup_service_master_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBackup_service_master_key) {
			listener.enterBackup_service_master_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBackup_service_master_key) {
			listener.exitBackup_service_master_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBackup_service_master_key) {
			return visitor.visitBackup_service_master_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_statementContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(TSqlParser.EXECUTE, 0); }
	public execute_body(): Execute_bodyContext {
		return this.getRuleContext(0, Execute_bodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_execute_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExecute_statement) {
			listener.enterExecute_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExecute_statement) {
			listener.exitExecute_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExecute_statement) {
			return visitor.visitExecute_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_bodyContext extends ParserRuleContext {
	public _return_status: Token;
	public func_proc_name(): Func_proc_nameContext | undefined {
		return this.tryGetRuleContext(0, Func_proc_nameContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public execute_statement_arg(): Execute_statement_argContext[];
	public execute_statement_arg(i: number): Execute_statement_argContext;
	public execute_statement_arg(i?: number): Execute_statement_argContext | Execute_statement_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Execute_statement_argContext);
		} else {
			return this.getRuleContext(i, Execute_statement_argContext);
		}
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public execute_var_string(): Execute_var_stringContext[];
	public execute_var_string(i: number): Execute_var_stringContext;
	public execute_var_string(i?: number): Execute_var_stringContext | Execute_var_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Execute_var_stringContext);
		} else {
			return this.getRuleContext(i, Execute_var_stringContext);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOGIN, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USER, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_execute_body; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExecute_body) {
			listener.enterExecute_body(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExecute_body) {
			listener.exitExecute_body(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExecute_body) {
			return visitor.visitExecute_body(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_statement_argContext extends ParserRuleContext {
	public _parameter: Token;
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public constant_LOCAL_ID(): Constant_LOCAL_IDContext | undefined {
		return this.tryGetRuleContext(0, Constant_LOCAL_IDContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUTPUT, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_execute_statement_arg; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExecute_statement_arg) {
			listener.enterExecute_statement_arg(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExecute_statement_arg) {
			listener.exitExecute_statement_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExecute_statement_arg) {
			return visitor.visitExecute_statement_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_var_stringContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_execute_var_string; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExecute_var_string) {
			listener.enterExecute_var_string(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExecute_var_string) {
			listener.exitExecute_var_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExecute_var_string) {
			return visitor.visitExecute_var_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Security_statementContext extends ParserRuleContext {
	public _on_id: Table_nameContext;
	public _id: IdContext;
	public _to_principal: IdContext[] = [];
	public _as_principal: IdContext;
	public execute_clause(): Execute_clauseContext | undefined {
		return this.tryGetRuleContext(0, Execute_clauseContext);
	}
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.GRANT);
		} else {
			return this.getToken(TSqlParser.GRANT, i);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TO, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public grant_permission(): Grant_permissionContext | undefined {
		return this.tryGetRuleContext(0, Grant_permissionContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPTION, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVILEGES, 0); }
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	public REVERT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REVERT, 0); }
	public COOKIE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COOKIE, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public open_key(): Open_keyContext | undefined {
		return this.tryGetRuleContext(0, Open_keyContext);
	}
	public close_key(): Close_keyContext | undefined {
		return this.tryGetRuleContext(0, Close_keyContext);
	}
	public create_key(): Create_keyContext | undefined {
		return this.tryGetRuleContext(0, Create_keyContext);
	}
	public create_certificate(): Create_certificateContext | undefined {
		return this.tryGetRuleContext(0, Create_certificateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_security_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSecurity_statement) {
			listener.enterSecurity_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSecurity_statement) {
			listener.exitSecurity_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSecurity_statement) {
			return visitor.visitSecurity_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_certificateContext extends ParserRuleContext {
	public _certificate_name: IdContext;
	public _user_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public CERTIFICATE(): TerminalNode { return this.getToken(TSqlParser.CERTIFICATE, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public existing_keys(): Existing_keysContext | undefined {
		return this.tryGetRuleContext(0, Existing_keysContext);
	}
	public generate_new_keys(): Generate_new_keysContext | undefined {
		return this.tryGetRuleContext(0, Generate_new_keysContext);
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTIVE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BEGIN, 0); }
	public DIALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DIALOG, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_certificate; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_certificate) {
			listener.enterCreate_certificate(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_certificate) {
			listener.exitCreate_certificate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_certificate) {
			return visitor.visitCreate_certificate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Existing_keysContext extends ParserRuleContext {
	public _assembly_name: IdContext;
	public _path_to_file: Token;
	public ASSEMBLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASSEMBLY, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public EXECUTABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXECUTABLE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public private_key_options(): Private_key_optionsContext | undefined {
		return this.tryGetRuleContext(0, Private_key_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_existing_keys; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExisting_keys) {
			listener.enterExisting_keys(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExisting_keys) {
			listener.exitExisting_keys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExisting_keys) {
			return visitor.visitExisting_keys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Private_key_optionsContext extends ParserRuleContext {
	public _path: Token;
	public _password: Token;
	public FILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILE, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public DECRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECRYPTION, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_private_key_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPrivate_key_options) {
			listener.enterPrivate_key_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPrivate_key_options) {
			listener.exitPrivate_key_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivate_key_options) {
			return visitor.visitPrivate_key_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generate_new_keysContext extends ParserRuleContext {
	public _password: Token;
	public _certificate_subject_name: Token;
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public SUBJECT(): TerminalNode { return this.getToken(TSqlParser.SUBJECT, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public date_options(): Date_optionsContext[];
	public date_options(i: number): Date_optionsContext;
	public date_options(i?: number): Date_optionsContext | Date_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Date_optionsContext);
		} else {
			return this.getRuleContext(i, Date_optionsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_generate_new_keys; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGenerate_new_keys) {
			listener.enterGenerate_new_keys(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGenerate_new_keys) {
			listener.exitGenerate_new_keys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGenerate_new_keys) {
			return visitor.visitGenerate_new_keys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_optionsContext extends ParserRuleContext {
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	public START_DATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.START_DATE, 0); }
	public EXPIRY_DATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXPIRY_DATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_date_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDate_options) {
			listener.enterDate_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDate_options) {
			listener.exitDate_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDate_options) {
			return visitor.visitDate_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public _password: Token;
	public OPEN(): TerminalNode { return this.getToken(TSqlParser.OPEN, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public DECRYPTION(): TerminalNode { return this.getToken(TSqlParser.DECRYPTION, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public decryption_mechanism(): Decryption_mechanismContext | undefined {
		return this.tryGetRuleContext(0, Decryption_mechanismContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MASTER, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_open_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOpen_key) {
			listener.enterOpen_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOpen_key) {
			listener.exitOpen_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOpen_key) {
			return visitor.visitOpen_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_keyContext extends ParserRuleContext {
	public _key_name: IdContext;
	public CLOSE(): TerminalNode { return this.getToken(TSqlParser.CLOSE, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEYS, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MASTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_close_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClose_key) {
			listener.enterClose_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClose_key) {
			listener.exitClose_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClose_key) {
			return visitor.visitClose_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_keyContext extends ParserRuleContext {
	public _password: Token;
	public _key_name: IdContext;
	public _user_name: IdContext;
	public _provider_name: IdContext;
	public CREATE(): TerminalNode { return this.getToken(TSqlParser.CREATE, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(TSqlParser.KEY, 0); }
	public ENCRYPTION(): TerminalNode[];
	public ENCRYPTION(i: number): TerminalNode;
	public ENCRYPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ENCRYPTION);
		} else {
			return this.getToken(TSqlParser.ENCRYPTION, i);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.BY);
		} else {
			return this.getToken(TSqlParser.BY, i);
		}
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTHORIZATION, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	public key_options(): Key_optionsContext[];
	public key_options(i: number): Key_optionsContext;
	public key_options(i?: number): Key_optionsContext | Key_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_optionsContext);
		} else {
			return this.getRuleContext(i, Key_optionsContext);
		}
	}
	public encryption_mechanism(): Encryption_mechanismContext[];
	public encryption_mechanism(i: number): Encryption_mechanismContext;
	public encryption_mechanism(i?: number): Encryption_mechanismContext | Encryption_mechanismContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Encryption_mechanismContext);
		} else {
			return this.getRuleContext(i, Encryption_mechanismContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_key; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_key) {
			listener.enterCreate_key(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_key) {
			listener.exitCreate_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_key) {
			return visitor.visitCreate_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_optionsContext extends ParserRuleContext {
	public _pass_phrase: Token;
	public _identity_phrase: Token;
	public _key_name_in_provider: Token;
	public KEY_SOURCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY_SOURCE, 0); }
	public EQUAL(): TerminalNode { return this.getToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALGORITHM, 0); }
	public algorithm(): AlgorithmContext | undefined {
		return this.tryGetRuleContext(0, AlgorithmContext);
	}
	public IDENTITY_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY_VALUE, 0); }
	public PROVIDER_KEY_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
	public CREATION_DISPOSITION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATION_DISPOSITION, 0); }
	public CREATE_NEW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE_NEW, 0); }
	public OPEN_EXISTING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPEN_EXISTING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_key_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterKey_options) {
			listener.enterKey_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitKey_options) {
			listener.exitKey_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitKey_options) {
			return visitor.visitKey_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlgorithmContext extends ParserRuleContext {
	public DES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DES, 0); }
	public TRIPLE_DES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIPLE_DES, 0); }
	public TRIPLE_DES_3KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
	public RC2(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC2, 0); }
	public RC4(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4, 0); }
	public RC4_128(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4_128, 0); }
	public DESX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DESX, 0); }
	public AES_128(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_128, 0); }
	public AES_192(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_192, 0); }
	public AES_256(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_256, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_algorithm; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAlgorithm) {
			listener.enterAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAlgorithm) {
			listener.exitAlgorithm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAlgorithm) {
			return visitor.visitAlgorithm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Encryption_mechanismContext extends ParserRuleContext {
	public _certificate_name: IdContext;
	public _asym_key_name: IdContext;
	public _decrypting_Key_name: IdContext;
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_encryption_mechanism; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEncryption_mechanism) {
			listener.enterEncryption_mechanism(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEncryption_mechanism) {
			listener.exitEncryption_mechanism(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEncryption_mechanism) {
			return visitor.visitEncryption_mechanism(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decryption_mechanismContext extends ParserRuleContext {
	public _certificate_name: IdContext;
	public _asym_key_name: IdContext;
	public _decrypting_Key_name: IdContext;
	public CERTIFICATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CERTIFICATE, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PASSWORD, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASYMMETRIC, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_decryption_mechanism; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDecryption_mechanism) {
			listener.enterDecryption_mechanism(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDecryption_mechanism) {
			listener.exitDecryption_mechanism(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDecryption_mechanism) {
			return visitor.visitDecryption_mechanism(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grant_permissionContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXECUTE, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VIEW, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public TAKE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TAKE, 0); }
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTROL, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TABLE, 0); }
	public SHOWPLAN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SHOWPLAN, 0); }
	public IMPERSONATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IMPERSONATE, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SELECT, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REFERENCES, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSERT, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALTER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATABASE, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_grant_permission; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGrant_permission) {
			listener.enterGrant_permission(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGrant_permission) {
			listener.exitGrant_permission(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGrant_permission) {
			return visitor.visitGrant_permission(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statementContext extends ParserRuleContext {
	public _member_name: IdContext;
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public assignment_operator(): Assignment_operatorContext | undefined {
		return this.tryGetRuleContext(0, Assignment_operatorContext);
	}
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR, 0); }
	public declare_set_cursor_common(): Declare_set_cursor_commonContext | undefined {
		return this.tryGetRuleContext(0, Declare_set_cursor_commonContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ONLY, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UPDATE, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OF, 0); }
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	public set_special(): Set_specialContext | undefined {
		return this.tryGetRuleContext(0, Set_specialContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_set_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSet_statement) {
			listener.enterSet_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSet_statement) {
			listener.exitSet_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSet_statement) {
			return visitor.visitSet_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_statementContext extends ParserRuleContext {
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BEGIN, 0); }
	public DISTRIBUTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISTRIBUTED, 0); }
	public TRAN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRAN, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRANSACTION, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public MARK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MARK, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMIT, 0); }
	public DELAYED_DURABILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELAYED_DURABILITY, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WORK, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROLLBACK, 0); }
	public SAVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_transaction_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTransaction_statement) {
			listener.enterTransaction_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTransaction_statement) {
			listener.exitTransaction_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTransaction_statement) {
			return visitor.visitTransaction_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Go_statementContext extends ParserRuleContext {
	public _count: Token;
	public GO(): TerminalNode { return this.getToken(TSqlParser.GO, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_go_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGo_statement) {
			listener.enterGo_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGo_statement) {
			listener.exitGo_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGo_statement) {
			return visitor.visitGo_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_statementContext extends ParserRuleContext {
	public _database: IdContext;
	public USE(): TerminalNode { return this.getToken(TSqlParser.USE, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_use_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUse_statement) {
			listener.enterUse_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUse_statement) {
			listener.exitUse_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUse_statement) {
			return visitor.visitUse_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Setuser_statementContext extends ParserRuleContext {
	public _user: Token;
	public SETUSER(): TerminalNode { return this.getToken(TSqlParser.SETUSER, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_setuser_statement; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSetuser_statement) {
			listener.enterSetuser_statement(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSetuser_statement) {
			listener.exitSetuser_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSetuser_statement) {
			return visitor.visitSetuser_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dbcc_clauseContext extends ParserRuleContext {
	public _name: Simple_idContext;
	public DBCC(): TerminalNode { return this.getToken(TSqlParser.DBCC, 0); }
	public simple_id(): Simple_idContext {
		return this.getRuleContext(0, Simple_idContext);
	}
	public expression_list(): Expression_listContext | undefined {
		return this.tryGetRuleContext(0, Expression_listContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public dbcc_options(): Dbcc_optionsContext | undefined {
		return this.tryGetRuleContext(0, Dbcc_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_dbcc_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDbcc_clause) {
			listener.enterDbcc_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDbcc_clause) {
			listener.exitDbcc_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDbcc_clause) {
			return visitor.visitDbcc_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dbcc_optionsContext extends ParserRuleContext {
	public simple_id(): Simple_idContext[];
	public simple_id(i: number): Simple_idContext;
	public simple_id(i?: number): Simple_idContext | Simple_idContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Simple_idContext);
		} else {
			return this.getRuleContext(i, Simple_idContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_dbcc_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDbcc_options) {
			listener.enterDbcc_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDbcc_options) {
			listener.exitDbcc_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDbcc_options) {
			return visitor.visitDbcc_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_clauseContext extends ParserRuleContext {
	public _clause: Token;
	public EXECUTE(): TerminalNode { return this.getToken(TSqlParser.EXECUTE, 0); }
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public CALLER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CALLER, 0); }
	public SELF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SELF, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OWNER, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_execute_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExecute_clause) {
			listener.enterExecute_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExecute_clause) {
			listener.exitExecute_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExecute_clause) {
			return visitor.visitExecute_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_localContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode { return this.getToken(TSqlParser.LOCAL_ID, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_declare_local; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDeclare_local) {
			listener.enterDeclare_local(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDeclare_local) {
			listener.exitDeclare_local(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDeclare_local) {
			return visitor.visitDeclare_local(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_type_definitionContext extends ParserRuleContext {
	public TABLE(): TerminalNode { return this.getToken(TSqlParser.TABLE, 0); }
	public column_def_table_constraints(): Column_def_table_constraintsContext {
		return this.getRuleContext(0, Column_def_table_constraintsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_type_definition; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_type_definition) {
			listener.enterTable_type_definition(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_type_definition) {
			listener.exitTable_type_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_type_definition) {
			return visitor.visitTable_type_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_type_definitionContext extends ParserRuleContext {
	public XML(): TerminalNode { return this.getToken(TSqlParser.XML, 0); }
	public xml_schema_collection(): Xml_schema_collectionContext {
		return this.getRuleContext(0, Xml_schema_collectionContext);
	}
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTENT, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOCUMENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_xml_type_definition; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterXml_type_definition) {
			listener.enterXml_type_definition(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitXml_type_definition) {
			listener.exitXml_type_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitXml_type_definition) {
			return visitor.visitXml_type_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_schema_collectionContext extends ParserRuleContext {
	public ID(): TerminalNode[];
	public ID(i: number): TerminalNode;
	public ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ID);
		} else {
			return this.getToken(TSqlParser.ID, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_xml_schema_collection; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterXml_schema_collection) {
			listener.enterXml_schema_collection(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitXml_schema_collection) {
			listener.exitXml_schema_collection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitXml_schema_collection) {
			return visitor.visitXml_schema_collection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_def_table_constraintsContext extends ParserRuleContext {
	public column_def_table_constraint(): Column_def_table_constraintContext[];
	public column_def_table_constraint(i: number): Column_def_table_constraintContext;
	public column_def_table_constraint(i?: number): Column_def_table_constraintContext | Column_def_table_constraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_def_table_constraintContext);
		} else {
			return this.getRuleContext(i, Column_def_table_constraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_def_table_constraints; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_def_table_constraints) {
			listener.enterColumn_def_table_constraints(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_def_table_constraints) {
			listener.exitColumn_def_table_constraints(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_def_table_constraints) {
			return visitor.visitColumn_def_table_constraints(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_def_table_constraintContext extends ParserRuleContext {
	public column_definition(): Column_definitionContext | undefined {
		return this.tryGetRuleContext(0, Column_definitionContext);
	}
	public materialized_column_definition(): Materialized_column_definitionContext | undefined {
		return this.tryGetRuleContext(0, Materialized_column_definitionContext);
	}
	public table_constraint(): Table_constraintContext | undefined {
		return this.tryGetRuleContext(0, Table_constraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_def_table_constraint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_def_table_constraint) {
			listener.enterColumn_def_table_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_def_table_constraint) {
			listener.exitColumn_def_table_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_def_table_constraint) {
			return visitor.visitColumn_def_table_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_definitionContext extends ParserRuleContext {
	public _constraint: IdContext;
	public _seed: Token;
	public _increment: Token;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLATE, 0); }
	public null_notnull(): Null_notnullContext | undefined {
		return this.tryGetRuleContext(0, Null_notnullContext);
	}
	public null_or_default(): Null_or_defaultContext[];
	public null_or_default(i: number): Null_or_defaultContext;
	public null_or_default(i?: number): Null_or_defaultContext | Null_or_defaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Null_or_defaultContext);
		} else {
			return this.getRuleContext(i, Null_or_defaultContext);
		}
	}
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY, 0); }
	public ROWGUIDCOL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWGUIDCOL, 0); }
	public column_constraint(): Column_constraintContext[];
	public column_constraint(i: number): Column_constraintContext;
	public column_constraint(i?: number): Column_constraintContext | Column_constraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_constraintContext);
		} else {
			return this.getRuleContext(i, Column_constraintContext);
		}
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONSTRAINT, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICATION, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_definition; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_definition) {
			listener.enterColumn_definition(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_definition) {
			listener.exitColumn_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_definition) {
			return visitor.visitColumn_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Materialized_column_definitionContext extends ParserRuleContext {
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public COMPUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMPUTE, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MATERIALIZED, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_materialized_column_definition; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMaterialized_column_definition) {
			listener.enterMaterialized_column_definition(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMaterialized_column_definition) {
			listener.exitMaterialized_column_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMaterialized_column_definition) {
			return visitor.visitMaterialized_column_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_constraintContext extends ParserRuleContext {
	public _constraint: IdContext;
	public _pk: Column_name_listContext;
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK, 0); }
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REFERENCES, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public null_notnull(): Null_notnullContext | undefined {
		return this.tryGetRuleContext(0, Null_notnullContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONSTRAINT, 0); }
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNIQUE, 0); }
	public clustered(): ClusteredContext | undefined {
		return this.tryGetRuleContext(0, ClusteredContext);
	}
	public index_options(): Index_optionsContext | undefined {
		return this.tryGetRuleContext(0, Index_optionsContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICATION, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOREIGN, 0); }
	public on_delete(): On_deleteContext | undefined {
		return this.tryGetRuleContext(0, On_deleteContext);
	}
	public on_update(): On_updateContext | undefined {
		return this.tryGetRuleContext(0, On_updateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_constraint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_constraint) {
			listener.enterColumn_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_constraint) {
			listener.exitColumn_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_constraint) {
			return visitor.visitColumn_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_constraintContext extends ParserRuleContext {
	public _constraint: IdContext;
	public _fk: Column_name_listContext;
	public _pk: Column_name_listContext;
	public column_name_list_with_order(): Column_name_list_with_orderContext | undefined {
		return this.tryGetRuleContext(0, Column_name_list_with_orderContext);
	}
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECK, 0); }
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REFERENCES, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONSTRAINT, 0); }
	public column_name_list(): Column_name_listContext[];
	public column_name_list(i: number): Column_name_listContext;
	public column_name_list(i?: number): Column_name_listContext | Column_name_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_name_listContext);
		} else {
			return this.getRuleContext(i, Column_name_listContext);
		}
	}
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIMARY, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNIQUE, 0); }
	public clustered(): ClusteredContext | undefined {
		return this.tryGetRuleContext(0, ClusteredContext);
	}
	public index_options(): Index_optionsContext | undefined {
		return this.tryGetRuleContext(0, Index_optionsContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICATION, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public PLUS(): TerminalNode[];
	public PLUS(i: number): TerminalNode;
	public PLUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.PLUS);
		} else {
			return this.getToken(TSqlParser.PLUS, i);
		}
	}
	public function_call(): Function_callContext[];
	public function_call(i: number): Function_callContext;
	public function_call(i?: number): Function_callContext | Function_callContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_callContext);
		} else {
			return this.getRuleContext(i, Function_callContext);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public on_delete(): On_deleteContext | undefined {
		return this.tryGetRuleContext(0, On_deleteContext);
	}
	public on_update(): On_updateContext | undefined {
		return this.tryGetRuleContext(0, On_updateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_constraint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_constraint) {
			listener.enterTable_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_constraint) {
			listener.exitTable_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_constraint) {
			return visitor.visitTable_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_deleteContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public DELETE(): TerminalNode { return this.getToken(TSqlParser.DELETE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTION, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CASCADE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_on_delete; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOn_delete) {
			listener.enterOn_delete(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOn_delete) {
			listener.exitOn_delete(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOn_delete) {
			return visitor.visitOn_delete(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_updateContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public UPDATE(): TerminalNode { return this.getToken(TSqlParser.UPDATE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTION, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CASCADE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SET, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_on_update; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOn_update) {
			listener.enterOn_update(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOn_update) {
			listener.exitOn_update(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOn_update) {
			return visitor.visitOn_update(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_optionsContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public index_option(): Index_optionContext[];
	public index_option(i: number): Index_optionContext;
	public index_option(i?: number): Index_optionContext | Index_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Index_optionContext);
		} else {
			return this.getRuleContext(i, Index_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_index_options; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterIndex_options) {
			listener.enterIndex_options(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitIndex_options) {
			listener.exitIndex_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitIndex_options) {
			return visitor.visitIndex_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_optionContext extends ParserRuleContext {
	public simple_id(): Simple_idContext[];
	public simple_id(i: number): Simple_idContext;
	public simple_id(i?: number): Simple_idContext | Simple_idContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Simple_idContext);
		} else {
			return this.getRuleContext(i, Simple_idContext);
		}
	}
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_index_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterIndex_option) {
			listener.enterIndex_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitIndex_option) {
			listener.exitIndex_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitIndex_option) {
			return visitor.visitIndex_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_cursorContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(TSqlParser.DECLARE, 0); }
	public cursor_name(): Cursor_nameContext {
		return this.getRuleContext(0, Cursor_nameContext);
	}
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR, 0); }
	public FOR(): TerminalNode[];
	public FOR(i: number): TerminalNode;
	public FOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.FOR);
		} else {
			return this.getToken(TSqlParser.FOR, i);
		}
	}
	public select_statement(): Select_statementContext | undefined {
		return this.tryGetRuleContext(0, Select_statementContext);
	}
	public declare_set_cursor_common(): Declare_set_cursor_commonContext | undefined {
		return this.tryGetRuleContext(0, Declare_set_cursor_commonContext);
	}
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCROLL, 0); }
	public SEMI_SENSITIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEMI_SENSITIVE, 0); }
	public INSENSITIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSENSITIVE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ONLY, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UPDATE, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OF, 0); }
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_declare_cursor; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDeclare_cursor) {
			listener.enterDeclare_cursor(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDeclare_cursor) {
			listener.exitDeclare_cursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDeclare_cursor) {
			return visitor.visitDeclare_cursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_set_cursor_commonContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public select_statement(): Select_statementContext {
		return this.getRuleContext(0, Select_statementContext);
	}
	public declare_set_cursor_common_partial(): Declare_set_cursor_common_partialContext[];
	public declare_set_cursor_common_partial(i: number): Declare_set_cursor_common_partialContext;
	public declare_set_cursor_common_partial(i?: number): Declare_set_cursor_common_partialContext | Declare_set_cursor_common_partialContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declare_set_cursor_common_partialContext);
		} else {
			return this.getRuleContext(i, Declare_set_cursor_common_partialContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_declare_set_cursor_common; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDeclare_set_cursor_common) {
			listener.enterDeclare_set_cursor_common(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDeclare_set_cursor_common) {
			listener.exitDeclare_set_cursor_common(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDeclare_set_cursor_common) {
			return visitor.visitDeclare_set_cursor_common(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_set_cursor_common_partialContext extends ParserRuleContext {
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	public FORWARD_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORWARD_ONLY, 0); }
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCROLL, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATIC, 0); }
	public KEYSET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEYSET, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DYNAMIC, 0); }
	public FAST_FORWARD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAST_FORWARD, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY, 0); }
	public SCROLL_LOCKS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCROLL_LOCKS, 0); }
	public OPTIMISTIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPTIMISTIC, 0); }
	public TYPE_WARNING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE_WARNING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_declare_set_cursor_common_partial; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDeclare_set_cursor_common_partial) {
			listener.enterDeclare_set_cursor_common_partial(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDeclare_set_cursor_common_partial) {
			listener.exitDeclare_set_cursor_common_partial(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDeclare_set_cursor_common_partial) {
			return visitor.visitDeclare_set_cursor_common_partial(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fetch_cursorContext extends ParserRuleContext {
	public FETCH(): TerminalNode { return this.getToken(TSqlParser.FETCH, 0); }
	public cursor_name(): Cursor_nameContext {
		return this.getRuleContext(0, Cursor_nameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTO, 0); }
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEXT, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIOR, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LAST, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ABSOLUTE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RELATIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_fetch_cursor; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFetch_cursor) {
			listener.enterFetch_cursor(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFetch_cursor) {
			listener.exitFetch_cursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFetch_cursor) {
			return visitor.visitFetch_cursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_specialContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(TSqlParser.SET, 0); }
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public constant_LOCAL_ID(): Constant_LOCAL_IDContext | undefined {
		return this.tryGetRuleContext(0, Constant_LOCAL_IDContext);
	}
	public on_off(): On_offContext | undefined {
		return this.tryGetRuleContext(0, On_offContext);
	}
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRANSACTION, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LEVEL, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNCOMMITTED, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMITTED, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPEATABLE, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SNAPSHOT, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERIALIZABLE, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public IDENTITY_INSERT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY_INSERT, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public ANSI_NULLS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_NULLS, 0); }
	public QUOTED_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
	public ANSI_PADDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_PADDING, 0); }
	public ANSI_WARNINGS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_WARNINGS, 0); }
	public modify_method(): Modify_methodContext | undefined {
		return this.tryGetRuleContext(0, Modify_methodContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_set_special; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSet_special) {
			listener.enterSet_special(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSet_special) {
			listener.exitSet_special(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSet_special) {
			return visitor.visitSet_special(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Constant_LOCAL_IDContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_constant_LOCAL_ID; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterConstant_LOCAL_ID) {
			listener.enterConstant_LOCAL_ID(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitConstant_LOCAL_ID) {
			listener.exitConstant_LOCAL_ID(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitConstant_LOCAL_ID) {
			return visitor.visitConstant_LOCAL_ID(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	public _op: Token;
	public primitive_expression(): Primitive_expressionContext | undefined {
		return this.tryGetRuleContext(0, Primitive_expressionContext);
	}
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLATE, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public case_expression(): Case_expressionContext | undefined {
		return this.tryGetRuleContext(0, Case_expressionContext);
	}
	public full_column_name(): Full_column_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_column_nameContext);
	}
	public bracket_expression(): Bracket_expressionContext | undefined {
		return this.tryGetRuleContext(0, Bracket_expressionContext);
	}
	public unary_operator_expression(): Unary_operator_expressionContext | undefined {
		return this.tryGetRuleContext(0, Unary_operator_expressionContext);
	}
	public comparison_operator(): Comparison_operatorContext | undefined {
		return this.tryGetRuleContext(0, Comparison_operatorContext);
	}
	public assignment_operator(): Assignment_operatorContext | undefined {
		return this.tryGetRuleContext(0, Assignment_operatorContext);
	}
	public over_clause(): Over_clauseContext | undefined {
		return this.tryGetRuleContext(0, Over_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExpression) {
			listener.enterExpression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExpression) {
			listener.exitExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExpression) {
			return visitor.visitExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Primitive_expressionContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_primitive_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPrimitive_expression) {
			listener.enterPrimitive_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPrimitive_expression) {
			listener.exitPrimitive_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPrimitive_expression) {
			return visitor.visitPrimitive_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_expressionContext extends ParserRuleContext {
	public _caseExpr: ExpressionContext;
	public _elseExpr: ExpressionContext;
	public CASE(): TerminalNode { return this.getToken(TSqlParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(TSqlParser.END, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public switch_section(): Switch_sectionContext[];
	public switch_section(i: number): Switch_sectionContext;
	public switch_section(i?: number): Switch_sectionContext | Switch_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Switch_sectionContext);
		} else {
			return this.getRuleContext(i, Switch_sectionContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ELSE, 0); }
	public switch_search_condition_section(): Switch_search_condition_sectionContext[];
	public switch_search_condition_section(i: number): Switch_search_condition_sectionContext;
	public switch_search_condition_section(i?: number): Switch_search_condition_sectionContext | Switch_search_condition_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Switch_search_condition_sectionContext);
		} else {
			return this.getRuleContext(i, Switch_search_condition_sectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_case_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCase_expression) {
			listener.enterCase_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCase_expression) {
			listener.exitCase_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCase_expression) {
			return visitor.visitCase_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_operator_expressionContext extends ParserRuleContext {
	public _op: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_unary_operator_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUnary_operator_expression) {
			listener.enterUnary_operator_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUnary_operator_expression) {
			listener.exitUnary_operator_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUnary_operator_expression) {
			return visitor.visitUnary_operator_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bracket_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public subquery(): SubqueryContext | undefined {
		return this.tryGetRuleContext(0, SubqueryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_bracket_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBracket_expression) {
			listener.enterBracket_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBracket_expression) {
			listener.exitBracket_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBracket_expression) {
			return visitor.visitBracket_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Constant_expressionContext extends ParserRuleContext {
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_constant_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterConstant_expression) {
			listener.enterConstant_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitConstant_expression) {
			listener.exitConstant_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitConstant_expression) {
			return visitor.visitConstant_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryContext extends ParserRuleContext {
	public select_statement(): Select_statementContext {
		return this.getRuleContext(0, Select_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_subquery; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSubquery) {
			listener.enterSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSubquery) {
			listener.exitSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSubquery) {
			return visitor.visitSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_expressionContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public common_table_expression(): Common_table_expressionContext[];
	public common_table_expression(i: number): Common_table_expressionContext;
	public common_table_expression(i?: number): Common_table_expressionContext | Common_table_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Common_table_expressionContext);
		} else {
			return this.getRuleContext(i, Common_table_expressionContext);
		}
	}
	public XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XMLNAMESPACES, 0); }
	public BLOCKING_HIERARCHY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	public select_statement(): Select_statementContext | undefined {
		return this.tryGetRuleContext(0, Select_statementContext);
	}
	public full_column_name_list(): Full_column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Full_column_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_with_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWith_expression) {
			listener.enterWith_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWith_expression) {
			listener.exitWith_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWith_expression) {
			return visitor.visitWith_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Common_table_expressionContext extends ParserRuleContext {
	public _expression_name: IdContext;
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public select_statement(): Select_statementContext {
		return this.getRuleContext(0, Select_statementContext);
	}
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public column_name_list(): Column_name_listContext | undefined {
		return this.tryGetRuleContext(0, Column_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_common_table_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCommon_table_expression) {
			listener.enterCommon_table_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCommon_table_expression) {
			listener.exitCommon_table_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCommon_table_expression) {
			return visitor.visitCommon_table_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_elemContext extends ParserRuleContext {
	public _udt_column_name: IdContext;
	public _method_name: IdContext;
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public full_column_name(): Full_column_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_column_nameContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public assignment_operator(): Assignment_operatorContext | undefined {
		return this.tryGetRuleContext(0, Assignment_operatorContext);
	}
	public expression_list(): Expression_listContext | undefined {
		return this.tryGetRuleContext(0, Expression_listContext);
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_update_elem; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUpdate_elem) {
			listener.enterUpdate_elem(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUpdate_elem) {
			listener.exitUpdate_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUpdate_elem) {
			return visitor.visitUpdate_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_condition_listContext extends ParserRuleContext {
	public search_condition(): Search_conditionContext[];
	public search_condition(i: number): Search_conditionContext;
	public search_condition(i?: number): Search_conditionContext | Search_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Search_conditionContext);
		} else {
			return this.getRuleContext(i, Search_conditionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_search_condition_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSearch_condition_list) {
			listener.enterSearch_condition_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSearch_condition_list) {
			listener.exitSearch_condition_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSearch_condition_list) {
			return visitor.visitSearch_condition_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_conditionContext extends ParserRuleContext {
	public search_condition_and(): Search_condition_andContext[];
	public search_condition_and(i: number): Search_condition_andContext;
	public search_condition_and(i?: number): Search_condition_andContext | Search_condition_andContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Search_condition_andContext);
		} else {
			return this.getRuleContext(i, Search_condition_andContext);
		}
	}
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.OR);
		} else {
			return this.getToken(TSqlParser.OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_search_condition; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSearch_condition) {
			listener.enterSearch_condition(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSearch_condition) {
			listener.exitSearch_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSearch_condition) {
			return visitor.visitSearch_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_condition_andContext extends ParserRuleContext {
	public search_condition_not(): Search_condition_notContext[];
	public search_condition_not(i: number): Search_condition_notContext;
	public search_condition_not(i?: number): Search_condition_notContext | Search_condition_notContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Search_condition_notContext);
		} else {
			return this.getRuleContext(i, Search_condition_notContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.AND);
		} else {
			return this.getToken(TSqlParser.AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_search_condition_and; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSearch_condition_and) {
			listener.enterSearch_condition_and(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSearch_condition_and) {
			listener.exitSearch_condition_and(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSearch_condition_and) {
			return visitor.visitSearch_condition_and(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_condition_notContext extends ParserRuleContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_search_condition_not; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSearch_condition_not) {
			listener.enterSearch_condition_not(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSearch_condition_not) {
			listener.exitSearch_condition_not(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSearch_condition_not) {
			return visitor.visitSearch_condition_not(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXISTS, 0); }
	public subquery(): SubqueryContext | undefined {
		return this.tryGetRuleContext(0, SubqueryContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public comparison_operator(): Comparison_operatorContext | undefined {
		return this.tryGetRuleContext(0, Comparison_operatorContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SOME, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANY, 0); }
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BETWEEN, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AND, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IN, 0); }
	public expression_list(): Expression_listContext | undefined {
		return this.tryGetRuleContext(0, Expression_listContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LIKE, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ESCAPE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IS, 0); }
	public null_notnull(): Null_notnullContext | undefined {
		return this.tryGetRuleContext(0, Null_notnullContext);
	}
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_predicate; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPredicate) {
			listener.enterPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPredicate) {
			listener.exitPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPredicate) {
			return visitor.visitPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Query_expressionContext extends ParserRuleContext {
	public query_specification(): Query_specificationContext | undefined {
		return this.tryGetRuleContext(0, Query_specificationContext);
	}
	public query_expression(): Query_expressionContext | undefined {
		return this.tryGetRuleContext(0, Query_expressionContext);
	}
	public sql_union(): Sql_unionContext[];
	public sql_union(i: number): Sql_unionContext;
	public sql_union(i?: number): Sql_unionContext | Sql_unionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sql_unionContext);
		} else {
			return this.getRuleContext(i, Sql_unionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_query_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQuery_expression) {
			listener.enterQuery_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQuery_expression) {
			listener.exitQuery_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQuery_expression) {
			return visitor.visitQuery_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql_unionContext extends ParserRuleContext {
	public UNION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNION, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXCEPT, 0); }
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTERSECT, 0); }
	public query_specification(): Query_specificationContext | undefined {
		return this.tryGetRuleContext(0, Query_specificationContext);
	}
	public query_expression(): Query_expressionContext | undefined {
		return this.tryGetRuleContext(0, Query_expressionContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_sql_union; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSql_union) {
			listener.enterSql_union(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSql_union) {
			listener.exitSql_union(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSql_union) {
			return visitor.visitSql_union(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Query_specificationContext extends ParserRuleContext {
	public _where: Search_conditionContext;
	public _having: Search_conditionContext;
	public SELECT(): TerminalNode { return this.getToken(TSqlParser.SELECT, 0); }
	public select_list(): Select_listContext {
		return this.getRuleContext(0, Select_listContext);
	}
	public top_clause(): Top_clauseContext | undefined {
		return this.tryGetRuleContext(0, Top_clauseContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INTO, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FROM, 0); }
	public table_sources(): Table_sourcesContext | undefined {
		return this.tryGetRuleContext(0, Table_sourcesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WHERE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUP, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public group_by_item(): Group_by_itemContext[];
	public group_by_item(i: number): Group_by_itemContext;
	public group_by_item(i?: number): Group_by_itemContext | Group_by_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Group_by_itemContext);
		} else {
			return this.getRuleContext(i, Group_by_itemContext);
		}
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HAVING, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ALL);
		} else {
			return this.getToken(TSqlParser.ALL, i);
		}
	}
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISTINCT, 0); }
	public search_condition(): Search_conditionContext[];
	public search_condition(i: number): Search_conditionContext;
	public search_condition(i?: number): Search_conditionContext | Search_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Search_conditionContext);
		} else {
			return this.getRuleContext(i, Search_conditionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_query_specification; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQuery_specification) {
			listener.enterQuery_specification(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQuery_specification) {
			listener.exitQuery_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQuery_specification) {
			return visitor.visitQuery_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_clauseContext extends ParserRuleContext {
	public TOP(): TerminalNode { return this.getToken(TSqlParser.TOP, 0); }
	public top_percent(): Top_percentContext | undefined {
		return this.tryGetRuleContext(0, Top_percentContext);
	}
	public top_count(): Top_countContext | undefined {
		return this.tryGetRuleContext(0, Top_countContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_top_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTop_clause) {
			listener.enterTop_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTop_clause) {
			listener.exitTop_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTop_clause) {
			return visitor.visitTop_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_percentContext extends ParserRuleContext {
	public PERCENT(): TerminalNode { return this.getToken(TSqlParser.PERCENT, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REAL, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FLOAT, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_top_percent; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTop_percent) {
			listener.enterTop_percent(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTop_percent) {
			listener.exitTop_percent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTop_percent) {
			return visitor.visitTop_percent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_countContext extends ParserRuleContext {
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_top_count; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTop_count) {
			listener.enterTop_count(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTop_count) {
			listener.exitTop_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTop_count) {
			return visitor.visitTop_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Order_by_clauseContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(TSqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(TSqlParser.BY, 0); }
	public order_by_expression(): Order_by_expressionContext[];
	public order_by_expression(i: number): Order_by_expressionContext;
	public order_by_expression(i?: number): Order_by_expressionContext | Order_by_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Order_by_expressionContext);
		} else {
			return this.getRuleContext(i, Order_by_expressionContext);
		}
	}
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFFSET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public ROW(): TerminalNode[];
	public ROW(i: number): TerminalNode;
	public ROW(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ROW);
		} else {
			return this.getToken(TSqlParser.ROW, i);
		}
	}
	public ROWS(): TerminalNode[];
	public ROWS(i: number): TerminalNode;
	public ROWS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ROWS);
		} else {
			return this.getToken(TSqlParser.ROWS, i);
		}
	}
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FETCH, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ONLY, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_order_by_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOrder_by_clause) {
			listener.enterOrder_by_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOrder_by_clause) {
			listener.exitOrder_by_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOrder_by_clause) {
			return visitor.visitOrder_by_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_clauseContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public BROWSE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BROWSE, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XML, 0); }
	public RAW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RAW, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public xml_common_directives(): Xml_common_directivesContext[];
	public xml_common_directives(i: number): Xml_common_directivesContext;
	public xml_common_directives(i?: number): Xml_common_directivesContext | Xml_common_directivesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xml_common_directivesContext);
		} else {
			return this.getRuleContext(i, Xml_common_directivesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public ELEMENTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ELEMENTS, 0); }
	public XSINIL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XSINIL, 0); }
	public ABSENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ABSENT, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public XMLDATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XMLDATA, 0); }
	public XMLSCHEMA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XMLSCHEMA, 0); }
	public EXPLICIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXPLICIT, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PATH, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.JSON, 0); }
	public ROOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROOT, 0); }
	public INCLUDE_NULL_VALUES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
	public WITHOUT_ARRAY_WRAPPER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_for_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFor_clause) {
			listener.enterFor_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFor_clause) {
			listener.exitFor_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFor_clause) {
			return visitor.visitFor_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_common_directivesContext extends ParserRuleContext {
	public BINARY_BASE64(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY_BASE64, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE, 0); }
	public ROOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_xml_common_directives; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterXml_common_directives) {
			listener.enterXml_common_directives(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitXml_common_directives) {
			listener.exitXml_common_directives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitXml_common_directives) {
			return visitor.visitXml_common_directives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Order_by_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_order_by_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOrder_by_expression) {
			listener.enterOrder_by_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOrder_by_expression) {
			listener.exitOrder_by_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOrder_by_expression) {
			return visitor.visitOrder_by_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_by_itemContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_group_by_item; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGroup_by_item) {
			listener.enterGroup_by_item(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGroup_by_item) {
			listener.exitGroup_by_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGroup_by_item) {
			return visitor.visitGroup_by_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Option_clauseContext extends ParserRuleContext {
	public OPTION(): TerminalNode { return this.getToken(TSqlParser.OPTION, 0); }
	public option(): OptionContext[];
	public option(i: number): OptionContext;
	public option(i?: number): OptionContext | OptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OptionContext);
		} else {
			return this.getRuleContext(i, OptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_option_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOption_clause) {
			listener.enterOption_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOption_clause) {
			listener.exitOption_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOption_clause) {
			return visitor.visitOption_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptionContext extends ParserRuleContext {
	public _number_rows: Token;
	public _number_of_processors: Token;
	public _number_recursion: Token;
	public FAST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAST, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUP, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HASH, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ORDER, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNION, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MERGE, 0); }
	public CONCAT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONCAT, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.JOIN, 0); }
	public LOOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOOP, 0); }
	public EXPAND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXPAND, 0); }
	public VIEWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VIEWS, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE, 0); }
	public IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEEP, 0); }
	public PLAN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PLAN, 0); }
	public KEEPFIXED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEEPFIXED, 0); }
	public MAXDOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXDOP, 0); }
	public MAXRECURSION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXRECURSION, 0); }
	public OPTIMIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPTIMIZE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOR, 0); }
	public optimize_for_arg(): Optimize_for_argContext[];
	public optimize_for_arg(i: number): Optimize_for_argContext;
	public optimize_for_arg(i?: number): Optimize_for_argContext | Optimize_for_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Optimize_for_argContext);
		} else {
			return this.getRuleContext(i, Optimize_for_argContext);
		}
	}
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNKNOWN, 0); }
	public PARAMETERIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARAMETERIZATION, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIMPLE, 0); }
	public FORCED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCED, 0); }
	public RECOMPILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECOMPILE, 0); }
	public ROBUST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROBUST, 0); }
	public USE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USE, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOption) {
			listener.enterOption(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOption) {
			listener.exitOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOption) {
			return visitor.visitOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Optimize_for_argContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode { return this.getToken(TSqlParser.LOCAL_ID, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNKNOWN, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_optimize_for_arg; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOptimize_for_arg) {
			listener.enterOptimize_for_arg(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOptimize_for_arg) {
			listener.exitOptimize_for_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOptimize_for_arg) {
			return visitor.visitOptimize_for_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_listContext extends ParserRuleContext {
	public select_list_elem(): Select_list_elemContext[];
	public select_list_elem(i: number): Select_list_elemContext;
	public select_list_elem(i?: number): Select_list_elemContext | Select_list_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_list_elemContext);
		} else {
			return this.getRuleContext(i, Select_list_elemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_select_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSelect_list) {
			listener.enterSelect_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSelect_list) {
			listener.exitSelect_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSelect_list) {
			return visitor.visitSelect_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Udt_method_argumentsContext extends ParserRuleContext {
	public execute_var_string(): Execute_var_stringContext[];
	public execute_var_string(i: number): Execute_var_stringContext;
	public execute_var_string(i?: number): Execute_var_stringContext | Execute_var_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Execute_var_stringContext);
		} else {
			return this.getRuleContext(i, Execute_var_stringContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_udt_method_arguments; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUdt_method_arguments) {
			listener.enterUdt_method_arguments(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUdt_method_arguments) {
			listener.exitUdt_method_arguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUdt_method_arguments) {
			return visitor.visitUdt_method_arguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AsteriskContext extends ParserRuleContext {
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public asterisk(): AsteriskContext | undefined {
		return this.tryGetRuleContext(0, AsteriskContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_asterisk; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAsterisk) {
			listener.enterAsterisk(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAsterisk) {
			listener.exitAsterisk(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAsterisk) {
			return visitor.visitAsterisk(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_elemContext extends ParserRuleContext {
	public _column_name: IdContext;
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY, 0); }
	public ROWGUID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWGUID, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public as_column_alias(): As_column_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_column_aliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_elem; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_elem) {
			listener.enterColumn_elem(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_elem) {
			listener.exitColumn_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_elem) {
			return visitor.visitColumn_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Udt_elemContext extends ParserRuleContext {
	public _udt_column_name: IdContext;
	public _non_static_attr: IdContext;
	public _static_attr: IdContext;
	public udt_method_arguments(): Udt_method_argumentsContext | undefined {
		return this.tryGetRuleContext(0, Udt_method_argumentsContext);
	}
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public as_column_alias(): As_column_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_column_aliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_udt_elem; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUdt_elem) {
			listener.enterUdt_elem(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUdt_elem) {
			listener.exitUdt_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUdt_elem) {
			return visitor.visitUdt_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression_elemContext extends ParserRuleContext {
	public _eq: Token;
	public column_alias(): Column_aliasContext | undefined {
		return this.tryGetRuleContext(0, Column_aliasContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public as_column_alias(): As_column_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_column_aliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_expression_elem; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExpression_elem) {
			listener.enterExpression_elem(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExpression_elem) {
			listener.exitExpression_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExpression_elem) {
			return visitor.visitExpression_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_list_elemContext extends ParserRuleContext {
	public asterisk(): AsteriskContext | undefined {
		return this.tryGetRuleContext(0, AsteriskContext);
	}
	public column_elem(): Column_elemContext | undefined {
		return this.tryGetRuleContext(0, Column_elemContext);
	}
	public udt_elem(): Udt_elemContext | undefined {
		return this.tryGetRuleContext(0, Udt_elemContext);
	}
	public expression_elem(): Expression_elemContext | undefined {
		return this.tryGetRuleContext(0, Expression_elemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_select_list_elem; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSelect_list_elem) {
			listener.enterSelect_list_elem(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSelect_list_elem) {
			listener.exitSelect_list_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSelect_list_elem) {
			return visitor.visitSelect_list_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sourcesContext extends ParserRuleContext {
	public table_source(): Table_sourceContext[];
	public table_source(i: number): Table_sourceContext;
	public table_source(i?: number): Table_sourceContext | Table_sourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_sourceContext);
		} else {
			return this.getRuleContext(i, Table_sourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_sources; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_sources) {
			listener.enterTable_sources(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_sources) {
			listener.exitTable_sources(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_sources) {
			return visitor.visitTable_sources(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sourceContext extends ParserRuleContext {
	public table_source_item_joined(): Table_source_item_joinedContext {
		return this.getRuleContext(0, Table_source_item_joinedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_source; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_source) {
			listener.enterTable_source(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_source) {
			listener.exitTable_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_source) {
			return visitor.visitTable_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_source_item_joinedContext extends ParserRuleContext {
	public table_source_item(): Table_source_itemContext {
		return this.getRuleContext(0, Table_source_itemContext);
	}
	public join_part(): Join_partContext[];
	public join_part(i: number): Join_partContext;
	public join_part(i?: number): Join_partContext | Join_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Join_partContext);
		} else {
			return this.getRuleContext(i, Join_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_source_item_joined; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_source_item_joined) {
			listener.enterTable_source_item_joined(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_source_item_joined) {
			listener.exitTable_source_item_joined(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_source_item_joined) {
			return visitor.visitTable_source_item_joined(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_source_itemContext extends ParserRuleContext {
	public table_name_with_hint(): Table_name_with_hintContext | undefined {
		return this.tryGetRuleContext(0, Table_name_with_hintContext);
	}
	public as_table_alias(): As_table_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_table_aliasContext);
	}
	public full_table_name(): Full_table_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_table_nameContext);
	}
	public rowset_function(): Rowset_functionContext | undefined {
		return this.tryGetRuleContext(0, Rowset_functionContext);
	}
	public derived_table(): Derived_tableContext | undefined {
		return this.tryGetRuleContext(0, Derived_tableContext);
	}
	public column_alias_list(): Column_alias_listContext | undefined {
		return this.tryGetRuleContext(0, Column_alias_listContext);
	}
	public change_table(): Change_tableContext | undefined {
		return this.tryGetRuleContext(0, Change_tableContext);
	}
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public open_xml(): Open_xmlContext | undefined {
		return this.tryGetRuleContext(0, Open_xmlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_source_item; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_source_item) {
			listener.enterTable_source_item(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_source_item) {
			listener.exitTable_source_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_source_item) {
			return visitor.visitTable_source_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_xmlContext extends ParserRuleContext {
	public OPENXML(): TerminalNode { return this.getToken(TSqlParser.OPENXML, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public schema_declaration(): Schema_declarationContext | undefined {
		return this.tryGetRuleContext(0, Schema_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_open_xml; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOpen_xml) {
			listener.enterOpen_xml(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOpen_xml) {
			listener.exitOpen_xml(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOpen_xml) {
			return visitor.visitOpen_xml(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Schema_declarationContext extends ParserRuleContext {
	public column_declaration(): Column_declarationContext[];
	public column_declaration(i: number): Column_declarationContext;
	public column_declaration(i?: number): Column_declarationContext | Column_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_declarationContext);
		} else {
			return this.getRuleContext(i, Column_declarationContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_schema_declaration; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSchema_declaration) {
			listener.enterSchema_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSchema_declaration) {
			listener.exitSchema_declaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSchema_declaration) {
			return visitor.visitSchema_declaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_declarationContext extends ParserRuleContext {
	public ID(): TerminalNode { return this.getToken(TSqlParser.ID, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_declaration; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_declaration) {
			listener.enterColumn_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_declaration) {
			listener.exitColumn_declaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_declaration) {
			return visitor.visitColumn_declaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Change_tableContext extends ParserRuleContext {
	public CHANGETABLE(): TerminalNode { return this.getToken(TSqlParser.CHANGETABLE, 0); }
	public CHANGES(): TerminalNode { return this.getToken(TSqlParser.CHANGES, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_change_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterChange_table) {
			listener.enterChange_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitChange_table) {
			listener.exitChange_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitChange_table) {
			return visitor.visitChange_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Join_partContext extends ParserRuleContext {
	public _join_type: Token;
	public _join_hint: Token;
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.JOIN, 0); }
	public table_source(): Table_sourceContext | undefined {
		return this.tryGetRuleContext(0, Table_sourceContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public search_condition(): Search_conditionContext | undefined {
		return this.tryGetRuleContext(0, Search_conditionContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RIGHT, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULL, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INNER, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUTER, 0); }
	public LOOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOOP, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HASH, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MERGE, 0); }
	public REMOTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOTE, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CROSS, 0); }
	public APPLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.APPLY, 0); }
	public PIVOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PIVOT, 0); }
	public pivot_clause(): Pivot_clauseContext | undefined {
		return this.tryGetRuleContext(0, Pivot_clauseContext);
	}
	public as_table_alias(): As_table_aliasContext | undefined {
		return this.tryGetRuleContext(0, As_table_aliasContext);
	}
	public UNPIVOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNPIVOT, 0); }
	public unpivot_clause(): Unpivot_clauseContext | undefined {
		return this.tryGetRuleContext(0, Unpivot_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_join_part; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterJoin_part) {
			listener.enterJoin_part(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitJoin_part) {
			listener.exitJoin_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitJoin_part) {
			return visitor.visitJoin_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pivot_clauseContext extends ParserRuleContext {
	public aggregate_windowed_function(): Aggregate_windowed_functionContext {
		return this.getRuleContext(0, Aggregate_windowed_functionContext);
	}
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public full_column_name(): Full_column_nameContext {
		return this.getRuleContext(0, Full_column_nameContext);
	}
	public IN(): TerminalNode { return this.getToken(TSqlParser.IN, 0); }
	public column_alias_list(): Column_alias_listContext {
		return this.getRuleContext(0, Column_alias_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_pivot_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterPivot_clause) {
			listener.enterPivot_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitPivot_clause) {
			listener.exitPivot_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitPivot_clause) {
			return visitor.visitPivot_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unpivot_clauseContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public FOR(): TerminalNode { return this.getToken(TSqlParser.FOR, 0); }
	public full_column_name(): Full_column_nameContext {
		return this.getRuleContext(0, Full_column_nameContext);
	}
	public IN(): TerminalNode { return this.getToken(TSqlParser.IN, 0); }
	public full_column_name_list(): Full_column_name_listContext {
		return this.getRuleContext(0, Full_column_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_unpivot_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterUnpivot_clause) {
			listener.enterUnpivot_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitUnpivot_clause) {
			listener.exitUnpivot_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitUnpivot_clause) {
			return visitor.visitUnpivot_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Full_column_name_listContext extends ParserRuleContext {
	public full_column_name(): Full_column_nameContext[];
	public full_column_name(i: number): Full_column_nameContext;
	public full_column_name(i?: number): Full_column_nameContext | Full_column_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Full_column_nameContext);
		} else {
			return this.getRuleContext(i, Full_column_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_full_column_name_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFull_column_name_list) {
			listener.enterFull_column_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFull_column_name_list) {
			listener.exitFull_column_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFull_column_name_list) {
			return visitor.visitFull_column_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_name_with_hintContext extends ParserRuleContext {
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public with_table_hints(): With_table_hintsContext | undefined {
		return this.tryGetRuleContext(0, With_table_hintsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_name_with_hint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_name_with_hint) {
			listener.enterTable_name_with_hint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_name_with_hint) {
			listener.exitTable_name_with_hint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_name_with_hint) {
			return visitor.visitTable_name_with_hint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rowset_functionContext extends ParserRuleContext {
	public _provider_name: Token;
	public _connectionString: Token;
	public _sql: Token;
	public _data_file: Token;
	public OPENROWSET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPENROWSET, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.COMMA);
		} else {
			return this.getToken(TSqlParser.COMMA, i);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RR_BRACKET, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public BULK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BULK, 0); }
	public bulk_option(): Bulk_optionContext[];
	public bulk_option(i: number): Bulk_optionContext;
	public bulk_option(i?: number): Bulk_optionContext | Bulk_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bulk_optionContext);
		} else {
			return this.getRuleContext(i, Bulk_optionContext);
		}
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_rowset_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRowset_function) {
			listener.enterRowset_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRowset_function) {
			listener.exitRowset_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRowset_function) {
			return visitor.visitRowset_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bulk_optionContext extends ParserRuleContext {
	public _bulk_option_value: Token;
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_bulk_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBulk_option) {
			listener.enterBulk_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBulk_option) {
			listener.exitBulk_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBulk_option) {
			return visitor.visitBulk_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Derived_tableContext extends ParserRuleContext {
	public subquery(): SubqueryContext | undefined {
		return this.tryGetRuleContext(0, SubqueryContext);
	}
	public table_value_constructor(): Table_value_constructorContext | undefined {
		return this.tryGetRuleContext(0, Table_value_constructorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_derived_table; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDerived_table) {
			listener.enterDerived_table(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDerived_table) {
			listener.exitDerived_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDerived_table) {
			return visitor.visitDerived_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_callContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_function_call; }
	public copyFrom(ctx: Function_callContext): void {
		super.copyFrom(ctx);
	}
}
export class CURRENT_USERContext extends Function_callContext {
	public CURRENT_USER(): TerminalNode { return this.getToken(TSqlParser.CURRENT_USER, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCURRENT_USER) {
			listener.enterCURRENT_USER(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCURRENT_USER) {
			listener.exitCURRENT_USER(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCURRENT_USER) {
			return visitor.visitCURRENT_USER(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DATEADDContext extends Function_callContext {
	public DATEADD(): TerminalNode { return this.getToken(TSqlParser.DATEADD, 0); }
	public ID(): TerminalNode { return this.getToken(TSqlParser.ID, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDATEADD) {
			listener.enterDATEADD(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDATEADD) {
			listener.exitDATEADD(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDATEADD) {
			return visitor.visitDATEADD(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CHECKSUMContext extends Function_callContext {
	public CHECKSUM(): TerminalNode { return this.getToken(TSqlParser.CHECKSUM, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCHECKSUM) {
			listener.enterCHECKSUM(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCHECKSUM) {
			listener.exitCHECKSUM(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCHECKSUM) {
			return visitor.visitCHECKSUM(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CURRENT_TIMESTAMPContext extends Function_callContext {
	public CURRENT_TIMESTAMP(): TerminalNode { return this.getToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCURRENT_TIMESTAMP) {
			listener.enterCURRENT_TIMESTAMP(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCURRENT_TIMESTAMP) {
			listener.exitCURRENT_TIMESTAMP(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCURRENT_TIMESTAMP) {
			return visitor.visitCURRENT_TIMESTAMP(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BINARY_CHECKSUMContext extends Function_callContext {
	public BINARY_CHECKSUM(): TerminalNode { return this.getToken(TSqlParser.BINARY_CHECKSUM, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBINARY_CHECKSUM) {
			listener.enterBINARY_CHECKSUM(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBINARY_CHECKSUM) {
			listener.exitBINARY_CHECKSUM(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBINARY_CHECKSUM) {
			return visitor.visitBINARY_CHECKSUM(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SYSTEM_USERContext extends Function_callContext {
	public SYSTEM_USER(): TerminalNode { return this.getToken(TSqlParser.SYSTEM_USER, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSYSTEM_USER) {
			listener.enterSYSTEM_USER(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSYSTEM_USER) {
			listener.exitSYSTEM_USER(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSYSTEM_USER) {
			return visitor.visitSYSTEM_USER(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NULLIFContext extends Function_callContext {
	public NULLIF(): TerminalNode { return this.getToken(TSqlParser.NULLIF, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNULLIF) {
			listener.enterNULLIF(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNULLIF) {
			listener.exitNULLIF(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNULLIF) {
			return visitor.visitNULLIF(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SESSION_USERContext extends Function_callContext {
	public SESSION_USER(): TerminalNode { return this.getToken(TSqlParser.SESSION_USER, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSESSION_USER) {
			listener.enterSESSION_USER(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSESSION_USER) {
			listener.exitSESSION_USER(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSESSION_USER) {
			return visitor.visitSESSION_USER(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CONVERTContext extends Function_callContext {
	public _convert_data_type: Data_typeContext;
	public _convert_expression: ExpressionContext;
	public _style: ExpressionContext;
	public CONVERT(): TerminalNode { return this.getToken(TSqlParser.CONVERT, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCONVERT) {
			listener.enterCONVERT(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCONVERT) {
			listener.exitCONVERT(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCONVERT) {
			return visitor.visitCONVERT(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class XML_DATA_TYPE_FUNCContext extends Function_callContext {
	public xml_data_type_methods(): Xml_data_type_methodsContext {
		return this.getRuleContext(0, Xml_data_type_methodsContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterXML_DATA_TYPE_FUNC) {
			listener.enterXML_DATA_TYPE_FUNC(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitXML_DATA_TYPE_FUNC) {
			listener.exitXML_DATA_TYPE_FUNC(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitXML_DATA_TYPE_FUNC) {
			return visitor.visitXML_DATA_TYPE_FUNC(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class COALESCEContext extends Function_callContext {
	public COALESCE(): TerminalNode { return this.getToken(TSqlParser.COALESCE, 0); }
	public expression_list(): Expression_listContext {
		return this.getRuleContext(0, Expression_listContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCOALESCE) {
			listener.enterCOALESCE(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCOALESCE) {
			listener.exitCOALESCE(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCOALESCE) {
			return visitor.visitCOALESCE(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CASTContext extends Function_callContext {
	public CAST(): TerminalNode { return this.getToken(TSqlParser.CAST, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(TSqlParser.AS, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCAST) {
			listener.enterCAST(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCAST) {
			listener.exitCAST(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCAST) {
			return visitor.visitCAST(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MIN_ACTIVE_ROWVERSIONContext extends Function_callContext {
	public MIN_ACTIVE_ROWVERSION(): TerminalNode { return this.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterMIN_ACTIVE_ROWVERSION) {
			listener.enterMIN_ACTIVE_ROWVERSION(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitMIN_ACTIVE_ROWVERSION) {
			listener.exitMIN_ACTIVE_ROWVERSION(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitMIN_ACTIVE_ROWVERSION) {
			return visitor.visitMIN_ACTIVE_ROWVERSION(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SCALAR_FUNCTIONContext extends Function_callContext {
	public scalar_function_name(): Scalar_function_nameContext {
		return this.getRuleContext(0, Scalar_function_nameContext);
	}
	public expression_list(): Expression_listContext | undefined {
		return this.tryGetRuleContext(0, Expression_listContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSCALAR_FUNCTION) {
			listener.enterSCALAR_FUNCTION(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSCALAR_FUNCTION) {
			listener.exitSCALAR_FUNCTION(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSCALAR_FUNCTION) {
			return visitor.visitSCALAR_FUNCTION(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DATEPARTContext extends Function_callContext {
	public DATEPART(): TerminalNode { return this.getToken(TSqlParser.DATEPART, 0); }
	public ID(): TerminalNode { return this.getToken(TSqlParser.ID, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDATEPART) {
			listener.enterDATEPART(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDATEPART) {
			listener.exitDATEPART(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDATEPART) {
			return visitor.visitDATEPART(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class STUFFContext extends Function_callContext {
	public STUFF(): TerminalNode { return this.getToken(TSqlParser.STUFF, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSTUFF) {
			listener.enterSTUFF(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSTUFF) {
			listener.exitSTUFF(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSTUFF) {
			return visitor.visitSTUFF(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
	public aggregate_windowed_function(): Aggregate_windowed_functionContext {
		return this.getRuleContext(0, Aggregate_windowed_functionContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAGGREGATE_WINDOWED_FUNC) {
			listener.enterAGGREGATE_WINDOWED_FUNC(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAGGREGATE_WINDOWED_FUNC) {
			listener.exitAGGREGATE_WINDOWED_FUNC(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAGGREGATE_WINDOWED_FUNC) {
			return visitor.visitAGGREGATE_WINDOWED_FUNC(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IDENTITYContext extends Function_callContext {
	public _seed: Token;
	public _increment: Token;
	public IDENTITY(): TerminalNode { return this.getToken(TSqlParser.IDENTITY, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterIDENTITY) {
			listener.enterIDENTITY(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitIDENTITY) {
			listener.exitIDENTITY(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitIDENTITY) {
			return visitor.visitIDENTITY(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RANKING_WINDOWED_FUNCContext extends Function_callContext {
	public ranking_windowed_function(): Ranking_windowed_functionContext {
		return this.getRuleContext(0, Ranking_windowed_functionContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRANKING_WINDOWED_FUNC) {
			listener.enterRANKING_WINDOWED_FUNC(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRANKING_WINDOWED_FUNC) {
			listener.exitRANKING_WINDOWED_FUNC(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRANKING_WINDOWED_FUNC) {
			return visitor.visitRANKING_WINDOWED_FUNC(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DATENAMEContext extends Function_callContext {
	public DATENAME(): TerminalNode { return this.getToken(TSqlParser.DATENAME, 0); }
	public ID(): TerminalNode { return this.getToken(TSqlParser.ID, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDATENAME) {
			listener.enterDATENAME(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDATENAME) {
			listener.exitDATENAME(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDATENAME) {
			return visitor.visitDATENAME(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GETUTCDATEContext extends Function_callContext {
	public GETUTCDATE(): TerminalNode { return this.getToken(TSqlParser.GETUTCDATE, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGETUTCDATE) {
			listener.enterGETUTCDATE(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGETUTCDATE) {
			listener.exitGETUTCDATE(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGETUTCDATE) {
			return visitor.visitGETUTCDATE(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
	public analytic_windowed_function(): Analytic_windowed_functionContext {
		return this.getRuleContext(0, Analytic_windowed_functionContext);
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterANALYTIC_WINDOWED_FUNC) {
			listener.enterANALYTIC_WINDOWED_FUNC(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitANALYTIC_WINDOWED_FUNC) {
			listener.exitANALYTIC_WINDOWED_FUNC(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitANALYTIC_WINDOWED_FUNC) {
			return visitor.visitANALYTIC_WINDOWED_FUNC(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ISNULLContext extends Function_callContext {
	public ISNULL(): TerminalNode { return this.getToken(TSqlParser.ISNULL, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterISNULL) {
			listener.enterISNULL(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitISNULL) {
			listener.exitISNULL(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitISNULL) {
			return visitor.visitISNULL(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DATEDIFFContext extends Function_callContext {
	public DATEDIFF(): TerminalNode { return this.getToken(TSqlParser.DATEDIFF, 0); }
	public ID(): TerminalNode { return this.getToken(TSqlParser.ID, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDATEDIFF) {
			listener.enterDATEDIFF(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDATEDIFF) {
			listener.exitDATEDIFF(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDATEDIFF) {
			return visitor.visitDATEDIFF(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GETDATEContext extends Function_callContext {
	public GETDATE(): TerminalNode { return this.getToken(TSqlParser.GETDATE, 0); }
	constructor(ctx: Function_callContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGETDATE) {
			listener.enterGETDATE(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGETDATE) {
			listener.exitGETDATE(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGETDATE) {
			return visitor.visitGETDATE(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_data_type_methodsContext extends ParserRuleContext {
	public value_method(): Value_methodContext | undefined {
		return this.tryGetRuleContext(0, Value_methodContext);
	}
	public query_method(): Query_methodContext | undefined {
		return this.tryGetRuleContext(0, Query_methodContext);
	}
	public exist_method(): Exist_methodContext | undefined {
		return this.tryGetRuleContext(0, Exist_methodContext);
	}
	public modify_method(): Modify_methodContext | undefined {
		return this.tryGetRuleContext(0, Modify_methodContext);
	}
	public nodes_method(): Nodes_methodContext | undefined {
		return this.tryGetRuleContext(0, Nodes_methodContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_xml_data_type_methods; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterXml_data_type_methods) {
			listener.enterXml_data_type_methods(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitXml_data_type_methods) {
			listener.exitXml_data_type_methods(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitXml_data_type_methods) {
			return visitor.visitXml_data_type_methods(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_methodContext extends ParserRuleContext {
	public _xquery: Token;
	public _sqltype: Token;
	public VALUE(): TerminalNode { return this.getToken(TSqlParser.VALUE, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	public EVENTDATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EVENTDATA, 0); }
	public query_method(): Query_methodContext | undefined {
		return this.tryGetRuleContext(0, Query_methodContext);
	}
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROW, 0); }
	public PARAM_NODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARAM_NODE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_value_method; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterValue_method) {
			listener.enterValue_method(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitValue_method) {
			listener.exitValue_method(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitValue_method) {
			return visitor.visitValue_method(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Query_methodContext extends ParserRuleContext {
	public _xquery: Token;
	public QUERY(): TerminalNode { return this.getToken(TSqlParser.QUERY, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	public full_table_name(): Full_table_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_table_nameContext);
	}
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_query_method; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQuery_method) {
			listener.enterQuery_method(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQuery_method) {
			listener.exitQuery_method(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQuery_method) {
			return visitor.visitQuery_method(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exist_methodContext extends ParserRuleContext {
	public _xquery: Token;
	public EXIST(): TerminalNode { return this.getToken(TSqlParser.EXIST, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_exist_method; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExist_method) {
			listener.enterExist_method(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExist_method) {
			listener.exitExist_method(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExist_method) {
			return visitor.visitExist_method(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Modify_methodContext extends ParserRuleContext {
	public _xml_dml: Token;
	public MODIFY(): TerminalNode { return this.getToken(TSqlParser.MODIFY, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_modify_method; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterModify_method) {
			listener.enterModify_method(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitModify_method) {
			listener.exitModify_method(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitModify_method) {
			return visitor.visitModify_method(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nodes_methodContext extends ParserRuleContext {
	public _xquery: Token;
	public NODES(): TerminalNode { return this.getToken(TSqlParser.NODES, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	public STRING(): TerminalNode { return this.getToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_nodes_method; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNodes_method) {
			listener.enterNodes_method(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNodes_method) {
			listener.exitNodes_method(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNodes_method) {
			return visitor.visitNodes_method(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_sectionContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(TSqlParser.WHEN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public THEN(): TerminalNode { return this.getToken(TSqlParser.THEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_switch_section; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSwitch_section) {
			listener.enterSwitch_section(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSwitch_section) {
			listener.exitSwitch_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSwitch_section) {
			return visitor.visitSwitch_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_search_condition_sectionContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(TSqlParser.WHEN, 0); }
	public search_condition(): Search_conditionContext {
		return this.getRuleContext(0, Search_conditionContext);
	}
	public THEN(): TerminalNode { return this.getToken(TSqlParser.THEN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_switch_search_condition_section; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSwitch_search_condition_section) {
			listener.enterSwitch_search_condition_section(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSwitch_search_condition_section) {
			listener.exitSwitch_search_condition_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSwitch_search_condition_section) {
			return visitor.visitSwitch_search_condition_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class As_column_aliasContext extends ParserRuleContext {
	public column_alias(): Column_aliasContext {
		return this.getRuleContext(0, Column_aliasContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_as_column_alias; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAs_column_alias) {
			listener.enterAs_column_alias(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAs_column_alias) {
			listener.exitAs_column_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAs_column_alias) {
			return visitor.visitAs_column_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class As_table_aliasContext extends ParserRuleContext {
	public table_alias(): Table_aliasContext {
		return this.getRuleContext(0, Table_aliasContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_as_table_alias; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAs_table_alias) {
			listener.enterAs_table_alias(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAs_table_alias) {
			listener.exitAs_table_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAs_table_alias) {
			return visitor.visitAs_table_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_aliasContext extends ParserRuleContext {
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public with_table_hints(): With_table_hintsContext | undefined {
		return this.tryGetRuleContext(0, With_table_hintsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_alias; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_alias) {
			listener.enterTable_alias(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_alias) {
			listener.exitTable_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_alias) {
			return visitor.visitTable_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_table_hintsContext extends ParserRuleContext {
	public table_hint(): Table_hintContext[];
	public table_hint(i: number): Table_hintContext;
	public table_hint(i?: number): Table_hintContext | Table_hintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_hintContext);
		} else {
			return this.getRuleContext(i, Table_hintContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_with_table_hints; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWith_table_hints) {
			listener.enterWith_table_hints(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWith_table_hints) {
			listener.exitWith_table_hints(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWith_table_hints) {
			return visitor.visitWith_table_hints(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_with_table_hintsContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TSqlParser.WITH, 0); }
	public table_hint(): Table_hintContext[];
	public table_hint(i: number): Table_hintContext;
	public table_hint(i?: number): Table_hintContext | Table_hintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_hintContext);
		} else {
			return this.getRuleContext(i, Table_hintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_insert_with_table_hints; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterInsert_with_table_hints) {
			listener.enterInsert_with_table_hints(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitInsert_with_table_hints) {
			listener.exitInsert_with_table_hints(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitInsert_with_table_hints) {
			return visitor.visitInsert_with_table_hints(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_hintContext extends ParserRuleContext {
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INDEX, 0); }
	public index_value(): Index_valueContext[];
	public index_value(i: number): Index_valueContext;
	public index_value(i?: number): Index_valueContext | Index_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Index_valueContext);
		} else {
			return this.getRuleContext(i, Index_valueContext);
		}
	}
	public FORCESEEK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCESEEK, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERIALIZABLE, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SNAPSHOT, 0); }
	public SPATIAL_WINDOW_MAX_CELLS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public ID(): TerminalNode[];
	public ID(i: number): TerminalNode;
	public ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ID);
		} else {
			return this.getToken(TSqlParser.ID, i);
		}
	}
	public NOEXPAND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOEXPAND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_hint; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_hint) {
			listener.enterTable_hint(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_hint) {
			listener.exitTable_hint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_hint) {
			return visitor.visitTable_hint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_valueContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_index_value; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterIndex_value) {
			listener.enterIndex_value(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitIndex_value) {
			listener.exitIndex_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitIndex_value) {
			return visitor.visitIndex_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_alias_listContext extends ParserRuleContext {
	public column_alias(): Column_aliasContext[];
	public column_alias(i: number): Column_aliasContext;
	public column_alias(i?: number): Column_aliasContext | Column_aliasContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_aliasContext);
		} else {
			return this.getRuleContext(i, Column_aliasContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_alias_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_alias_list) {
			listener.enterColumn_alias_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_alias_list) {
			listener.exitColumn_alias_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_alias_list) {
			return visitor.visitColumn_alias_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_aliasContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_alias; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_alias) {
			listener.enterColumn_alias(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_alias) {
			listener.exitColumn_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_alias) {
			return visitor.visitColumn_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_value_constructorContext extends ParserRuleContext {
	public VALUES(): TerminalNode { return this.getToken(TSqlParser.VALUES, 0); }
	public expression_list(): Expression_listContext[];
	public expression_list(i: number): Expression_listContext;
	public expression_list(i?: number): Expression_listContext | Expression_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression_listContext);
		} else {
			return this.getRuleContext(i, Expression_listContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_value_constructor; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_value_constructor) {
			listener.enterTable_value_constructor(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_value_constructor) {
			listener.exitTable_value_constructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_value_constructor) {
			return visitor.visitTable_value_constructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression_listContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_expression_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterExpression_list) {
			listener.enterExpression_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitExpression_list) {
			listener.exitExpression_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitExpression_list) {
			return visitor.visitExpression_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ranking_windowed_functionContext extends ParserRuleContext {
	public over_clause(): Over_clauseContext {
		return this.getRuleContext(0, Over_clauseContext);
	}
	public RANK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RANK, 0); }
	public DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DENSE_RANK, 0); }
	public ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROW_NUMBER, 0); }
	public NTILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NTILE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_ranking_windowed_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRanking_windowed_function) {
			listener.enterRanking_windowed_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRanking_windowed_function) {
			listener.exitRanking_windowed_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRanking_windowed_function) {
			return visitor.visitRanking_windowed_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggregate_windowed_functionContext extends ParserRuleContext {
	public all_distinct_expression(): All_distinct_expressionContext | undefined {
		return this.tryGetRuleContext(0, All_distinct_expressionContext);
	}
	public AVG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AVG, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUM, 0); }
	public STDEV(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STDEV, 0); }
	public STDEVP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STDEVP, 0); }
	public VAR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VAR, 0); }
	public VARP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VARP, 0); }
	public over_clause(): Over_clauseContext | undefined {
		return this.tryGetRuleContext(0, Over_clauseContext);
	}
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COUNT, 0); }
	public COUNT_BIG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COUNT_BIG, 0); }
	public CHECKSUM_AGG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECKSUM_AGG, 0); }
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUPING, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public GROUPING_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUPING_ID, 0); }
	public expression_list(): Expression_listContext | undefined {
		return this.tryGetRuleContext(0, Expression_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_aggregate_windowed_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAggregate_windowed_function) {
			listener.enterAggregate_windowed_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAggregate_windowed_function) {
			listener.exitAggregate_windowed_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAggregate_windowed_function) {
			return visitor.visitAggregate_windowed_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Analytic_windowed_functionContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public over_clause(): Over_clauseContext {
		return this.getRuleContext(0, Over_clauseContext);
	}
	public FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FIRST_VALUE, 0); }
	public LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LAST_VALUE, 0); }
	public LAG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LAG, 0); }
	public LEAD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LEAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_analytic_windowed_function; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAnalytic_windowed_function) {
			listener.enterAnalytic_windowed_function(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAnalytic_windowed_function) {
			listener.exitAnalytic_windowed_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAnalytic_windowed_function) {
			return visitor.visitAnalytic_windowed_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class All_distinct_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_all_distinct_expression; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAll_distinct_expression) {
			listener.enterAll_distinct_expression(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAll_distinct_expression) {
			listener.exitAll_distinct_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAll_distinct_expression) {
			return visitor.visitAll_distinct_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Over_clauseContext extends ParserRuleContext {
	public OVER(): TerminalNode { return this.getToken(TSqlParser.OVER, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTITION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BY, 0); }
	public expression_list(): Expression_listContext | undefined {
		return this.tryGetRuleContext(0, Expression_listContext);
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public row_or_range_clause(): Row_or_range_clauseContext | undefined {
		return this.tryGetRuleContext(0, Row_or_range_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_over_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOver_clause) {
			listener.enterOver_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOver_clause) {
			listener.exitOver_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOver_clause) {
			return visitor.visitOver_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Row_or_range_clauseContext extends ParserRuleContext {
	public window_frame_extent(): Window_frame_extentContext {
		return this.getRuleContext(0, Window_frame_extentContext);
	}
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWS, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RANGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_row_or_range_clause; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterRow_or_range_clause) {
			listener.enterRow_or_range_clause(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitRow_or_range_clause) {
			listener.exitRow_or_range_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitRow_or_range_clause) {
			return visitor.visitRow_or_range_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_extentContext extends ParserRuleContext {
	public window_frame_preceding(): Window_frame_precedingContext | undefined {
		return this.tryGetRuleContext(0, Window_frame_precedingContext);
	}
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BETWEEN, 0); }
	public window_frame_bound(): Window_frame_boundContext[];
	public window_frame_bound(i: number): Window_frame_boundContext;
	public window_frame_bound(i?: number): Window_frame_boundContext | Window_frame_boundContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_frame_boundContext);
		} else {
			return this.getRuleContext(i, Window_frame_boundContext);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_window_frame_extent; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWindow_frame_extent) {
			listener.enterWindow_frame_extent(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWindow_frame_extent) {
			listener.exitWindow_frame_extent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_extent) {
			return visitor.visitWindow_frame_extent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_boundContext extends ParserRuleContext {
	public window_frame_preceding(): Window_frame_precedingContext | undefined {
		return this.tryGetRuleContext(0, Window_frame_precedingContext);
	}
	public window_frame_following(): Window_frame_followingContext | undefined {
		return this.tryGetRuleContext(0, Window_frame_followingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_window_frame_bound; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWindow_frame_bound) {
			listener.enterWindow_frame_bound(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWindow_frame_bound) {
			listener.exitWindow_frame_bound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_bound) {
			return visitor.visitWindow_frame_bound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_precedingContext extends ParserRuleContext {
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNBOUNDED, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRECEDING, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURRENT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_window_frame_preceding; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWindow_frame_preceding) {
			listener.enterWindow_frame_preceding(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWindow_frame_preceding) {
			listener.exitWindow_frame_preceding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_preceding) {
			return visitor.visitWindow_frame_preceding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_followingContext extends ParserRuleContext {
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNBOUNDED, 0); }
	public FOLLOWING(): TerminalNode { return this.getToken(TSqlParser.FOLLOWING, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_window_frame_following; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWindow_frame_following) {
			listener.enterWindow_frame_following(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWindow_frame_following) {
			listener.exitWindow_frame_following(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_following) {
			return visitor.visitWindow_frame_following(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_database_optionContext extends ParserRuleContext {
	public FILESTREAM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILESTREAM, 0); }
	public database_filestream_option(): Database_filestream_optionContext[];
	public database_filestream_option(i: number): Database_filestream_optionContext;
	public database_filestream_option(i?: number): Database_filestream_optionContext | Database_filestream_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Database_filestream_optionContext);
		} else {
			return this.getRuleContext(i, Database_filestream_optionContext);
		}
	}
	public DEFAULT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public DEFAULT_FULLTEXT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
	public NESTED_TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NESTED_TRIGGERS, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public TRANSFORM_NOISE_WORDS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
	public TWO_DIGIT_YEAR_CUTOFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public DB_CHAINING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DB_CHAINING, 0); }
	public TRUSTWORTHY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRUSTWORTHY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_create_database_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCreate_database_option) {
			listener.enterCreate_database_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCreate_database_option) {
			listener.exitCreate_database_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCreate_database_option) {
			return visitor.visitCreate_database_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Database_filestream_optionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public NON_TRANSACTED_ACCESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EQUAL, 0); }
	public DIRECTORY_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DIRECTORY_NAME, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_database_filestream_option; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDatabase_filestream_option) {
			listener.enterDatabase_filestream_option(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDatabase_filestream_option) {
			listener.exitDatabase_filestream_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDatabase_filestream_option) {
			return visitor.visitDatabase_filestream_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Database_file_specContext extends ParserRuleContext {
	public file_group(): File_groupContext | undefined {
		return this.tryGetRuleContext(0, File_groupContext);
	}
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_database_file_spec; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDatabase_file_spec) {
			listener.enterDatabase_file_spec(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDatabase_file_spec) {
			listener.exitDatabase_file_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDatabase_file_spec) {
			return visitor.visitDatabase_file_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_groupContext extends ParserRuleContext {
	public FILEGROUP(): TerminalNode { return this.getToken(TSqlParser.FILEGROUP, 0); }
	public id(): IdContext {
		return this.getRuleContext(0, IdContext);
	}
	public file_spec(): File_specContext[];
	public file_spec(i: number): File_specContext;
	public file_spec(i?: number): File_specContext | File_specContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_specContext);
		} else {
			return this.getRuleContext(i, File_specContext);
		}
	}
	public CONTAINS(): TerminalNode[];
	public CONTAINS(i: number): TerminalNode;
	public CONTAINS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.CONTAINS);
		} else {
			return this.getToken(TSqlParser.CONTAINS, i);
		}
	}
	public FILESTREAM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILESTREAM, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public MEMORY_OPTIMIZED_DATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_file_group; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFile_group) {
			listener.enterFile_group(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFile_group) {
			listener.exitFile_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFile_group) {
			return visitor.visitFile_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public _file: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.LR_BRACKET, 0); }
	public NAME(): TerminalNode { return this.getToken(TSqlParser.NAME, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.EQUAL);
		} else {
			return this.getToken(TSqlParser.EQUAL, i);
		}
	}
	public FILENAME(): TerminalNode { return this.getToken(TSqlParser.FILENAME, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(TSqlParser.RR_BRACKET, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIZE, 0); }
	public file_size(): File_sizeContext[];
	public file_size(i: number): File_sizeContext;
	public file_size(i?: number): File_sizeContext | File_sizeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_sizeContext);
		} else {
			return this.getRuleContext(i, File_sizeContext);
		}
	}
	public MAXSIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXSIZE, 0); }
	public FILEGROWTH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILEGROWTH, 0); }
	public UNLIMITED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNLIMITED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Entity_nameContext extends ParserRuleContext {
	public _server: IdContext;
	public _database: IdContext;
	public _schema: IdContext;
	public _table: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_entity_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEntity_name) {
			listener.enterEntity_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEntity_name) {
			listener.exitEntity_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEntity_name) {
			return visitor.visitEntity_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Entity_name_for_azure_dwContext extends ParserRuleContext {
	public _schema: IdContext;
	public _object_name: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_entity_name_for_azure_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEntity_name_for_azure_dw) {
			listener.enterEntity_name_for_azure_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEntity_name_for_azure_dw) {
			listener.exitEntity_name_for_azure_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEntity_name_for_azure_dw) {
			return visitor.visitEntity_name_for_azure_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Entity_name_for_parallel_dwContext extends ParserRuleContext {
	public _schema_database: IdContext;
	public _schema: IdContext;
	public _object_name: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_entity_name_for_parallel_dw; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEntity_name_for_parallel_dw) {
			listener.enterEntity_name_for_parallel_dw(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEntity_name_for_parallel_dw) {
			listener.exitEntity_name_for_parallel_dw(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEntity_name_for_parallel_dw) {
			return visitor.visitEntity_name_for_parallel_dw(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Full_table_nameContext extends ParserRuleContext {
	public _server: IdContext;
	public _database: IdContext;
	public _schema: IdContext;
	public _table: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_full_table_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFull_table_name) {
			listener.enterFull_table_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFull_table_name) {
			listener.exitFull_table_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFull_table_name) {
			return visitor.visitFull_table_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_nameContext extends ParserRuleContext {
	public _database: IdContext;
	public _schema: IdContext;
	public _table: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public BLOCKING_HIERARCHY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_table_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterTable_name) {
			listener.enterTable_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitTable_name) {
			listener.exitTable_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitTable_name) {
			return visitor.visitTable_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Simple_nameContext extends ParserRuleContext {
	public _schema: IdContext;
	public _name: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_simple_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSimple_name) {
			listener.enterSimple_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSimple_name) {
			listener.exitSimple_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSimple_name) {
			return visitor.visitSimple_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_proc_nameContext extends ParserRuleContext {
	public _database: IdContext;
	public _schema: IdContext;
	public _procedure: IdContext;
	public _server: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_func_proc_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFunc_proc_name) {
			listener.enterFunc_proc_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFunc_proc_name) {
			listener.exitFunc_proc_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFunc_proc_name) {
			return visitor.visitFunc_proc_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ddl_objectContext extends ParserRuleContext {
	public full_table_name(): Full_table_nameContext | undefined {
		return this.tryGetRuleContext(0, Full_table_nameContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_ddl_object; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDdl_object) {
			listener.enterDdl_object(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDdl_object) {
			listener.exitDdl_object(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDdl_object) {
			return visitor.visitDdl_object(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Full_column_nameContext extends ParserRuleContext {
	public _column_name: IdContext;
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public COMPATIBILITY_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATUS, 0); }
	public QUOTED_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
	public ARITHABORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ARITHABORT, 0); }
	public ANSI_WARNINGS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_WARNINGS, 0); }
	public ANSI_PADDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_PADDING, 0); }
	public ANSI_NULLS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_NULLS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_full_column_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFull_column_name) {
			listener.enterFull_column_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFull_column_name) {
			listener.exitFull_column_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFull_column_name) {
			return visitor.visitFull_column_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_name_list_with_orderContext extends ParserRuleContext {
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	public ASC(): TerminalNode[];
	public ASC(i: number): TerminalNode;
	public ASC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ASC);
		} else {
			return this.getToken(TSqlParser.ASC, i);
		}
	}
	public DESC(): TerminalNode[];
	public DESC(i: number): TerminalNode;
	public DESC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DESC);
		} else {
			return this.getToken(TSqlParser.DESC, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_name_list_with_order; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_name_list_with_order) {
			listener.enterColumn_name_list_with_order(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_name_list_with_order) {
			listener.exitColumn_name_list_with_order(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_name_list_with_order) {
			return visitor.visitColumn_name_list_with_order(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_name_listContext extends ParserRuleContext {
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_column_name_list; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterColumn_name_list) {
			listener.enterColumn_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitColumn_name_list) {
			listener.exitColumn_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitColumn_name_list) {
			return visitor.visitColumn_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_nameContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_cursor_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterCursor_name) {
			listener.enterCursor_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitCursor_name) {
			listener.exitCursor_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitCursor_name) {
			return visitor.visitCursor_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_offContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_on_off; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterOn_off) {
			listener.enterOn_off(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitOn_off) {
			listener.exitOn_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitOn_off) {
			return visitor.visitOn_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClusteredContext extends ParserRuleContext {
	public CLUSTERED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CLUSTERED, 0); }
	public NONCLUSTERED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NONCLUSTERED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_clustered; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterClustered) {
			listener.enterClustered(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitClustered) {
			listener.exitClustered(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitClustered) {
			return visitor.visitClustered(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Null_notnullContext extends ParserRuleContext {
	public NULL(): TerminalNode { return this.getToken(TSqlParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_null_notnull; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNull_notnull) {
			listener.enterNull_notnull(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNull_notnull) {
			listener.exitNull_notnull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNull_notnull) {
			return visitor.visitNull_notnull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Null_or_defaultContext extends ParserRuleContext {
	public null_notnull(): Null_notnullContext | undefined {
		return this.tryGetRuleContext(0, Null_notnullContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALUES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_null_or_default; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterNull_or_default) {
			listener.enterNull_or_default(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitNull_or_default) {
			listener.exitNull_or_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitNull_or_default) {
			return visitor.visitNull_or_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scalar_function_nameContext extends ParserRuleContext {
	public func_proc_name(): Func_proc_nameContext | undefined {
		return this.tryGetRuleContext(0, Func_proc_nameContext);
	}
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RIGHT, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LEFT, 0); }
	public BINARY_CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY_CHECKSUM, 0); }
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECKSUM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_scalar_function_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterScalar_function_name) {
			listener.enterScalar_function_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitScalar_function_name) {
			listener.exitScalar_function_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitScalar_function_name) {
			return visitor.visitScalar_function_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Begin_conversation_timerContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(TSqlParser.BEGIN, 0); }
	public CONVERSATION(): TerminalNode { return this.getToken(TSqlParser.CONVERSATION, 0); }
	public TIMER(): TerminalNode { return this.getToken(TSqlParser.TIMER, 0); }
	public LOCAL_ID(): TerminalNode { return this.getToken(TSqlParser.LOCAL_ID, 0); }
	public TIMEOUT(): TerminalNode { return this.getToken(TSqlParser.TIMEOUT, 0); }
	public time(): TimeContext {
		return this.getRuleContext(0, TimeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_begin_conversation_timer; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBegin_conversation_timer) {
			listener.enterBegin_conversation_timer(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBegin_conversation_timer) {
			listener.exitBegin_conversation_timer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBegin_conversation_timer) {
			return visitor.visitBegin_conversation_timer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Begin_conversation_dialogContext extends ParserRuleContext {
	public _dialog_handle: Token;
	public _initiator_service_name: Service_nameContext;
	public _target_service_name: Service_nameContext;
	public _service_broker_guid: Token;
	public BEGIN(): TerminalNode { return this.getToken(TSqlParser.BEGIN, 0); }
	public DIALOG(): TerminalNode { return this.getToken(TSqlParser.DIALOG, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public SERVICE(): TerminalNode[];
	public SERVICE(i: number): TerminalNode;
	public SERVICE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.SERVICE);
		} else {
			return this.getToken(TSqlParser.SERVICE, i);
		}
	}
	public TO(): TerminalNode { return this.getToken(TSqlParser.TO, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.ON);
		} else {
			return this.getToken(TSqlParser.ON, i);
		}
	}
	public CONTRACT(): TerminalNode { return this.getToken(TSqlParser.CONTRACT, 0); }
	public contract_name(): Contract_nameContext {
		return this.getRuleContext(0, Contract_nameContext);
	}
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	public service_name(): Service_nameContext[];
	public service_name(i: number): Service_nameContext;
	public service_name(i?: number): Service_nameContext | Service_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Service_nameContext);
		} else {
			return this.getRuleContext(i, Service_nameContext);
		}
	}
	public CONVERSATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONVERSATION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LIFETIME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LIFETIME, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public RELATED_CONVERSATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RELATED_CONVERSATION, 0); }
	public RELATED_CONVERSATION_GROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_begin_conversation_dialog; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterBegin_conversation_dialog) {
			listener.enterBegin_conversation_dialog(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitBegin_conversation_dialog) {
			listener.exitBegin_conversation_dialog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitBegin_conversation_dialog) {
			return visitor.visitBegin_conversation_dialog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Contract_nameContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_contract_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterContract_name) {
			listener.enterContract_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitContract_name) {
			listener.exitContract_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitContract_name) {
			return visitor.visitContract_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Service_nameContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_service_name; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterService_name) {
			listener.enterService_name(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitService_name) {
			listener.exitService_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitService_name) {
			return visitor.visitService_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_conversationContext extends ParserRuleContext {
	public _conversation_handle: Token;
	public _faliure_code: Token;
	public _failure_text: Token;
	public END(): TerminalNode { return this.getToken(TSqlParser.END, 0); }
	public CONVERSATION(): TerminalNode { return this.getToken(TSqlParser.CONVERSATION, 0); }
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WITH, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ERROR, 0); }
	public DESCRIPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DESCRIPTION, 0); }
	public CLEANUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CLEANUP, 0); }
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_end_conversation; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterEnd_conversation) {
			listener.enterEnd_conversation(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitEnd_conversation) {
			listener.exitEnd_conversation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitEnd_conversation) {
			return visitor.visitEnd_conversation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Waitfor_conversationContext extends ParserRuleContext {
	public _timeout: TimeContext;
	public get_conversation(): Get_conversationContext {
		return this.getRuleContext(0, Get_conversationContext);
	}
	public WAITFOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WAITFOR, 0); }
	public TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIMEOUT, 0); }
	public time(): TimeContext | undefined {
		return this.tryGetRuleContext(0, TimeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_waitfor_conversation; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterWaitfor_conversation) {
			listener.enterWaitfor_conversation(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitWaitfor_conversation) {
			listener.exitWaitfor_conversation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitWaitfor_conversation) {
			return visitor.visitWaitfor_conversation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Get_conversationContext extends ParserRuleContext {
	public _conversation_group_id: Token;
	public _queue: Queue_idContext;
	public GET(): TerminalNode { return this.getToken(TSqlParser.GET, 0); }
	public CONVERSATION(): TerminalNode { return this.getToken(TSqlParser.CONVERSATION, 0); }
	public GROUP(): TerminalNode { return this.getToken(TSqlParser.GROUP, 0); }
	public FROM(): TerminalNode { return this.getToken(TSqlParser.FROM, 0); }
	public queue_id(): Queue_idContext {
		return this.getRuleContext(0, Queue_idContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_get_conversation; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterGet_conversation) {
			listener.enterGet_conversation(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitGet_conversation) {
			listener.exitGet_conversation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitGet_conversation) {
			return visitor.visitGet_conversation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Queue_idContext extends ParserRuleContext {
	public _database_name: IdContext;
	public _schema_name: IdContext;
	public _name: IdContext;
	public id(): IdContext[];
	public id(i: number): IdContext;
	public id(i?: number): IdContext | IdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdContext);
		} else {
			return this.getRuleContext(i, IdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_queue_id; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterQueue_id) {
			listener.enterQueue_id(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitQueue_id) {
			listener.exitQueue_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitQueue_id) {
			return visitor.visitQueue_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Send_conversationContext extends ParserRuleContext {
	public _conversation_handle: Token;
	public _message_type_name: ExpressionContext;
	public _message_body_expression: Token;
	public SEND(): TerminalNode { return this.getToken(TSqlParser.SEND, 0); }
	public ON(): TerminalNode { return this.getToken(TSqlParser.ON, 0); }
	public CONVERSATION(): TerminalNode { return this.getToken(TSqlParser.CONVERSATION, 0); }
	public MESSAGE(): TerminalNode { return this.getToken(TSqlParser.MESSAGE, 0); }
	public TYPE(): TerminalNode { return this.getToken(TSqlParser.TYPE, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public STRING(): TerminalNode[];
	public STRING(i: number): TerminalNode;
	public STRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.STRING);
		} else {
			return this.getToken(TSqlParser.STRING, i);
		}
	}
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.LOCAL_ID);
		} else {
			return this.getToken(TSqlParser.LOCAL_ID, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_send_conversation; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSend_conversation) {
			listener.enterSend_conversation(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSend_conversation) {
			listener.exitSend_conversation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSend_conversation) {
			return visitor.visitSend_conversation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_typeContext extends ParserRuleContext {
	public id(): IdContext | undefined {
		return this.tryGetRuleContext(0, IdContext);
	}
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY, 0); }
	public DECIMAL(): TerminalNode[];
	public DECIMAL(i: number): TerminalNode;
	public DECIMAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TSqlParser.DECIMAL);
		} else {
			return this.getToken(TSqlParser.DECIMAL, i);
		}
	}
	public MAX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRECISION, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INT, 0); }
	public TINYINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TINYINT, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SMALLINT, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BIGINT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_data_type; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterData_type) {
			listener.enterData_type(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitData_type) {
			listener.exitData_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitData_type) {
			return visitor.visitData_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Default_valueContext extends ParserRuleContext {
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NULL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_default_value; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterDefault_value) {
			listener.enterDefault_value(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitDefault_value) {
			listener.exitDefault_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitDefault_value) {
			return visitor.visitDefault_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public _dollar: Token;
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STRING, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECIMAL, 0); }
	public sign(): SignContext | undefined {
		return this.tryGetRuleContext(0, SignContext);
	}
	public REAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REAL, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FLOAT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_constant; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SignContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_sign; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSign) {
			listener.enterSign(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSign) {
			listener.exitSign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSign) {
			return visitor.visitSign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdContext extends ParserRuleContext {
	public simple_id(): Simple_idContext | undefined {
		return this.tryGetRuleContext(0, Simple_idContext);
	}
	public DOUBLE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
	public SQUARE_BRACKET_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_id; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterId) {
			listener.enterId(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitId) {
			listener.exitId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitId) {
			return visitor.visitId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Simple_idContext extends ParserRuleContext {
	public ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ID, 0); }
	public ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ABSOLUTE, 0); }
	public ACCENT_SENSITIVITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTION, 0); }
	public ACTIVATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTIVATION, 0); }
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ACTIVE, 0); }
	public ADDRESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ADDRESS, 0); }
	public AES_128(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_128, 0); }
	public AES_192(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_192, 0); }
	public AES_256(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AES_256, 0); }
	public AFFINITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFFINITY, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AGGREGATE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALGORITHM, 0); }
	public ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
	public ALLOW_SNAPSHOT_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
	public ALLOWED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ALLOWED, 0); }
	public ANSI_NULL_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
	public ANSI_NULLS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_NULLS, 0); }
	public ANSI_PADDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_PADDING, 0); }
	public ANSI_WARNINGS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ANSI_WARNINGS, 0); }
	public APPLICATION_LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.APPLICATION_LOG, 0); }
	public APPLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.APPLY, 0); }
	public ARITHABORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ARITHABORT, 0); }
	public ASSEMBLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ASSEMBLY, 0); }
	public AUDIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUDIT, 0); }
	public AUDIT_GUID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUDIT_GUID, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO, 0); }
	public AUTO_CLEANUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_CLEANUP, 0); }
	public AUTO_CLOSE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_CLOSE, 0); }
	public AUTO_CREATE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
	public AUTO_SHRINK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_SHRINK, 0); }
	public AUTO_UPDATE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
	public AUTO_UPDATE_STATISTICS_ASYNC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
	public AVAILABILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AVAILABILITY, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.AVG, 0); }
	public BACKUP_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BACKUP_PRIORITY, 0); }
	public BEGIN_DIALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BEGIN_DIALOG, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BIGINT, 0); }
	public BINARY_BASE64(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY_BASE64, 0); }
	public BINARY_CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINARY_CHECKSUM, 0); }
	public BINDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BINDING, 0); }
	public BLOB_STORAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BLOB_STORAGE, 0); }
	public BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BROKER, 0); }
	public BROKER_INSTANCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BROKER_INSTANCE, 0); }
	public BULK_LOGGED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.BULK_LOGGED, 0); }
	public CALLED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CALLED, 0); }
	public CALLER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CALLER, 0); }
	public CAP_CPU_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
	public CAST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CAST, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CATALOG, 0); }
	public CATCH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CATCH, 0); }
	public CHANGE_RETENTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHANGE_RETENTION, 0); }
	public CHANGE_TRACKING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHANGE_TRACKING, 0); }
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECKSUM, 0); }
	public CHECKSUM_AGG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CHECKSUM_AGG, 0); }
	public CLEANUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CLEANUP, 0); }
	public COLLECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLLECTION, 0); }
	public COLUMN_MASTER_KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMMITTED, 0); }
	public COMPATIBILITY_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
	public CONCAT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONCAT, 0); }
	public CONCAT_NULL_YIELDS_NULL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTENT, 0); }
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CONTROL, 0); }
	public COOKIE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COOKIE, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COUNT, 0); }
	public COUNT_BIG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COUNT_BIG, 0); }
	public COUNTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.COUNTER, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CPU, 0); }
	public CREATE_NEW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATE_NEW, 0); }
	public CREATION_DISPOSITION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREATION_DISPOSITION, 0); }
	public CREDENTIAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CREDENTIAL, 0); }
	public CRYPTOGRAPHIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
	public CURSOR_CLOSE_ON_COMMIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
	public CURSOR_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.CURSOR_DEFAULT, 0); }
	public DATA_COMPRESSION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATA_COMPRESSION, 0); }
	public DATE_CORRELATION_OPTIMIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
	public DATEADD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATEADD, 0); }
	public DATEDIFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATEDIFF, 0); }
	public DATENAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATENAME, 0); }
	public DATEPART(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DATEPART, 0); }
	public DAYS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DAYS, 0); }
	public DB_CHAINING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DB_CHAINING, 0); }
	public DB_FAILOVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DB_FAILOVER, 0); }
	public DECRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DECRYPTION, 0); }
	public DEFAULT_DOUBLE_QUOTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
	public DEFAULT_FULLTEXT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
	public DEFAULT_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
	public DELAY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELAY, 0); }
	public DELAYED_DURABILITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELAYED_DURABILITY, 0); }
	public DELETED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DELETED, 0); }
	public DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DENSE_RANK, 0); }
	public DEPENDENTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DEPENDENTS, 0); }
	public DES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DES, 0); }
	public DESCRIPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DESCRIPTION, 0); }
	public DESX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DESX, 0); }
	public DHCP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DHCP, 0); }
	public DIALOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DIALOG, 0); }
	public DIRECTORY_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DIRECTORY_NAME, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE, 0); }
	public DISABLE_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLE_BROKER, 0); }
	public DISABLED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISABLED, 0); }
	public DISK_DRIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DISK_DRIVE, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DOCUMENT, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.DYNAMIC, 0); }
	public EMERGENCY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EMERGENCY, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EMPTY, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE, 0); }
	public ENABLE_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENABLE_BROKER, 0); }
	public ENCRYPTED_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENCRYPTION, 0); }
	public ENDPOINT_URL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ENDPOINT_URL, 0); }
	public ERROR_BROKER_CONVERSATIONS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
	public EVENTDATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EVENTDATA, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXCLUSIVE, 0); }
	public EXECUTABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXECUTABLE, 0); }
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXIST, 0); }
	public EXPAND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXPAND, 0); }
	public EXPIRY_DATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXPIRY_DATE, 0); }
	public EXPLICIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.EXPLICIT, 0); }
	public FAIL_OPERATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAIL_OPERATION, 0); }
	public FAILOVER_MODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILOVER_MODE, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILURE, 0); }
	public FAILURE_CONDITION_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAST, 0); }
	public FAST_FORWARD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FAST_FORWARD, 0); }
	public FILEGROUP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILEGROUP, 0); }
	public FILEGROWTH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILEGROWTH, 0); }
	public FILENAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILENAME, 0); }
	public FILEPATH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILEPATH, 0); }
	public FILESTREAM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILESTREAM, 0); }
	public FILLFACTOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILLFACTOR, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FILTER, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FIRST, 0); }
	public FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FIRST_VALUE, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FOLLOWING, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE, 0); }
	public FORCE_FAILOVER_ALLOW_DATA_LOSS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
	public FORCED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCED, 0); }
	public FORCESEEK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORCESEEK, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORMAT, 0); }
	public FORWARD_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FORWARD_ONLY, 0); }
	public FULLSCAN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULLSCAN, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.FULLTEXT, 0); }
	public GB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GB, 0); }
	public GETDATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GETDATE, 0); }
	public GETUTCDATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GETUTCDATE, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GLOBAL, 0); }
	public GO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GO, 0); }
	public GROUP_MAX_REQUESTS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUPING, 0); }
	public GROUPING_ID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GROUPING_ID, 0); }
	public HADR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HADR, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HASH, 0); }
	public HEALTH_CHECK_TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
	public HIGH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HIGH, 0); }
	public HONOR_BROKER_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
	public HOURS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.HOURS, 0); }
	public IDENTITY_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IDENTITY_VALUE, 0); }
	public IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IMMEDIATE, 0); }
	public IMPERSONATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IMPERSONATE, 0); }
	public IMPORTANCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IMPORTANCE, 0); }
	public INCREMENTAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INCREMENTAL, 0); }
	public INIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INIT, 0); }
	public INITIATOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INITIATOR, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INPUT, 0); }
	public INSENSITIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSENSITIVE, 0); }
	public INSERTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INSERTED, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.INT, 0); }
	public IP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.IP, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ISOLATION, 0); }
	public KB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KB, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEEP, 0); }
	public KEEPFIXED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEEPFIXED, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY, 0); }
	public KEY_SOURCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEY_SOURCE, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEYS, 0); }
	public KEYSET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KEYSET, 0); }
	public LAG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LAG, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LAST, 0); }
	public LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LAST_VALUE, 0); }
	public LEAD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LEAD, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LEVEL, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LIST, 0); }
	public LISTENER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LISTENER, 0); }
	public LISTENER_URL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LISTENER_URL, 0); }
	public LOB_COMPACTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOB_COMPACTION, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCAL, 0); }
	public LOCATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCATION, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCK, 0); }
	public LOCK_ESCALATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOCK_ESCALATION, 0); }
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOGIN, 0); }
	public LOOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOOP, 0); }
	public LOW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.LOW, 0); }
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MANUAL, 0); }
	public MARK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MARK, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MASTER, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MATERIALIZED, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX, 0); }
	public MAX_CPU_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
	public MAX_DOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_DOP, 0); }
	public MAX_FILES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_FILES, 0); }
	public MAX_IOPS_PER_VOLUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
	public MAX_MEMORY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_MEMORY, 0); }
	public MAX_MEMORY_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
	public MAX_PROCESSES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_PROCESSES, 0); }
	public MAX_QUEUE_READERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
	public MAX_ROLLOVER_FILES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
	public MAXDOP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXDOP, 0); }
	public MAXRECURSION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXRECURSION, 0); }
	public MAXSIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MAXSIZE, 0); }
	public MB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MB, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MEDIUM, 0); }
	public MEMORY_OPTIMIZED_DATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MESSAGE, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN, 0); }
	public MIN_ACTIVE_ROWVERSION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
	public MIN_CPU_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
	public MIN_IOPS_PER_VOLUME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
	public MIN_MEMORY_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
	public MINUTES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MINUTES, 0); }
	public MIRROR_ADDRESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIRROR_ADDRESS, 0); }
	public MIXED_PAGE_ALLOCATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MODE, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MODIFY, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MOVE, 0); }
	public MULTI_USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MULTI_USER, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NAME, 0); }
	public NESTED_TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NESTED_TRIGGERS, 0); }
	public NEW_ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEW_ACCOUNT, 0); }
	public NEW_BROKER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEW_BROKER, 0); }
	public NEW_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEW_PASSWORD, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NEXT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO, 0); }
	public NO_TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO_TRUNCATE, 0); }
	public NO_WAIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NO_WAIT, 0); }
	public NOCOUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOCOUNT, 0); }
	public NODES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NODES, 0); }
	public NOEXPAND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOEXPAND, 0); }
	public NON_TRANSACTED_ACCESS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
	public NORECOMPUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NORECOMPUTE, 0); }
	public NORECOVERY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NORECOVERY, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NOWAIT, 0); }
	public NTILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NTILE, 0); }
	public NUMANODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMANODE, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMBER, 0); }
	public NUMERIC_ROUNDABORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OBJECT, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFFLINE, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFFSET, 0); }
	public OFFSETS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OFFSETS, 0); }
	public OLD_ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OLD_ACCOUNT, 0); }
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ONLINE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ONLY, 0); }
	public OPEN_EXISTING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPEN_EXISTING, 0); }
	public OPTIMISTIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPTIMISTIC, 0); }
	public OPTIMIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OPTIMIZE, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OUTPUT, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.OWNER, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PAGE, 0); }
	public PAGE_VERIFY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PAGE_VERIFY, 0); }
	public PARAMETERIZATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARAMETERIZATION, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTITION, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTITIONS, 0); }
	public PARTNER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PARTNER, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PATH, 0); }
	public POISON_MESSAGE_HANDLING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
	public POOL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.POOL, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PORT, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRECEDING, 0); }
	public PRIMARY_ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIMARY_ROLE, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIOR, 0); }
	public PRIORITY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIORITY, 0); }
	public PRIORITY_LEVEL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIORITY_LEVEL, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE, 0); }
	public PRIVATE_KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVATE_KEY, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PRIVILEGES, 0); }
	public PROCEDURE_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROCEDURE_NAME, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROPERTY, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER, 0); }
	public PROVIDER_KEY_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.PUBLIC, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUERY, 0); }
	public QUEUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUEUE, 0); }
	public QUEUE_DELAY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUEUE_DELAY, 0); }
	public QUOTED_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
	public R(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.R, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RANGE, 0); }
	public RANK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RANK, 0); }
	public RAW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RAW, 0); }
	public RC2(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC2, 0); }
	public RC4(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4, 0); }
	public RC4_128(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RC4_128, 0); }
	public READ_COMMITTED_SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY, 0); }
	public READ_ONLY_ROUTING_LIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
	public READ_WRITE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READ_WRITE, 0); }
	public READONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.READONLY, 0); }
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REBUILD, 0); }
	public RECEIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECEIVE, 0); }
	public RECOMPILE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECOMPILE, 0); }
	public RECOVERY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECOVERY, 0); }
	public RECURSIVE_TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RELATIVE, 0); }
	public REMOTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOTE, 0); }
	public REMOTE_SERVICE_NAME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REMOVE, 0); }
	public REORGANIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REORGANIZE, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPEATABLE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REPLICA, 0); }
	public REQUEST_MAX_CPU_TIME_SEC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
	public REQUEST_MAX_MEMORY_GRANT_PERCENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
	public REQUEST_MEMORY_GRANT_TIMEOUT_SEC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
	public REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
	public RESERVE_DISK_SPACE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
	public RESOURCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESOURCE, 0); }
	public RESOURCE_MANAGER_LOCATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
	public RESTRICTED_USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RESTRICTED_USER, 0); }
	public RETENTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RETENTION, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RETURN, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.RETURNS, 0); }
	public ROBUST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROBUST, 0); }
	public ROOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROOT, 0); }
	public ROUTE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROUTE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROW, 0); }
	public ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROW_NUMBER, 0); }
	public ROWCOUNT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWCOUNT, 0); }
	public ROWGUID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWGUID, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.ROWS, 0); }
	public SAFETY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAFETY, 0); }
	public SAMPLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SAMPLE, 0); }
	public SCHEMABINDING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCHEMABINDING, 0); }
	public SCOPED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCOPED, 0); }
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCROLL, 0); }
	public SCROLL_LOCKS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SCROLL_LOCKS, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEARCH, 0); }
	public SECONDARY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDARY, 0); }
	public SECONDARY_ONLY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDARY_ONLY, 0); }
	public SECONDARY_ROLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDARY_ROLE, 0); }
	public SECONDS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECONDS, 0); }
	public SECRET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECRET, 0); }
	public SECURITY_LOG(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SECURITY_LOG, 0); }
	public SEEDING_MODE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEEDING_MODE, 0); }
	public SELF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SELF, 0); }
	public SEMI_SENSITIVE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEMI_SENSITIVE, 0); }
	public SEND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SEND, 0); }
	public SENT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SENT, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERIALIZABLE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SERVER, 0); }
	public SESSION_TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SESSION_TIMEOUT, 0); }
	public SETERROR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SETERROR, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SHARE, 0); }
	public SHOWPLAN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SHOWPLAN, 0); }
	public SID(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SID, 0); }
	public SIGNATURE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIGNATURE, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIMPLE, 0); }
	public SINGLE_USER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SINGLE_USER, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SIZE, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SMALLINT, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SNAPSHOT, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SOURCE, 0); }
	public SPATIAL_WINDOW_MAX_CELLS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
	public STANDBY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STANDBY, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.START, 0); }
	public START_DATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.START_DATE, 0); }
	public STATE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATE, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATIC, 0); }
	public STATS_STREAM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATS_STREAM, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STATUS, 0); }
	public STDEV(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STDEV, 0); }
	public STDEVP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STDEVP, 0); }
	public STOPLIST(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STOPLIST, 0); }
	public STUFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.STUFF, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUBJECT, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUM, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SUSPEND, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYMMETRIC, 0); }
	public SYNCHRONOUS_COMMIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
	public SYNONYM(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.SYNONYM, 0); }
	public TAKE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TAKE, 0); }
	public TARGET(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TARGET, 0); }
	public TARGET_RECOVERY_TIME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
	public TB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TB, 0); }
	public TEXTIMAGE_ON(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TEXTIMAGE_ON, 0); }
	public THROW(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.THROW, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIES, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIME, 0); }
	public TIMEOUT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIMEOUT, 0); }
	public TIMER(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TIMER, 0); }
	public TINYINT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TINYINT, 0); }
	public TORN_PAGE_DETECTION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
	public TRANSFORM_NOISE_WORDS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
	public TRIPLE_DES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIPLE_DES, 0); }
	public TRIPLE_DES_3KEY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
	public TRUSTWORTHY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRUSTWORTHY, 0); }
	public TRY(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TRY, 0); }
	public TSQL(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TSQL, 0); }
	public TWO_DIGIT_YEAR_CUTOFF(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE, 0); }
	public TYPE_WARNING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TYPE_WARNING, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNBOUNDED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNCOMMITTED, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNKNOWN, 0); }
	public UNLIMITED(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.UNLIMITED, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.USING, 0); }
	public VALID_XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALID_XML, 0); }
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALIDATION, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VALUE, 0); }
	public VAR(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VAR, 0); }
	public VARP(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VARP, 0); }
	public VIEW_METADATA(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VIEW_METADATA, 0); }
	public VIEWS(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.VIEWS, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WAIT, 0); }
	public WELL_FORMED_XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WELL_FORMED_XML, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WORK, 0); }
	public WORKLOAD(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.WORKLOAD, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XML, 0); }
	public XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.XMLNAMESPACES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_simple_id; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterSimple_id) {
			listener.enterSimple_id(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitSimple_id) {
			listener.exitSimple_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitSimple_id) {
			return visitor.visitSimple_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comparison_operatorContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_comparison_operator; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterComparison_operator) {
			listener.enterComparison_operator(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitComparison_operator) {
			listener.exitComparison_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitComparison_operator) {
			return visitor.visitComparison_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assignment_operatorContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_assignment_operator; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterAssignment_operator) {
			listener.enterAssignment_operator(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitAssignment_operator) {
			listener.exitAssignment_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitAssignment_operator) {
			return visitor.visitAssignment_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sizeContext extends ParserRuleContext {
	public DECIMAL(): TerminalNode { return this.getToken(TSqlParser.DECIMAL, 0); }
	public KB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.KB, 0); }
	public MB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.MB, 0); }
	public GB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.GB, 0); }
	public TB(): TerminalNode | undefined { return this.tryGetToken(TSqlParser.TB, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TSqlParser.RULE_file_size; }
	// @Override
	public enterRule(listener: TSqlParserListener): void {
		if (listener.enterFile_size) {
			listener.enterFile_size(this);
		}
	}
	// @Override
	public exitRule(listener: TSqlParserListener): void {
		if (listener.exitFile_size) {
			listener.exitFile_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TSqlParserVisitor<Result>): Result {
		if (visitor.visitFile_size) {
			return visitor.visitFile_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


